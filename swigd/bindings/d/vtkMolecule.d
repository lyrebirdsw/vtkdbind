/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkMolecule;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkVector3f;
static import SWIGTYPE_p_float;
static import vtkPoints;
static import vtkUnsignedShortArray;
static import vtkBond;
static import vtkPlane;
static import vtkAtom;
static import vtkUndirectedGraph;

class vtkMolecule : vtkUndirectedGraph.vtkUndirectedGraph {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkMolecule_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkMolecule obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkMolecule New() {
    void* cPtr = vtkd_im.vtkMolecule_New();
    vtkMolecule ret = (cPtr is null) ? null : new vtkMolecule(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkMolecule_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkMolecule SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkMolecule_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkMolecule ret = (cPtr is null) ? null : new vtkMolecule(cPtr, false);
    return ret;
  }

  public vtkMolecule NewInstance() const {
    void* cPtr = vtkd_im.vtkMolecule_NewInstance(cast(void*)swigCPtr);
    vtkMolecule ret = (cPtr is null) ? null : new vtkMolecule(cPtr, false);
    return ret;
  }

  alias vtkUndirectedGraph.vtkUndirectedGraph.NewInstance NewInstance;

  public long GetNumberOfBonds() {
    auto ret = vtkd_im.vtkMolecule_GetNumberOfBonds(cast(void*)swigCPtr);
    return ret;
  }

  public ushort GetAtomAtomicNumber(long atomId) {
    auto ret = vtkd_im.vtkMolecule_GetAtomAtomicNumber(cast(void*)swigCPtr, atomId);
    return ret;
  }

  public void SetAtomAtomicNumber(long atomId, ushort atomicNum) {
    vtkd_im.vtkMolecule_SetAtomAtomicNumber(cast(void*)swigCPtr, atomId, atomicNum);
  }

  public void SetAtomPosition(long atomId, vtkVector3f.vtkVector3f pos) {
    vtkd_im.vtkMolecule_SetAtomPosition__SWIG_0(cast(void*)swigCPtr, atomId, vtkVector3f.vtkVector3f.swigGetCPtr(pos));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void SetAtomPosition(long atomId, double x, double y, double z) {
    vtkd_im.vtkMolecule_SetAtomPosition__SWIG_1(cast(void*)swigCPtr, atomId, x, y, z);
  }

  public vtkVector3f.vtkVector3f GetAtomPosition(long atomId) {
    vtkVector3f.vtkVector3f ret = new vtkVector3f.vtkVector3f(vtkd_im.vtkMolecule_GetAtomPosition__SWIG_0(cast(void*)swigCPtr, atomId), true);
    return ret;
  }

  public void GetAtomPosition(long atomId, SWIGTYPE_p_float.SWIGTYPE_p_float pos) {
    vtkd_im.vtkMolecule_GetAtomPosition__SWIG_1(cast(void*)swigCPtr, atomId, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(pos));
  }

  public void SetBondOrder(long bondId, ushort order) {
    vtkd_im.vtkMolecule_SetBondOrder(cast(void*)swigCPtr, bondId, order);
  }

  public ushort GetBondOrder(long bondId) {
    auto ret = vtkd_im.vtkMolecule_GetBondOrder(cast(void*)swigCPtr, bondId);
    return ret;
  }

  public double GetBondLength(long bondId) {
    auto ret = vtkd_im.vtkMolecule_GetBondLength(cast(void*)swigCPtr, bondId);
    return ret;
  }

  public vtkPoints.vtkPoints GetAtomicPositionArray() {
    void* cPtr = vtkd_im.vtkMolecule_GetAtomicPositionArray(cast(void*)swigCPtr);
    vtkPoints.vtkPoints ret = (cPtr is null) ? null : new vtkPoints.vtkPoints(cPtr, false);
    return ret;
  }

  public vtkUnsignedShortArray.vtkUnsignedShortArray GetAtomicNumberArray() {
    void* cPtr = vtkd_im.vtkMolecule_GetAtomicNumberArray(cast(void*)swigCPtr);
    vtkUnsignedShortArray.vtkUnsignedShortArray ret = (cPtr is null) ? null : new vtkUnsignedShortArray.vtkUnsignedShortArray(cPtr, false);
    return ret;
  }

  public void ShallowCopyStructure(vtkMolecule m) {
    vtkd_im.vtkMolecule_ShallowCopyStructure(cast(void*)swigCPtr, vtkMolecule.swigGetCPtr(m));
  }

  public void DeepCopyStructure(vtkMolecule m) {
    vtkd_im.vtkMolecule_DeepCopyStructure(cast(void*)swigCPtr, vtkMolecule.swigGetCPtr(m));
  }

  public void ShallowCopyAttributes(vtkMolecule m) {
    vtkd_im.vtkMolecule_ShallowCopyAttributes(cast(void*)swigCPtr, vtkMolecule.swigGetCPtr(m));
  }

  public void DeepCopyAttributes(vtkMolecule m) {
    vtkd_im.vtkMolecule_DeepCopyAttributes(cast(void*)swigCPtr, vtkMolecule.swigGetCPtr(m));
  }

  public static bool GetPlaneFromBond(vtkBond.vtkBond bond, vtkVector3f.vtkVector3f normal, vtkPlane.vtkPlane plane) {
    bool ret = vtkd_im.vtkMolecule_GetPlaneFromBond__SWIG_0(vtkBond.vtkBond.swigGetCPtr(bond), vtkVector3f.vtkVector3f.swigGetCPtr(normal), vtkPlane.vtkPlane.swigGetCPtr(plane)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public static bool GetPlaneFromBond(vtkAtom.vtkAtom atom1, vtkAtom.vtkAtom atom2, vtkVector3f.vtkVector3f normal, vtkPlane.vtkPlane plane) {
    bool ret = vtkd_im.vtkMolecule_GetPlaneFromBond__SWIG_1(vtkAtom.vtkAtom.swigGetCPtr(atom1), vtkAtom.vtkAtom.swigGetCPtr(atom2), vtkVector3f.vtkVector3f.swigGetCPtr(normal), vtkPlane.vtkPlane.swigGetCPtr(plane)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }
}
