/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkVolumeTextureMapper2D;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_int;
static import vtkVolumeTextureMapper;

class vtkVolumeTextureMapper2D : vtkVolumeTextureMapper.vtkVolumeTextureMapper {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkVolumeTextureMapper2D_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkVolumeTextureMapper2D obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkVolumeTextureMapper2D_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkVolumeTextureMapper2D SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkVolumeTextureMapper2D_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkVolumeTextureMapper2D ret = (cPtr is null) ? null : new vtkVolumeTextureMapper2D(cPtr, false);
    return ret;
  }

  public vtkVolumeTextureMapper2D NewInstance() const {
    void* cPtr = vtkd_im.vtkVolumeTextureMapper2D_NewInstance(cast(void*)swigCPtr);
    vtkVolumeTextureMapper2D ret = (cPtr is null) ? null : new vtkVolumeTextureMapper2D(cPtr, false);
    return ret;
  }

  alias vtkVolumeTextureMapper.vtkVolumeTextureMapper.NewInstance NewInstance;

  public static vtkVolumeTextureMapper2D New() {
    void* cPtr = vtkd_im.vtkVolumeTextureMapper2D_New();
    vtkVolumeTextureMapper2D ret = (cPtr is null) ? null : new vtkVolumeTextureMapper2D(cPtr, false);
    return ret;
  }

  public void SetTargetTextureSize(int _arg1, int _arg2) {
    vtkd_im.vtkVolumeTextureMapper2D_SetTargetTextureSize__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2);
  }

  public void SetTargetTextureSize(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkVolumeTextureMapper2D_SetTargetTextureSize__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public int* GetTargetTextureSize() {
    auto ret = cast(int*)vtkd_im.vtkVolumeTextureMapper2D_GetTargetTextureSize__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetTargetTextureSize(int* _arg1, int* _arg2) {
    vtkd_im.vtkVolumeTextureMapper2D_GetTargetTextureSize__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetTargetTextureSize(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkVolumeTextureMapper2D_GetTargetTextureSize__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public void SetMaximumNumberOfPlanes(int _arg) {
    vtkd_im.vtkVolumeTextureMapper2D_SetMaximumNumberOfPlanes(cast(void*)swigCPtr, _arg);
  }

  public int GetMaximumNumberOfPlanes() {
    auto ret = vtkd_im.vtkVolumeTextureMapper2D_GetMaximumNumberOfPlanes(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMaximumStorageSize(int _arg) {
    vtkd_im.vtkVolumeTextureMapper2D_SetMaximumStorageSize(cast(void*)swigCPtr, _arg);
  }

  public int GetMaximumStorageSize() {
    auto ret = vtkd_im.vtkVolumeTextureMapper2D_GetMaximumStorageSize(cast(void*)swigCPtr);
    return ret;
  }
}
