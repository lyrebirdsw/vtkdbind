/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkAMRUtilities;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkOverlappingAMR;
static import vtkMultiProcessController;
static import SWIGTYPE_p_std__vectorT_int_t;
static import vtkObject;

class vtkAMRUtilities : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkAMRUtilities_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkAMRUtilities obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkAMRUtilities_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkAMRUtilities SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkAMRUtilities_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkAMRUtilities ret = (cPtr is null) ? null : new vtkAMRUtilities(cPtr, false);
    return ret;
  }

  public vtkAMRUtilities NewInstance() const {
    void* cPtr = vtkd_im.vtkAMRUtilities_NewInstance(cast(void*)swigCPtr);
    vtkAMRUtilities ret = (cPtr is null) ? null : new vtkAMRUtilities(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public static void StripGhostLayers(vtkOverlappingAMR.vtkOverlappingAMR ghostedAMRData, vtkOverlappingAMR.vtkOverlappingAMR strippedAMRData, vtkMultiProcessController.vtkMultiProcessController myController) {
    vtkd_im.vtkAMRUtilities_StripGhostLayers__SWIG_0(vtkOverlappingAMR.vtkOverlappingAMR.swigGetCPtr(ghostedAMRData), vtkOverlappingAMR.vtkOverlappingAMR.swigGetCPtr(strippedAMRData), vtkMultiProcessController.vtkMultiProcessController.swigGetCPtr(myController));
  }

  public static void StripGhostLayers(vtkOverlappingAMR.vtkOverlappingAMR ghostedAMRData, vtkOverlappingAMR.vtkOverlappingAMR strippedAMRData) {
    vtkd_im.vtkAMRUtilities_StripGhostLayers__SWIG_1(vtkOverlappingAMR.vtkOverlappingAMR.swigGetCPtr(ghostedAMRData), vtkOverlappingAMR.vtkOverlappingAMR.swigGetCPtr(strippedAMRData));
  }

  public static bool HasPartiallyOverlappingGhostCells(vtkOverlappingAMR.vtkOverlappingAMR amr) {
    bool ret = vtkd_im.vtkAMRUtilities_HasPartiallyOverlappingGhostCells(vtkOverlappingAMR.vtkOverlappingAMR.swigGetCPtr(amr)) ? true : false;
    return ret;
  }

  public static void DistributeProcessInformation(vtkOverlappingAMR.vtkOverlappingAMR amr, vtkMultiProcessController.vtkMultiProcessController myController, SWIGTYPE_p_std__vectorT_int_t.SWIGTYPE_p_std__vectorT_int_t ProcessMap) {
    vtkd_im.vtkAMRUtilities_DistributeProcessInformation(vtkOverlappingAMR.vtkOverlappingAMR.swigGetCPtr(amr), vtkMultiProcessController.vtkMultiProcessController.swigGetCPtr(myController), SWIGTYPE_p_std__vectorT_int_t.SWIGTYPE_p_std__vectorT_int_t.swigGetCPtr(ProcessMap));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public static void BlankCells(vtkOverlappingAMR.vtkOverlappingAMR amr, vtkMultiProcessController.vtkMultiProcessController myController) {
    vtkd_im.vtkAMRUtilities_BlankCells(vtkOverlappingAMR.vtkOverlappingAMR.swigGetCPtr(amr), vtkMultiProcessController.vtkMultiProcessController.swigGetCPtr(myController));
  }
}
