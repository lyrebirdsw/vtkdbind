/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPerspectiveTransform;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import SWIGTYPE_p_float;
static import vtkMatrix4x4;
static import vtkHomogeneousTransform;

class vtkPerspectiveTransform : vtkHomogeneousTransform.vtkHomogeneousTransform {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPerspectiveTransform_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPerspectiveTransform obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkPerspectiveTransform New() {
    void* cPtr = vtkd_im.vtkPerspectiveTransform_New();
    vtkPerspectiveTransform ret = (cPtr is null) ? null : new vtkPerspectiveTransform(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPerspectiveTransform_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPerspectiveTransform SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPerspectiveTransform_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPerspectiveTransform ret = (cPtr is null) ? null : new vtkPerspectiveTransform(cPtr, false);
    return ret;
  }

  public vtkPerspectiveTransform NewInstance() const {
    void* cPtr = vtkd_im.vtkPerspectiveTransform_NewInstance(cast(void*)swigCPtr);
    vtkPerspectiveTransform ret = (cPtr is null) ? null : new vtkPerspectiveTransform(cPtr, false);
    return ret;
  }

  alias vtkHomogeneousTransform.vtkHomogeneousTransform.NewInstance NewInstance;

  public void Identity() {
    vtkd_im.vtkPerspectiveTransform_Identity(cast(void*)swigCPtr);
  }

  public void AdjustViewport(double oldXMin, double oldXMax, double oldYMin, double oldYMax, double newXMin, double newXMax, double newYMin, double newYMax) {
    vtkd_im.vtkPerspectiveTransform_AdjustViewport(cast(void*)swigCPtr, oldXMin, oldXMax, oldYMin, oldYMax, newXMin, newXMax, newYMin, newYMax);
  }

  public void AdjustZBuffer(double oldNearZ, double oldFarZ, double newNearZ, double newFarZ) {
    vtkd_im.vtkPerspectiveTransform_AdjustZBuffer(cast(void*)swigCPtr, oldNearZ, oldFarZ, newNearZ, newFarZ);
  }

  public void Ortho(double xmin, double xmax, double ymin, double ymax, double znear, double zfar) {
    vtkd_im.vtkPerspectiveTransform_Ortho(cast(void*)swigCPtr, xmin, xmax, ymin, ymax, znear, zfar);
  }

  public void Frustum(double xmin, double xmax, double ymin, double ymax, double znear, double zfar) {
    vtkd_im.vtkPerspectiveTransform_Frustum(cast(void*)swigCPtr, xmin, xmax, ymin, ymax, znear, zfar);
  }

  public void Perspective(double angle, double aspect, double znear, double zfar) {
    vtkd_im.vtkPerspectiveTransform_Perspective(cast(void*)swigCPtr, angle, aspect, znear, zfar);
  }

  public void Shear(double dxdz, double dydz, double zplane) {
    vtkd_im.vtkPerspectiveTransform_Shear(cast(void*)swigCPtr, dxdz, dydz, zplane);
  }

  public void Stereo(double angle, double focaldistance) {
    vtkd_im.vtkPerspectiveTransform_Stereo(cast(void*)swigCPtr, angle, focaldistance);
  }

  public void SetupCamera(SWIGTYPE_p_double.SWIGTYPE_p_double position, SWIGTYPE_p_double.SWIGTYPE_p_double focalpoint, SWIGTYPE_p_double.SWIGTYPE_p_double viewup) {
    vtkd_im.vtkPerspectiveTransform_SetupCamera__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(position), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(focalpoint), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(viewup));
  }

  public void SetupCamera(double p0, double p1, double p2, double fp0, double fp1, double fp2, double vup0, double vup1, double vup2) {
    vtkd_im.vtkPerspectiveTransform_SetupCamera__SWIG_1(cast(void*)swigCPtr, p0, p1, p2, fp0, fp1, fp2, vup0, vup1, vup2);
  }

  public void Translate(double x, double y, double z) {
    vtkd_im.vtkPerspectiveTransform_Translate__SWIG_0(cast(void*)swigCPtr, x, y, z);
  }

  public void Translate(SWIGTYPE_p_double.SWIGTYPE_p_double x) {
    vtkd_im.vtkPerspectiveTransform_Translate__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x));
  }

  public void Translate(SWIGTYPE_p_float.SWIGTYPE_p_float x) {
    vtkd_im.vtkPerspectiveTransform_Translate__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(x));
  }

  public void RotateWXYZ(double angle, double x, double y, double z) {
    vtkd_im.vtkPerspectiveTransform_RotateWXYZ__SWIG_0(cast(void*)swigCPtr, angle, x, y, z);
  }

  public void RotateWXYZ(double angle, SWIGTYPE_p_double.SWIGTYPE_p_double axis) {
    vtkd_im.vtkPerspectiveTransform_RotateWXYZ__SWIG_1(cast(void*)swigCPtr, angle, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(axis));
  }

  public void RotateWXYZ(double angle, SWIGTYPE_p_float.SWIGTYPE_p_float axis) {
    vtkd_im.vtkPerspectiveTransform_RotateWXYZ__SWIG_2(cast(void*)swigCPtr, angle, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(axis));
  }

  public void RotateX(double angle) {
    vtkd_im.vtkPerspectiveTransform_RotateX(cast(void*)swigCPtr, angle);
  }

  public void RotateY(double angle) {
    vtkd_im.vtkPerspectiveTransform_RotateY(cast(void*)swigCPtr, angle);
  }

  public void RotateZ(double angle) {
    vtkd_im.vtkPerspectiveTransform_RotateZ(cast(void*)swigCPtr, angle);
  }

  public void Scale(double x, double y, double z) {
    vtkd_im.vtkPerspectiveTransform_Scale__SWIG_0(cast(void*)swigCPtr, x, y, z);
  }

  public void Scale(SWIGTYPE_p_double.SWIGTYPE_p_double s) {
    vtkd_im.vtkPerspectiveTransform_Scale__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(s));
  }

  public void Scale(SWIGTYPE_p_float.SWIGTYPE_p_float s) {
    vtkd_im.vtkPerspectiveTransform_Scale__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(s));
  }

  public void SetMatrix(vtkMatrix4x4.vtkMatrix4x4 matrix) {
    vtkd_im.vtkPerspectiveTransform_SetMatrix__SWIG_0(cast(void*)swigCPtr, vtkMatrix4x4.vtkMatrix4x4.swigGetCPtr(matrix));
  }

  public void SetMatrix(SWIGTYPE_p_double.SWIGTYPE_p_double elements) {
    vtkd_im.vtkPerspectiveTransform_SetMatrix__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(elements));
  }

  public void Concatenate(vtkMatrix4x4.vtkMatrix4x4 matrix) {
    vtkd_im.vtkPerspectiveTransform_Concatenate__SWIG_0(cast(void*)swigCPtr, vtkMatrix4x4.vtkMatrix4x4.swigGetCPtr(matrix));
  }

  public void Concatenate(SWIGTYPE_p_double.SWIGTYPE_p_double elements) {
    vtkd_im.vtkPerspectiveTransform_Concatenate__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(elements));
  }

  public void Concatenate(vtkHomogeneousTransform.vtkHomogeneousTransform transform) {
    vtkd_im.vtkPerspectiveTransform_Concatenate__SWIG_2(cast(void*)swigCPtr, vtkHomogeneousTransform.vtkHomogeneousTransform.swigGetCPtr(transform));
  }

  public void PreMultiply() {
    vtkd_im.vtkPerspectiveTransform_PreMultiply(cast(void*)swigCPtr);
  }

  public void PostMultiply() {
    vtkd_im.vtkPerspectiveTransform_PostMultiply(cast(void*)swigCPtr);
  }

  public int GetNumberOfConcatenatedTransforms() {
    auto ret = vtkd_im.vtkPerspectiveTransform_GetNumberOfConcatenatedTransforms(cast(void*)swigCPtr);
    return ret;
  }

  public vtkHomogeneousTransform.vtkHomogeneousTransform GetConcatenatedTransform(int i) {
    void* cPtr = vtkd_im.vtkPerspectiveTransform_GetConcatenatedTransform(cast(void*)swigCPtr, i);
    vtkHomogeneousTransform.vtkHomogeneousTransform ret = (cPtr is null) ? null : new vtkHomogeneousTransform.vtkHomogeneousTransform(cPtr, false);
    return ret;
  }

  public void SetInput(vtkHomogeneousTransform.vtkHomogeneousTransform input) {
    vtkd_im.vtkPerspectiveTransform_SetInput(cast(void*)swigCPtr, vtkHomogeneousTransform.vtkHomogeneousTransform.swigGetCPtr(input));
  }

  public vtkHomogeneousTransform.vtkHomogeneousTransform GetInput() {
    void* cPtr = vtkd_im.vtkPerspectiveTransform_GetInput(cast(void*)swigCPtr);
    vtkHomogeneousTransform.vtkHomogeneousTransform ret = (cPtr is null) ? null : new vtkHomogeneousTransform.vtkHomogeneousTransform(cPtr, false);
    return ret;
  }

  public int GetInverseFlag() {
    auto ret = vtkd_im.vtkPerspectiveTransform_GetInverseFlag(cast(void*)swigCPtr);
    return ret;
  }

  public void Push() {
    vtkd_im.vtkPerspectiveTransform_Push(cast(void*)swigCPtr);
  }

  public void Pop() {
    vtkd_im.vtkPerspectiveTransform_Pop(cast(void*)swigCPtr);
  }
}
