/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkBMPReader;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkLookupTable;
static import vtkImageReader;

class vtkBMPReader : vtkImageReader.vtkImageReader {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkBMPReader_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkBMPReader obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkBMPReader New() {
    void* cPtr = vtkd_im.vtkBMPReader_New();
    vtkBMPReader ret = (cPtr is null) ? null : new vtkBMPReader(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkBMPReader_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkBMPReader SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkBMPReader_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkBMPReader ret = (cPtr is null) ? null : new vtkBMPReader(cPtr, false);
    return ret;
  }

  public vtkBMPReader NewInstance() const {
    void* cPtr = vtkd_im.vtkBMPReader_NewInstance(cast(void*)swigCPtr);
    vtkBMPReader ret = (cPtr is null) ? null : new vtkBMPReader(cPtr, false);
    return ret;
  }

  alias vtkImageReader.vtkImageReader.NewInstance NewInstance;

  public int GetDepth() {
    auto ret = vtkd_im.vtkBMPReader_GetDepth(cast(void*)swigCPtr);
    return ret;
  }

  public void SetAllow8BitBMP(int _arg) {
    vtkd_im.vtkBMPReader_SetAllow8BitBMP(cast(void*)swigCPtr, _arg);
  }

  public int GetAllow8BitBMP() {
    auto ret = vtkd_im.vtkBMPReader_GetAllow8BitBMP(cast(void*)swigCPtr);
    return ret;
  }

  public void Allow8BitBMPOn() {
    vtkd_im.vtkBMPReader_Allow8BitBMPOn(cast(void*)swigCPtr);
  }

  public void Allow8BitBMPOff() {
    vtkd_im.vtkBMPReader_Allow8BitBMPOff(cast(void*)swigCPtr);
  }

  public vtkLookupTable.vtkLookupTable GetLookupTable() {
    void* cPtr = vtkd_im.vtkBMPReader_GetLookupTable(cast(void*)swigCPtr);
    vtkLookupTable.vtkLookupTable ret = (cPtr is null) ? null : new vtkLookupTable.vtkLookupTable(cPtr, false);
    return ret;
  }
}
