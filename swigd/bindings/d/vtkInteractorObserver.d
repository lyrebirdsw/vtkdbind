/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkInteractorObserver;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkRenderWindowInteractor;
static import vtkRenderer;
static import SWIGTYPE_p_double;
static import vtkObject;

class vtkInteractorObserver : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkInteractorObserver_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkInteractorObserver obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkInteractorObserver_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkInteractorObserver SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkInteractorObserver_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkInteractorObserver ret = (cPtr is null) ? null : new vtkInteractorObserver(cPtr, false);
    return ret;
  }

  public vtkInteractorObserver NewInstance() const {
    void* cPtr = vtkd_im.vtkInteractorObserver_NewInstance(cast(void*)swigCPtr);
    vtkInteractorObserver ret = (cPtr is null) ? null : new vtkInteractorObserver(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public void SetEnabled(int arg0) {
    vtkd_im.vtkInteractorObserver_SetEnabled(cast(void*)swigCPtr, arg0);
  }

  public int GetEnabled() {
    auto ret = vtkd_im.vtkInteractorObserver_GetEnabled(cast(void*)swigCPtr);
    return ret;
  }

  public void EnabledOn() {
    vtkd_im.vtkInteractorObserver_EnabledOn(cast(void*)swigCPtr);
  }

  public void EnabledOff() {
    vtkd_im.vtkInteractorObserver_EnabledOff(cast(void*)swigCPtr);
  }

  public void On() {
    vtkd_im.vtkInteractorObserver_On(cast(void*)swigCPtr);
  }

  public void Off() {
    vtkd_im.vtkInteractorObserver_Off(cast(void*)swigCPtr);
  }

  public void SetInteractor(vtkRenderWindowInteractor.vtkRenderWindowInteractor iren) {
    vtkd_im.vtkInteractorObserver_SetInteractor(cast(void*)swigCPtr, vtkRenderWindowInteractor.vtkRenderWindowInteractor.swigGetCPtr(iren));
  }

  public vtkRenderWindowInteractor.vtkRenderWindowInteractor GetInteractor() {
    void* cPtr = vtkd_im.vtkInteractorObserver_GetInteractor(cast(void*)swigCPtr);
    vtkRenderWindowInteractor.vtkRenderWindowInteractor ret = (cPtr is null) ? null : new vtkRenderWindowInteractor.vtkRenderWindowInteractor(cPtr, false);
    return ret;
  }

  public void SetPriority(float _arg) {
    vtkd_im.vtkInteractorObserver_SetPriority(cast(void*)swigCPtr, _arg);
  }

  public float GetPriorityMinValue() {
    auto ret = vtkd_im.vtkInteractorObserver_GetPriorityMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public float GetPriorityMaxValue() {
    auto ret = vtkd_im.vtkInteractorObserver_GetPriorityMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public float GetPriority() {
    auto ret = vtkd_im.vtkInteractorObserver_GetPriority(cast(void*)swigCPtr);
    return ret;
  }

  public void PickingManagedOn() {
    vtkd_im.vtkInteractorObserver_PickingManagedOn(cast(void*)swigCPtr);
  }

  public void PickingManagedOff() {
    vtkd_im.vtkInteractorObserver_PickingManagedOff(cast(void*)swigCPtr);
  }

  public void SetPickingManaged(bool _arg) {
    vtkd_im.vtkInteractorObserver_SetPickingManaged(cast(void*)swigCPtr, _arg);
  }

  public bool GetPickingManaged() {
    bool ret = vtkd_im.vtkInteractorObserver_GetPickingManaged(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetKeyPressActivation(int _arg) {
    vtkd_im.vtkInteractorObserver_SetKeyPressActivation(cast(void*)swigCPtr, _arg);
  }

  public int GetKeyPressActivation() {
    auto ret = vtkd_im.vtkInteractorObserver_GetKeyPressActivation(cast(void*)swigCPtr);
    return ret;
  }

  public void KeyPressActivationOn() {
    vtkd_im.vtkInteractorObserver_KeyPressActivationOn(cast(void*)swigCPtr);
  }

  public void KeyPressActivationOff() {
    vtkd_im.vtkInteractorObserver_KeyPressActivationOff(cast(void*)swigCPtr);
  }

  public void SetKeyPressActivationValue(char _arg) {
    vtkd_im.vtkInteractorObserver_SetKeyPressActivationValue(cast(void*)swigCPtr, _arg);
  }

  public char GetKeyPressActivationValue() {
    auto ret = vtkd_im.vtkInteractorObserver_GetKeyPressActivationValue(cast(void*)swigCPtr);
    return ret;
  }

  public vtkRenderer.vtkRenderer GetDefaultRenderer() {
    void* cPtr = vtkd_im.vtkInteractorObserver_GetDefaultRenderer(cast(void*)swigCPtr);
    vtkRenderer.vtkRenderer ret = (cPtr is null) ? null : new vtkRenderer.vtkRenderer(cPtr, false);
    return ret;
  }

  public void SetDefaultRenderer(vtkRenderer.vtkRenderer arg0) {
    vtkd_im.vtkInteractorObserver_SetDefaultRenderer(cast(void*)swigCPtr, vtkRenderer.vtkRenderer.swigGetCPtr(arg0));
  }

  public vtkRenderer.vtkRenderer GetCurrentRenderer() {
    void* cPtr = vtkd_im.vtkInteractorObserver_GetCurrentRenderer(cast(void*)swigCPtr);
    vtkRenderer.vtkRenderer ret = (cPtr is null) ? null : new vtkRenderer.vtkRenderer(cPtr, false);
    return ret;
  }

  public void SetCurrentRenderer(vtkRenderer.vtkRenderer arg0) {
    vtkd_im.vtkInteractorObserver_SetCurrentRenderer(cast(void*)swigCPtr, vtkRenderer.vtkRenderer.swigGetCPtr(arg0));
  }

  public void OnChar() {
    vtkd_im.vtkInteractorObserver_OnChar(cast(void*)swigCPtr);
  }

  public static void ComputeDisplayToWorld(vtkRenderer.vtkRenderer ren, double x, double y, double z, SWIGTYPE_p_double.SWIGTYPE_p_double worldPt) {
    vtkd_im.vtkInteractorObserver_ComputeDisplayToWorld(vtkRenderer.vtkRenderer.swigGetCPtr(ren), x, y, z, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(worldPt));
  }

  public static void ComputeWorldToDisplay(vtkRenderer.vtkRenderer ren, double x, double y, double z, SWIGTYPE_p_double.SWIGTYPE_p_double displayPt) {
    vtkd_im.vtkInteractorObserver_ComputeWorldToDisplay(vtkRenderer.vtkRenderer.swigGetCPtr(ren), x, y, z, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(displayPt));
  }
}
