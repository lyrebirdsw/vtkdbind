/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkFieldData;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkAbstractArray;
static import vtkDataArray;
static import vtkIdList;
static import vtkObject;

class vtkFieldData : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkFieldData_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkFieldData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkFieldData New() {
    void* cPtr = vtkd_im.vtkFieldData_New();
    vtkFieldData ret = (cPtr is null) ? null : new vtkFieldData(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkFieldData_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkFieldData SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkFieldData_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkFieldData ret = (cPtr is null) ? null : new vtkFieldData(cPtr, false);
    return ret;
  }

  public vtkFieldData NewInstance() const {
    void* cPtr = vtkd_im.vtkFieldData_NewInstance(cast(void*)swigCPtr);
    vtkFieldData ret = (cPtr is null) ? null : new vtkFieldData(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public void Initialize() {
    vtkd_im.vtkFieldData_Initialize(cast(void*)swigCPtr);
  }

  public int Allocate(long sz, long ext) {
    auto ret = vtkd_im.vtkFieldData_Allocate__SWIG_0(cast(void*)swigCPtr, sz, ext);
    return ret;
  }

  public int Allocate(long sz) {
    auto ret = vtkd_im.vtkFieldData_Allocate__SWIG_1(cast(void*)swigCPtr, sz);
    return ret;
  }

  public void CopyStructure(vtkFieldData arg0) {
    vtkd_im.vtkFieldData_CopyStructure(cast(void*)swigCPtr, vtkFieldData.swigGetCPtr(arg0));
  }

  public void AllocateArrays(int num) {
    vtkd_im.vtkFieldData_AllocateArrays(cast(void*)swigCPtr, num);
  }

  public int GetNumberOfArrays() {
    auto ret = vtkd_im.vtkFieldData_GetNumberOfArrays(cast(void*)swigCPtr);
    return ret;
  }

  public int AddArray(vtkAbstractArray.vtkAbstractArray array) {
    auto ret = vtkd_im.vtkFieldData_AddArray(cast(void*)swigCPtr, vtkAbstractArray.vtkAbstractArray.swigGetCPtr(array));
    return ret;
  }

  public void RemoveArray(string name) {
    vtkd_im.vtkFieldData_RemoveArray(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
  }

  public vtkDataArray.vtkDataArray GetArray(int i) {
    void* cPtr = vtkd_im.vtkFieldData_GetArray__SWIG_0(cast(void*)swigCPtr, i);
    vtkDataArray.vtkDataArray ret = (cPtr is null) ? null : new vtkDataArray.vtkDataArray(cPtr, false);
    return ret;
  }

  public vtkDataArray.vtkDataArray GetArray(string arrayName, int* index) {
    void* cPtr = vtkd_im.vtkFieldData_GetArray__SWIG_1(cast(void*)swigCPtr, (arrayName ? std.string.toStringz(arrayName) : null), cast(void*)index);
    vtkDataArray.vtkDataArray ret = (cPtr is null) ? null : new vtkDataArray.vtkDataArray(cPtr, false);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public vtkDataArray.vtkDataArray GetArray(string arrayName) {
    void* cPtr = vtkd_im.vtkFieldData_GetArray__SWIG_2(cast(void*)swigCPtr, (arrayName ? std.string.toStringz(arrayName) : null));
    vtkDataArray.vtkDataArray ret = (cPtr is null) ? null : new vtkDataArray.vtkDataArray(cPtr, false);
    return ret;
  }

  public vtkAbstractArray.vtkAbstractArray GetAbstractArray(int i) {
    void* cPtr = vtkd_im.vtkFieldData_GetAbstractArray__SWIG_0(cast(void*)swigCPtr, i);
    vtkAbstractArray.vtkAbstractArray ret = (cPtr is null) ? null : new vtkAbstractArray.vtkAbstractArray(cPtr, false);
    return ret;
  }

  public vtkAbstractArray.vtkAbstractArray GetAbstractArray(string arrayName, int* index) {
    void* cPtr = vtkd_im.vtkFieldData_GetAbstractArray__SWIG_1(cast(void*)swigCPtr, (arrayName ? std.string.toStringz(arrayName) : null), cast(void*)index);
    vtkAbstractArray.vtkAbstractArray ret = (cPtr is null) ? null : new vtkAbstractArray.vtkAbstractArray(cPtr, false);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public vtkAbstractArray.vtkAbstractArray GetAbstractArray(string arrayName) {
    void* cPtr = vtkd_im.vtkFieldData_GetAbstractArray__SWIG_2(cast(void*)swigCPtr, (arrayName ? std.string.toStringz(arrayName) : null));
    vtkAbstractArray.vtkAbstractArray ret = (cPtr is null) ? null : new vtkAbstractArray.vtkAbstractArray(cPtr, false);
    return ret;
  }

  public int HasArray(string name) {
    auto ret = vtkd_im.vtkFieldData_HasArray(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
    return ret;
  }

  public string GetArrayName(int i) {
    string ret = std.conv.to!string(vtkd_im.vtkFieldData_GetArrayName(cast(void*)swigCPtr, i));
    return ret;
  }

  public void PassData(vtkFieldData fd) {
    vtkd_im.vtkFieldData_PassData(cast(void*)swigCPtr, vtkFieldData.swigGetCPtr(fd));
  }

  public void CopyFieldOn(string name) {
    vtkd_im.vtkFieldData_CopyFieldOn(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
  }

  public void CopyFieldOff(string name) {
    vtkd_im.vtkFieldData_CopyFieldOff(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
  }

  public void CopyAllOn(int unused) {
    vtkd_im.vtkFieldData_CopyAllOn__SWIG_0(cast(void*)swigCPtr, unused);
  }

  public void CopyAllOn() {
    vtkd_im.vtkFieldData_CopyAllOn__SWIG_1(cast(void*)swigCPtr);
  }

  public void CopyAllOff(int unused) {
    vtkd_im.vtkFieldData_CopyAllOff__SWIG_0(cast(void*)swigCPtr, unused);
  }

  public void CopyAllOff() {
    vtkd_im.vtkFieldData_CopyAllOff__SWIG_1(cast(void*)swigCPtr);
  }

  public void DeepCopy(vtkFieldData da) {
    vtkd_im.vtkFieldData_DeepCopy(cast(void*)swigCPtr, vtkFieldData.swigGetCPtr(da));
  }

  public void ShallowCopy(vtkFieldData da) {
    vtkd_im.vtkFieldData_ShallowCopy(cast(void*)swigCPtr, vtkFieldData.swigGetCPtr(da));
  }

  public void Squeeze() {
    vtkd_im.vtkFieldData_Squeeze(cast(void*)swigCPtr);
  }

  public void Reset() {
    vtkd_im.vtkFieldData_Reset(cast(void*)swigCPtr);
  }

  public core.stdc.config.c_ulong GetActualMemorySize() {
    auto ret = vtkd_im.vtkFieldData_GetActualMemorySize(cast(void*)swigCPtr);
    return ret;
  }

  public void GetField(vtkIdList.vtkIdList ptId, vtkFieldData f) {
    vtkd_im.vtkFieldData_GetField(cast(void*)swigCPtr, vtkIdList.vtkIdList.swigGetCPtr(ptId), vtkFieldData.swigGetCPtr(f));
  }

  public int GetArrayContainingComponent(int i, int* arrayComp) {
    auto ret = vtkd_im.vtkFieldData_GetArrayContainingComponent(cast(void*)swigCPtr, i, cast(void*)arrayComp);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public int GetNumberOfComponents() {
    auto ret = vtkd_im.vtkFieldData_GetNumberOfComponents(cast(void*)swigCPtr);
    return ret;
  }

  public long GetNumberOfTuples() {
    auto ret = vtkd_im.vtkFieldData_GetNumberOfTuples(cast(void*)swigCPtr);
    return ret;
  }

  public void SetNumberOfTuples(long number) {
    vtkd_im.vtkFieldData_SetNumberOfTuples(cast(void*)swigCPtr, number);
  }

  public void SetTuple(long i, long j, vtkFieldData source) {
    vtkd_im.vtkFieldData_SetTuple(cast(void*)swigCPtr, i, j, vtkFieldData.swigGetCPtr(source));
  }

  public void InsertTuple(long i, long j, vtkFieldData source) {
    vtkd_im.vtkFieldData_InsertTuple(cast(void*)swigCPtr, i, j, vtkFieldData.swigGetCPtr(source));
  }

  public long InsertNextTuple(long j, vtkFieldData source) {
    auto ret = vtkd_im.vtkFieldData_InsertNextTuple(cast(void*)swigCPtr, j, vtkFieldData.swigGetCPtr(source));
    return ret;
  }
}
