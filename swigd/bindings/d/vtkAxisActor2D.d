/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkAxisActor2D;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkCoordinate;
static import SWIGTYPE_p_double;
static import vtkTextProperty;
static import vtkViewport;
static import SWIGTYPE_p_p_vtkTextMapper;
static import vtkActor2D;

class vtkAxisActor2D : vtkActor2D.vtkActor2D {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkAxisActor2D_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkAxisActor2D obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkAxisActor2D_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkAxisActor2D SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkAxisActor2D_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkAxisActor2D ret = (cPtr is null) ? null : new vtkAxisActor2D(cPtr, false);
    return ret;
  }

  public vtkAxisActor2D NewInstance() const {
    void* cPtr = vtkd_im.vtkAxisActor2D_NewInstance(cast(void*)swigCPtr);
    vtkAxisActor2D ret = (cPtr is null) ? null : new vtkAxisActor2D(cPtr, false);
    return ret;
  }

  alias vtkActor2D.vtkActor2D.NewInstance NewInstance;

  public static vtkAxisActor2D New() {
    void* cPtr = vtkd_im.vtkAxisActor2D_New();
    vtkAxisActor2D ret = (cPtr is null) ? null : new vtkAxisActor2D(cPtr, false);
    return ret;
  }

  public vtkCoordinate.vtkCoordinate GetPoint1Coordinate() {
    void* cPtr = vtkd_im.vtkAxisActor2D_GetPoint1Coordinate(cast(void*)swigCPtr);
    vtkCoordinate.vtkCoordinate ret = (cPtr is null) ? null : new vtkCoordinate.vtkCoordinate(cPtr, false);
    return ret;
  }

  public void SetPoint1(SWIGTYPE_p_double.SWIGTYPE_p_double x) {
    vtkd_im.vtkAxisActor2D_SetPoint1__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x));
  }

  public void SetPoint1(double x, double y) {
    vtkd_im.vtkAxisActor2D_SetPoint1__SWIG_1(cast(void*)swigCPtr, x, y);
  }

  public double* GetPoint1() {
    auto ret = cast(double*)vtkd_im.vtkAxisActor2D_GetPoint1(cast(void*)swigCPtr);
    return ret;
  }

  public vtkCoordinate.vtkCoordinate GetPoint2Coordinate() {
    void* cPtr = vtkd_im.vtkAxisActor2D_GetPoint2Coordinate(cast(void*)swigCPtr);
    vtkCoordinate.vtkCoordinate ret = (cPtr is null) ? null : new vtkCoordinate.vtkCoordinate(cPtr, false);
    return ret;
  }

  public void SetPoint2(SWIGTYPE_p_double.SWIGTYPE_p_double x) {
    vtkd_im.vtkAxisActor2D_SetPoint2__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x));
  }

  public void SetPoint2(double x, double y) {
    vtkd_im.vtkAxisActor2D_SetPoint2__SWIG_1(cast(void*)swigCPtr, x, y);
  }

  public double* GetPoint2() {
    auto ret = cast(double*)vtkd_im.vtkAxisActor2D_GetPoint2(cast(void*)swigCPtr);
    return ret;
  }

  public void SetRange(double _arg1, double _arg2) {
    vtkd_im.vtkAxisActor2D_SetRange__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2);
  }

  public void SetRange(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkAxisActor2D_SetRange__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetRange() {
    auto ret = cast(double*)vtkd_im.vtkAxisActor2D_GetRange__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetRange(SWIGTYPE_p_double.SWIGTYPE_p_double data) {
    vtkd_im.vtkAxisActor2D_GetRange__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(data));
  }

  public void SetRulerMode(int _arg) {
    vtkd_im.vtkAxisActor2D_SetRulerMode(cast(void*)swigCPtr, _arg);
  }

  public int GetRulerMode() {
    auto ret = vtkd_im.vtkAxisActor2D_GetRulerMode(cast(void*)swigCPtr);
    return ret;
  }

  public void RulerModeOn() {
    vtkd_im.vtkAxisActor2D_RulerModeOn(cast(void*)swigCPtr);
  }

  public void RulerModeOff() {
    vtkd_im.vtkAxisActor2D_RulerModeOff(cast(void*)swigCPtr);
  }

  public void SetRulerDistance(double _arg) {
    vtkd_im.vtkAxisActor2D_SetRulerDistance(cast(void*)swigCPtr, _arg);
  }

  public double GetRulerDistanceMinValue() {
    auto ret = vtkd_im.vtkAxisActor2D_GetRulerDistanceMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetRulerDistanceMaxValue() {
    auto ret = vtkd_im.vtkAxisActor2D_GetRulerDistanceMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetRulerDistance() {
    auto ret = vtkd_im.vtkAxisActor2D_GetRulerDistance(cast(void*)swigCPtr);
    return ret;
  }

  public void SetNumberOfLabels(int _arg) {
    vtkd_im.vtkAxisActor2D_SetNumberOfLabels(cast(void*)swigCPtr, _arg);
  }

  public int GetNumberOfLabelsMinValue() {
    auto ret = vtkd_im.vtkAxisActor2D_GetNumberOfLabelsMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfLabelsMaxValue() {
    auto ret = vtkd_im.vtkAxisActor2D_GetNumberOfLabelsMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfLabels() {
    auto ret = vtkd_im.vtkAxisActor2D_GetNumberOfLabels(cast(void*)swigCPtr);
    return ret;
  }

  public void SetLabelFormat(string _arg) {
    vtkd_im.vtkAxisActor2D_SetLabelFormat(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetLabelFormat() {
    string ret = std.conv.to!string(vtkd_im.vtkAxisActor2D_GetLabelFormat(cast(void*)swigCPtr));
    return ret;
  }

  public void SetAdjustLabels(int _arg) {
    vtkd_im.vtkAxisActor2D_SetAdjustLabels(cast(void*)swigCPtr, _arg);
  }

  public int GetAdjustLabels() {
    auto ret = vtkd_im.vtkAxisActor2D_GetAdjustLabels(cast(void*)swigCPtr);
    return ret;
  }

  public void AdjustLabelsOn() {
    vtkd_im.vtkAxisActor2D_AdjustLabelsOn(cast(void*)swigCPtr);
  }

  public void AdjustLabelsOff() {
    vtkd_im.vtkAxisActor2D_AdjustLabelsOff(cast(void*)swigCPtr);
  }

  public double* GetAdjustedRange() {
    auto ret = cast(double*)vtkd_im.vtkAxisActor2D_GetAdjustedRange__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetAdjustedRange(double* _arg1, double* _arg2) {
    vtkd_im.vtkAxisActor2D_GetAdjustedRange__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetAdjustedRange(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkAxisActor2D_GetAdjustedRange__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public int GetAdjustedNumberOfLabels() {
    auto ret = vtkd_im.vtkAxisActor2D_GetAdjustedNumberOfLabels(cast(void*)swigCPtr);
    return ret;
  }

  public void SetTitle(string _arg) {
    vtkd_im.vtkAxisActor2D_SetTitle(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetTitle() {
    string ret = std.conv.to!string(vtkd_im.vtkAxisActor2D_GetTitle(cast(void*)swigCPtr));
    return ret;
  }

  public void SetTitleTextProperty(vtkTextProperty.vtkTextProperty p) {
    vtkd_im.vtkAxisActor2D_SetTitleTextProperty(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(p));
  }

  public vtkTextProperty.vtkTextProperty GetTitleTextProperty() {
    void* cPtr = vtkd_im.vtkAxisActor2D_GetTitleTextProperty(cast(void*)swigCPtr);
    vtkTextProperty.vtkTextProperty ret = (cPtr is null) ? null : new vtkTextProperty.vtkTextProperty(cPtr, false);
    return ret;
  }

  public void SetLabelTextProperty(vtkTextProperty.vtkTextProperty p) {
    vtkd_im.vtkAxisActor2D_SetLabelTextProperty(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(p));
  }

  public vtkTextProperty.vtkTextProperty GetLabelTextProperty() {
    void* cPtr = vtkd_im.vtkAxisActor2D_GetLabelTextProperty(cast(void*)swigCPtr);
    vtkTextProperty.vtkTextProperty ret = (cPtr is null) ? null : new vtkTextProperty.vtkTextProperty(cPtr, false);
    return ret;
  }

  public void SetTickLength(int _arg) {
    vtkd_im.vtkAxisActor2D_SetTickLength(cast(void*)swigCPtr, _arg);
  }

  public int GetTickLengthMinValue() {
    auto ret = vtkd_im.vtkAxisActor2D_GetTickLengthMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetTickLengthMaxValue() {
    auto ret = vtkd_im.vtkAxisActor2D_GetTickLengthMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetTickLength() {
    auto ret = vtkd_im.vtkAxisActor2D_GetTickLength(cast(void*)swigCPtr);
    return ret;
  }

  public void SetNumberOfMinorTicks(int _arg) {
    vtkd_im.vtkAxisActor2D_SetNumberOfMinorTicks(cast(void*)swigCPtr, _arg);
  }

  public int GetNumberOfMinorTicksMinValue() {
    auto ret = vtkd_im.vtkAxisActor2D_GetNumberOfMinorTicksMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfMinorTicksMaxValue() {
    auto ret = vtkd_im.vtkAxisActor2D_GetNumberOfMinorTicksMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfMinorTicks() {
    auto ret = vtkd_im.vtkAxisActor2D_GetNumberOfMinorTicks(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMinorTickLength(int _arg) {
    vtkd_im.vtkAxisActor2D_SetMinorTickLength(cast(void*)swigCPtr, _arg);
  }

  public int GetMinorTickLengthMinValue() {
    auto ret = vtkd_im.vtkAxisActor2D_GetMinorTickLengthMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetMinorTickLengthMaxValue() {
    auto ret = vtkd_im.vtkAxisActor2D_GetMinorTickLengthMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetMinorTickLength() {
    auto ret = vtkd_im.vtkAxisActor2D_GetMinorTickLength(cast(void*)swigCPtr);
    return ret;
  }

  public void SetTickOffset(int _arg) {
    vtkd_im.vtkAxisActor2D_SetTickOffset(cast(void*)swigCPtr, _arg);
  }

  public int GetTickOffsetMinValue() {
    auto ret = vtkd_im.vtkAxisActor2D_GetTickOffsetMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetTickOffsetMaxValue() {
    auto ret = vtkd_im.vtkAxisActor2D_GetTickOffsetMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetTickOffset() {
    auto ret = vtkd_im.vtkAxisActor2D_GetTickOffset(cast(void*)swigCPtr);
    return ret;
  }

  public void SetAxisVisibility(int _arg) {
    vtkd_im.vtkAxisActor2D_SetAxisVisibility(cast(void*)swigCPtr, _arg);
  }

  public int GetAxisVisibility() {
    auto ret = vtkd_im.vtkAxisActor2D_GetAxisVisibility(cast(void*)swigCPtr);
    return ret;
  }

  public void AxisVisibilityOn() {
    vtkd_im.vtkAxisActor2D_AxisVisibilityOn(cast(void*)swigCPtr);
  }

  public void AxisVisibilityOff() {
    vtkd_im.vtkAxisActor2D_AxisVisibilityOff(cast(void*)swigCPtr);
  }

  public void SetTickVisibility(int _arg) {
    vtkd_im.vtkAxisActor2D_SetTickVisibility(cast(void*)swigCPtr, _arg);
  }

  public int GetTickVisibility() {
    auto ret = vtkd_im.vtkAxisActor2D_GetTickVisibility(cast(void*)swigCPtr);
    return ret;
  }

  public void TickVisibilityOn() {
    vtkd_im.vtkAxisActor2D_TickVisibilityOn(cast(void*)swigCPtr);
  }

  public void TickVisibilityOff() {
    vtkd_im.vtkAxisActor2D_TickVisibilityOff(cast(void*)swigCPtr);
  }

  public void SetLabelVisibility(int _arg) {
    vtkd_im.vtkAxisActor2D_SetLabelVisibility(cast(void*)swigCPtr, _arg);
  }

  public int GetLabelVisibility() {
    auto ret = vtkd_im.vtkAxisActor2D_GetLabelVisibility(cast(void*)swigCPtr);
    return ret;
  }

  public void LabelVisibilityOn() {
    vtkd_im.vtkAxisActor2D_LabelVisibilityOn(cast(void*)swigCPtr);
  }

  public void LabelVisibilityOff() {
    vtkd_im.vtkAxisActor2D_LabelVisibilityOff(cast(void*)swigCPtr);
  }

  public void SetTitleVisibility(int _arg) {
    vtkd_im.vtkAxisActor2D_SetTitleVisibility(cast(void*)swigCPtr, _arg);
  }

  public int GetTitleVisibility() {
    auto ret = vtkd_im.vtkAxisActor2D_GetTitleVisibility(cast(void*)swigCPtr);
    return ret;
  }

  public void TitleVisibilityOn() {
    vtkd_im.vtkAxisActor2D_TitleVisibilityOn(cast(void*)swigCPtr);
  }

  public void TitleVisibilityOff() {
    vtkd_im.vtkAxisActor2D_TitleVisibilityOff(cast(void*)swigCPtr);
  }

  public void SetTitlePosition(double _arg) {
    vtkd_im.vtkAxisActor2D_SetTitlePosition(cast(void*)swigCPtr, _arg);
  }

  public double GetTitlePosition() {
    auto ret = vtkd_im.vtkAxisActor2D_GetTitlePosition(cast(void*)swigCPtr);
    return ret;
  }

  public void SetFontFactor(double _arg) {
    vtkd_im.vtkAxisActor2D_SetFontFactor(cast(void*)swigCPtr, _arg);
  }

  public double GetFontFactorMinValue() {
    auto ret = vtkd_im.vtkAxisActor2D_GetFontFactorMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetFontFactorMaxValue() {
    auto ret = vtkd_im.vtkAxisActor2D_GetFontFactorMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetFontFactor() {
    auto ret = vtkd_im.vtkAxisActor2D_GetFontFactor(cast(void*)swigCPtr);
    return ret;
  }

  public void SetLabelFactor(double _arg) {
    vtkd_im.vtkAxisActor2D_SetLabelFactor(cast(void*)swigCPtr, _arg);
  }

  public double GetLabelFactorMinValue() {
    auto ret = vtkd_im.vtkAxisActor2D_GetLabelFactorMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetLabelFactorMaxValue() {
    auto ret = vtkd_im.vtkAxisActor2D_GetLabelFactorMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetLabelFactor() {
    auto ret = vtkd_im.vtkAxisActor2D_GetLabelFactor(cast(void*)swigCPtr);
    return ret;
  }

  public static void ComputeRange(SWIGTYPE_p_double.SWIGTYPE_p_double inRange, SWIGTYPE_p_double.SWIGTYPE_p_double outRange, int inNumTicks, int* outNumTicks, double* interval) {
    vtkd_im.vtkAxisActor2D_ComputeRange(SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(inRange), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(outRange), inNumTicks, cast(void*)outNumTicks, cast(void*)interval);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public static int SetMultipleFontSize(vtkViewport.vtkViewport viewport, SWIGTYPE_p_p_vtkTextMapper.SWIGTYPE_p_p_vtkTextMapper textMappers, int nbOfMappers, int* targetSize, double factor, int* stringSize) {
    auto ret = vtkd_im.vtkAxisActor2D_SetMultipleFontSize(vtkViewport.vtkViewport.swigGetCPtr(viewport), SWIGTYPE_p_p_vtkTextMapper.SWIGTYPE_p_p_vtkTextMapper.swigGetCPtr(textMappers), nbOfMappers, cast(void*)targetSize, factor, cast(void*)stringSize);
    return ret;
  }

  public void SetSizeFontRelativeToAxis(int _arg) {
    vtkd_im.vtkAxisActor2D_SetSizeFontRelativeToAxis(cast(void*)swigCPtr, _arg);
  }

  public int GetSizeFontRelativeToAxis() {
    auto ret = vtkd_im.vtkAxisActor2D_GetSizeFontRelativeToAxis(cast(void*)swigCPtr);
    return ret;
  }

  public void SizeFontRelativeToAxisOn() {
    vtkd_im.vtkAxisActor2D_SizeFontRelativeToAxisOn(cast(void*)swigCPtr);
  }

  public void SizeFontRelativeToAxisOff() {
    vtkd_im.vtkAxisActor2D_SizeFontRelativeToAxisOff(cast(void*)swigCPtr);
  }
}
