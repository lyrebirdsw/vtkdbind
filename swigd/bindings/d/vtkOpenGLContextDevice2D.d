/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkOpenGLContextDevice2D;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkImageData;
static import vtkStdString;
static import SWIGTYPE_p_float;
static import vtkUnicodeString;
static import vtkRectf;
static import SWIGTYPE_p_unsigned_char;
static import vtkAbstractContextBufferId;
static import vtkOpenGLRenderWindow;
static import vtkWindow;
static import vtkContextDevice2D;

class vtkOpenGLContextDevice2D : vtkContextDevice2D.vtkContextDevice2D {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkOpenGLContextDevice2D_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkOpenGLContextDevice2D obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkOpenGLContextDevice2D(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkOpenGLContextDevice2D_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkOpenGLContextDevice2D SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkOpenGLContextDevice2D_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkOpenGLContextDevice2D ret = (cPtr is null) ? null : new vtkOpenGLContextDevice2D(cPtr, false);
    return ret;
  }

  public vtkOpenGLContextDevice2D NewInstance() const {
    void* cPtr = vtkd_im.vtkOpenGLContextDevice2D_NewInstance(cast(void*)swigCPtr);
    vtkOpenGLContextDevice2D ret = (cPtr is null) ? null : new vtkOpenGLContextDevice2D(cPtr, false);
    return ret;
  }

  alias vtkContextDevice2D.vtkContextDevice2D.NewInstance NewInstance;

  public static vtkOpenGLContextDevice2D New() {
    void* cPtr = vtkd_im.vtkOpenGLContextDevice2D_New();
    vtkOpenGLContextDevice2D ret = (cPtr is null) ? null : new vtkOpenGLContextDevice2D(cPtr, false);
    return ret;
  }

  public override void DrawPoly(float* f, int n, ubyte* colors, int nc_comps) {
    vtkd_im.vtkOpenGLContextDevice2D_DrawPoly__SWIG_0(cast(void*)swigCPtr, cast(void*)f, n, cast(void*)colors, nc_comps);
  }

  public override void DrawPoly(float* f, int n, ubyte* colors) {
    vtkd_im.vtkOpenGLContextDevice2D_DrawPoly__SWIG_1(cast(void*)swigCPtr, cast(void*)f, n, cast(void*)colors);
  }

  public override void DrawPoly(float* f, int n) {
    vtkd_im.vtkOpenGLContextDevice2D_DrawPoly__SWIG_2(cast(void*)swigCPtr, cast(void*)f, n);
  }

  public override void DrawPoints(float* points, int n, ubyte* colors, int nc_comps) {
    vtkd_im.vtkOpenGLContextDevice2D_DrawPoints__SWIG_0(cast(void*)swigCPtr, cast(void*)points, n, cast(void*)colors, nc_comps);
  }

  public override void DrawPoints(float* points, int n, ubyte* colors) {
    vtkd_im.vtkOpenGLContextDevice2D_DrawPoints__SWIG_1(cast(void*)swigCPtr, cast(void*)points, n, cast(void*)colors);
  }

  public override void DrawPoints(float* points, int n) {
    vtkd_im.vtkOpenGLContextDevice2D_DrawPoints__SWIG_2(cast(void*)swigCPtr, cast(void*)points, n);
  }

  public override void DrawPointSprites(vtkImageData.vtkImageData sprite, float* points, int n, ubyte* colors, int nc_comps) {
    vtkd_im.vtkOpenGLContextDevice2D_DrawPointSprites__SWIG_0(cast(void*)swigCPtr, vtkImageData.vtkImageData.swigGetCPtr(sprite), cast(void*)points, n, cast(void*)colors, nc_comps);
  }

  public override void DrawPointSprites(vtkImageData.vtkImageData sprite, float* points, int n, ubyte* colors) {
    vtkd_im.vtkOpenGLContextDevice2D_DrawPointSprites__SWIG_1(cast(void*)swigCPtr, vtkImageData.vtkImageData.swigGetCPtr(sprite), cast(void*)points, n, cast(void*)colors);
  }

  public override void DrawPointSprites(vtkImageData.vtkImageData sprite, float* points, int n) {
    vtkd_im.vtkOpenGLContextDevice2D_DrawPointSprites__SWIG_2(cast(void*)swigCPtr, vtkImageData.vtkImageData.swigGetCPtr(sprite), cast(void*)points, n);
  }

  public override void DrawMarkers(int shape, bool highlight, float* points, int n, ubyte* colors, int nc_comps) {
    vtkd_im.vtkOpenGLContextDevice2D_DrawMarkers__SWIG_0(cast(void*)swigCPtr, shape, highlight, cast(void*)points, n, cast(void*)colors, nc_comps);
  }

  public override void DrawMarkers(int shape, bool highlight, float* points, int n, ubyte* colors) {
    vtkd_im.vtkOpenGLContextDevice2D_DrawMarkers__SWIG_1(cast(void*)swigCPtr, shape, highlight, cast(void*)points, n, cast(void*)colors);
  }

  public override void DrawMarkers(int shape, bool highlight, float* points, int n) {
    vtkd_im.vtkOpenGLContextDevice2D_DrawMarkers__SWIG_2(cast(void*)swigCPtr, shape, highlight, cast(void*)points, n);
  }

  public void SetMaximumMarkerCacheSize(int _arg) {
    vtkd_im.vtkOpenGLContextDevice2D_SetMaximumMarkerCacheSize(cast(void*)swigCPtr, _arg);
  }

  public int GetMaximumMarkerCacheSize() {
    auto ret = vtkd_im.vtkOpenGLContextDevice2D_GetMaximumMarkerCacheSize(cast(void*)swigCPtr);
    return ret;
  }

  public override void DrawString(float* point, vtkStdString.vtkStdString arg1) {
    vtkd_im.vtkOpenGLContextDevice2D_DrawString__SWIG_0(cast(void*)swigCPtr, cast(void*)point, vtkStdString.vtkStdString.swigGetCPtr(arg1));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public override void ComputeStringBounds(vtkStdString.vtkStdString arg0, SWIGTYPE_p_float.SWIGTYPE_p_float bounds) {
    vtkd_im.vtkOpenGLContextDevice2D_ComputeStringBounds__SWIG_0(cast(void*)swigCPtr, vtkStdString.vtkStdString.swigGetCPtr(arg0), SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(bounds));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public override void DrawString(float* point, vtkUnicodeString.vtkUnicodeString arg1) {
    vtkd_im.vtkOpenGLContextDevice2D_DrawString__SWIG_1(cast(void*)swigCPtr, cast(void*)point, vtkUnicodeString.vtkUnicodeString.swigGetCPtr(arg1));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public override void ComputeStringBounds(vtkUnicodeString.vtkUnicodeString arg0, SWIGTYPE_p_float.SWIGTYPE_p_float bounds) {
    vtkd_im.vtkOpenGLContextDevice2D_ComputeStringBounds__SWIG_1(cast(void*)swigCPtr, vtkUnicodeString.vtkUnicodeString.swigGetCPtr(arg0), SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(bounds));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void DrawMathTextString(SWIGTYPE_p_float.SWIGTYPE_p_float point, vtkStdString.vtkStdString arg1) {
    vtkd_im.vtkOpenGLContextDevice2D_DrawMathTextString(cast(void*)swigCPtr, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(point), vtkStdString.vtkStdString.swigGetCPtr(arg1));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  alias vtkContextDevice2D.vtkContextDevice2D.DrawMathTextString DrawMathTextString;

  public override void DrawImage(SWIGTYPE_p_float.SWIGTYPE_p_float p, float scale, vtkImageData.vtkImageData image) {
    vtkd_im.vtkOpenGLContextDevice2D_DrawImage__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(p), scale, vtkImageData.vtkImageData.swigGetCPtr(image));
  }

  public override void DrawImage(vtkRectf.vtkRectf pos, vtkImageData.vtkImageData image) {
    vtkd_im.vtkOpenGLContextDevice2D_DrawImage__SWIG_1(cast(void*)swigCPtr, vtkRectf.vtkRectf.swigGetCPtr(pos), vtkImageData.vtkImageData.swigGetCPtr(image));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void SetColor(SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char color) {
    vtkd_im.vtkOpenGLContextDevice2D_SetColor(cast(void*)swigCPtr, SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char.swigGetCPtr(color));
  }

  public override void SetTexture(vtkImageData.vtkImageData image, int properties) {
    vtkd_im.vtkOpenGLContextDevice2D_SetTexture__SWIG_0(cast(void*)swigCPtr, vtkImageData.vtkImageData.swigGetCPtr(image), properties);
  }

  public void SetTexture(vtkImageData.vtkImageData image) {
    vtkd_im.vtkOpenGLContextDevice2D_SetTexture__SWIG_1(cast(void*)swigCPtr, vtkImageData.vtkImageData.swigGetCPtr(image));
  }

  alias vtkContextDevice2D.vtkContextDevice2D.SetTexture SetTexture;

  public void BufferIdModeBegin(vtkAbstractContextBufferId.vtkAbstractContextBufferId bufferId) {
    vtkd_im.vtkOpenGLContextDevice2D_BufferIdModeBegin(cast(void*)swigCPtr, vtkAbstractContextBufferId.vtkAbstractContextBufferId.swigGetCPtr(bufferId));
  }

  public bool SetStringRendererToFreeType() {
    bool ret = vtkd_im.vtkOpenGLContextDevice2D_SetStringRendererToFreeType(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool SetStringRendererToQt() {
    bool ret = vtkd_im.vtkOpenGLContextDevice2D_SetStringRendererToQt(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool HasGLSL() {
    bool ret = vtkd_im.vtkOpenGLContextDevice2D_HasGLSL(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public vtkOpenGLRenderWindow.vtkOpenGLRenderWindow GetRenderWindow() {
    void* cPtr = vtkd_im.vtkOpenGLContextDevice2D_GetRenderWindow(cast(void*)swigCPtr);
    vtkOpenGLRenderWindow.vtkOpenGLRenderWindow ret = (cPtr is null) ? null : new vtkOpenGLRenderWindow.vtkOpenGLRenderWindow(cPtr, false);
    return ret;
  }

  public void ReleaseGraphicsResources(vtkWindow.vtkWindow window) {
    vtkd_im.vtkOpenGLContextDevice2D_ReleaseGraphicsResources(cast(void*)swigCPtr, vtkWindow.vtkWindow.swigGetCPtr(window));
  }
}
