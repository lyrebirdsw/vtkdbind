/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkParallelopipedRepresentation;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_a_3__double;
static import SWIGTYPE_p_double;
static import vtkPlaneCollection;
static import vtkPolyData;
static import vtkProperty;
static import vtkHandleRepresentation;
static import vtkWidgetRepresentation;

class vtkParallelopipedRepresentation : vtkWidgetRepresentation.vtkWidgetRepresentation {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkParallelopipedRepresentation_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkParallelopipedRepresentation obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkParallelopipedRepresentation New() {
    void* cPtr = vtkd_im.vtkParallelopipedRepresentation_New();
    vtkParallelopipedRepresentation ret = (cPtr is null) ? null : new vtkParallelopipedRepresentation(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkParallelopipedRepresentation_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkParallelopipedRepresentation SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkParallelopipedRepresentation_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkParallelopipedRepresentation ret = (cPtr is null) ? null : new vtkParallelopipedRepresentation(cPtr, false);
    return ret;
  }

  public vtkParallelopipedRepresentation NewInstance() const {
    void* cPtr = vtkd_im.vtkParallelopipedRepresentation_NewInstance(cast(void*)swigCPtr);
    vtkParallelopipedRepresentation ret = (cPtr is null) ? null : new vtkParallelopipedRepresentation(cPtr, false);
    return ret;
  }

  alias vtkWidgetRepresentation.vtkWidgetRepresentation.NewInstance NewInstance;

  public void PlaceWidget(SWIGTYPE_p_a_3__double.SWIGTYPE_p_a_3__double corners) {
    vtkd_im.vtkParallelopipedRepresentation_PlaceWidget__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_a_3__double.SWIGTYPE_p_a_3__double.swigGetCPtr(corners));
  }

  public void PlaceWidget(SWIGTYPE_p_double.SWIGTYPE_p_double bounds) {
    vtkd_im.vtkParallelopipedRepresentation_PlaceWidget__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
  }

  alias vtkWidgetRepresentation.vtkWidgetRepresentation.PlaceWidget PlaceWidget;

  public void SetInteractionState(int _arg) {
    vtkd_im.vtkParallelopipedRepresentation_SetInteractionState(cast(void*)swigCPtr, _arg);
  }

  public void GetBoundingPlanes(vtkPlaneCollection.vtkPlaneCollection pc) {
    vtkd_im.vtkParallelopipedRepresentation_GetBoundingPlanes(cast(void*)swigCPtr, vtkPlaneCollection.vtkPlaneCollection.swigGetCPtr(pc));
  }

  public void GetPolyData(vtkPolyData.vtkPolyData pd) {
    vtkd_im.vtkParallelopipedRepresentation_GetPolyData(cast(void*)swigCPtr, vtkPolyData.vtkPolyData.swigGetCPtr(pd));
  }

  public void SetHandleProperty(vtkProperty.vtkProperty arg0) {
    vtkd_im.vtkParallelopipedRepresentation_SetHandleProperty(cast(void*)swigCPtr, vtkProperty.vtkProperty.swigGetCPtr(arg0));
  }

  public void SetHoveredHandleProperty(vtkProperty.vtkProperty arg0) {
    vtkd_im.vtkParallelopipedRepresentation_SetHoveredHandleProperty(cast(void*)swigCPtr, vtkProperty.vtkProperty.swigGetCPtr(arg0));
  }

  public void SetSelectedHandleProperty(vtkProperty.vtkProperty arg0) {
    vtkd_im.vtkParallelopipedRepresentation_SetSelectedHandleProperty(cast(void*)swigCPtr, vtkProperty.vtkProperty.swigGetCPtr(arg0));
  }

  public vtkProperty.vtkProperty GetHandleProperty() {
    void* cPtr = vtkd_im.vtkParallelopipedRepresentation_GetHandleProperty(cast(void*)swigCPtr);
    vtkProperty.vtkProperty ret = (cPtr is null) ? null : new vtkProperty.vtkProperty(cPtr, false);
    return ret;
  }

  public vtkProperty.vtkProperty GetHoveredHandleProperty() {
    void* cPtr = vtkd_im.vtkParallelopipedRepresentation_GetHoveredHandleProperty(cast(void*)swigCPtr);
    vtkProperty.vtkProperty ret = (cPtr is null) ? null : new vtkProperty.vtkProperty(cPtr, false);
    return ret;
  }

  public vtkProperty.vtkProperty GetSelectedHandleProperty() {
    void* cPtr = vtkd_im.vtkParallelopipedRepresentation_GetSelectedHandleProperty(cast(void*)swigCPtr);
    vtkProperty.vtkProperty ret = (cPtr is null) ? null : new vtkProperty.vtkProperty(cPtr, false);
    return ret;
  }

  public void SetHandleRepresentation(vtkHandleRepresentation.vtkHandleRepresentation handle) {
    vtkd_im.vtkParallelopipedRepresentation_SetHandleRepresentation(cast(void*)swigCPtr, vtkHandleRepresentation.vtkHandleRepresentation.swigGetCPtr(handle));
  }

  public vtkHandleRepresentation.vtkHandleRepresentation GetHandleRepresentation(int index) {
    void* cPtr = vtkd_im.vtkParallelopipedRepresentation_GetHandleRepresentation(cast(void*)swigCPtr, index);
    vtkHandleRepresentation.vtkHandleRepresentation ret = (cPtr is null) ? null : new vtkHandleRepresentation.vtkHandleRepresentation(cPtr, false);
    return ret;
  }

  public void HandlesOn() {
    vtkd_im.vtkParallelopipedRepresentation_HandlesOn(cast(void*)swigCPtr);
  }

  public void HandlesOff() {
    vtkd_im.vtkParallelopipedRepresentation_HandlesOff(cast(void*)swigCPtr);
  }

  public vtkProperty.vtkProperty GetFaceProperty() {
    void* cPtr = vtkd_im.vtkParallelopipedRepresentation_GetFaceProperty(cast(void*)swigCPtr);
    vtkProperty.vtkProperty ret = (cPtr is null) ? null : new vtkProperty.vtkProperty(cPtr, false);
    return ret;
  }

  public vtkProperty.vtkProperty GetSelectedFaceProperty() {
    void* cPtr = vtkd_im.vtkParallelopipedRepresentation_GetSelectedFaceProperty(cast(void*)swigCPtr);
    vtkProperty.vtkProperty ret = (cPtr is null) ? null : new vtkProperty.vtkProperty(cPtr, false);
    return ret;
  }

  public vtkProperty.vtkProperty GetOutlineProperty() {
    void* cPtr = vtkd_im.vtkParallelopipedRepresentation_GetOutlineProperty(cast(void*)swigCPtr);
    vtkProperty.vtkProperty ret = (cPtr is null) ? null : new vtkProperty.vtkProperty(cPtr, false);
    return ret;
  }

  public vtkProperty.vtkProperty GetSelectedOutlineProperty() {
    void* cPtr = vtkd_im.vtkParallelopipedRepresentation_GetSelectedOutlineProperty(cast(void*)swigCPtr);
    vtkProperty.vtkProperty ret = (cPtr is null) ? null : new vtkProperty.vtkProperty(cPtr, false);
    return ret;
  }

  public override int ComputeInteractionState(int X, int Y, int modify) {
    auto ret = vtkd_im.vtkParallelopipedRepresentation_ComputeInteractionState__SWIG_0(cast(void*)swigCPtr, X, Y, modify);
    return ret;
  }

  public override int ComputeInteractionState(int X, int Y) {
    auto ret = vtkd_im.vtkParallelopipedRepresentation_ComputeInteractionState__SWIG_1(cast(void*)swigCPtr, X, Y);
    return ret;
  }

  public void Translate(SWIGTYPE_p_double.SWIGTYPE_p_double translation) {
    vtkd_im.vtkParallelopipedRepresentation_Translate__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(translation));
  }

  public void Translate(int X, int Y) {
    vtkd_im.vtkParallelopipedRepresentation_Translate__SWIG_1(cast(void*)swigCPtr, X, Y);
  }

  public void Scale(int X, int Y) {
    vtkd_im.vtkParallelopipedRepresentation_Scale(cast(void*)swigCPtr, X, Y);
  }

  public void PositionHandles() {
    vtkd_im.vtkParallelopipedRepresentation_PositionHandles(cast(void*)swigCPtr);
  }

  public void SetMinimumThickness(double _arg) {
    vtkd_im.vtkParallelopipedRepresentation_SetMinimumThickness(cast(void*)swigCPtr, _arg);
  }

  public double GetMinimumThickness() {
    auto ret = vtkd_im.vtkParallelopipedRepresentation_GetMinimumThickness(cast(void*)swigCPtr);
    return ret;
  }
}
