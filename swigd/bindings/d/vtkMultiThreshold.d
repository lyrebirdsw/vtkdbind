/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkMultiThreshold;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkMultiBlockDataSetAlgorithm;

class vtkMultiThreshold : vtkMultiBlockDataSetAlgorithm.vtkMultiBlockDataSetAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkMultiThreshold_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkMultiThreshold obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkMultiThreshold_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkMultiThreshold SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkMultiThreshold_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkMultiThreshold ret = (cPtr is null) ? null : new vtkMultiThreshold(cPtr, false);
    return ret;
  }

  public vtkMultiThreshold NewInstance() const {
    void* cPtr = vtkd_im.vtkMultiThreshold_NewInstance(cast(void*)swigCPtr);
    vtkMultiThreshold ret = (cPtr is null) ? null : new vtkMultiThreshold(cPtr, false);
    return ret;
  }

  alias vtkMultiBlockDataSetAlgorithm.vtkMultiBlockDataSetAlgorithm.NewInstance NewInstance;

  public static vtkMultiThreshold New() {
    void* cPtr = vtkd_im.vtkMultiThreshold_New();
    vtkMultiThreshold ret = (cPtr is null) ? null : new vtkMultiThreshold(cPtr, false);
    return ret;
  }

  public int AddIntervalSet(double xmin, double xmax, int omin, int omax, int assoc, string arrayName, int component, int allScalars) {
    auto ret = vtkd_im.vtkMultiThreshold_AddIntervalSet__SWIG_0(cast(void*)swigCPtr, xmin, xmax, omin, omax, assoc, (arrayName ? std.string.toStringz(arrayName) : null), component, allScalars);
    return ret;
  }

  public int AddIntervalSet(double xmin, double xmax, int omin, int omax, int assoc, int attribType, int component, int allScalars) {
    auto ret = vtkd_im.vtkMultiThreshold_AddIntervalSet__SWIG_1(cast(void*)swigCPtr, xmin, xmax, omin, omax, assoc, attribType, component, allScalars);
    return ret;
  }

  public int AddLowpassIntervalSet(double xmax, int assoc, string arrayName, int component, int allScalars) {
    auto ret = vtkd_im.vtkMultiThreshold_AddLowpassIntervalSet(cast(void*)swigCPtr, xmax, assoc, (arrayName ? std.string.toStringz(arrayName) : null), component, allScalars);
    return ret;
  }

  public int AddHighpassIntervalSet(double xmin, int assoc, string arrayName, int component, int allScalars) {
    auto ret = vtkd_im.vtkMultiThreshold_AddHighpassIntervalSet(cast(void*)swigCPtr, xmin, assoc, (arrayName ? std.string.toStringz(arrayName) : null), component, allScalars);
    return ret;
  }

  public int AddBandpassIntervalSet(double xmin, double xmax, int assoc, string arrayName, int component, int allScalars) {
    auto ret = vtkd_im.vtkMultiThreshold_AddBandpassIntervalSet(cast(void*)swigCPtr, xmin, xmax, assoc, (arrayName ? std.string.toStringz(arrayName) : null), component, allScalars);
    return ret;
  }

  public int AddNotchIntervalSet(double xlo, double xhi, int assoc, string arrayName, int component, int allScalars) {
    auto ret = vtkd_im.vtkMultiThreshold_AddNotchIntervalSet(cast(void*)swigCPtr, xlo, xhi, assoc, (arrayName ? std.string.toStringz(arrayName) : null), component, allScalars);
    return ret;
  }

  public int AddBooleanSet(int operation, int numInputs, int* inputs) {
    auto ret = vtkd_im.vtkMultiThreshold_AddBooleanSet(cast(void*)swigCPtr, operation, numInputs, cast(void*)inputs);
    return ret;
  }

  public int OutputSet(int setId) {
    auto ret = vtkd_im.vtkMultiThreshold_OutputSet(cast(void*)swigCPtr, setId);
    return ret;
  }

  public void Reset() {
    vtkd_im.vtkMultiThreshold_Reset(cast(void*)swigCPtr);
  }
}
