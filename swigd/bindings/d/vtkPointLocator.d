/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPointLocator;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_int;
static import SWIGTYPE_p_double;
static import vtkPoints;
static import vtkIdList;
static import vtkIncrementalPointLocator;

class vtkPointLocator : vtkIncrementalPointLocator.vtkIncrementalPointLocator {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPointLocator_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPointLocator obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkPointLocator New() {
    void* cPtr = vtkd_im.vtkPointLocator_New();
    vtkPointLocator ret = (cPtr is null) ? null : new vtkPointLocator(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPointLocator_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPointLocator SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPointLocator_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPointLocator ret = (cPtr is null) ? null : new vtkPointLocator(cPtr, false);
    return ret;
  }

  public vtkPointLocator NewInstance() const {
    void* cPtr = vtkd_im.vtkPointLocator_NewInstance(cast(void*)swigCPtr);
    vtkPointLocator ret = (cPtr is null) ? null : new vtkPointLocator(cPtr, false);
    return ret;
  }

  alias vtkIncrementalPointLocator.vtkIncrementalPointLocator.NewInstance NewInstance;

  public void SetDivisions(int _arg1, int _arg2, int _arg3) {
    vtkd_im.vtkPointLocator_SetDivisions__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetDivisions(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkPointLocator_SetDivisions__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public int* GetDivisions() {
    auto ret = cast(int*)vtkd_im.vtkPointLocator_GetDivisions__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetDivisions(SWIGTYPE_p_int.SWIGTYPE_p_int data) {
    vtkd_im.vtkPointLocator_GetDivisions__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(data));
  }

  public void SetNumberOfPointsPerBucket(int _arg) {
    vtkd_im.vtkPointLocator_SetNumberOfPointsPerBucket(cast(void*)swigCPtr, _arg);
  }

  public int GetNumberOfPointsPerBucketMinValue() {
    auto ret = vtkd_im.vtkPointLocator_GetNumberOfPointsPerBucketMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfPointsPerBucketMaxValue() {
    auto ret = vtkd_im.vtkPointLocator_GetNumberOfPointsPerBucketMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfPointsPerBucket() {
    auto ret = vtkd_im.vtkPointLocator_GetNumberOfPointsPerBucket(cast(void*)swigCPtr);
    return ret;
  }

  public override long FindClosestPointWithinRadius(double radius, SWIGTYPE_p_double.SWIGTYPE_p_double x, double* dist2) {
    auto ret = vtkd_im.vtkPointLocator_FindClosestPointWithinRadius__SWIG_0(cast(void*)swigCPtr, radius, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), cast(void*)dist2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public long FindClosestPointWithinRadius(double radius, SWIGTYPE_p_double.SWIGTYPE_p_double x, double inputDataLength, double* dist2) {
    auto ret = vtkd_im.vtkPointLocator_FindClosestPointWithinRadius__SWIG_1(cast(void*)swigCPtr, radius, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), inputDataLength, cast(void*)dist2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public override int InitPointInsertion(vtkPoints.vtkPoints newPts, SWIGTYPE_p_double.SWIGTYPE_p_double bounds) {
    auto ret = vtkd_im.vtkPointLocator_InitPointInsertion__SWIG_0(cast(void*)swigCPtr, vtkPoints.vtkPoints.swigGetCPtr(newPts), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
    return ret;
  }

  public override int InitPointInsertion(vtkPoints.vtkPoints newPts, SWIGTYPE_p_double.SWIGTYPE_p_double bounds, long estSize) {
    auto ret = vtkd_im.vtkPointLocator_InitPointInsertion__SWIG_1(cast(void*)swigCPtr, vtkPoints.vtkPoints.swigGetCPtr(newPts), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds), estSize);
    return ret;
  }

  public override long IsInsertedPoint(double x, double y, double z) {
    auto ret = vtkd_im.vtkPointLocator_IsInsertedPoint__SWIG_0(cast(void*)swigCPtr, x, y, z);
    return ret;
  }

  public override long IsInsertedPoint(SWIGTYPE_p_double.SWIGTYPE_p_double x) {
    auto ret = vtkd_im.vtkPointLocator_IsInsertedPoint__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x));
    return ret;
  }

  public void FindDistributedPoints(int N, SWIGTYPE_p_double.SWIGTYPE_p_double x, vtkIdList.vtkIdList result, int M) {
    vtkd_im.vtkPointLocator_FindDistributedPoints__SWIG_0(cast(void*)swigCPtr, N, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), vtkIdList.vtkIdList.swigGetCPtr(result), M);
  }

  public void FindDistributedPoints(int N, double x, double y, double z, vtkIdList.vtkIdList result, int M) {
    vtkd_im.vtkPointLocator_FindDistributedPoints__SWIG_1(cast(void*)swigCPtr, N, x, y, z, vtkIdList.vtkIdList.swigGetCPtr(result), M);
  }

  public vtkIdList.vtkIdList GetPointsInBucket(SWIGTYPE_p_double.SWIGTYPE_p_double x, SWIGTYPE_p_int.SWIGTYPE_p_int ijk) {
    void* cPtr = vtkd_im.vtkPointLocator_GetPointsInBucket(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(ijk));
    vtkIdList.vtkIdList ret = (cPtr is null) ? null : new vtkIdList.vtkIdList(cPtr, false);
    return ret;
  }

  public vtkPoints.vtkPoints GetPoints() {
    void* cPtr = vtkd_im.vtkPointLocator_GetPoints(cast(void*)swigCPtr);
    vtkPoints.vtkPoints ret = (cPtr is null) ? null : new vtkPoints.vtkPoints(cPtr, false);
    return ret;
  }
}
