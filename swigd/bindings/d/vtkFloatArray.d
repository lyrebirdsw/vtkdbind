/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkFloatArray;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkFloatDataArrayTemplateT;

class vtkFloatArray : vtkFloatDataArrayTemplateT.vtkFloatDataArrayTemplateT {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkFloatArray_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkFloatArray obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkFloatArray New() {
    void* cPtr = vtkd_im.vtkFloatArray_New();
    vtkFloatArray ret = (cPtr is null) ? null : new vtkFloatArray(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkFloatArray_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkFloatArray SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkFloatArray_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkFloatArray ret = (cPtr is null) ? null : new vtkFloatArray(cPtr, false);
    return ret;
  }

  public vtkFloatArray NewInstance() const {
    void* cPtr = vtkd_im.vtkFloatArray_NewInstance(cast(void*)swigCPtr);
    vtkFloatArray ret = (cPtr is null) ? null : new vtkFloatArray(cPtr, false);
    return ret;
  }

  public void GetTupleValue(long i, float* tuple) {
    vtkd_im.vtkFloatArray_GetTupleValue(cast(void*)swigCPtr, i, cast(void*)tuple);
  }

  alias vtkFloatDataArrayTemplateT.vtkFloatDataArrayTemplateT.GetTupleValue GetTupleValue;

  public void SetTupleValue(long i, float* tuple) {
    vtkd_im.vtkFloatArray_SetTupleValue(cast(void*)swigCPtr, i, cast(void*)tuple);
  }

  alias vtkFloatDataArrayTemplateT.vtkFloatDataArrayTemplateT.SetTupleValue SetTupleValue;

  public void InsertTupleValue(long i, float* tuple) {
    vtkd_im.vtkFloatArray_InsertTupleValue(cast(void*)swigCPtr, i, cast(void*)tuple);
  }

  alias vtkFloatDataArrayTemplateT.vtkFloatDataArrayTemplateT.InsertTupleValue InsertTupleValue;

  public long InsertNextTupleValue(float* tuple) {
    auto ret = vtkd_im.vtkFloatArray_InsertNextTupleValue(cast(void*)swigCPtr, cast(void*)tuple);
    return ret;
  }

  alias vtkFloatDataArrayTemplateT.vtkFloatDataArrayTemplateT.InsertNextTupleValue InsertNextTupleValue;

  public float GetValue(long id) {
    auto ret = vtkd_im.vtkFloatArray_GetValue(cast(void*)swigCPtr, id);
    return ret;
  }

  alias vtkFloatDataArrayTemplateT.vtkFloatDataArrayTemplateT.GetValue GetValue;

  public void SetValue(long id, float value) {
    vtkd_im.vtkFloatArray_SetValue(cast(void*)swigCPtr, id, value);
  }

  alias vtkFloatDataArrayTemplateT.vtkFloatDataArrayTemplateT.SetValue SetValue;

  public void SetNumberOfValues(long number) {
    vtkd_im.vtkFloatArray_SetNumberOfValues(cast(void*)swigCPtr, number);
  }

  alias vtkFloatDataArrayTemplateT.vtkFloatDataArrayTemplateT.SetNumberOfValues SetNumberOfValues;

  public void InsertValue(long id, float f) {
    vtkd_im.vtkFloatArray_InsertValue(cast(void*)swigCPtr, id, f);
  }

  alias vtkFloatDataArrayTemplateT.vtkFloatDataArrayTemplateT.InsertValue InsertValue;

  public long InsertNextValue(float f) {
    auto ret = vtkd_im.vtkFloatArray_InsertNextValue(cast(void*)swigCPtr, f);
    return ret;
  }

  alias vtkFloatDataArrayTemplateT.vtkFloatDataArrayTemplateT.InsertNextValue InsertNextValue;

  public float* GetValueRange(int comp) {
    auto ret = cast(float*)vtkd_im.vtkFloatArray_GetValueRange__SWIG_0(cast(void*)swigCPtr, comp);
    return ret;
  }

  public float* GetValueRange() {
    auto ret = cast(float*)vtkd_im.vtkFloatArray_GetValueRange__SWIG_1(cast(void*)swigCPtr);
    return ret;
  }

  alias vtkFloatDataArrayTemplateT.vtkFloatDataArrayTemplateT.GetValueRange GetValueRange;

  public static float GetDataTypeValueMin() {
    auto ret = vtkd_im.vtkFloatArray_GetDataTypeValueMin();
    return ret;
  }

  public static float GetDataTypeValueMax() {
    auto ret = vtkd_im.vtkFloatArray_GetDataTypeValueMax();
    return ret;
  }

  public float* WritePointer(long id, long number) {
    auto ret = cast(float*)vtkd_im.vtkFloatArray_WritePointer(cast(void*)swigCPtr, id, number);
    return ret;
  }

  alias vtkFloatDataArrayTemplateT.vtkFloatDataArrayTemplateT.WritePointer WritePointer;

  public float* GetPointer(long id) {
    auto ret = cast(float*)vtkd_im.vtkFloatArray_GetPointer(cast(void*)swigCPtr, id);
    return ret;
  }

  alias vtkFloatDataArrayTemplateT.vtkFloatDataArrayTemplateT.GetPointer GetPointer;

  public void SetArray(float* array, long size, int save) {
    vtkd_im.vtkFloatArray_SetArray__SWIG_0(cast(void*)swigCPtr, cast(void*)array, size, save);
  }

  public void SetArray(float* array, long size, int save, int deleteMethod) {
    vtkd_im.vtkFloatArray_SetArray__SWIG_1(cast(void*)swigCPtr, cast(void*)array, size, save, deleteMethod);
  }

  alias vtkFloatDataArrayTemplateT.vtkFloatDataArrayTemplateT.SetArray SetArray;
}
