/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPCAStatistics;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkTable;
static import vtkDoubleArray;
static import vtkMultiCorrelativeStatistics;

class vtkPCAStatistics : vtkMultiCorrelativeStatistics.vtkMultiCorrelativeStatistics {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPCAStatistics_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPCAStatistics obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPCAStatistics_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPCAStatistics SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPCAStatistics_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPCAStatistics ret = (cPtr is null) ? null : new vtkPCAStatistics(cPtr, false);
    return ret;
  }

  public vtkPCAStatistics NewInstance() const {
    void* cPtr = vtkd_im.vtkPCAStatistics_NewInstance(cast(void*)swigCPtr);
    vtkPCAStatistics ret = (cPtr is null) ? null : new vtkPCAStatistics(cPtr, false);
    return ret;
  }

  alias vtkMultiCorrelativeStatistics.vtkMultiCorrelativeStatistics.NewInstance NewInstance;

  public static vtkPCAStatistics New() {
    void* cPtr = vtkd_im.vtkPCAStatistics_New();
    vtkPCAStatistics ret = (cPtr is null) ? null : new vtkPCAStatistics(cPtr, false);
    return ret;
  }

  public void SetNormalizationScheme(int _arg) {
    vtkd_im.vtkPCAStatistics_SetNormalizationScheme(cast(void*)swigCPtr, _arg);
  }

  public int GetNormalizationScheme() {
    auto ret = vtkd_im.vtkPCAStatistics_GetNormalizationScheme(cast(void*)swigCPtr);
    return ret;
  }

  public void SetNormalizationSchemeByName(string sname) {
    vtkd_im.vtkPCAStatistics_SetNormalizationSchemeByName(cast(void*)swigCPtr, (sname ? std.string.toStringz(sname) : null));
  }

  public string GetNormalizationSchemeName(int scheme) {
    string ret = std.conv.to!string(vtkd_im.vtkPCAStatistics_GetNormalizationSchemeName(cast(void*)swigCPtr, scheme));
    return ret;
  }

  public vtkTable.vtkTable GetSpecifiedNormalization() {
    void* cPtr = vtkd_im.vtkPCAStatistics_GetSpecifiedNormalization(cast(void*)swigCPtr);
    vtkTable.vtkTable ret = (cPtr is null) ? null : new vtkTable.vtkTable(cPtr, false);
    return ret;
  }

  public void SetSpecifiedNormalization(vtkTable.vtkTable arg0) {
    vtkd_im.vtkPCAStatistics_SetSpecifiedNormalization(cast(void*)swigCPtr, vtkTable.vtkTable.swigGetCPtr(arg0));
  }

  public void GetEigenvalues(int request, vtkDoubleArray.vtkDoubleArray arg1) {
    vtkd_im.vtkPCAStatistics_GetEigenvalues__SWIG_0(cast(void*)swigCPtr, request, vtkDoubleArray.vtkDoubleArray.swigGetCPtr(arg1));
  }

  public void GetEigenvalues(vtkDoubleArray.vtkDoubleArray arg0) {
    vtkd_im.vtkPCAStatistics_GetEigenvalues__SWIG_1(cast(void*)swigCPtr, vtkDoubleArray.vtkDoubleArray.swigGetCPtr(arg0));
  }

  public double GetEigenvalue(int request, int i) {
    auto ret = vtkd_im.vtkPCAStatistics_GetEigenvalue__SWIG_0(cast(void*)swigCPtr, request, i);
    return ret;
  }

  public double GetEigenvalue(int i) {
    auto ret = vtkd_im.vtkPCAStatistics_GetEigenvalue__SWIG_1(cast(void*)swigCPtr, i);
    return ret;
  }

  public void GetEigenvectors(int request, vtkDoubleArray.vtkDoubleArray eigenvectors) {
    vtkd_im.vtkPCAStatistics_GetEigenvectors__SWIG_0(cast(void*)swigCPtr, request, vtkDoubleArray.vtkDoubleArray.swigGetCPtr(eigenvectors));
  }

  public void GetEigenvectors(vtkDoubleArray.vtkDoubleArray eigenvectors) {
    vtkd_im.vtkPCAStatistics_GetEigenvectors__SWIG_1(cast(void*)swigCPtr, vtkDoubleArray.vtkDoubleArray.swigGetCPtr(eigenvectors));
  }

  public void GetEigenvector(int i, vtkDoubleArray.vtkDoubleArray eigenvector) {
    vtkd_im.vtkPCAStatistics_GetEigenvector__SWIG_0(cast(void*)swigCPtr, i, vtkDoubleArray.vtkDoubleArray.swigGetCPtr(eigenvector));
  }

  public void GetEigenvector(int request, int i, vtkDoubleArray.vtkDoubleArray eigenvector) {
    vtkd_im.vtkPCAStatistics_GetEigenvector__SWIG_1(cast(void*)swigCPtr, request, i, vtkDoubleArray.vtkDoubleArray.swigGetCPtr(eigenvector));
  }

  public void SetBasisScheme(int _arg) {
    vtkd_im.vtkPCAStatistics_SetBasisScheme(cast(void*)swigCPtr, _arg);
  }

  public int GetBasisScheme() {
    auto ret = vtkd_im.vtkPCAStatistics_GetBasisScheme(cast(void*)swigCPtr);
    return ret;
  }

  public string GetBasisSchemeName(int schemeIndex) {
    string ret = std.conv.to!string(vtkd_im.vtkPCAStatistics_GetBasisSchemeName(cast(void*)swigCPtr, schemeIndex));
    return ret;
  }

  public void SetBasisSchemeByName(string schemeName) {
    vtkd_im.vtkPCAStatistics_SetBasisSchemeByName(cast(void*)swigCPtr, (schemeName ? std.string.toStringz(schemeName) : null));
  }

  public void SetFixedBasisSize(int _arg) {
    vtkd_im.vtkPCAStatistics_SetFixedBasisSize(cast(void*)swigCPtr, _arg);
  }

  public int GetFixedBasisSize() {
    auto ret = vtkd_im.vtkPCAStatistics_GetFixedBasisSize(cast(void*)swigCPtr);
    return ret;
  }

  public void SetFixedBasisEnergy(double _arg) {
    vtkd_im.vtkPCAStatistics_SetFixedBasisEnergy(cast(void*)swigCPtr, _arg);
  }

  public double GetFixedBasisEnergyMinValue() {
    auto ret = vtkd_im.vtkPCAStatistics_GetFixedBasisEnergyMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetFixedBasisEnergyMaxValue() {
    auto ret = vtkd_im.vtkPCAStatistics_GetFixedBasisEnergyMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetFixedBasisEnergy() {
    auto ret = vtkd_im.vtkPCAStatistics_GetFixedBasisEnergy(cast(void*)swigCPtr);
    return ret;
  }
}
