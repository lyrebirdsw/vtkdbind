/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkDummyController;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkCommunicator;
static import vtkMultiProcessController;

class vtkDummyController : vtkMultiProcessController.vtkMultiProcessController {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkDummyController_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkDummyController obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkDummyController New() {
    void* cPtr = vtkd_im.vtkDummyController_New();
    vtkDummyController ret = (cPtr is null) ? null : new vtkDummyController(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkDummyController_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkDummyController SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkDummyController_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkDummyController ret = (cPtr is null) ? null : new vtkDummyController(cPtr, false);
    return ret;
  }

  public vtkDummyController NewInstance() const {
    void* cPtr = vtkd_im.vtkDummyController_NewInstance(cast(void*)swigCPtr);
    vtkDummyController ret = (cPtr is null) ? null : new vtkDummyController(cPtr, false);
    return ret;
  }

  alias vtkMultiProcessController.vtkMultiProcessController.NewInstance NewInstance;

  public override void Initialize(int* arg0, char*** arg1, int arg2) {
    vtkd_im.vtkDummyController_Initialize__SWIG_0(cast(void*)swigCPtr, cast(void*)arg0, cast(void*)arg1, arg2);
  }

  public override void Initialize(int* arg0, char*** arg1) {
    vtkd_im.vtkDummyController_Initialize__SWIG_1(cast(void*)swigCPtr, cast(void*)arg0, cast(void*)arg1);
  }

  public override void Finalize() {
    vtkd_im.vtkDummyController_Finalize__SWIG_0(cast(void*)swigCPtr);
  }

  public override void Finalize(int arg0) {
    vtkd_im.vtkDummyController_Finalize__SWIG_1(cast(void*)swigCPtr, arg0);
  }

  public int GetLocalProcessId() {
    auto ret = vtkd_im.vtkDummyController_GetLocalProcessId(cast(void*)swigCPtr);
    return ret;
  }

  alias vtkMultiProcessController.vtkMultiProcessController.GetLocalProcessId GetLocalProcessId;

  public vtkCommunicator.vtkCommunicator GetRMICommunicator() {
    void* cPtr = vtkd_im.vtkDummyController_GetRMICommunicator(cast(void*)swigCPtr);
    vtkCommunicator.vtkCommunicator ret = (cPtr is null) ? null : new vtkCommunicator.vtkCommunicator(cPtr, false);
    return ret;
  }

  public void SetCommunicator(vtkCommunicator.vtkCommunicator arg0) {
    vtkd_im.vtkDummyController_SetCommunicator(cast(void*)swigCPtr, vtkCommunicator.vtkCommunicator.swigGetCPtr(arg0));
  }

  public void SetRMICommunicator(vtkCommunicator.vtkCommunicator arg0) {
    vtkd_im.vtkDummyController_SetRMICommunicator(cast(void*)swigCPtr, vtkCommunicator.vtkCommunicator.swigGetCPtr(arg0));
  }
}
