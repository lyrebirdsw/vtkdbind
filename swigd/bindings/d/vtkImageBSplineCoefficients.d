/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkImageBSplineCoefficients;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkThreadedImageAlgorithm;

class vtkImageBSplineCoefficients : vtkThreadedImageAlgorithm.vtkThreadedImageAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkImageBSplineCoefficients_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkImageBSplineCoefficients obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkImageBSplineCoefficients New() {
    void* cPtr = vtkd_im.vtkImageBSplineCoefficients_New();
    vtkImageBSplineCoefficients ret = (cPtr is null) ? null : new vtkImageBSplineCoefficients(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkImageBSplineCoefficients_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkImageBSplineCoefficients SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkImageBSplineCoefficients_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkImageBSplineCoefficients ret = (cPtr is null) ? null : new vtkImageBSplineCoefficients(cPtr, false);
    return ret;
  }

  public vtkImageBSplineCoefficients NewInstance() const {
    void* cPtr = vtkd_im.vtkImageBSplineCoefficients_NewInstance(cast(void*)swigCPtr);
    vtkImageBSplineCoefficients ret = (cPtr is null) ? null : new vtkImageBSplineCoefficients(cPtr, false);
    return ret;
  }

  alias vtkThreadedImageAlgorithm.vtkThreadedImageAlgorithm.NewInstance NewInstance;

  public void SetSplineDegree(int _arg) {
    vtkd_im.vtkImageBSplineCoefficients_SetSplineDegree(cast(void*)swigCPtr, _arg);
  }

  public int GetSplineDegreeMinValue() {
    auto ret = vtkd_im.vtkImageBSplineCoefficients_GetSplineDegreeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetSplineDegreeMaxValue() {
    auto ret = vtkd_im.vtkImageBSplineCoefficients_GetSplineDegreeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetSplineDegree() {
    auto ret = vtkd_im.vtkImageBSplineCoefficients_GetSplineDegree(cast(void*)swigCPtr);
    return ret;
  }

  public void SetBorderMode(int _arg) {
    vtkd_im.vtkImageBSplineCoefficients_SetBorderMode(cast(void*)swigCPtr, _arg);
  }

  public int GetBorderModeMinValue() {
    auto ret = vtkd_im.vtkImageBSplineCoefficients_GetBorderModeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetBorderModeMaxValue() {
    auto ret = vtkd_im.vtkImageBSplineCoefficients_GetBorderModeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public void SetBorderModeToClamp() {
    vtkd_im.vtkImageBSplineCoefficients_SetBorderModeToClamp(cast(void*)swigCPtr);
  }

  public void SetBorderModeToRepeat() {
    vtkd_im.vtkImageBSplineCoefficients_SetBorderModeToRepeat(cast(void*)swigCPtr);
  }

  public void SetBorderModeToMirror() {
    vtkd_im.vtkImageBSplineCoefficients_SetBorderModeToMirror(cast(void*)swigCPtr);
  }

  public int GetBorderMode() {
    auto ret = vtkd_im.vtkImageBSplineCoefficients_GetBorderMode(cast(void*)swigCPtr);
    return ret;
  }

  public string GetBorderModeAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkImageBSplineCoefficients_GetBorderModeAsString(cast(void*)swigCPtr));
    return ret;
  }

  public void SetOutputScalarType(int _arg) {
    vtkd_im.vtkImageBSplineCoefficients_SetOutputScalarType(cast(void*)swigCPtr, _arg);
  }

  public int GetOutputScalarTypeMinValue() {
    auto ret = vtkd_im.vtkImageBSplineCoefficients_GetOutputScalarTypeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetOutputScalarTypeMaxValue() {
    auto ret = vtkd_im.vtkImageBSplineCoefficients_GetOutputScalarTypeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetOutputScalarType() {
    auto ret = vtkd_im.vtkImageBSplineCoefficients_GetOutputScalarType(cast(void*)swigCPtr);
    return ret;
  }

  public void SetOutputScalarTypeToFloat() {
    vtkd_im.vtkImageBSplineCoefficients_SetOutputScalarTypeToFloat(cast(void*)swigCPtr);
  }

  public void SetOutputScalarTypeToDouble() {
    vtkd_im.vtkImageBSplineCoefficients_SetOutputScalarTypeToDouble(cast(void*)swigCPtr);
  }

  public string GetOutputScalarTypeAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkImageBSplineCoefficients_GetOutputScalarTypeAsString(cast(void*)swigCPtr));
    return ret;
  }

  public void SetBypass(int _arg) {
    vtkd_im.vtkImageBSplineCoefficients_SetBypass(cast(void*)swigCPtr, _arg);
  }

  public void BypassOn() {
    vtkd_im.vtkImageBSplineCoefficients_BypassOn(cast(void*)swigCPtr);
  }

  public void BypassOff() {
    vtkd_im.vtkImageBSplineCoefficients_BypassOff(cast(void*)swigCPtr);
  }

  public int GetBypass() {
    auto ret = vtkd_im.vtkImageBSplineCoefficients_GetBypass(cast(void*)swigCPtr);
    return ret;
  }

  public int CheckBounds(SWIGTYPE_p_double.SWIGTYPE_p_double point) {
    auto ret = vtkd_im.vtkImageBSplineCoefficients_CheckBounds(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(point));
    return ret;
  }

  public void Evaluate(SWIGTYPE_p_double.SWIGTYPE_p_double point, double* value) {
    vtkd_im.vtkImageBSplineCoefficients_Evaluate__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(point), cast(void*)value);
  }

  public double Evaluate(double x, double y, double z) {
    auto ret = vtkd_im.vtkImageBSplineCoefficients_Evaluate__SWIG_1(cast(void*)swigCPtr, x, y, z);
    return ret;
  }

  public double Evaluate(SWIGTYPE_p_double.SWIGTYPE_p_double point) {
    auto ret = vtkd_im.vtkImageBSplineCoefficients_Evaluate__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(point));
    return ret;
  }
}
