/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkDelimitedTextReader;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkUnicodeString;
static import vtkStdString;
static import vtkTableAlgorithm;

class vtkDelimitedTextReader : vtkTableAlgorithm.vtkTableAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkDelimitedTextReader_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkDelimitedTextReader obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkDelimitedTextReader(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkDelimitedTextReader New() {
    void* cPtr = vtkd_im.vtkDelimitedTextReader_New();
    vtkDelimitedTextReader ret = (cPtr is null) ? null : new vtkDelimitedTextReader(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkDelimitedTextReader_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkDelimitedTextReader SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkDelimitedTextReader_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkDelimitedTextReader ret = (cPtr is null) ? null : new vtkDelimitedTextReader(cPtr, false);
    return ret;
  }

  public vtkDelimitedTextReader NewInstance() const {
    void* cPtr = vtkd_im.vtkDelimitedTextReader_NewInstance(cast(void*)swigCPtr);
    vtkDelimitedTextReader ret = (cPtr is null) ? null : new vtkDelimitedTextReader(cPtr, false);
    return ret;
  }

  alias vtkTableAlgorithm.vtkTableAlgorithm.NewInstance NewInstance;

  public string GetFileName() {
    string ret = std.conv.to!string(vtkd_im.vtkDelimitedTextReader_GetFileName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetFileName(string _arg) {
    vtkd_im.vtkDelimitedTextReader_SetFileName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetUnicodeCharacterSet() {
    string ret = std.conv.to!string(vtkd_im.vtkDelimitedTextReader_GetUnicodeCharacterSet(cast(void*)swigCPtr));
    return ret;
  }

  public void SetUnicodeCharacterSet(string _arg) {
    vtkd_im.vtkDelimitedTextReader_SetUnicodeCharacterSet(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public void SetUTF8RecordDelimiters(string delimiters) {
    vtkd_im.vtkDelimitedTextReader_SetUTF8RecordDelimiters(cast(void*)swigCPtr, (delimiters ? std.string.toStringz(delimiters) : null));
  }

  public string GetUTF8RecordDelimiters() {
    string ret = std.conv.to!string(vtkd_im.vtkDelimitedTextReader_GetUTF8RecordDelimiters(cast(void*)swigCPtr));
    return ret;
  }

  public void SetUnicodeRecordDelimiters(vtkUnicodeString.vtkUnicodeString delimiters) {
    vtkd_im.vtkDelimitedTextReader_SetUnicodeRecordDelimiters(cast(void*)swigCPtr, vtkUnicodeString.vtkUnicodeString.swigGetCPtr(delimiters));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public vtkUnicodeString.vtkUnicodeString GetUnicodeRecordDelimiters() {
    vtkUnicodeString.vtkUnicodeString ret = new vtkUnicodeString.vtkUnicodeString(vtkd_im.vtkDelimitedTextReader_GetUnicodeRecordDelimiters(cast(void*)swigCPtr), true);
    return ret;
  }

  public void SetFieldDelimiterCharacters(string _arg) {
    vtkd_im.vtkDelimitedTextReader_SetFieldDelimiterCharacters(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetFieldDelimiterCharacters() {
    string ret = std.conv.to!string(vtkd_im.vtkDelimitedTextReader_GetFieldDelimiterCharacters(cast(void*)swigCPtr));
    return ret;
  }

  public void SetUTF8FieldDelimiters(string delimiters) {
    vtkd_im.vtkDelimitedTextReader_SetUTF8FieldDelimiters(cast(void*)swigCPtr, (delimiters ? std.string.toStringz(delimiters) : null));
  }

  public string GetUTF8FieldDelimiters() {
    string ret = std.conv.to!string(vtkd_im.vtkDelimitedTextReader_GetUTF8FieldDelimiters(cast(void*)swigCPtr));
    return ret;
  }

  public void SetUnicodeFieldDelimiters(vtkUnicodeString.vtkUnicodeString delimiters) {
    vtkd_im.vtkDelimitedTextReader_SetUnicodeFieldDelimiters(cast(void*)swigCPtr, vtkUnicodeString.vtkUnicodeString.swigGetCPtr(delimiters));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public vtkUnicodeString.vtkUnicodeString GetUnicodeFieldDelimiters() {
    vtkUnicodeString.vtkUnicodeString ret = new vtkUnicodeString.vtkUnicodeString(vtkd_im.vtkDelimitedTextReader_GetUnicodeFieldDelimiters(cast(void*)swigCPtr), true);
    return ret;
  }

  public char GetStringDelimiter() {
    auto ret = vtkd_im.vtkDelimitedTextReader_GetStringDelimiter(cast(void*)swigCPtr);
    return ret;
  }

  public void SetStringDelimiter(char _arg) {
    vtkd_im.vtkDelimitedTextReader_SetStringDelimiter(cast(void*)swigCPtr, _arg);
  }

  public void SetUTF8StringDelimiters(string delimiters) {
    vtkd_im.vtkDelimitedTextReader_SetUTF8StringDelimiters(cast(void*)swigCPtr, (delimiters ? std.string.toStringz(delimiters) : null));
  }

  public string GetUTF8StringDelimiters() {
    string ret = std.conv.to!string(vtkd_im.vtkDelimitedTextReader_GetUTF8StringDelimiters(cast(void*)swigCPtr));
    return ret;
  }

  public void SetUnicodeStringDelimiters(vtkUnicodeString.vtkUnicodeString delimiters) {
    vtkd_im.vtkDelimitedTextReader_SetUnicodeStringDelimiters(cast(void*)swigCPtr, vtkUnicodeString.vtkUnicodeString.swigGetCPtr(delimiters));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public vtkUnicodeString.vtkUnicodeString GetUnicodeStringDelimiters() {
    vtkUnicodeString.vtkUnicodeString ret = new vtkUnicodeString.vtkUnicodeString(vtkd_im.vtkDelimitedTextReader_GetUnicodeStringDelimiters(cast(void*)swigCPtr), true);
    return ret;
  }

  public void SetUseStringDelimiter(bool _arg) {
    vtkd_im.vtkDelimitedTextReader_SetUseStringDelimiter(cast(void*)swigCPtr, _arg);
  }

  public bool GetUseStringDelimiter() {
    bool ret = vtkd_im.vtkDelimitedTextReader_GetUseStringDelimiter(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void UseStringDelimiterOn() {
    vtkd_im.vtkDelimitedTextReader_UseStringDelimiterOn(cast(void*)swigCPtr);
  }

  public void UseStringDelimiterOff() {
    vtkd_im.vtkDelimitedTextReader_UseStringDelimiterOff(cast(void*)swigCPtr);
  }

  public bool GetHaveHeaders() {
    bool ret = vtkd_im.vtkDelimitedTextReader_GetHaveHeaders(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetHaveHeaders(bool _arg) {
    vtkd_im.vtkDelimitedTextReader_SetHaveHeaders(cast(void*)swigCPtr, _arg);
  }

  public void SetMergeConsecutiveDelimiters(bool _arg) {
    vtkd_im.vtkDelimitedTextReader_SetMergeConsecutiveDelimiters(cast(void*)swigCPtr, _arg);
  }

  public bool GetMergeConsecutiveDelimiters() {
    bool ret = vtkd_im.vtkDelimitedTextReader_GetMergeConsecutiveDelimiters(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void MergeConsecutiveDelimitersOn() {
    vtkd_im.vtkDelimitedTextReader_MergeConsecutiveDelimitersOn(cast(void*)swigCPtr);
  }

  public void MergeConsecutiveDelimitersOff() {
    vtkd_im.vtkDelimitedTextReader_MergeConsecutiveDelimitersOff(cast(void*)swigCPtr);
  }

  public long GetMaxRecords() {
    auto ret = vtkd_im.vtkDelimitedTextReader_GetMaxRecords(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMaxRecords(long _arg) {
    vtkd_im.vtkDelimitedTextReader_SetMaxRecords(cast(void*)swigCPtr, _arg);
  }

  public void SetDetectNumericColumns(bool _arg) {
    vtkd_im.vtkDelimitedTextReader_SetDetectNumericColumns(cast(void*)swigCPtr, _arg);
  }

  public bool GetDetectNumericColumns() {
    bool ret = vtkd_im.vtkDelimitedTextReader_GetDetectNumericColumns(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void DetectNumericColumnsOn() {
    vtkd_im.vtkDelimitedTextReader_DetectNumericColumnsOn(cast(void*)swigCPtr);
  }

  public void DetectNumericColumnsOff() {
    vtkd_im.vtkDelimitedTextReader_DetectNumericColumnsOff(cast(void*)swigCPtr);
  }

  public void SetForceDouble(bool _arg) {
    vtkd_im.vtkDelimitedTextReader_SetForceDouble(cast(void*)swigCPtr, _arg);
  }

  public bool GetForceDouble() {
    bool ret = vtkd_im.vtkDelimitedTextReader_GetForceDouble(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void ForceDoubleOn() {
    vtkd_im.vtkDelimitedTextReader_ForceDoubleOn(cast(void*)swigCPtr);
  }

  public void ForceDoubleOff() {
    vtkd_im.vtkDelimitedTextReader_ForceDoubleOff(cast(void*)swigCPtr);
  }

  public void SetTrimWhitespacePriorToNumericConversion(bool _arg) {
    vtkd_im.vtkDelimitedTextReader_SetTrimWhitespacePriorToNumericConversion(cast(void*)swigCPtr, _arg);
  }

  public bool GetTrimWhitespacePriorToNumericConversion() {
    bool ret = vtkd_im.vtkDelimitedTextReader_GetTrimWhitespacePriorToNumericConversion(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void TrimWhitespacePriorToNumericConversionOn() {
    vtkd_im.vtkDelimitedTextReader_TrimWhitespacePriorToNumericConversionOn(cast(void*)swigCPtr);
  }

  public void TrimWhitespacePriorToNumericConversionOff() {
    vtkd_im.vtkDelimitedTextReader_TrimWhitespacePriorToNumericConversionOff(cast(void*)swigCPtr);
  }

  public void SetDefaultIntegerValue(int _arg) {
    vtkd_im.vtkDelimitedTextReader_SetDefaultIntegerValue(cast(void*)swigCPtr, _arg);
  }

  public int GetDefaultIntegerValue() {
    auto ret = vtkd_im.vtkDelimitedTextReader_GetDefaultIntegerValue(cast(void*)swigCPtr);
    return ret;
  }

  public void SetDefaultDoubleValue(double _arg) {
    vtkd_im.vtkDelimitedTextReader_SetDefaultDoubleValue(cast(void*)swigCPtr, _arg);
  }

  public double GetDefaultDoubleValue() {
    auto ret = vtkd_im.vtkDelimitedTextReader_GetDefaultDoubleValue(cast(void*)swigCPtr);
    return ret;
  }

  public void SetPedigreeIdArrayName(string _arg) {
    vtkd_im.vtkDelimitedTextReader_SetPedigreeIdArrayName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetPedigreeIdArrayName() {
    string ret = std.conv.to!string(vtkd_im.vtkDelimitedTextReader_GetPedigreeIdArrayName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetGeneratePedigreeIds(bool _arg) {
    vtkd_im.vtkDelimitedTextReader_SetGeneratePedigreeIds(cast(void*)swigCPtr, _arg);
  }

  public bool GetGeneratePedigreeIds() {
    bool ret = vtkd_im.vtkDelimitedTextReader_GetGeneratePedigreeIds(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void GeneratePedigreeIdsOn() {
    vtkd_im.vtkDelimitedTextReader_GeneratePedigreeIdsOn(cast(void*)swigCPtr);
  }

  public void GeneratePedigreeIdsOff() {
    vtkd_im.vtkDelimitedTextReader_GeneratePedigreeIdsOff(cast(void*)swigCPtr);
  }

  public void SetOutputPedigreeIds(bool _arg) {
    vtkd_im.vtkDelimitedTextReader_SetOutputPedigreeIds(cast(void*)swigCPtr, _arg);
  }

  public bool GetOutputPedigreeIds() {
    bool ret = vtkd_im.vtkDelimitedTextReader_GetOutputPedigreeIds(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void OutputPedigreeIdsOn() {
    vtkd_im.vtkDelimitedTextReader_OutputPedigreeIdsOn(cast(void*)swigCPtr);
  }

  public void OutputPedigreeIdsOff() {
    vtkd_im.vtkDelimitedTextReader_OutputPedigreeIdsOff(cast(void*)swigCPtr);
  }

  public vtkStdString.vtkStdString GetLastError() {
    vtkStdString.vtkStdString ret = new vtkStdString.vtkStdString(vtkd_im.vtkDelimitedTextReader_GetLastError(cast(void*)swigCPtr), true);
    return ret;
  }

  public void SetReplacementCharacter(uint _arg) {
    vtkd_im.vtkDelimitedTextReader_SetReplacementCharacter(cast(void*)swigCPtr, _arg);
  }

  public uint GetReplacementCharacter() {
    auto ret = vtkd_im.vtkDelimitedTextReader_GetReplacementCharacter(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(vtkd_im.new_vtkDelimitedTextReader(), true);
  }
}
