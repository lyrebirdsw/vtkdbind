/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkX3DExporter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkExporter;

class vtkX3DExporter : vtkExporter.vtkExporter {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkX3DExporter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkX3DExporter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkX3DExporter New() {
    void* cPtr = vtkd_im.vtkX3DExporter_New();
    vtkX3DExporter ret = (cPtr is null) ? null : new vtkX3DExporter(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkX3DExporter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkX3DExporter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkX3DExporter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkX3DExporter ret = (cPtr is null) ? null : new vtkX3DExporter(cPtr, false);
    return ret;
  }

  public vtkX3DExporter NewInstance() const {
    void* cPtr = vtkd_im.vtkX3DExporter_NewInstance(cast(void*)swigCPtr);
    vtkX3DExporter ret = (cPtr is null) ? null : new vtkX3DExporter(cPtr, false);
    return ret;
  }

  alias vtkExporter.vtkExporter.NewInstance NewInstance;

  public void SetFileName(string _arg) {
    vtkd_im.vtkX3DExporter_SetFileName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetFileName() {
    string ret = std.conv.to!string(vtkd_im.vtkX3DExporter_GetFileName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetSpeed(double _arg) {
    vtkd_im.vtkX3DExporter_SetSpeed(cast(void*)swigCPtr, _arg);
  }

  public double GetSpeed() {
    auto ret = vtkd_im.vtkX3DExporter_GetSpeed(cast(void*)swigCPtr);
    return ret;
  }

  public void SetBinary(int _arg) {
    vtkd_im.vtkX3DExporter_SetBinary(cast(void*)swigCPtr, _arg);
  }

  public int GetBinaryMinValue() {
    auto ret = vtkd_im.vtkX3DExporter_GetBinaryMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetBinaryMaxValue() {
    auto ret = vtkd_im.vtkX3DExporter_GetBinaryMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public void BinaryOn() {
    vtkd_im.vtkX3DExporter_BinaryOn(cast(void*)swigCPtr);
  }

  public void BinaryOff() {
    vtkd_im.vtkX3DExporter_BinaryOff(cast(void*)swigCPtr);
  }

  public int GetBinary() {
    auto ret = vtkd_im.vtkX3DExporter_GetBinary(cast(void*)swigCPtr);
    return ret;
  }

  public void SetFastest(int _arg) {
    vtkd_im.vtkX3DExporter_SetFastest(cast(void*)swigCPtr, _arg);
  }

  public int GetFastestMinValue() {
    auto ret = vtkd_im.vtkX3DExporter_GetFastestMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetFastestMaxValue() {
    auto ret = vtkd_im.vtkX3DExporter_GetFastestMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public void FastestOn() {
    vtkd_im.vtkX3DExporter_FastestOn(cast(void*)swigCPtr);
  }

  public void FastestOff() {
    vtkd_im.vtkX3DExporter_FastestOff(cast(void*)swigCPtr);
  }

  public int GetFastest() {
    auto ret = vtkd_im.vtkX3DExporter_GetFastest(cast(void*)swigCPtr);
    return ret;
  }

  public void SetWriteToOutputString(int _arg) {
    vtkd_im.vtkX3DExporter_SetWriteToOutputString(cast(void*)swigCPtr, _arg);
  }

  public int GetWriteToOutputString() {
    auto ret = vtkd_im.vtkX3DExporter_GetWriteToOutputString(cast(void*)swigCPtr);
    return ret;
  }

  public void WriteToOutputStringOn() {
    vtkd_im.vtkX3DExporter_WriteToOutputStringOn(cast(void*)swigCPtr);
  }

  public void WriteToOutputStringOff() {
    vtkd_im.vtkX3DExporter_WriteToOutputStringOff(cast(void*)swigCPtr);
  }

  public int GetOutputStringLength() {
    auto ret = vtkd_im.vtkX3DExporter_GetOutputStringLength(cast(void*)swigCPtr);
    return ret;
  }

  public string GetOutputString() {
    string ret = std.conv.to!string(vtkd_im.vtkX3DExporter_GetOutputString(cast(void*)swigCPtr));
    return ret;
  }

  public ubyte* GetBinaryOutputString() {
    auto ret = cast(ubyte*)vtkd_im.vtkX3DExporter_GetBinaryOutputString(cast(void*)swigCPtr);
    return ret;
  }

  public string RegisterAndGetOutputString() {
    string ret = std.conv.to!string(vtkd_im.vtkX3DExporter_RegisterAndGetOutputString(cast(void*)swigCPtr));
    return ret;
  }
}
