/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkWindowLevelLookupTable;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkLookupTable;

class vtkWindowLevelLookupTable : vtkLookupTable.vtkLookupTable {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkWindowLevelLookupTable_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkWindowLevelLookupTable obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkWindowLevelLookupTable New() {
    void* cPtr = vtkd_im.vtkWindowLevelLookupTable_New();
    vtkWindowLevelLookupTable ret = (cPtr is null) ? null : new vtkWindowLevelLookupTable(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkWindowLevelLookupTable_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkWindowLevelLookupTable SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkWindowLevelLookupTable_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkWindowLevelLookupTable ret = (cPtr is null) ? null : new vtkWindowLevelLookupTable(cPtr, false);
    return ret;
  }

  public vtkWindowLevelLookupTable NewInstance() const {
    void* cPtr = vtkd_im.vtkWindowLevelLookupTable_NewInstance(cast(void*)swigCPtr);
    vtkWindowLevelLookupTable ret = (cPtr is null) ? null : new vtkWindowLevelLookupTable(cPtr, false);
    return ret;
  }

  alias vtkLookupTable.vtkLookupTable.NewInstance NewInstance;

  public void SetWindow(double window) {
    vtkd_im.vtkWindowLevelLookupTable_SetWindow(cast(void*)swigCPtr, window);
  }

  public double GetWindow() {
    auto ret = vtkd_im.vtkWindowLevelLookupTable_GetWindow(cast(void*)swigCPtr);
    return ret;
  }

  public void SetLevel(double level) {
    vtkd_im.vtkWindowLevelLookupTable_SetLevel(cast(void*)swigCPtr, level);
  }

  public double GetLevel() {
    auto ret = vtkd_im.vtkWindowLevelLookupTable_GetLevel(cast(void*)swigCPtr);
    return ret;
  }

  public void SetInverseVideo(int iv) {
    vtkd_im.vtkWindowLevelLookupTable_SetInverseVideo(cast(void*)swigCPtr, iv);
  }

  public int GetInverseVideo() {
    auto ret = vtkd_im.vtkWindowLevelLookupTable_GetInverseVideo(cast(void*)swigCPtr);
    return ret;
  }

  public void InverseVideoOn() {
    vtkd_im.vtkWindowLevelLookupTable_InverseVideoOn(cast(void*)swigCPtr);
  }

  public void InverseVideoOff() {
    vtkd_im.vtkWindowLevelLookupTable_InverseVideoOff(cast(void*)swigCPtr);
  }

  public void SetMinimumTableValue(double _arg1, double _arg2, double _arg3, double _arg4) {
    vtkd_im.vtkWindowLevelLookupTable_SetMinimumTableValue__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3, _arg4);
  }

  public void SetMinimumTableValue(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkWindowLevelLookupTable_SetMinimumTableValue__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetMinimumTableValue() {
    auto ret = cast(double*)vtkd_im.vtkWindowLevelLookupTable_GetMinimumTableValue__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetMinimumTableValue(double* _arg1, double* _arg2, double* _arg3, double* _arg4) {
    vtkd_im.vtkWindowLevelLookupTable_GetMinimumTableValue__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3, cast(void*)_arg4);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetMinimumTableValue(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkWindowLevelLookupTable_GetMinimumTableValue__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public void SetMaximumTableValue(double _arg1, double _arg2, double _arg3, double _arg4) {
    vtkd_im.vtkWindowLevelLookupTable_SetMaximumTableValue__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3, _arg4);
  }

  public void SetMaximumTableValue(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkWindowLevelLookupTable_SetMaximumTableValue__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetMaximumTableValue() {
    auto ret = cast(double*)vtkd_im.vtkWindowLevelLookupTable_GetMaximumTableValue__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetMaximumTableValue(double* _arg1, double* _arg2, double* _arg3, double* _arg4) {
    vtkd_im.vtkWindowLevelLookupTable_GetMaximumTableValue__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3, cast(void*)_arg4);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetMaximumTableValue(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkWindowLevelLookupTable_GetMaximumTableValue__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }
}
