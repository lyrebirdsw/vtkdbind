/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkSocketController;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkSocketCommunicator;
static import vtkMultiProcessController;

class vtkSocketController : vtkMultiProcessController.vtkMultiProcessController {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkSocketController_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkSocketController obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkSocketController New() {
    void* cPtr = vtkd_im.vtkSocketController_New();
    vtkSocketController ret = (cPtr is null) ? null : new vtkSocketController(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkSocketController_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkSocketController SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkSocketController_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkSocketController ret = (cPtr is null) ? null : new vtkSocketController(cPtr, false);
    return ret;
  }

  public vtkSocketController NewInstance() const {
    void* cPtr = vtkd_im.vtkSocketController_NewInstance(cast(void*)swigCPtr);
    vtkSocketController ret = (cPtr is null) ? null : new vtkSocketController(cPtr, false);
    return ret;
  }

  alias vtkMultiProcessController.vtkMultiProcessController.NewInstance NewInstance;

  public override void Initialize(int* argc, char*** argv, int arg2) {
    vtkd_im.vtkSocketController_Initialize__SWIG_0(cast(void*)swigCPtr, cast(void*)argc, cast(void*)argv, arg2);
  }

  public override void Initialize(int* argc, char*** argv) {
    vtkd_im.vtkSocketController_Initialize__SWIG_1(cast(void*)swigCPtr, cast(void*)argc, cast(void*)argv);
  }

  public void Initialize() {
    vtkd_im.vtkSocketController_Initialize__SWIG_2(cast(void*)swigCPtr);
  }

  alias vtkMultiProcessController.vtkMultiProcessController.Initialize Initialize;

  public override void Finalize() {
    vtkd_im.vtkSocketController_Finalize__SWIG_0(cast(void*)swigCPtr);
  }

  public override void Finalize(int arg0) {
    vtkd_im.vtkSocketController_Finalize__SWIG_1(cast(void*)swigCPtr, arg0);
  }

  public int WaitForConnection(int port) {
    auto ret = vtkd_im.vtkSocketController_WaitForConnection(cast(void*)swigCPtr, port);
    return ret;
  }

  public void CloseConnection() {
    vtkd_im.vtkSocketController_CloseConnection(cast(void*)swigCPtr);
  }

  public int ConnectTo(string hostName, int port) {
    auto ret = vtkd_im.vtkSocketController_ConnectTo(cast(void*)swigCPtr, (hostName ? std.string.toStringz(hostName) : null), port);
    return ret;
  }

  public int GetSwapBytesInReceivedData() {
    auto ret = vtkd_im.vtkSocketController_GetSwapBytesInReceivedData(cast(void*)swigCPtr);
    return ret;
  }

  public void SetCommunicator(vtkSocketCommunicator.vtkSocketCommunicator comm) {
    vtkd_im.vtkSocketController_SetCommunicator(cast(void*)swigCPtr, vtkSocketCommunicator.vtkSocketCommunicator.swigGetCPtr(comm));
  }

  public vtkMultiProcessController.vtkMultiProcessController CreateCompliantController() {
    void* cPtr = vtkd_im.vtkSocketController_CreateCompliantController(cast(void*)swigCPtr);
    vtkMultiProcessController.vtkMultiProcessController ret = (cPtr is null) ? null : new vtkMultiProcessController.vtkMultiProcessController(cPtr, false);
    return ret;
  }
}
