/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkTextActor;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkPolyDataMapper2D;
static import SWIGTYPE_p_int;
static import vtkTextProperty;
static import vtkViewport;
static import SWIGTYPE_p_double;
static import SWIGTYPE_p_p_vtkTextActor;
static import vtkActor2D;

class vtkTextActor : vtkActor2D.vtkActor2D {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkTextActor_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkTextActor obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkTextActor_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkTextActor SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkTextActor_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkTextActor ret = (cPtr is null) ? null : new vtkTextActor(cPtr, false);
    return ret;
  }

  public vtkTextActor NewInstance() const {
    void* cPtr = vtkd_im.vtkTextActor_NewInstance(cast(void*)swigCPtr);
    vtkTextActor ret = (cPtr is null) ? null : new vtkTextActor(cPtr, false);
    return ret;
  }

  alias vtkActor2D.vtkActor2D.NewInstance NewInstance;

  public static vtkTextActor New() {
    void* cPtr = vtkd_im.vtkTextActor_New();
    vtkTextActor ret = (cPtr is null) ? null : new vtkTextActor(cPtr, false);
    return ret;
  }

  public void SetMapper(vtkPolyDataMapper2D.vtkPolyDataMapper2D mapper) {
    vtkd_im.vtkTextActor_SetMapper(cast(void*)swigCPtr, vtkPolyDataMapper2D.vtkPolyDataMapper2D.swigGetCPtr(mapper));
  }

  alias vtkActor2D.vtkActor2D.SetMapper SetMapper;

  public void SetInput(string inputString) {
    vtkd_im.vtkTextActor_SetInput(cast(void*)swigCPtr, (inputString ? std.string.toStringz(inputString) : null));
  }

  public string GetInput() {
    string ret = std.conv.to!string(vtkd_im.vtkTextActor_GetInput(cast(void*)swigCPtr));
    return ret;
  }

  public void SetMinimumSize(int _arg1, int _arg2) {
    vtkd_im.vtkTextActor_SetMinimumSize__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2);
  }

  public void SetMinimumSize(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkTextActor_SetMinimumSize__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public int* GetMinimumSize() {
    auto ret = cast(int*)vtkd_im.vtkTextActor_GetMinimumSize__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetMinimumSize(int* _arg1, int* _arg2) {
    vtkd_im.vtkTextActor_GetMinimumSize__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetMinimumSize(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkTextActor_GetMinimumSize__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public void SetMaximumLineHeight(float _arg) {
    vtkd_im.vtkTextActor_SetMaximumLineHeight(cast(void*)swigCPtr, _arg);
  }

  public float GetMaximumLineHeight() {
    auto ret = vtkd_im.vtkTextActor_GetMaximumLineHeight(cast(void*)swigCPtr);
    return ret;
  }

  public void SetTextScaleMode(int _arg) {
    vtkd_im.vtkTextActor_SetTextScaleMode(cast(void*)swigCPtr, _arg);
  }

  public int GetTextScaleModeMinValue() {
    auto ret = vtkd_im.vtkTextActor_GetTextScaleModeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetTextScaleModeMaxValue() {
    auto ret = vtkd_im.vtkTextActor_GetTextScaleModeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetTextScaleMode() {
    auto ret = vtkd_im.vtkTextActor_GetTextScaleMode(cast(void*)swigCPtr);
    return ret;
  }

  public void SetTextScaleModeToNone() {
    vtkd_im.vtkTextActor_SetTextScaleModeToNone(cast(void*)swigCPtr);
  }

  public void SetTextScaleModeToProp() {
    vtkd_im.vtkTextActor_SetTextScaleModeToProp(cast(void*)swigCPtr);
  }

  public void SetTextScaleModeToViewport() {
    vtkd_im.vtkTextActor_SetTextScaleModeToViewport(cast(void*)swigCPtr);
  }

  public void SetUseBorderAlign(int _arg) {
    vtkd_im.vtkTextActor_SetUseBorderAlign(cast(void*)swigCPtr, _arg);
  }

  public int GetUseBorderAlign() {
    auto ret = vtkd_im.vtkTextActor_GetUseBorderAlign(cast(void*)swigCPtr);
    return ret;
  }

  public void UseBorderAlignOn() {
    vtkd_im.vtkTextActor_UseBorderAlignOn(cast(void*)swigCPtr);
  }

  public void UseBorderAlignOff() {
    vtkd_im.vtkTextActor_UseBorderAlignOff(cast(void*)swigCPtr);
  }

  public void SetAlignmentPoint(int point) {
    vtkd_im.vtkTextActor_SetAlignmentPoint(cast(void*)swigCPtr, point);
  }

  public int GetAlignmentPoint() {
    auto ret = vtkd_im.vtkTextActor_GetAlignmentPoint(cast(void*)swigCPtr);
    return ret;
  }

  public void SetOrientation(float orientation) {
    vtkd_im.vtkTextActor_SetOrientation(cast(void*)swigCPtr, orientation);
  }

  public float GetOrientation() {
    auto ret = vtkd_im.vtkTextActor_GetOrientation(cast(void*)swigCPtr);
    return ret;
  }

  public void SetTextProperty(vtkTextProperty.vtkTextProperty p) {
    vtkd_im.vtkTextActor_SetTextProperty(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(p));
  }

  public vtkTextProperty.vtkTextProperty GetTextProperty() {
    void* cPtr = vtkd_im.vtkTextActor_GetTextProperty(cast(void*)swigCPtr);
    vtkTextProperty.vtkTextProperty ret = (cPtr is null) ? null : new vtkTextProperty.vtkTextProperty(cPtr, false);
    return ret;
  }

  public void GetBoundingBox(vtkViewport.vtkViewport vport, SWIGTYPE_p_double.SWIGTYPE_p_double bbox) {
    vtkd_im.vtkTextActor_GetBoundingBox(cast(void*)swigCPtr, vtkViewport.vtkViewport.swigGetCPtr(vport), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bbox));
  }

  public void GetSize(vtkViewport.vtkViewport vport, SWIGTYPE_p_double.SWIGTYPE_p_double size) {
    vtkd_im.vtkTextActor_GetSize(cast(void*)swigCPtr, vtkViewport.vtkViewport.swigGetCPtr(vport), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(size));
  }

  public int SetConstrainedFontSize(vtkViewport.vtkViewport arg0, int targetWidth, int targetHeight) {
    auto ret = vtkd_im.vtkTextActor_SetConstrainedFontSize__SWIG_0(cast(void*)swigCPtr, vtkViewport.vtkViewport.swigGetCPtr(arg0), targetWidth, targetHeight);
    return ret;
  }

  public static int SetMultipleConstrainedFontSize(vtkViewport.vtkViewport arg0, int targetWidth, int targetHeight, SWIGTYPE_p_p_vtkTextActor.SWIGTYPE_p_p_vtkTextActor actors, int nbOfActors, int* maxResultingSize) {
    auto ret = vtkd_im.vtkTextActor_SetMultipleConstrainedFontSize(vtkViewport.vtkViewport.swigGetCPtr(arg0), targetWidth, targetHeight, SWIGTYPE_p_p_vtkTextActor.SWIGTYPE_p_p_vtkTextActor.swigGetCPtr(actors), nbOfActors, cast(void*)maxResultingSize);
    return ret;
  }

  public void SetNonLinearFontScale(double exponent, int target) {
    vtkd_im.vtkTextActor_SetNonLinearFontScale(cast(void*)swigCPtr, exponent, target);
  }

  public void SpecifiedToDisplay(double* pos, vtkViewport.vtkViewport vport, int specified) {
    vtkd_im.vtkTextActor_SpecifiedToDisplay(cast(void*)swigCPtr, cast(void*)pos, vtkViewport.vtkViewport.swigGetCPtr(vport), specified);
  }

  public void DisplayToSpecified(double* pos, vtkViewport.vtkViewport vport, int specified) {
    vtkd_im.vtkTextActor_DisplayToSpecified(cast(void*)swigCPtr, cast(void*)pos, vtkViewport.vtkViewport.swigGetCPtr(vport), specified);
  }

  public void ComputeScaledFont(vtkViewport.vtkViewport viewport) {
    vtkd_im.vtkTextActor_ComputeScaledFont(cast(void*)swigCPtr, vtkViewport.vtkViewport.swigGetCPtr(viewport));
  }

  public vtkTextProperty.vtkTextProperty GetScaledTextProperty() {
    void* cPtr = vtkd_im.vtkTextActor_GetScaledTextProperty(cast(void*)swigCPtr);
    vtkTextProperty.vtkTextProperty ret = (cPtr is null) ? null : new vtkTextProperty.vtkTextProperty(cPtr, false);
    return ret;
  }

  public static float GetFontScale(vtkViewport.vtkViewport viewport) {
    auto ret = vtkd_im.vtkTextActor_GetFontScale(vtkViewport.vtkViewport.swigGetCPtr(viewport));
    return ret;
  }
}
