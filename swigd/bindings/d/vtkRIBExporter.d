/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkRIBExporter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_int;
static import vtkExporter;

class vtkRIBExporter : vtkExporter.vtkExporter {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkRIBExporter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkRIBExporter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkRIBExporter New() {
    void* cPtr = vtkd_im.vtkRIBExporter_New();
    vtkRIBExporter ret = (cPtr is null) ? null : new vtkRIBExporter(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkRIBExporter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkRIBExporter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkRIBExporter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkRIBExporter ret = (cPtr is null) ? null : new vtkRIBExporter(cPtr, false);
    return ret;
  }

  public vtkRIBExporter NewInstance() const {
    void* cPtr = vtkd_im.vtkRIBExporter_NewInstance(cast(void*)swigCPtr);
    vtkRIBExporter ret = (cPtr is null) ? null : new vtkRIBExporter(cPtr, false);
    return ret;
  }

  alias vtkExporter.vtkExporter.NewInstance NewInstance;

  public void SetSize(int _arg1, int _arg2) {
    vtkd_im.vtkRIBExporter_SetSize__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2);
  }

  public void SetSize(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkRIBExporter_SetSize__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public int* GetSize() {
    auto ret = cast(int*)vtkd_im.vtkRIBExporter_GetSize__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetSize(SWIGTYPE_p_int.SWIGTYPE_p_int data) {
    vtkd_im.vtkRIBExporter_GetSize__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(data));
  }

  public void SetPixelSamples(int _arg1, int _arg2) {
    vtkd_im.vtkRIBExporter_SetPixelSamples__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2);
  }

  public void SetPixelSamples(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkRIBExporter_SetPixelSamples__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public int* GetPixelSamples() {
    auto ret = cast(int*)vtkd_im.vtkRIBExporter_GetPixelSamples__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetPixelSamples(SWIGTYPE_p_int.SWIGTYPE_p_int data) {
    vtkd_im.vtkRIBExporter_GetPixelSamples__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(data));
  }

  public void SetFilePrefix(string _arg) {
    vtkd_im.vtkRIBExporter_SetFilePrefix(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetFilePrefix() {
    string ret = std.conv.to!string(vtkd_im.vtkRIBExporter_GetFilePrefix(cast(void*)swigCPtr));
    return ret;
  }

  public void SetTexturePrefix(string _arg) {
    vtkd_im.vtkRIBExporter_SetTexturePrefix(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetTexturePrefix() {
    string ret = std.conv.to!string(vtkd_im.vtkRIBExporter_GetTexturePrefix(cast(void*)swigCPtr));
    return ret;
  }

  public void SetBackground(int _arg) {
    vtkd_im.vtkRIBExporter_SetBackground(cast(void*)swigCPtr, _arg);
  }

  public int GetBackground() {
    auto ret = vtkd_im.vtkRIBExporter_GetBackground(cast(void*)swigCPtr);
    return ret;
  }

  public void BackgroundOn() {
    vtkd_im.vtkRIBExporter_BackgroundOn(cast(void*)swigCPtr);
  }

  public void BackgroundOff() {
    vtkd_im.vtkRIBExporter_BackgroundOff(cast(void*)swigCPtr);
  }

  public void SetExportArrays(int _arg) {
    vtkd_im.vtkRIBExporter_SetExportArrays(cast(void*)swigCPtr, _arg);
  }

  public int GetExportArraysMinValue() {
    auto ret = vtkd_im.vtkRIBExporter_GetExportArraysMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetExportArraysMaxValue() {
    auto ret = vtkd_im.vtkRIBExporter_GetExportArraysMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public void ExportArraysOn() {
    vtkd_im.vtkRIBExporter_ExportArraysOn(cast(void*)swigCPtr);
  }

  public void ExportArraysOff() {
    vtkd_im.vtkRIBExporter_ExportArraysOff(cast(void*)swigCPtr);
  }

  public int GetExportArrays() {
    auto ret = vtkd_im.vtkRIBExporter_GetExportArrays(cast(void*)swigCPtr);
    return ret;
  }
}
