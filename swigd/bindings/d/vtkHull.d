/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkHull;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkPlanes;
static import vtkPolyData;
static import vtkPolyDataAlgorithm;

class vtkHull : vtkPolyDataAlgorithm.vtkPolyDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkHull_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkHull obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkHull New() {
    void* cPtr = vtkd_im.vtkHull_New();
    vtkHull ret = (cPtr is null) ? null : new vtkHull(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkHull_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkHull SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkHull_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkHull ret = (cPtr is null) ? null : new vtkHull(cPtr, false);
    return ret;
  }

  public vtkHull NewInstance() const {
    void* cPtr = vtkd_im.vtkHull_NewInstance(cast(void*)swigCPtr);
    vtkHull ret = (cPtr is null) ? null : new vtkHull(cPtr, false);
    return ret;
  }

  alias vtkPolyDataAlgorithm.vtkPolyDataAlgorithm.NewInstance NewInstance;

  public void RemoveAllPlanes() {
    vtkd_im.vtkHull_RemoveAllPlanes(cast(void*)swigCPtr);
  }

  public int AddPlane(double A, double B, double C) {
    auto ret = vtkd_im.vtkHull_AddPlane__SWIG_0(cast(void*)swigCPtr, A, B, C);
    return ret;
  }

  public int AddPlane(SWIGTYPE_p_double.SWIGTYPE_p_double plane) {
    auto ret = vtkd_im.vtkHull_AddPlane__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(plane));
    return ret;
  }

  public void SetPlane(int i, double A, double B, double C) {
    vtkd_im.vtkHull_SetPlane__SWIG_0(cast(void*)swigCPtr, i, A, B, C);
  }

  public void SetPlane(int i, SWIGTYPE_p_double.SWIGTYPE_p_double plane) {
    vtkd_im.vtkHull_SetPlane__SWIG_1(cast(void*)swigCPtr, i, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(plane));
  }

  public int AddPlane(double A, double B, double C, double D) {
    auto ret = vtkd_im.vtkHull_AddPlane__SWIG_2(cast(void*)swigCPtr, A, B, C, D);
    return ret;
  }

  public int AddPlane(SWIGTYPE_p_double.SWIGTYPE_p_double plane, double D) {
    auto ret = vtkd_im.vtkHull_AddPlane__SWIG_3(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(plane), D);
    return ret;
  }

  public void SetPlane(int i, double A, double B, double C, double D) {
    vtkd_im.vtkHull_SetPlane__SWIG_2(cast(void*)swigCPtr, i, A, B, C, D);
  }

  public void SetPlane(int i, SWIGTYPE_p_double.SWIGTYPE_p_double plane, double D) {
    vtkd_im.vtkHull_SetPlane__SWIG_3(cast(void*)swigCPtr, i, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(plane), D);
  }

  public void SetPlanes(vtkPlanes.vtkPlanes planes) {
    vtkd_im.vtkHull_SetPlanes(cast(void*)swigCPtr, vtkPlanes.vtkPlanes.swigGetCPtr(planes));
  }

  public int GetNumberOfPlanes() {
    auto ret = vtkd_im.vtkHull_GetNumberOfPlanes(cast(void*)swigCPtr);
    return ret;
  }

  public void AddCubeVertexPlanes() {
    vtkd_im.vtkHull_AddCubeVertexPlanes(cast(void*)swigCPtr);
  }

  public void AddCubeEdgePlanes() {
    vtkd_im.vtkHull_AddCubeEdgePlanes(cast(void*)swigCPtr);
  }

  public void AddCubeFacePlanes() {
    vtkd_im.vtkHull_AddCubeFacePlanes(cast(void*)swigCPtr);
  }

  public void AddRecursiveSpherePlanes(int level) {
    vtkd_im.vtkHull_AddRecursiveSpherePlanes(cast(void*)swigCPtr, level);
  }

  public void GenerateHull(vtkPolyData.vtkPolyData pd, double* bounds) {
    vtkd_im.vtkHull_GenerateHull__SWIG_0(cast(void*)swigCPtr, vtkPolyData.vtkPolyData.swigGetCPtr(pd), cast(void*)bounds);
  }

  public void GenerateHull(vtkPolyData.vtkPolyData pd, double xmin, double xmax, double ymin, double ymax, double zmin, double zmax) {
    vtkd_im.vtkHull_GenerateHull__SWIG_1(cast(void*)swigCPtr, vtkPolyData.vtkPolyData.swigGetCPtr(pd), xmin, xmax, ymin, ymax, zmin, zmax);
  }
}
