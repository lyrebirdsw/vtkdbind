/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkExecutive;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkAlgorithm;
static import vtkInformation;
static import SWIGTYPE_p_p_vtkInformationVector;
static import vtkInformationVector;
static import vtkDataObject;
static import vtkInformationExecutivePortKey;
static import vtkInformationExecutivePortVectorKey;
static import vtkInformationIntegerKey;
static import vtkInformationKeyVectorKey;
static import vtkObject;

class vtkExecutive : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkExecutive_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkExecutive obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkExecutive_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkExecutive SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkExecutive_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkExecutive ret = (cPtr is null) ? null : new vtkExecutive(cPtr, false);
    return ret;
  }

  public vtkExecutive NewInstance() const {
    void* cPtr = vtkd_im.vtkExecutive_NewInstance(cast(void*)swigCPtr);
    vtkExecutive ret = (cPtr is null) ? null : new vtkExecutive(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public vtkAlgorithm.vtkAlgorithm GetAlgorithm() {
    void* cPtr = vtkd_im.vtkExecutive_GetAlgorithm(cast(void*)swigCPtr);
    vtkAlgorithm.vtkAlgorithm ret = (cPtr is null) ? null : new vtkAlgorithm.vtkAlgorithm(cPtr, false);
    return ret;
  }

  public int ProcessRequest(vtkInformation.vtkInformation request, SWIGTYPE_p_p_vtkInformationVector.SWIGTYPE_p_p_vtkInformationVector inInfo, vtkInformationVector.vtkInformationVector outInfo) {
    auto ret = vtkd_im.vtkExecutive_ProcessRequest(cast(void*)swigCPtr, vtkInformation.vtkInformation.swigGetCPtr(request), SWIGTYPE_p_p_vtkInformationVector.SWIGTYPE_p_p_vtkInformationVector.swigGetCPtr(inInfo), vtkInformationVector.vtkInformationVector.swigGetCPtr(outInfo));
    return ret;
  }

  public int ComputePipelineMTime(vtkInformation.vtkInformation request, SWIGTYPE_p_p_vtkInformationVector.SWIGTYPE_p_p_vtkInformationVector inInfoVec, vtkInformationVector.vtkInformationVector outInfoVec, int requestFromOutputPort, core.stdc.config.c_ulong* mtime) {
    auto ret = vtkd_im.vtkExecutive_ComputePipelineMTime(cast(void*)swigCPtr, vtkInformation.vtkInformation.swigGetCPtr(request), SWIGTYPE_p_p_vtkInformationVector.SWIGTYPE_p_p_vtkInformationVector.swigGetCPtr(inInfoVec), vtkInformationVector.vtkInformationVector.swigGetCPtr(outInfoVec), requestFromOutputPort, cast(void*)mtime);
    return ret;
  }

  public int UpdateInformation() {
    auto ret = vtkd_im.vtkExecutive_UpdateInformation(cast(void*)swigCPtr);
    return ret;
  }

  public int Update() {
    auto ret = vtkd_im.vtkExecutive_Update__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public int Update(int port) {
    auto ret = vtkd_im.vtkExecutive_Update__SWIG_1(cast(void*)swigCPtr, port);
    return ret;
  }

  public int GetNumberOfInputPorts() {
    auto ret = vtkd_im.vtkExecutive_GetNumberOfInputPorts(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfOutputPorts() {
    auto ret = vtkd_im.vtkExecutive_GetNumberOfOutputPorts(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfInputConnections(int port) {
    auto ret = vtkd_im.vtkExecutive_GetNumberOfInputConnections(cast(void*)swigCPtr, port);
    return ret;
  }

  public vtkInformation.vtkInformation GetOutputInformation(int port) {
    void* cPtr = vtkd_im.vtkExecutive_GetOutputInformation__SWIG_0(cast(void*)swigCPtr, port);
    vtkInformation.vtkInformation ret = (cPtr is null) ? null : new vtkInformation.vtkInformation(cPtr, false);
    return ret;
  }

  public vtkInformationVector.vtkInformationVector GetOutputInformation() {
    void* cPtr = vtkd_im.vtkExecutive_GetOutputInformation__SWIG_1(cast(void*)swigCPtr);
    vtkInformationVector.vtkInformationVector ret = (cPtr is null) ? null : new vtkInformationVector.vtkInformationVector(cPtr, false);
    return ret;
  }

  public vtkInformation.vtkInformation GetInputInformation(int port, int connection) {
    void* cPtr = vtkd_im.vtkExecutive_GetInputInformation__SWIG_0(cast(void*)swigCPtr, port, connection);
    vtkInformation.vtkInformation ret = (cPtr is null) ? null : new vtkInformation.vtkInformation(cPtr, false);
    return ret;
  }

  public vtkInformationVector.vtkInformationVector GetInputInformation(int port) {
    void* cPtr = vtkd_im.vtkExecutive_GetInputInformation__SWIG_1(cast(void*)swigCPtr, port);
    vtkInformationVector.vtkInformationVector ret = (cPtr is null) ? null : new vtkInformationVector.vtkInformationVector(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_p_vtkInformationVector.SWIGTYPE_p_p_vtkInformationVector GetInputInformation() {
    void* cPtr = vtkd_im.vtkExecutive_GetInputInformation__SWIG_2(cast(void*)swigCPtr);
    SWIGTYPE_p_p_vtkInformationVector.SWIGTYPE_p_p_vtkInformationVector ret = (cPtr is null) ? null : new SWIGTYPE_p_p_vtkInformationVector.SWIGTYPE_p_p_vtkInformationVector(cPtr, false);
    return ret;
  }

  public vtkExecutive GetInputExecutive(int port, int connection) {
    void* cPtr = vtkd_im.vtkExecutive_GetInputExecutive(cast(void*)swigCPtr, port, connection);
    vtkExecutive ret = (cPtr is null) ? null : new vtkExecutive(cPtr, false);
    return ret;
  }

  public vtkDataObject.vtkDataObject GetOutputData(int port) {
    void* cPtr = vtkd_im.vtkExecutive_GetOutputData(cast(void*)swigCPtr, port);
    vtkDataObject.vtkDataObject ret = (cPtr is null) ? null : new vtkDataObject.vtkDataObject(cPtr, false);
    return ret;
  }

  public void SetOutputData(int port, vtkDataObject.vtkDataObject arg1, vtkInformation.vtkInformation info) {
    vtkd_im.vtkExecutive_SetOutputData__SWIG_0(cast(void*)swigCPtr, port, vtkDataObject.vtkDataObject.swigGetCPtr(arg1), vtkInformation.vtkInformation.swigGetCPtr(info));
  }

  public void SetOutputData(int port, vtkDataObject.vtkDataObject arg1) {
    vtkd_im.vtkExecutive_SetOutputData__SWIG_1(cast(void*)swigCPtr, port, vtkDataObject.vtkDataObject.swigGetCPtr(arg1));
  }

  public vtkDataObject.vtkDataObject GetInputData(int port, int connection) {
    void* cPtr = vtkd_im.vtkExecutive_GetInputData__SWIG_0(cast(void*)swigCPtr, port, connection);
    vtkDataObject.vtkDataObject ret = (cPtr is null) ? null : new vtkDataObject.vtkDataObject(cPtr, false);
    return ret;
  }

  public vtkDataObject.vtkDataObject GetInputData(int port, int connection, SWIGTYPE_p_p_vtkInformationVector.SWIGTYPE_p_p_vtkInformationVector inInfoVec) {
    void* cPtr = vtkd_im.vtkExecutive_GetInputData__SWIG_1(cast(void*)swigCPtr, port, connection, SWIGTYPE_p_p_vtkInformationVector.SWIGTYPE_p_p_vtkInformationVector.swigGetCPtr(inInfoVec));
    vtkDataObject.vtkDataObject ret = (cPtr is null) ? null : new vtkDataObject.vtkDataObject(cPtr, false);
    return ret;
  }

  public void SetSharedInputInformation(SWIGTYPE_p_p_vtkInformationVector.SWIGTYPE_p_p_vtkInformationVector inInfoVec) {
    vtkd_im.vtkExecutive_SetSharedInputInformation(cast(void*)swigCPtr, SWIGTYPE_p_p_vtkInformationVector.SWIGTYPE_p_p_vtkInformationVector.swigGetCPtr(inInfoVec));
  }

  public void SetSharedOutputInformation(vtkInformationVector.vtkInformationVector outInfoVec) {
    vtkd_im.vtkExecutive_SetSharedOutputInformation(cast(void*)swigCPtr, vtkInformationVector.vtkInformationVector.swigGetCPtr(outInfoVec));
  }

  public static vtkInformationExecutivePortKey.vtkInformationExecutivePortKey PRODUCER() {
    void* cPtr = vtkd_im.vtkExecutive_PRODUCER();
    vtkInformationExecutivePortKey.vtkInformationExecutivePortKey ret = (cPtr is null) ? null : new vtkInformationExecutivePortKey.vtkInformationExecutivePortKey(cPtr, false);
    return ret;
  }

  public static vtkInformationExecutivePortVectorKey.vtkInformationExecutivePortVectorKey CONSUMERS() {
    void* cPtr = vtkd_im.vtkExecutive_CONSUMERS();
    vtkInformationExecutivePortVectorKey.vtkInformationExecutivePortVectorKey ret = (cPtr is null) ? null : new vtkInformationExecutivePortVectorKey.vtkInformationExecutivePortVectorKey(cPtr, false);
    return ret;
  }

  public static vtkInformationIntegerKey.vtkInformationIntegerKey FROM_OUTPUT_PORT() {
    void* cPtr = vtkd_im.vtkExecutive_FROM_OUTPUT_PORT();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public static vtkInformationIntegerKey.vtkInformationIntegerKey ALGORITHM_BEFORE_FORWARD() {
    void* cPtr = vtkd_im.vtkExecutive_ALGORITHM_BEFORE_FORWARD();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public static vtkInformationIntegerKey.vtkInformationIntegerKey ALGORITHM_AFTER_FORWARD() {
    void* cPtr = vtkd_im.vtkExecutive_ALGORITHM_AFTER_FORWARD();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public static vtkInformationIntegerKey.vtkInformationIntegerKey ALGORITHM_DIRECTION() {
    void* cPtr = vtkd_im.vtkExecutive_ALGORITHM_DIRECTION();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public static vtkInformationIntegerKey.vtkInformationIntegerKey FORWARD_DIRECTION() {
    void* cPtr = vtkd_im.vtkExecutive_FORWARD_DIRECTION();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public static vtkInformationKeyVectorKey.vtkInformationKeyVectorKey KEYS_TO_COPY() {
    void* cPtr = vtkd_im.vtkExecutive_KEYS_TO_COPY();
    vtkInformationKeyVectorKey.vtkInformationKeyVectorKey ret = (cPtr is null) ? null : new vtkInformationKeyVectorKey.vtkInformationKeyVectorKey(cPtr, false);
    return ret;
  }

  public int CallAlgorithm(vtkInformation.vtkInformation request, int direction, SWIGTYPE_p_p_vtkInformationVector.SWIGTYPE_p_p_vtkInformationVector inInfo, vtkInformationVector.vtkInformationVector outInfo) {
    auto ret = vtkd_im.vtkExecutive_CallAlgorithm(cast(void*)swigCPtr, vtkInformation.vtkInformation.swigGetCPtr(request), direction, SWIGTYPE_p_p_vtkInformationVector.SWIGTYPE_p_p_vtkInformationVector.swigGetCPtr(inInfo), vtkInformationVector.vtkInformationVector.swigGetCPtr(outInfo));
    return ret;
  }
}
