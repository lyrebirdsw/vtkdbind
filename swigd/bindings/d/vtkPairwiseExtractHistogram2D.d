/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPairwiseExtractHistogram2D;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_int;
static import SWIGTYPE_p_double;
static import vtkImageData;
static import vtkExtractHistogram2D;
static import vtkStatisticsAlgorithm;

class vtkPairwiseExtractHistogram2D : vtkStatisticsAlgorithm.vtkStatisticsAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPairwiseExtractHistogram2D_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPairwiseExtractHistogram2D obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkPairwiseExtractHistogram2D New() {
    void* cPtr = vtkd_im.vtkPairwiseExtractHistogram2D_New();
    vtkPairwiseExtractHistogram2D ret = (cPtr is null) ? null : new vtkPairwiseExtractHistogram2D(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPairwiseExtractHistogram2D_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPairwiseExtractHistogram2D SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPairwiseExtractHistogram2D_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPairwiseExtractHistogram2D ret = (cPtr is null) ? null : new vtkPairwiseExtractHistogram2D(cPtr, false);
    return ret;
  }

  public vtkPairwiseExtractHistogram2D NewInstance() const {
    void* cPtr = vtkd_im.vtkPairwiseExtractHistogram2D_NewInstance(cast(void*)swigCPtr);
    vtkPairwiseExtractHistogram2D ret = (cPtr is null) ? null : new vtkPairwiseExtractHistogram2D(cPtr, false);
    return ret;
  }

  alias vtkStatisticsAlgorithm.vtkStatisticsAlgorithm.NewInstance NewInstance;

  public void SetNumberOfBins(int _arg1, int _arg2) {
    vtkd_im.vtkPairwiseExtractHistogram2D_SetNumberOfBins__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2);
  }

  public void SetNumberOfBins(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkPairwiseExtractHistogram2D_SetNumberOfBins__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public int* GetNumberOfBins() {
    auto ret = cast(int*)vtkd_im.vtkPairwiseExtractHistogram2D_GetNumberOfBins__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetNumberOfBins(int* _arg1, int* _arg2) {
    vtkd_im.vtkPairwiseExtractHistogram2D_GetNumberOfBins__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetNumberOfBins(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkPairwiseExtractHistogram2D_GetNumberOfBins__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public void SetCustomColumnRangeIndex(int _arg) {
    vtkd_im.vtkPairwiseExtractHistogram2D_SetCustomColumnRangeIndex(cast(void*)swigCPtr, _arg);
  }

  public void SetCustomColumnRangeByIndex(double arg0, double arg1) {
    vtkd_im.vtkPairwiseExtractHistogram2D_SetCustomColumnRangeByIndex(cast(void*)swigCPtr, arg0, arg1);
  }

  public void SetCustomColumnRange(int col, SWIGTYPE_p_double.SWIGTYPE_p_double range) {
    vtkd_im.vtkPairwiseExtractHistogram2D_SetCustomColumnRange__SWIG_0(cast(void*)swigCPtr, col, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(range));
  }

  public void SetCustomColumnRange(int col, double rmin, double rmax) {
    vtkd_im.vtkPairwiseExtractHistogram2D_SetCustomColumnRange__SWIG_1(cast(void*)swigCPtr, col, rmin, rmax);
  }

  public void SetScalarType(int _arg) {
    vtkd_im.vtkPairwiseExtractHistogram2D_SetScalarType(cast(void*)swigCPtr, _arg);
  }

  public void SetScalarTypeToUnsignedInt() {
    vtkd_im.vtkPairwiseExtractHistogram2D_SetScalarTypeToUnsignedInt(cast(void*)swigCPtr);
  }

  public void SetScalarTypeToUnsignedLong() {
    vtkd_im.vtkPairwiseExtractHistogram2D_SetScalarTypeToUnsignedLong(cast(void*)swigCPtr);
  }

  public void SetScalarTypeToUnsignedShort() {
    vtkd_im.vtkPairwiseExtractHistogram2D_SetScalarTypeToUnsignedShort(cast(void*)swigCPtr);
  }

  public void SetScalarTypeToUnsignedChar() {
    vtkd_im.vtkPairwiseExtractHistogram2D_SetScalarTypeToUnsignedChar(cast(void*)swigCPtr);
  }

  public int GetScalarType() {
    auto ret = vtkd_im.vtkPairwiseExtractHistogram2D_GetScalarType(cast(void*)swigCPtr);
    return ret;
  }

  public double GetMaximumBinCount(int idx) {
    auto ret = vtkd_im.vtkPairwiseExtractHistogram2D_GetMaximumBinCount__SWIG_0(cast(void*)swigCPtr, idx);
    return ret;
  }

  public double GetMaximumBinCount() {
    auto ret = vtkd_im.vtkPairwiseExtractHistogram2D_GetMaximumBinCount__SWIG_1(cast(void*)swigCPtr);
    return ret;
  }

  public int GetBinRange(int idx, long binX, long binY, SWIGTYPE_p_double.SWIGTYPE_p_double range) {
    auto ret = vtkd_im.vtkPairwiseExtractHistogram2D_GetBinRange__SWIG_0(cast(void*)swigCPtr, idx, binX, binY, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(range));
    return ret;
  }

  public int GetBinRange(int idx, long bin, SWIGTYPE_p_double.SWIGTYPE_p_double range) {
    auto ret = vtkd_im.vtkPairwiseExtractHistogram2D_GetBinRange__SWIG_1(cast(void*)swigCPtr, idx, bin, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(range));
    return ret;
  }

  public void GetBinWidth(int idx, SWIGTYPE_p_double.SWIGTYPE_p_double bw) {
    vtkd_im.vtkPairwiseExtractHistogram2D_GetBinWidth(cast(void*)swigCPtr, idx, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bw));
  }

  public double* GetHistogramExtents(int idx) {
    auto ret = cast(double*)vtkd_im.vtkPairwiseExtractHistogram2D_GetHistogramExtents(cast(void*)swigCPtr, idx);
    return ret;
  }

  public vtkImageData.vtkImageData GetOutputHistogramImage(int idx) {
    void* cPtr = vtkd_im.vtkPairwiseExtractHistogram2D_GetOutputHistogramImage(cast(void*)swigCPtr, idx);
    vtkImageData.vtkImageData ret = (cPtr is null) ? null : new vtkImageData.vtkImageData(cPtr, false);
    return ret;
  }

  public vtkExtractHistogram2D.vtkExtractHistogram2D GetHistogramFilter(int idx) {
    void* cPtr = vtkd_im.vtkPairwiseExtractHistogram2D_GetHistogramFilter(cast(void*)swigCPtr, idx);
    vtkExtractHistogram2D.vtkExtractHistogram2D ret = (cPtr is null) ? null : new vtkExtractHistogram2D.vtkExtractHistogram2D(cPtr, false);
    return ret;
  }
}
