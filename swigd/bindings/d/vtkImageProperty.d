/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkImageProperty;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkScalarsToColors;
static import SWIGTYPE_p_double;
static import vtkObject;

class vtkImageProperty : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkImageProperty_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkImageProperty obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkImageProperty_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkImageProperty SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkImageProperty_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkImageProperty ret = (cPtr is null) ? null : new vtkImageProperty(cPtr, false);
    return ret;
  }

  public vtkImageProperty NewInstance() const {
    void* cPtr = vtkd_im.vtkImageProperty_NewInstance(cast(void*)swigCPtr);
    vtkImageProperty ret = (cPtr is null) ? null : new vtkImageProperty(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public static vtkImageProperty New() {
    void* cPtr = vtkd_im.vtkImageProperty_New();
    vtkImageProperty ret = (cPtr is null) ? null : new vtkImageProperty(cPtr, false);
    return ret;
  }

  public void DeepCopy(vtkImageProperty p) {
    vtkd_im.vtkImageProperty_DeepCopy(cast(void*)swigCPtr, vtkImageProperty.swigGetCPtr(p));
  }

  public void SetColorWindow(double _arg) {
    vtkd_im.vtkImageProperty_SetColorWindow(cast(void*)swigCPtr, _arg);
  }

  public double GetColorWindow() {
    auto ret = vtkd_im.vtkImageProperty_GetColorWindow(cast(void*)swigCPtr);
    return ret;
  }

  public void SetColorLevel(double _arg) {
    vtkd_im.vtkImageProperty_SetColorLevel(cast(void*)swigCPtr, _arg);
  }

  public double GetColorLevel() {
    auto ret = vtkd_im.vtkImageProperty_GetColorLevel(cast(void*)swigCPtr);
    return ret;
  }

  public void SetLookupTable(vtkScalarsToColors.vtkScalarsToColors lut) {
    vtkd_im.vtkImageProperty_SetLookupTable(cast(void*)swigCPtr, vtkScalarsToColors.vtkScalarsToColors.swigGetCPtr(lut));
  }

  public vtkScalarsToColors.vtkScalarsToColors GetLookupTable() {
    void* cPtr = vtkd_im.vtkImageProperty_GetLookupTable(cast(void*)swigCPtr);
    vtkScalarsToColors.vtkScalarsToColors ret = (cPtr is null) ? null : new vtkScalarsToColors.vtkScalarsToColors(cPtr, false);
    return ret;
  }

  public void SetUseLookupTableScalarRange(int _arg) {
    vtkd_im.vtkImageProperty_SetUseLookupTableScalarRange(cast(void*)swigCPtr, _arg);
  }

  public int GetUseLookupTableScalarRange() {
    auto ret = vtkd_im.vtkImageProperty_GetUseLookupTableScalarRange(cast(void*)swigCPtr);
    return ret;
  }

  public void UseLookupTableScalarRangeOn() {
    vtkd_im.vtkImageProperty_UseLookupTableScalarRangeOn(cast(void*)swigCPtr);
  }

  public void UseLookupTableScalarRangeOff() {
    vtkd_im.vtkImageProperty_UseLookupTableScalarRangeOff(cast(void*)swigCPtr);
  }

  public void SetOpacity(double _arg) {
    vtkd_im.vtkImageProperty_SetOpacity(cast(void*)swigCPtr, _arg);
  }

  public double GetOpacityMinValue() {
    auto ret = vtkd_im.vtkImageProperty_GetOpacityMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetOpacityMaxValue() {
    auto ret = vtkd_im.vtkImageProperty_GetOpacityMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetOpacity() {
    auto ret = vtkd_im.vtkImageProperty_GetOpacity(cast(void*)swigCPtr);
    return ret;
  }

  public void SetAmbient(double _arg) {
    vtkd_im.vtkImageProperty_SetAmbient(cast(void*)swigCPtr, _arg);
  }

  public double GetAmbientMinValue() {
    auto ret = vtkd_im.vtkImageProperty_GetAmbientMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetAmbientMaxValue() {
    auto ret = vtkd_im.vtkImageProperty_GetAmbientMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetAmbient() {
    auto ret = vtkd_im.vtkImageProperty_GetAmbient(cast(void*)swigCPtr);
    return ret;
  }

  public void SetDiffuse(double _arg) {
    vtkd_im.vtkImageProperty_SetDiffuse(cast(void*)swigCPtr, _arg);
  }

  public double GetDiffuseMinValue() {
    auto ret = vtkd_im.vtkImageProperty_GetDiffuseMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetDiffuseMaxValue() {
    auto ret = vtkd_im.vtkImageProperty_GetDiffuseMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetDiffuse() {
    auto ret = vtkd_im.vtkImageProperty_GetDiffuse(cast(void*)swigCPtr);
    return ret;
  }

  public void SetInterpolationType(int _arg) {
    vtkd_im.vtkImageProperty_SetInterpolationType(cast(void*)swigCPtr, _arg);
  }

  public int GetInterpolationTypeMinValue() {
    auto ret = vtkd_im.vtkImageProperty_GetInterpolationTypeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetInterpolationTypeMaxValue() {
    auto ret = vtkd_im.vtkImageProperty_GetInterpolationTypeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetInterpolationType() {
    auto ret = vtkd_im.vtkImageProperty_GetInterpolationType(cast(void*)swigCPtr);
    return ret;
  }

  public void SetInterpolationTypeToNearest() {
    vtkd_im.vtkImageProperty_SetInterpolationTypeToNearest(cast(void*)swigCPtr);
  }

  public void SetInterpolationTypeToLinear() {
    vtkd_im.vtkImageProperty_SetInterpolationTypeToLinear(cast(void*)swigCPtr);
  }

  public void SetInterpolationTypeToCubic() {
    vtkd_im.vtkImageProperty_SetInterpolationTypeToCubic(cast(void*)swigCPtr);
  }

  public string GetInterpolationTypeAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkImageProperty_GetInterpolationTypeAsString(cast(void*)swigCPtr));
    return ret;
  }

  public void SetLayerNumber(int _arg) {
    vtkd_im.vtkImageProperty_SetLayerNumber(cast(void*)swigCPtr, _arg);
  }

  public int GetLayerNumber() {
    auto ret = vtkd_im.vtkImageProperty_GetLayerNumber(cast(void*)swigCPtr);
    return ret;
  }

  public void SetCheckerboard(int _arg) {
    vtkd_im.vtkImageProperty_SetCheckerboard(cast(void*)swigCPtr, _arg);
  }

  public void CheckerboardOn() {
    vtkd_im.vtkImageProperty_CheckerboardOn(cast(void*)swigCPtr);
  }

  public void CheckerboardOff() {
    vtkd_im.vtkImageProperty_CheckerboardOff(cast(void*)swigCPtr);
  }

  public int GetCheckerboard() {
    auto ret = vtkd_im.vtkImageProperty_GetCheckerboard(cast(void*)swigCPtr);
    return ret;
  }

  public void SetCheckerboardSpacing(double _arg1, double _arg2) {
    vtkd_im.vtkImageProperty_SetCheckerboardSpacing__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2);
  }

  public void SetCheckerboardSpacing(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkImageProperty_SetCheckerboardSpacing__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetCheckerboardSpacing() {
    auto ret = cast(double*)vtkd_im.vtkImageProperty_GetCheckerboardSpacing__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetCheckerboardSpacing(double* _arg1, double* _arg2) {
    vtkd_im.vtkImageProperty_GetCheckerboardSpacing__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetCheckerboardSpacing(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkImageProperty_GetCheckerboardSpacing__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public void SetCheckerboardOffset(double _arg1, double _arg2) {
    vtkd_im.vtkImageProperty_SetCheckerboardOffset__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2);
  }

  public void SetCheckerboardOffset(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkImageProperty_SetCheckerboardOffset__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetCheckerboardOffset() {
    auto ret = cast(double*)vtkd_im.vtkImageProperty_GetCheckerboardOffset__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetCheckerboardOffset(double* _arg1, double* _arg2) {
    vtkd_im.vtkImageProperty_GetCheckerboardOffset__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetCheckerboardOffset(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkImageProperty_GetCheckerboardOffset__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public void SetBacking(int _arg) {
    vtkd_im.vtkImageProperty_SetBacking(cast(void*)swigCPtr, _arg);
  }

  public void BackingOn() {
    vtkd_im.vtkImageProperty_BackingOn(cast(void*)swigCPtr);
  }

  public void BackingOff() {
    vtkd_im.vtkImageProperty_BackingOff(cast(void*)swigCPtr);
  }

  public int GetBacking() {
    auto ret = vtkd_im.vtkImageProperty_GetBacking(cast(void*)swigCPtr);
    return ret;
  }

  public void SetBackingColor(double _arg1, double _arg2, double _arg3) {
    vtkd_im.vtkImageProperty_SetBackingColor__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetBackingColor(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkImageProperty_SetBackingColor__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetBackingColor() {
    auto ret = cast(double*)vtkd_im.vtkImageProperty_GetBackingColor__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetBackingColor(double* _arg1, double* _arg2, double* _arg3) {
    vtkd_im.vtkImageProperty_GetBackingColor__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetBackingColor(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkImageProperty_GetBackingColor__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }
}
