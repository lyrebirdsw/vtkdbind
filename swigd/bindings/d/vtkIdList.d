/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkIdList;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkObject;

class vtkIdList : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkIdList_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkIdList obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkIdList New() {
    void* cPtr = vtkd_im.vtkIdList_New();
    vtkIdList ret = (cPtr is null) ? null : new vtkIdList(cPtr, false);
    return ret;
  }

  public void Initialize() {
    vtkd_im.vtkIdList_Initialize(cast(void*)swigCPtr);
  }

  public int Allocate(long sz, int strategy) {
    auto ret = vtkd_im.vtkIdList_Allocate__SWIG_0(cast(void*)swigCPtr, sz, strategy);
    return ret;
  }

  public int Allocate(long sz) {
    auto ret = vtkd_im.vtkIdList_Allocate__SWIG_1(cast(void*)swigCPtr, sz);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkIdList_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkIdList SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkIdList_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkIdList ret = (cPtr is null) ? null : new vtkIdList(cPtr, false);
    return ret;
  }

  public vtkIdList NewInstance() const {
    void* cPtr = vtkd_im.vtkIdList_NewInstance(cast(void*)swigCPtr);
    vtkIdList ret = (cPtr is null) ? null : new vtkIdList(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public long GetNumberOfIds() {
    auto ret = vtkd_im.vtkIdList_GetNumberOfIds(cast(void*)swigCPtr);
    return ret;
  }

  public long GetId(long i) {
    auto ret = vtkd_im.vtkIdList_GetId(cast(void*)swigCPtr, i);
    return ret;
  }

  public void SetNumberOfIds(long number) {
    vtkd_im.vtkIdList_SetNumberOfIds(cast(void*)swigCPtr, number);
  }

  public void SetId(long i, long vtkid) {
    vtkd_im.vtkIdList_SetId(cast(void*)swigCPtr, i, vtkid);
  }

  public void InsertId(long i, long vtkid) {
    vtkd_im.vtkIdList_InsertId(cast(void*)swigCPtr, i, vtkid);
  }

  public long InsertNextId(long vtkid) {
    auto ret = vtkd_im.vtkIdList_InsertNextId(cast(void*)swigCPtr, vtkid);
    return ret;
  }

  public long InsertUniqueId(long vtkid) {
    auto ret = vtkd_im.vtkIdList_InsertUniqueId(cast(void*)swigCPtr, vtkid);
    return ret;
  }

  public long* GetPointer(long i) {
    auto ret = cast(long*)vtkd_im.vtkIdList_GetPointer(cast(void*)swigCPtr, i);
    return ret;
  }

  public long* WritePointer(long i, long number) {
    auto ret = cast(long*)vtkd_im.vtkIdList_WritePointer(cast(void*)swigCPtr, i, number);
    return ret;
  }

  public void Reset() {
    vtkd_im.vtkIdList_Reset(cast(void*)swigCPtr);
  }

  public void Squeeze() {
    vtkd_im.vtkIdList_Squeeze(cast(void*)swigCPtr);
  }

  public void DeepCopy(vtkIdList ids) {
    vtkd_im.vtkIdList_DeepCopy(cast(void*)swigCPtr, vtkIdList.swigGetCPtr(ids));
  }

  public void DeleteId(long vtkid) {
    vtkd_im.vtkIdList_DeleteId(cast(void*)swigCPtr, vtkid);
  }

  public long IsId(long vtkid) {
    auto ret = vtkd_im.vtkIdList_IsId(cast(void*)swigCPtr, vtkid);
    return ret;
  }

  public void IntersectWith(vtkIdList otherIds) {
    vtkd_im.vtkIdList_IntersectWith(cast(void*)swigCPtr, vtkIdList.swigGetCPtr(otherIds));
  }
}
