/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkImageRectilinearWipe;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_int;
static import vtkDataObject;
static import vtkThreadedImageAlgorithm;

class vtkImageRectilinearWipe : vtkThreadedImageAlgorithm.vtkThreadedImageAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkImageRectilinearWipe_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkImageRectilinearWipe obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkImageRectilinearWipe New() {
    void* cPtr = vtkd_im.vtkImageRectilinearWipe_New();
    vtkImageRectilinearWipe ret = (cPtr is null) ? null : new vtkImageRectilinearWipe(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkImageRectilinearWipe_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkImageRectilinearWipe SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkImageRectilinearWipe_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkImageRectilinearWipe ret = (cPtr is null) ? null : new vtkImageRectilinearWipe(cPtr, false);
    return ret;
  }

  public vtkImageRectilinearWipe NewInstance() const {
    void* cPtr = vtkd_im.vtkImageRectilinearWipe_NewInstance(cast(void*)swigCPtr);
    vtkImageRectilinearWipe ret = (cPtr is null) ? null : new vtkImageRectilinearWipe(cPtr, false);
    return ret;
  }

  alias vtkThreadedImageAlgorithm.vtkThreadedImageAlgorithm.NewInstance NewInstance;

  public void SetPosition(int _arg1, int _arg2) {
    vtkd_im.vtkImageRectilinearWipe_SetPosition__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2);
  }

  public void SetPosition(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkImageRectilinearWipe_SetPosition__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public int* GetPosition() {
    auto ret = cast(int*)vtkd_im.vtkImageRectilinearWipe_GetPosition__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetPosition(SWIGTYPE_p_int.SWIGTYPE_p_int data) {
    vtkd_im.vtkImageRectilinearWipe_GetPosition__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(data));
  }

  public void SetAxis(int _arg1, int _arg2) {
    vtkd_im.vtkImageRectilinearWipe_SetAxis__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2);
  }

  public void SetAxis(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkImageRectilinearWipe_SetAxis__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public int* GetAxis() {
    auto ret = cast(int*)vtkd_im.vtkImageRectilinearWipe_GetAxis__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetAxis(SWIGTYPE_p_int.SWIGTYPE_p_int data) {
    vtkd_im.vtkImageRectilinearWipe_GetAxis__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(data));
  }

  public void SetInput1Data(vtkDataObject.vtkDataObject arg0) {
    vtkd_im.vtkImageRectilinearWipe_SetInput1Data(cast(void*)swigCPtr, vtkDataObject.vtkDataObject.swigGetCPtr(arg0));
  }

  public void SetInput2Data(vtkDataObject.vtkDataObject arg0) {
    vtkd_im.vtkImageRectilinearWipe_SetInput2Data(cast(void*)swigCPtr, vtkDataObject.vtkDataObject.swigGetCPtr(arg0));
  }

  public void SetWipe(int _arg) {
    vtkd_im.vtkImageRectilinearWipe_SetWipe(cast(void*)swigCPtr, _arg);
  }

  public int GetWipeMinValue() {
    auto ret = vtkd_im.vtkImageRectilinearWipe_GetWipeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetWipeMaxValue() {
    auto ret = vtkd_im.vtkImageRectilinearWipe_GetWipeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetWipe() {
    auto ret = vtkd_im.vtkImageRectilinearWipe_GetWipe(cast(void*)swigCPtr);
    return ret;
  }

  public void SetWipeToQuad() {
    vtkd_im.vtkImageRectilinearWipe_SetWipeToQuad(cast(void*)swigCPtr);
  }

  public void SetWipeToHorizontal() {
    vtkd_im.vtkImageRectilinearWipe_SetWipeToHorizontal(cast(void*)swigCPtr);
  }

  public void SetWipeToVertical() {
    vtkd_im.vtkImageRectilinearWipe_SetWipeToVertical(cast(void*)swigCPtr);
  }

  public void SetWipeToLowerLeft() {
    vtkd_im.vtkImageRectilinearWipe_SetWipeToLowerLeft(cast(void*)swigCPtr);
  }

  public void SetWipeToLowerRight() {
    vtkd_im.vtkImageRectilinearWipe_SetWipeToLowerRight(cast(void*)swigCPtr);
  }

  public void SetWipeToUpperLeft() {
    vtkd_im.vtkImageRectilinearWipe_SetWipeToUpperLeft(cast(void*)swigCPtr);
  }

  public void SetWipeToUpperRight() {
    vtkd_im.vtkImageRectilinearWipe_SetWipeToUpperRight(cast(void*)swigCPtr);
  }
}
