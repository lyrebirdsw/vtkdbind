/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkGPUVolumeRayCastMapper;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkRenderWindow;
static import vtkVolumeProperty;
static import vtkRenderer;
static import vtkVolume;
static import vtkImageData;
static import SWIGTYPE_p_double;
static import vtkVolumeMapper;

class vtkGPUVolumeRayCastMapper : vtkVolumeMapper.vtkVolumeMapper {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkGPUVolumeRayCastMapper_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkGPUVolumeRayCastMapper obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkGPUVolumeRayCastMapper New() {
    void* cPtr = vtkd_im.vtkGPUVolumeRayCastMapper_New();
    vtkGPUVolumeRayCastMapper ret = (cPtr is null) ? null : new vtkGPUVolumeRayCastMapper(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkGPUVolumeRayCastMapper SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkGPUVolumeRayCastMapper_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkGPUVolumeRayCastMapper ret = (cPtr is null) ? null : new vtkGPUVolumeRayCastMapper(cPtr, false);
    return ret;
  }

  public vtkGPUVolumeRayCastMapper NewInstance() const {
    void* cPtr = vtkd_im.vtkGPUVolumeRayCastMapper_NewInstance(cast(void*)swigCPtr);
    vtkGPUVolumeRayCastMapper ret = (cPtr is null) ? null : new vtkGPUVolumeRayCastMapper(cPtr, false);
    return ret;
  }

  alias vtkVolumeMapper.vtkVolumeMapper.NewInstance NewInstance;

  public void SetAutoAdjustSampleDistances(int _arg) {
    vtkd_im.vtkGPUVolumeRayCastMapper_SetAutoAdjustSampleDistances(cast(void*)swigCPtr, _arg);
  }

  public int GetAutoAdjustSampleDistancesMinValue() {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetAutoAdjustSampleDistancesMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetAutoAdjustSampleDistancesMaxValue() {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetAutoAdjustSampleDistancesMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetAutoAdjustSampleDistances() {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetAutoAdjustSampleDistances(cast(void*)swigCPtr);
    return ret;
  }

  public void AutoAdjustSampleDistancesOn() {
    vtkd_im.vtkGPUVolumeRayCastMapper_AutoAdjustSampleDistancesOn(cast(void*)swigCPtr);
  }

  public void AutoAdjustSampleDistancesOff() {
    vtkd_im.vtkGPUVolumeRayCastMapper_AutoAdjustSampleDistancesOff(cast(void*)swigCPtr);
  }

  public void SetSampleDistance(float _arg) {
    vtkd_im.vtkGPUVolumeRayCastMapper_SetSampleDistance(cast(void*)swigCPtr, _arg);
  }

  public float GetSampleDistance() {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetSampleDistance(cast(void*)swigCPtr);
    return ret;
  }

  public void SetImageSampleDistance(float _arg) {
    vtkd_im.vtkGPUVolumeRayCastMapper_SetImageSampleDistance(cast(void*)swigCPtr, _arg);
  }

  public float GetImageSampleDistanceMinValue() {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetImageSampleDistanceMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public float GetImageSampleDistanceMaxValue() {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetImageSampleDistanceMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public float GetImageSampleDistance() {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetImageSampleDistance(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMinimumImageSampleDistance(float _arg) {
    vtkd_im.vtkGPUVolumeRayCastMapper_SetMinimumImageSampleDistance(cast(void*)swigCPtr, _arg);
  }

  public float GetMinimumImageSampleDistanceMinValue() {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetMinimumImageSampleDistanceMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public float GetMinimumImageSampleDistanceMaxValue() {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetMinimumImageSampleDistanceMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public float GetMinimumImageSampleDistance() {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetMinimumImageSampleDistance(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMaximumImageSampleDistance(float _arg) {
    vtkd_im.vtkGPUVolumeRayCastMapper_SetMaximumImageSampleDistance(cast(void*)swigCPtr, _arg);
  }

  public float GetMaximumImageSampleDistanceMinValue() {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetMaximumImageSampleDistanceMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public float GetMaximumImageSampleDistanceMaxValue() {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetMaximumImageSampleDistanceMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public float GetMaximumImageSampleDistance() {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetMaximumImageSampleDistance(cast(void*)swigCPtr);
    return ret;
  }

  public void SetFinalColorWindow(float _arg) {
    vtkd_im.vtkGPUVolumeRayCastMapper_SetFinalColorWindow(cast(void*)swigCPtr, _arg);
  }

  public float GetFinalColorWindow() {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetFinalColorWindow(cast(void*)swigCPtr);
    return ret;
  }

  public void SetFinalColorLevel(float _arg) {
    vtkd_im.vtkGPUVolumeRayCastMapper_SetFinalColorLevel(cast(void*)swigCPtr, _arg);
  }

  public float GetFinalColorLevel() {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetFinalColorLevel(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMaxMemoryInBytes(long _arg) {
    vtkd_im.vtkGPUVolumeRayCastMapper_SetMaxMemoryInBytes(cast(void*)swigCPtr, _arg);
  }

  public long GetMaxMemoryInBytes() {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetMaxMemoryInBytes(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMaxMemoryFraction(float _arg) {
    vtkd_im.vtkGPUVolumeRayCastMapper_SetMaxMemoryFraction(cast(void*)swigCPtr, _arg);
  }

  public float GetMaxMemoryFractionMinValue() {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetMaxMemoryFractionMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public float GetMaxMemoryFractionMaxValue() {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetMaxMemoryFractionMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public float GetMaxMemoryFraction() {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetMaxMemoryFraction(cast(void*)swigCPtr);
    return ret;
  }

  public void SetReportProgress(bool _arg) {
    vtkd_im.vtkGPUVolumeRayCastMapper_SetReportProgress(cast(void*)swigCPtr, _arg);
  }

  public bool GetReportProgress() {
    bool ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetReportProgress(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public int IsRenderSupported(vtkRenderWindow.vtkRenderWindow arg0, vtkVolumeProperty.vtkVolumeProperty arg1) {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_IsRenderSupported(cast(void*)swigCPtr, vtkRenderWindow.vtkRenderWindow.swigGetCPtr(arg0), vtkVolumeProperty.vtkVolumeProperty.swigGetCPtr(arg1));
    return ret;
  }

  public void CreateCanonicalView(vtkRenderer.vtkRenderer ren, vtkVolume.vtkVolume volume, vtkImageData.vtkImageData image, int blend_mode, SWIGTYPE_p_double.SWIGTYPE_p_double viewDirection, SWIGTYPE_p_double.SWIGTYPE_p_double viewUp) {
    vtkd_im.vtkGPUVolumeRayCastMapper_CreateCanonicalView(cast(void*)swigCPtr, vtkRenderer.vtkRenderer.swigGetCPtr(ren), vtkVolume.vtkVolume.swigGetCPtr(volume), vtkImageData.vtkImageData.swigGetCPtr(image), blend_mode, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(viewDirection), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(viewUp));
  }

  public void SetMaskInput(vtkImageData.vtkImageData mask) {
    vtkd_im.vtkGPUVolumeRayCastMapper_SetMaskInput(cast(void*)swigCPtr, vtkImageData.vtkImageData.swigGetCPtr(mask));
  }

  public vtkImageData.vtkImageData GetMaskInput() {
    void* cPtr = vtkd_im.vtkGPUVolumeRayCastMapper_GetMaskInput(cast(void*)swigCPtr);
    vtkImageData.vtkImageData ret = (cPtr is null) ? null : new vtkImageData.vtkImageData(cPtr, false);
    return ret;
  }

  public void SetMaskType(int _arg) {
    vtkd_im.vtkGPUVolumeRayCastMapper_SetMaskType(cast(void*)swigCPtr, _arg);
  }

  public int GetMaskType() {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetMaskType(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMaskTypeToBinary() {
    vtkd_im.vtkGPUVolumeRayCastMapper_SetMaskTypeToBinary(cast(void*)swigCPtr);
  }

  public void SetMaskTypeToLabelMap() {
    vtkd_im.vtkGPUVolumeRayCastMapper_SetMaskTypeToLabelMap(cast(void*)swigCPtr);
  }

  public void SetMaskBlendFactor(float _arg) {
    vtkd_im.vtkGPUVolumeRayCastMapper_SetMaskBlendFactor(cast(void*)swigCPtr, _arg);
  }

  public float GetMaskBlendFactorMinValue() {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetMaskBlendFactorMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public float GetMaskBlendFactorMaxValue() {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetMaskBlendFactorMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public float GetMaskBlendFactor() {
    auto ret = vtkd_im.vtkGPUVolumeRayCastMapper_GetMaskBlendFactor(cast(void*)swigCPtr);
    return ret;
  }
}
