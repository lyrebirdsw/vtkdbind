/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkImageResize;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_int;
static import SWIGTYPE_p_double;
static import vtkAbstractImageInterpolator;
static import vtkThreadedImageAlgorithm;

class vtkImageResize : vtkThreadedImageAlgorithm.vtkThreadedImageAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkImageResize_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkImageResize obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  enum {
    OUTPUT_DIMENSIONS,
    OUTPUT_SPACING,
    MAGNIFICATION_FACTORS
  }

  public static vtkImageResize New() {
    void* cPtr = vtkd_im.vtkImageResize_New();
    vtkImageResize ret = (cPtr is null) ? null : new vtkImageResize(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkImageResize_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkImageResize SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkImageResize_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkImageResize ret = (cPtr is null) ? null : new vtkImageResize(cPtr, false);
    return ret;
  }

  public vtkImageResize NewInstance() const {
    void* cPtr = vtkd_im.vtkImageResize_NewInstance(cast(void*)swigCPtr);
    vtkImageResize ret = (cPtr is null) ? null : new vtkImageResize(cPtr, false);
    return ret;
  }

  alias vtkThreadedImageAlgorithm.vtkThreadedImageAlgorithm.NewInstance NewInstance;

  public void SetResizeMethod(int _arg) {
    vtkd_im.vtkImageResize_SetResizeMethod(cast(void*)swigCPtr, _arg);
  }

  public int GetResizeMethodMinValue() {
    auto ret = vtkd_im.vtkImageResize_GetResizeMethodMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetResizeMethodMaxValue() {
    auto ret = vtkd_im.vtkImageResize_GetResizeMethodMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetResizeMethod() {
    auto ret = vtkd_im.vtkImageResize_GetResizeMethod(cast(void*)swigCPtr);
    return ret;
  }

  public void SetResizeMethodToOutputDimensions() {
    vtkd_im.vtkImageResize_SetResizeMethodToOutputDimensions(cast(void*)swigCPtr);
  }

  public void SetResizeMethodToOutputSpacing() {
    vtkd_im.vtkImageResize_SetResizeMethodToOutputSpacing(cast(void*)swigCPtr);
  }

  public void SetResizeMethodToMagnificationFactors() {
    vtkd_im.vtkImageResize_SetResizeMethodToMagnificationFactors(cast(void*)swigCPtr);
  }

  public string GetResizeMethodAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkImageResize_GetResizeMethodAsString(cast(void*)swigCPtr));
    return ret;
  }

  public void SetOutputDimensions(int _arg1, int _arg2, int _arg3) {
    vtkd_im.vtkImageResize_SetOutputDimensions__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetOutputDimensions(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkImageResize_SetOutputDimensions__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public int* GetOutputDimensions() {
    auto ret = cast(int*)vtkd_im.vtkImageResize_GetOutputDimensions__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetOutputDimensions(int* _arg1, int* _arg2, int* _arg3) {
    vtkd_im.vtkImageResize_GetOutputDimensions__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetOutputDimensions(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkImageResize_GetOutputDimensions__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public void SetOutputSpacing(double _arg1, double _arg2, double _arg3) {
    vtkd_im.vtkImageResize_SetOutputSpacing__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetOutputSpacing(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkImageResize_SetOutputSpacing__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetOutputSpacing() {
    auto ret = cast(double*)vtkd_im.vtkImageResize_GetOutputSpacing__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetOutputSpacing(double* _arg1, double* _arg2, double* _arg3) {
    vtkd_im.vtkImageResize_GetOutputSpacing__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetOutputSpacing(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkImageResize_GetOutputSpacing__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public void SetMagnificationFactors(double _arg1, double _arg2, double _arg3) {
    vtkd_im.vtkImageResize_SetMagnificationFactors__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetMagnificationFactors(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkImageResize_SetMagnificationFactors__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetMagnificationFactors() {
    auto ret = cast(double*)vtkd_im.vtkImageResize_GetMagnificationFactors__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetMagnificationFactors(double* _arg1, double* _arg2, double* _arg3) {
    vtkd_im.vtkImageResize_GetMagnificationFactors__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetMagnificationFactors(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkImageResize_GetMagnificationFactors__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public void SetBorder(int _arg) {
    vtkd_im.vtkImageResize_SetBorder(cast(void*)swigCPtr, _arg);
  }

  public void BorderOn() {
    vtkd_im.vtkImageResize_BorderOn(cast(void*)swigCPtr);
  }

  public void BorderOff() {
    vtkd_im.vtkImageResize_BorderOff(cast(void*)swigCPtr);
  }

  public int GetBorder() {
    auto ret = vtkd_im.vtkImageResize_GetBorder(cast(void*)swigCPtr);
    return ret;
  }

  public void SetCropping(int _arg) {
    vtkd_im.vtkImageResize_SetCropping(cast(void*)swigCPtr, _arg);
  }

  public void CroppingOn() {
    vtkd_im.vtkImageResize_CroppingOn(cast(void*)swigCPtr);
  }

  public void CroppingOff() {
    vtkd_im.vtkImageResize_CroppingOff(cast(void*)swigCPtr);
  }

  public int GetCropping() {
    auto ret = vtkd_im.vtkImageResize_GetCropping(cast(void*)swigCPtr);
    return ret;
  }

  public void SetCroppingRegion(double _arg1, double _arg2, double _arg3, double _arg4, double _arg5, double _arg6) {
    vtkd_im.vtkImageResize_SetCroppingRegion__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
  }

  public void SetCroppingRegion(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkImageResize_SetCroppingRegion__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetCroppingRegion() {
    auto ret = cast(double*)vtkd_im.vtkImageResize_GetCroppingRegion__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetCroppingRegion(double* _arg1, double* _arg2, double* _arg3, double* _arg4, double* _arg5, double* _arg6) {
    vtkd_im.vtkImageResize_GetCroppingRegion__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3, cast(void*)_arg4, cast(void*)_arg5, cast(void*)_arg6);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetCroppingRegion(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkImageResize_GetCroppingRegion__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public void SetInterpolate(int _arg) {
    vtkd_im.vtkImageResize_SetInterpolate(cast(void*)swigCPtr, _arg);
  }

  public void InterpolateOn() {
    vtkd_im.vtkImageResize_InterpolateOn(cast(void*)swigCPtr);
  }

  public void InterpolateOff() {
    vtkd_im.vtkImageResize_InterpolateOff(cast(void*)swigCPtr);
  }

  public int GetInterpolate() {
    auto ret = vtkd_im.vtkImageResize_GetInterpolate(cast(void*)swigCPtr);
    return ret;
  }

  public void SetInterpolator(vtkAbstractImageInterpolator.vtkAbstractImageInterpolator sampler) {
    vtkd_im.vtkImageResize_SetInterpolator(cast(void*)swigCPtr, vtkAbstractImageInterpolator.vtkAbstractImageInterpolator.swigGetCPtr(sampler));
  }

  public vtkAbstractImageInterpolator.vtkAbstractImageInterpolator GetInterpolator() {
    void* cPtr = vtkd_im.vtkImageResize_GetInterpolator(cast(void*)swigCPtr);
    vtkAbstractImageInterpolator.vtkAbstractImageInterpolator ret = (cPtr is null) ? null : new vtkAbstractImageInterpolator.vtkAbstractImageInterpolator(cPtr, false);
    return ret;
  }
}
