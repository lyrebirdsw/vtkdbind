/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkDirectory;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkStringArray;
static import vtkObject;

class vtkDirectory : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkDirectory_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkDirectory obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkDirectory_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkDirectory SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkDirectory_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkDirectory ret = (cPtr is null) ? null : new vtkDirectory(cPtr, false);
    return ret;
  }

  public vtkDirectory NewInstance() const {
    void* cPtr = vtkd_im.vtkDirectory_NewInstance(cast(void*)swigCPtr);
    vtkDirectory ret = (cPtr is null) ? null : new vtkDirectory(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public static vtkDirectory New() {
    void* cPtr = vtkd_im.vtkDirectory_New();
    vtkDirectory ret = (cPtr is null) ? null : new vtkDirectory(cPtr, false);
    return ret;
  }

  public int Open(string dir) {
    auto ret = vtkd_im.vtkDirectory_Open(cast(void*)swigCPtr, (dir ? std.string.toStringz(dir) : null));
    return ret;
  }

  public long GetNumberOfFiles() {
    auto ret = vtkd_im.vtkDirectory_GetNumberOfFiles(cast(void*)swigCPtr);
    return ret;
  }

  public string GetFile(long index) {
    string ret = std.conv.to!string(vtkd_im.vtkDirectory_GetFile(cast(void*)swigCPtr, index));
    return ret;
  }

  public int FileIsDirectory(string name) {
    auto ret = vtkd_im.vtkDirectory_FileIsDirectory(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
    return ret;
  }

  public vtkStringArray.vtkStringArray GetFiles() {
    void* cPtr = vtkd_im.vtkDirectory_GetFiles(cast(void*)swigCPtr);
    vtkStringArray.vtkStringArray ret = (cPtr is null) ? null : new vtkStringArray.vtkStringArray(cPtr, false);
    return ret;
  }

  public static string GetCurrentWorkingDirectory(string buf, uint len) {
    string ret = std.conv.to!string(vtkd_im.vtkDirectory_GetCurrentWorkingDirectory((buf ? std.string.toStringz(buf) : null), len));
    return ret;
  }

  public static int MakeDirectory(string dir) {
    auto ret = vtkd_im.vtkDirectory_MakeDirectory((dir ? std.string.toStringz(dir) : null));
    return ret;
  }

  public static int DeleteDirectory(string dir) {
    auto ret = vtkd_im.vtkDirectory_DeleteDirectory((dir ? std.string.toStringz(dir) : null));
    return ret;
  }

  public static int Rename(string oldname, string newname) {
    auto ret = vtkd_im.vtkDirectory_Rename((oldname ? std.string.toStringz(oldname) : null), (newname ? std.string.toStringz(newname) : null));
    return ret;
  }
}
