/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkCommand;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkObject;

class vtkCommand : vtkObjectBase.vtkObjectBase {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkCommand_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkCommand obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkCommand_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkCommand SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkCommand_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkCommand ret = (cPtr is null) ? null : new vtkCommand(cPtr, false);
    return ret;
  }

  public vtkCommand NewInstance() const {
    void* cPtr = vtkd_im.vtkCommand_NewInstance(cast(void*)swigCPtr);
    vtkCommand ret = (cPtr is null) ? null : new vtkCommand(cPtr, false);
    return ret;
  }

  public void UnRegister() {
    vtkd_im.vtkCommand_UnRegister__SWIG_0(cast(void*)swigCPtr);
  }

  public override void UnRegister(vtkObjectBase.vtkObjectBase arg0) {
    vtkd_im.vtkCommand_UnRegister__SWIG_1(cast(void*)swigCPtr, vtkObjectBase.vtkObjectBase.swigGetCPtr(arg0));
  }

  public void Execute(vtkObject.vtkObject caller, core.stdc.config.c_ulong eventId, void* callData) {
    vtkd_im.vtkCommand_Execute(cast(void*)swigCPtr, vtkObject.vtkObject.swigGetCPtr(caller), eventId, cast(void*)callData);
  }

  public static string GetStringFromEventId(core.stdc.config.c_ulong event) {
    string ret = std.conv.to!string(vtkd_im.vtkCommand_GetStringFromEventId(event));
    return ret;
  }

  public static core.stdc.config.c_ulong GetEventIdFromString(string event) {
    auto ret = vtkd_im.vtkCommand_GetEventIdFromString((event ? std.string.toStringz(event) : null));
    return ret;
  }

  public void SetAbortFlag(int f) {
    vtkd_im.vtkCommand_SetAbortFlag(cast(void*)swigCPtr, f);
  }

  public int GetAbortFlag() {
    auto ret = vtkd_im.vtkCommand_GetAbortFlag(cast(void*)swigCPtr);
    return ret;
  }

  public void AbortFlagOn() {
    vtkd_im.vtkCommand_AbortFlagOn(cast(void*)swigCPtr);
  }

  public void AbortFlagOff() {
    vtkd_im.vtkCommand_AbortFlagOff(cast(void*)swigCPtr);
  }

  public void SetPassiveObserver(int f) {
    vtkd_im.vtkCommand_SetPassiveObserver(cast(void*)swigCPtr, f);
  }

  public int GetPassiveObserver() {
    auto ret = vtkd_im.vtkCommand_GetPassiveObserver(cast(void*)swigCPtr);
    return ret;
  }

  public void PassiveObserverOn() {
    vtkd_im.vtkCommand_PassiveObserverOn(cast(void*)swigCPtr);
  }

  public void PassiveObserverOff() {
    vtkd_im.vtkCommand_PassiveObserverOff(cast(void*)swigCPtr);
  }
}
