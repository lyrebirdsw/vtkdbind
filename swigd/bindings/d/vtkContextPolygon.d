/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkContextPolygon;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkVector2f;
static import vtkTransform2D;

class vtkContextPolygon {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(vtkContextPolygon obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkContextPolygon(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(vtkd_im.new_vtkContextPolygon__SWIG_0(), true);
  }

  public this(vtkContextPolygon polygon) {
    this(vtkd_im.new_vtkContextPolygon__SWIG_1(vtkContextPolygon.swigGetCPtr(polygon)), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void AddPoint(vtkVector2f.vtkVector2f point) {
    vtkd_im.vtkContextPolygon_AddPoint__SWIG_0(cast(void*)swigCPtr, vtkVector2f.vtkVector2f.swigGetCPtr(point));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void AddPoint(float x, float y) {
    vtkd_im.vtkContextPolygon_AddPoint__SWIG_1(cast(void*)swigCPtr, x, y);
  }

  public vtkVector2f.vtkVector2f GetPoint(long index) const {
    vtkVector2f.vtkVector2f ret = new vtkVector2f.vtkVector2f(vtkd_im.vtkContextPolygon_GetPoint(cast(void*)swigCPtr, index), true);
    return ret;
  }

  public long GetNumberOfPoints() const {
    auto ret = vtkd_im.vtkContextPolygon_GetNumberOfPoints(cast(void*)swigCPtr);
    return ret;
  }

  public void Clear() {
    vtkd_im.vtkContextPolygon_Clear(cast(void*)swigCPtr);
  }

  public bool Contains(vtkVector2f.vtkVector2f point) const {
    bool ret = vtkd_im.vtkContextPolygon_Contains(cast(void*)swigCPtr, vtkVector2f.vtkVector2f.swigGetCPtr(point)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public vtkContextPolygon Transformed(vtkTransform2D.vtkTransform2D transform) const {
    vtkContextPolygon ret = new vtkContextPolygon(vtkd_im.vtkContextPolygon_Transformed(cast(void*)swigCPtr, vtkTransform2D.vtkTransform2D.swigGetCPtr(transform)), true);
    return ret;
  }

  public vtkContextPolygon Equal(vtkContextPolygon other) {
    vtkContextPolygon ret = new vtkContextPolygon(vtkd_im.vtkContextPolygon_Equal(cast(void*)swigCPtr, vtkContextPolygon.swigGetCPtr(other)), false);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }
}
