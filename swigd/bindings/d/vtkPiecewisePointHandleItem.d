/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPiecewisePointHandleItem;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkObject;
static import vtkPiecewiseFunction;
static import SWIGTYPE_p_vtkWeakPointerT_vtkPiecewiseFunction_t;
static import vtkContextMouseEvent;
static import vtkContextItem;

class vtkPiecewisePointHandleItem : vtkContextItem.vtkContextItem {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPiecewisePointHandleItem_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPiecewisePointHandleItem obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkPiecewisePointHandleItem(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPiecewisePointHandleItem_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPiecewisePointHandleItem SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPiecewisePointHandleItem_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPiecewisePointHandleItem ret = (cPtr is null) ? null : new vtkPiecewisePointHandleItem(cPtr, false);
    return ret;
  }

  public vtkPiecewisePointHandleItem NewInstance() const {
    void* cPtr = vtkd_im.vtkPiecewisePointHandleItem_NewInstance(cast(void*)swigCPtr);
    vtkPiecewisePointHandleItem ret = (cPtr is null) ? null : new vtkPiecewisePointHandleItem(cPtr, false);
    return ret;
  }

  alias vtkContextItem.vtkContextItem.NewInstance NewInstance;

  public static vtkPiecewisePointHandleItem New() {
    void* cPtr = vtkd_im.vtkPiecewisePointHandleItem_New();
    vtkPiecewisePointHandleItem ret = (cPtr is null) ? null : new vtkPiecewisePointHandleItem(cPtr, false);
    return ret;
  }

  public static void CallRedraw(vtkObject.vtkObject sender, core.stdc.config.c_ulong event, void* receiver, void* params) {
    vtkd_im.vtkPiecewisePointHandleItem_CallRedraw(vtkObject.vtkObject.swigGetCPtr(sender), event, cast(void*)receiver, cast(void*)params);
  }

  public void SetCurrentPointIndex(long _arg) {
    vtkd_im.vtkPiecewisePointHandleItem_SetCurrentPointIndex(cast(void*)swigCPtr, _arg);
  }

  public long GetCurrentPointIndex() {
    auto ret = vtkd_im.vtkPiecewisePointHandleItem_GetCurrentPointIndex(cast(void*)swigCPtr);
    return ret;
  }

  public void SetPiecewiseFunction(vtkPiecewiseFunction.vtkPiecewiseFunction piecewiseFunc) {
    vtkd_im.vtkPiecewisePointHandleItem_SetPiecewiseFunction(cast(void*)swigCPtr, vtkPiecewiseFunction.vtkPiecewiseFunction.swigGetCPtr(piecewiseFunc));
  }

  public SWIGTYPE_p_vtkWeakPointerT_vtkPiecewiseFunction_t.SWIGTYPE_p_vtkWeakPointerT_vtkPiecewiseFunction_t GetPiecewiseFunction() {
    SWIGTYPE_p_vtkWeakPointerT_vtkPiecewiseFunction_t.SWIGTYPE_p_vtkWeakPointerT_vtkPiecewiseFunction_t ret = new SWIGTYPE_p_vtkWeakPointerT_vtkPiecewiseFunction_t.SWIGTYPE_p_vtkWeakPointerT_vtkPiecewiseFunction_t(vtkd_im.vtkPiecewisePointHandleItem_GetPiecewiseFunction(cast(void*)swigCPtr), true);
    return ret;
  }

  public int IsOverHandle(float* pos) {
    auto ret = vtkd_im.vtkPiecewisePointHandleItem_IsOverHandle(cast(void*)swigCPtr, cast(void*)pos);
    return ret;
  }

  public bool Hit(vtkContextMouseEvent.vtkContextMouseEvent mouse) {
    bool ret = vtkd_im.vtkPiecewisePointHandleItem_Hit(cast(void*)swigCPtr, vtkContextMouseEvent.vtkContextMouseEvent.swigGetCPtr(mouse)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool MouseMoveEvent(vtkContextMouseEvent.vtkContextMouseEvent mouse) {
    bool ret = vtkd_im.vtkPiecewisePointHandleItem_MouseMoveEvent(cast(void*)swigCPtr, vtkContextMouseEvent.vtkContextMouseEvent.swigGetCPtr(mouse)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool MouseButtonPressEvent(vtkContextMouseEvent.vtkContextMouseEvent mouse) {
    bool ret = vtkd_im.vtkPiecewisePointHandleItem_MouseButtonPressEvent(cast(void*)swigCPtr, vtkContextMouseEvent.vtkContextMouseEvent.swigGetCPtr(mouse)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool MouseButtonReleaseEvent(vtkContextMouseEvent.vtkContextMouseEvent mouse) {
    bool ret = vtkd_im.vtkPiecewisePointHandleItem_MouseButtonReleaseEvent(cast(void*)swigCPtr, vtkContextMouseEvent.vtkContextMouseEvent.swigGetCPtr(mouse)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public this() {
    this(vtkd_im.new_vtkPiecewisePointHandleItem(), true);
  }
}
