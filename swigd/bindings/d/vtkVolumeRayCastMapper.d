/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkVolumeRayCastMapper;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkVolumeRayCastFunction;
static import vtkEncodedGradientEstimator;
static import vtkEncodedGradientShader;
static import vtkVolumeMapper;

class vtkVolumeRayCastMapper : vtkVolumeMapper.vtkVolumeMapper {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkVolumeRayCastMapper_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkVolumeRayCastMapper obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkVolumeRayCastMapper New() {
    void* cPtr = vtkd_im.vtkVolumeRayCastMapper_New();
    vtkVolumeRayCastMapper ret = (cPtr is null) ? null : new vtkVolumeRayCastMapper(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkVolumeRayCastMapper_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkVolumeRayCastMapper SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkVolumeRayCastMapper_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkVolumeRayCastMapper ret = (cPtr is null) ? null : new vtkVolumeRayCastMapper(cPtr, false);
    return ret;
  }

  public vtkVolumeRayCastMapper NewInstance() const {
    void* cPtr = vtkd_im.vtkVolumeRayCastMapper_NewInstance(cast(void*)swigCPtr);
    vtkVolumeRayCastMapper ret = (cPtr is null) ? null : new vtkVolumeRayCastMapper(cPtr, false);
    return ret;
  }

  alias vtkVolumeMapper.vtkVolumeMapper.NewInstance NewInstance;

  public void SetSampleDistance(double _arg) {
    vtkd_im.vtkVolumeRayCastMapper_SetSampleDistance(cast(void*)swigCPtr, _arg);
  }

  public double GetSampleDistance() {
    auto ret = vtkd_im.vtkVolumeRayCastMapper_GetSampleDistance(cast(void*)swigCPtr);
    return ret;
  }

  public void SetVolumeRayCastFunction(vtkVolumeRayCastFunction.vtkVolumeRayCastFunction arg0) {
    vtkd_im.vtkVolumeRayCastMapper_SetVolumeRayCastFunction(cast(void*)swigCPtr, vtkVolumeRayCastFunction.vtkVolumeRayCastFunction.swigGetCPtr(arg0));
  }

  public vtkVolumeRayCastFunction.vtkVolumeRayCastFunction GetVolumeRayCastFunction() {
    void* cPtr = vtkd_im.vtkVolumeRayCastMapper_GetVolumeRayCastFunction(cast(void*)swigCPtr);
    vtkVolumeRayCastFunction.vtkVolumeRayCastFunction ret = (cPtr is null) ? null : new vtkVolumeRayCastFunction.vtkVolumeRayCastFunction(cPtr, false);
    return ret;
  }

  public void SetGradientEstimator(vtkEncodedGradientEstimator.vtkEncodedGradientEstimator gradest) {
    vtkd_im.vtkVolumeRayCastMapper_SetGradientEstimator(cast(void*)swigCPtr, vtkEncodedGradientEstimator.vtkEncodedGradientEstimator.swigGetCPtr(gradest));
  }

  public vtkEncodedGradientEstimator.vtkEncodedGradientEstimator GetGradientEstimator() {
    void* cPtr = vtkd_im.vtkVolumeRayCastMapper_GetGradientEstimator(cast(void*)swigCPtr);
    vtkEncodedGradientEstimator.vtkEncodedGradientEstimator ret = (cPtr is null) ? null : new vtkEncodedGradientEstimator.vtkEncodedGradientEstimator(cPtr, false);
    return ret;
  }

  public vtkEncodedGradientShader.vtkEncodedGradientShader GetGradientShader() {
    void* cPtr = vtkd_im.vtkVolumeRayCastMapper_GetGradientShader(cast(void*)swigCPtr);
    vtkEncodedGradientShader.vtkEncodedGradientShader ret = (cPtr is null) ? null : new vtkEncodedGradientShader.vtkEncodedGradientShader(cPtr, false);
    return ret;
  }

  public void SetImageSampleDistance(double _arg) {
    vtkd_im.vtkVolumeRayCastMapper_SetImageSampleDistance(cast(void*)swigCPtr, _arg);
  }

  public double GetImageSampleDistanceMinValue() {
    auto ret = vtkd_im.vtkVolumeRayCastMapper_GetImageSampleDistanceMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetImageSampleDistanceMaxValue() {
    auto ret = vtkd_im.vtkVolumeRayCastMapper_GetImageSampleDistanceMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetImageSampleDistance() {
    auto ret = vtkd_im.vtkVolumeRayCastMapper_GetImageSampleDistance(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMinimumImageSampleDistance(double _arg) {
    vtkd_im.vtkVolumeRayCastMapper_SetMinimumImageSampleDistance(cast(void*)swigCPtr, _arg);
  }

  public double GetMinimumImageSampleDistanceMinValue() {
    auto ret = vtkd_im.vtkVolumeRayCastMapper_GetMinimumImageSampleDistanceMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetMinimumImageSampleDistanceMaxValue() {
    auto ret = vtkd_im.vtkVolumeRayCastMapper_GetMinimumImageSampleDistanceMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetMinimumImageSampleDistance() {
    auto ret = vtkd_im.vtkVolumeRayCastMapper_GetMinimumImageSampleDistance(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMaximumImageSampleDistance(double _arg) {
    vtkd_im.vtkVolumeRayCastMapper_SetMaximumImageSampleDistance(cast(void*)swigCPtr, _arg);
  }

  public double GetMaximumImageSampleDistanceMinValue() {
    auto ret = vtkd_im.vtkVolumeRayCastMapper_GetMaximumImageSampleDistanceMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetMaximumImageSampleDistanceMaxValue() {
    auto ret = vtkd_im.vtkVolumeRayCastMapper_GetMaximumImageSampleDistanceMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetMaximumImageSampleDistance() {
    auto ret = vtkd_im.vtkVolumeRayCastMapper_GetMaximumImageSampleDistance(cast(void*)swigCPtr);
    return ret;
  }

  public void SetAutoAdjustSampleDistances(int _arg) {
    vtkd_im.vtkVolumeRayCastMapper_SetAutoAdjustSampleDistances(cast(void*)swigCPtr, _arg);
  }

  public int GetAutoAdjustSampleDistancesMinValue() {
    auto ret = vtkd_im.vtkVolumeRayCastMapper_GetAutoAdjustSampleDistancesMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetAutoAdjustSampleDistancesMaxValue() {
    auto ret = vtkd_im.vtkVolumeRayCastMapper_GetAutoAdjustSampleDistancesMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetAutoAdjustSampleDistances() {
    auto ret = vtkd_im.vtkVolumeRayCastMapper_GetAutoAdjustSampleDistances(cast(void*)swigCPtr);
    return ret;
  }

  public void AutoAdjustSampleDistancesOn() {
    vtkd_im.vtkVolumeRayCastMapper_AutoAdjustSampleDistancesOn(cast(void*)swigCPtr);
  }

  public void AutoAdjustSampleDistancesOff() {
    vtkd_im.vtkVolumeRayCastMapper_AutoAdjustSampleDistancesOff(cast(void*)swigCPtr);
  }

  public void SetNumberOfThreads(int num) {
    vtkd_im.vtkVolumeRayCastMapper_SetNumberOfThreads(cast(void*)swigCPtr, num);
  }

  public int GetNumberOfThreads() {
    auto ret = vtkd_im.vtkVolumeRayCastMapper_GetNumberOfThreads(cast(void*)swigCPtr);
    return ret;
  }

  public void SetIntermixIntersectingGeometry(int _arg) {
    vtkd_im.vtkVolumeRayCastMapper_SetIntermixIntersectingGeometry(cast(void*)swigCPtr, _arg);
  }

  public int GetIntermixIntersectingGeometryMinValue() {
    auto ret = vtkd_im.vtkVolumeRayCastMapper_GetIntermixIntersectingGeometryMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetIntermixIntersectingGeometryMaxValue() {
    auto ret = vtkd_im.vtkVolumeRayCastMapper_GetIntermixIntersectingGeometryMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetIntermixIntersectingGeometry() {
    auto ret = vtkd_im.vtkVolumeRayCastMapper_GetIntermixIntersectingGeometry(cast(void*)swigCPtr);
    return ret;
  }

  public void IntermixIntersectingGeometryOn() {
    vtkd_im.vtkVolumeRayCastMapper_IntermixIntersectingGeometryOn(cast(void*)swigCPtr);
  }

  public void IntermixIntersectingGeometryOff() {
    vtkd_im.vtkVolumeRayCastMapper_IntermixIntersectingGeometryOff(cast(void*)swigCPtr);
  }
}
