/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkResliceCursorPicker;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkRenderer;
static import vtkResliceCursorPolyDataAlgorithm;
static import vtkMatrix4x4;
static import SWIGTYPE_p_double;
static import vtkPicker;

class vtkResliceCursorPicker : vtkPicker.vtkPicker {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkResliceCursorPicker_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkResliceCursorPicker obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkResliceCursorPicker New() {
    void* cPtr = vtkd_im.vtkResliceCursorPicker_New();
    vtkResliceCursorPicker ret = (cPtr is null) ? null : new vtkResliceCursorPicker(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkResliceCursorPicker_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkResliceCursorPicker SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkResliceCursorPicker_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkResliceCursorPicker ret = (cPtr is null) ? null : new vtkResliceCursorPicker(cPtr, false);
    return ret;
  }

  public vtkResliceCursorPicker NewInstance() const {
    void* cPtr = vtkd_im.vtkResliceCursorPicker_NewInstance(cast(void*)swigCPtr);
    vtkResliceCursorPicker ret = (cPtr is null) ? null : new vtkResliceCursorPicker(cPtr, false);
    return ret;
  }

  alias vtkPicker.vtkPicker.NewInstance NewInstance;

  public override int Pick(double selectionX, double selectionY, double selectionZ, vtkRenderer.vtkRenderer renderer) {
    auto ret = vtkd_im.vtkResliceCursorPicker_Pick__SWIG_0(cast(void*)swigCPtr, selectionX, selectionY, selectionZ, vtkRenderer.vtkRenderer.swigGetCPtr(renderer));
    return ret;
  }

  public int GetPickedAxis1() {
    auto ret = vtkd_im.vtkResliceCursorPicker_GetPickedAxis1(cast(void*)swigCPtr);
    return ret;
  }

  public int GetPickedAxis2() {
    auto ret = vtkd_im.vtkResliceCursorPicker_GetPickedAxis2(cast(void*)swigCPtr);
    return ret;
  }

  public int GetPickedCenter() {
    auto ret = vtkd_im.vtkResliceCursorPicker_GetPickedCenter(cast(void*)swigCPtr);
    return ret;
  }

  public void SetResliceCursorAlgorithm(vtkResliceCursorPolyDataAlgorithm.vtkResliceCursorPolyDataAlgorithm arg0) {
    vtkd_im.vtkResliceCursorPicker_SetResliceCursorAlgorithm(cast(void*)swigCPtr, vtkResliceCursorPolyDataAlgorithm.vtkResliceCursorPolyDataAlgorithm.swigGetCPtr(arg0));
  }

  public vtkResliceCursorPolyDataAlgorithm.vtkResliceCursorPolyDataAlgorithm GetResliceCursorAlgorithm() {
    void* cPtr = vtkd_im.vtkResliceCursorPicker_GetResliceCursorAlgorithm(cast(void*)swigCPtr);
    vtkResliceCursorPolyDataAlgorithm.vtkResliceCursorPolyDataAlgorithm ret = (cPtr is null) ? null : new vtkResliceCursorPolyDataAlgorithm.vtkResliceCursorPolyDataAlgorithm(cPtr, false);
    return ret;
  }

  public void SetTransformMatrix(vtkMatrix4x4.vtkMatrix4x4 arg0) {
    vtkd_im.vtkResliceCursorPicker_SetTransformMatrix(cast(void*)swigCPtr, vtkMatrix4x4.vtkMatrix4x4.swigGetCPtr(arg0));
  }

  public void Pick(SWIGTYPE_p_double.SWIGTYPE_p_double displayPos, SWIGTYPE_p_double.SWIGTYPE_p_double world, vtkRenderer.vtkRenderer ren) {
    vtkd_im.vtkResliceCursorPicker_Pick__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(displayPos), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(world), vtkRenderer.vtkRenderer.swigGetCPtr(ren));
  }

  alias vtkPicker.vtkPicker.Pick Pick;
}
