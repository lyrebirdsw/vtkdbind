/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkXMLShader;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkXMLDataElement;
static import vtkObject;

class vtkXMLShader : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkXMLShader_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkXMLShader obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkXMLShader New() {
    void* cPtr = vtkd_im.vtkXMLShader_New();
    vtkXMLShader ret = (cPtr is null) ? null : new vtkXMLShader(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkXMLShader_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkXMLShader SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkXMLShader_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkXMLShader ret = (cPtr is null) ? null : new vtkXMLShader(cPtr, false);
    return ret;
  }

  public vtkXMLShader NewInstance() const {
    void* cPtr = vtkd_im.vtkXMLShader_NewInstance(cast(void*)swigCPtr);
    vtkXMLShader ret = (cPtr is null) ? null : new vtkXMLShader(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public vtkXMLDataElement.vtkXMLDataElement GetRootElement() {
    void* cPtr = vtkd_im.vtkXMLShader_GetRootElement(cast(void*)swigCPtr);
    vtkXMLDataElement.vtkXMLDataElement ret = (cPtr is null) ? null : new vtkXMLDataElement.vtkXMLDataElement(cPtr, false);
    return ret;
  }

  public void SetRootElement(vtkXMLDataElement.vtkXMLDataElement arg0) {
    vtkd_im.vtkXMLShader_SetRootElement(cast(void*)swigCPtr, vtkXMLDataElement.vtkXMLDataElement.swigGetCPtr(arg0));
  }

  public int GetLanguage() {
    auto ret = vtkd_im.vtkXMLShader_GetLanguage(cast(void*)swigCPtr);
    return ret;
  }

  public int GetScope() {
    auto ret = vtkd_im.vtkXMLShader_GetScope(cast(void*)swigCPtr);
    return ret;
  }

  public int GetLocation() {
    auto ret = vtkd_im.vtkXMLShader_GetLocation(cast(void*)swigCPtr);
    return ret;
  }

  public int GetStyle() {
    auto ret = vtkd_im.vtkXMLShader_GetStyle(cast(void*)swigCPtr);
    return ret;
  }

  public string GetName() {
    string ret = std.conv.to!string(vtkd_im.vtkXMLShader_GetName(cast(void*)swigCPtr));
    return ret;
  }

  public string GetEntry() {
    string ret = std.conv.to!string(vtkd_im.vtkXMLShader_GetEntry(cast(void*)swigCPtr));
    return ret;
  }

  public string GetCode() {
    string ret = std.conv.to!string(vtkd_im.vtkXMLShader_GetCode(cast(void*)swigCPtr));
    return ret;
  }

  public char** GetArgs() {
    auto ret = cast(char**)vtkd_im.vtkXMLShader_GetArgs(cast(void*)swigCPtr);
    return ret;
  }

  public static string LocateFile(string filename) {
    string ret = std.conv.to!string(vtkd_im.vtkXMLShader_LocateFile((filename ? std.string.toStringz(filename) : null)));
    return ret;
  }
}
