/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkSimpleCellTessellator;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkGenericAdaptorCell;
static import vtkGenericCellTessellator;

class vtkSimpleCellTessellator : vtkGenericCellTessellator.vtkGenericCellTessellator {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkSimpleCellTessellator_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkSimpleCellTessellator obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkSimpleCellTessellator New() {
    void* cPtr = vtkd_im.vtkSimpleCellTessellator_New();
    vtkSimpleCellTessellator ret = (cPtr is null) ? null : new vtkSimpleCellTessellator(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkSimpleCellTessellator_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkSimpleCellTessellator SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkSimpleCellTessellator_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkSimpleCellTessellator ret = (cPtr is null) ? null : new vtkSimpleCellTessellator(cPtr, false);
    return ret;
  }

  public vtkSimpleCellTessellator NewInstance() const {
    void* cPtr = vtkd_im.vtkSimpleCellTessellator_NewInstance(cast(void*)swigCPtr);
    vtkSimpleCellTessellator ret = (cPtr is null) ? null : new vtkSimpleCellTessellator(cPtr, false);
    return ret;
  }

  alias vtkGenericCellTessellator.vtkGenericCellTessellator.NewInstance NewInstance;

  public vtkGenericAdaptorCell.vtkGenericAdaptorCell GetGenericCell() {
    void* cPtr = vtkd_im.vtkSimpleCellTessellator_GetGenericCell(cast(void*)swigCPtr);
    vtkGenericAdaptorCell.vtkGenericAdaptorCell ret = (cPtr is null) ? null : new vtkGenericAdaptorCell.vtkGenericAdaptorCell(cPtr, false);
    return ret;
  }

  public void Reset() {
    vtkd_im.vtkSimpleCellTessellator_Reset(cast(void*)swigCPtr);
  }

  public int GetFixedSubdivisions() {
    auto ret = vtkd_im.vtkSimpleCellTessellator_GetFixedSubdivisions(cast(void*)swigCPtr);
    return ret;
  }

  public int GetMaxSubdivisionLevel() {
    auto ret = vtkd_im.vtkSimpleCellTessellator_GetMaxSubdivisionLevel(cast(void*)swigCPtr);
    return ret;
  }

  public int GetMaxAdaptiveSubdivisions() {
    auto ret = vtkd_im.vtkSimpleCellTessellator_GetMaxAdaptiveSubdivisions(cast(void*)swigCPtr);
    return ret;
  }

  public void SetFixedSubdivisions(int level) {
    vtkd_im.vtkSimpleCellTessellator_SetFixedSubdivisions(cast(void*)swigCPtr, level);
  }

  public void SetMaxSubdivisionLevel(int level) {
    vtkd_im.vtkSimpleCellTessellator_SetMaxSubdivisionLevel(cast(void*)swigCPtr, level);
  }

  public void SetSubdivisionLevels(int fixed, int maxLevel) {
    vtkd_im.vtkSimpleCellTessellator_SetSubdivisionLevels(cast(void*)swigCPtr, fixed, maxLevel);
  }
}
