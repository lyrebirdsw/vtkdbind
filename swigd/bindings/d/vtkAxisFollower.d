/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkAxisFollower;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkAxisActor;
static import vtkRenderer;
static import vtkViewport;
static import vtkCamera;
static import SWIGTYPE_p_double;
static import vtkFollower;

class vtkAxisFollower : vtkFollower.vtkFollower {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkAxisFollower_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkAxisFollower obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkAxisFollower_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkAxisFollower SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkAxisFollower_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkAxisFollower ret = (cPtr is null) ? null : new vtkAxisFollower(cPtr, false);
    return ret;
  }

  public vtkAxisFollower NewInstance() const {
    void* cPtr = vtkd_im.vtkAxisFollower_NewInstance(cast(void*)swigCPtr);
    vtkAxisFollower ret = (cPtr is null) ? null : new vtkAxisFollower(cPtr, false);
    return ret;
  }

  alias vtkFollower.vtkFollower.NewInstance NewInstance;

  public static vtkAxisFollower New() {
    void* cPtr = vtkd_im.vtkAxisFollower_New();
    vtkAxisFollower ret = (cPtr is null) ? null : new vtkAxisFollower(cPtr, false);
    return ret;
  }

  public void SetAxis(vtkAxisActor.vtkAxisActor arg0) {
    vtkd_im.vtkAxisFollower_SetAxis(cast(void*)swigCPtr, vtkAxisActor.vtkAxisActor.swigGetCPtr(arg0));
  }

  public vtkAxisActor.vtkAxisActor GetAxis() {
    void* cPtr = vtkd_im.vtkAxisFollower_GetAxis(cast(void*)swigCPtr);
    vtkAxisActor.vtkAxisActor ret = (cPtr is null) ? null : new vtkAxisActor.vtkAxisActor(cPtr, false);
    return ret;
  }

  public void SetAutoCenter(int _arg) {
    vtkd_im.vtkAxisFollower_SetAutoCenter(cast(void*)swigCPtr, _arg);
  }

  public int GetAutoCenter() {
    auto ret = vtkd_im.vtkAxisFollower_GetAutoCenter(cast(void*)swigCPtr);
    return ret;
  }

  public void AutoCenterOn() {
    vtkd_im.vtkAxisFollower_AutoCenterOn(cast(void*)swigCPtr);
  }

  public void AutoCenterOff() {
    vtkd_im.vtkAxisFollower_AutoCenterOff(cast(void*)swigCPtr);
  }

  public void SetEnableDistanceLOD(int _arg) {
    vtkd_im.vtkAxisFollower_SetEnableDistanceLOD(cast(void*)swigCPtr, _arg);
  }

  public int GetEnableDistanceLOD() {
    auto ret = vtkd_im.vtkAxisFollower_GetEnableDistanceLOD(cast(void*)swigCPtr);
    return ret;
  }

  public void SetDistanceLODThreshold(double _arg) {
    vtkd_im.vtkAxisFollower_SetDistanceLODThreshold(cast(void*)swigCPtr, _arg);
  }

  public double GetDistanceLODThresholdMinValue() {
    auto ret = vtkd_im.vtkAxisFollower_GetDistanceLODThresholdMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetDistanceLODThresholdMaxValue() {
    auto ret = vtkd_im.vtkAxisFollower_GetDistanceLODThresholdMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetDistanceLODThreshold() {
    auto ret = vtkd_im.vtkAxisFollower_GetDistanceLODThreshold(cast(void*)swigCPtr);
    return ret;
  }

  public void SetEnableViewAngleLOD(int _arg) {
    vtkd_im.vtkAxisFollower_SetEnableViewAngleLOD(cast(void*)swigCPtr, _arg);
  }

  public int GetEnableViewAngleLOD() {
    auto ret = vtkd_im.vtkAxisFollower_GetEnableViewAngleLOD(cast(void*)swigCPtr);
    return ret;
  }

  public void SetViewAngleLODThreshold(double _arg) {
    vtkd_im.vtkAxisFollower_SetViewAngleLODThreshold(cast(void*)swigCPtr, _arg);
  }

  public double GetViewAngleLODThresholdMinValue() {
    auto ret = vtkd_im.vtkAxisFollower_GetViewAngleLODThresholdMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetViewAngleLODThresholdMaxValue() {
    auto ret = vtkd_im.vtkAxisFollower_GetViewAngleLODThresholdMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetViewAngleLODThreshold() {
    auto ret = vtkd_im.vtkAxisFollower_GetViewAngleLODThreshold(cast(void*)swigCPtr);
    return ret;
  }

  public void SetScreenOffset(double _arg) {
    vtkd_im.vtkAxisFollower_SetScreenOffset(cast(void*)swigCPtr, _arg);
  }

  public double GetScreenOffset() {
    auto ret = vtkd_im.vtkAxisFollower_GetScreenOffset(cast(void*)swigCPtr);
    return ret;
  }

  public void ComputeTransformMatrix(vtkRenderer.vtkRenderer ren) {
    vtkd_im.vtkAxisFollower_ComputeTransformMatrix(cast(void*)swigCPtr, vtkRenderer.vtkRenderer.swigGetCPtr(ren));
  }

  public static double AutoScale(vtkViewport.vtkViewport viewport, vtkCamera.vtkCamera camera, double screenSize, SWIGTYPE_p_double.SWIGTYPE_p_double position) {
    auto ret = vtkd_im.vtkAxisFollower_AutoScale(vtkViewport.vtkViewport.swigGetCPtr(viewport), vtkCamera.vtkCamera.swigGetCPtr(camera), screenSize, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(position));
    return ret;
  }
}
