/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkScalarsToColorsPainter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkInformationIntegerKey;
static import vtkInformationDoubleVectorKey;
static import vtkInformationObjectBaseKey;
static import vtkScalarsToColors;
static import vtkInformationStringKey;
static import vtkActor;
static import vtkPainter;

class vtkScalarsToColorsPainter : vtkPainter.vtkPainter {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkScalarsToColorsPainter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkScalarsToColorsPainter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkScalarsToColorsPainter(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkScalarsToColorsPainter New() {
    void* cPtr = vtkd_im.vtkScalarsToColorsPainter_New();
    vtkScalarsToColorsPainter ret = (cPtr is null) ? null : new vtkScalarsToColorsPainter(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkScalarsToColorsPainter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkScalarsToColorsPainter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkScalarsToColorsPainter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkScalarsToColorsPainter ret = (cPtr is null) ? null : new vtkScalarsToColorsPainter(cPtr, false);
    return ret;
  }

  public vtkScalarsToColorsPainter NewInstance() const {
    void* cPtr = vtkd_im.vtkScalarsToColorsPainter_NewInstance(cast(void*)swigCPtr);
    vtkScalarsToColorsPainter ret = (cPtr is null) ? null : new vtkScalarsToColorsPainter(cPtr, false);
    return ret;
  }

  alias vtkPainter.vtkPainter.NewInstance NewInstance;

  public static vtkInformationIntegerKey.vtkInformationIntegerKey USE_LOOKUP_TABLE_SCALAR_RANGE() {
    void* cPtr = vtkd_im.vtkScalarsToColorsPainter_USE_LOOKUP_TABLE_SCALAR_RANGE();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public static vtkInformationDoubleVectorKey.vtkInformationDoubleVectorKey SCALAR_RANGE() {
    void* cPtr = vtkd_im.vtkScalarsToColorsPainter_SCALAR_RANGE();
    vtkInformationDoubleVectorKey.vtkInformationDoubleVectorKey ret = (cPtr is null) ? null : new vtkInformationDoubleVectorKey.vtkInformationDoubleVectorKey(cPtr, false);
    return ret;
  }

  public static vtkInformationIntegerKey.vtkInformationIntegerKey SCALAR_MODE() {
    void* cPtr = vtkd_im.vtkScalarsToColorsPainter_SCALAR_MODE();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public static vtkInformationIntegerKey.vtkInformationIntegerKey COLOR_MODE() {
    void* cPtr = vtkd_im.vtkScalarsToColorsPainter_COLOR_MODE();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public static vtkInformationIntegerKey.vtkInformationIntegerKey INTERPOLATE_SCALARS_BEFORE_MAPPING() {
    void* cPtr = vtkd_im.vtkScalarsToColorsPainter_INTERPOLATE_SCALARS_BEFORE_MAPPING();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public static vtkInformationObjectBaseKey.vtkInformationObjectBaseKey LOOKUP_TABLE() {
    void* cPtr = vtkd_im.vtkScalarsToColorsPainter_LOOKUP_TABLE();
    vtkInformationObjectBaseKey.vtkInformationObjectBaseKey ret = (cPtr is null) ? null : new vtkInformationObjectBaseKey.vtkInformationObjectBaseKey(cPtr, false);
    return ret;
  }

  public void SetLookupTable(vtkScalarsToColors.vtkScalarsToColors lut) {
    vtkd_im.vtkScalarsToColorsPainter_SetLookupTable(cast(void*)swigCPtr, vtkScalarsToColors.vtkScalarsToColors.swigGetCPtr(lut));
  }

  public vtkScalarsToColors.vtkScalarsToColors GetLookupTable() {
    void* cPtr = vtkd_im.vtkScalarsToColorsPainter_GetLookupTable(cast(void*)swigCPtr);
    vtkScalarsToColors.vtkScalarsToColors ret = (cPtr is null) ? null : new vtkScalarsToColors.vtkScalarsToColors(cPtr, false);
    return ret;
  }

  public void CreateDefaultLookupTable() {
    vtkd_im.vtkScalarsToColorsPainter_CreateDefaultLookupTable(cast(void*)swigCPtr);
  }

  public static vtkInformationIntegerKey.vtkInformationIntegerKey SCALAR_VISIBILITY() {
    void* cPtr = vtkd_im.vtkScalarsToColorsPainter_SCALAR_VISIBILITY();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public static vtkInformationIntegerKey.vtkInformationIntegerKey ARRAY_ACCESS_MODE() {
    void* cPtr = vtkd_im.vtkScalarsToColorsPainter_ARRAY_ACCESS_MODE();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public static vtkInformationIntegerKey.vtkInformationIntegerKey ARRAY_ID() {
    void* cPtr = vtkd_im.vtkScalarsToColorsPainter_ARRAY_ID();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public static vtkInformationStringKey.vtkInformationStringKey ARRAY_NAME() {
    void* cPtr = vtkd_im.vtkScalarsToColorsPainter_ARRAY_NAME();
    vtkInformationStringKey.vtkInformationStringKey ret = (cPtr is null) ? null : new vtkInformationStringKey.vtkInformationStringKey(cPtr, false);
    return ret;
  }

  public static vtkInformationIntegerKey.vtkInformationIntegerKey ARRAY_COMPONENT() {
    void* cPtr = vtkd_im.vtkScalarsToColorsPainter_ARRAY_COMPONENT();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public static vtkInformationIntegerKey.vtkInformationIntegerKey SCALAR_MATERIAL_MODE() {
    void* cPtr = vtkd_im.vtkScalarsToColorsPainter_SCALAR_MATERIAL_MODE();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public int GetPremultiplyColorsWithAlpha(vtkActor.vtkActor actor) {
    auto ret = vtkd_im.vtkScalarsToColorsPainter_GetPremultiplyColorsWithAlpha(cast(void*)swigCPtr, vtkActor.vtkActor.swigGetCPtr(actor));
    return ret;
  }

  public long GetTextureSizeLimit() {
    auto ret = vtkd_im.vtkScalarsToColorsPainter_GetTextureSizeLimit(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(vtkd_im.new_vtkScalarsToColorsPainter(), true);
  }
}
