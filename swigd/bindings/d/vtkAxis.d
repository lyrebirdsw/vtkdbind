/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkAxis;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkVector2f;
static import SWIGTYPE_p_float;
static import vtkTextProperty;
static import SWIGTYPE_p_double;
static import SWIGTYPE_p_int;
static import vtkStdString;
static import vtkPen;
static import vtkDoubleArray;
static import vtkFloatArray;
static import vtkStringArray;
static import vtkRectf;
static import vtkContext2D;
static import vtkContextItem;

class vtkAxis : vtkContextItem.vtkContextItem {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkAxis_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkAxis obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkAxis(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  enum {
    LEFT = 0,
    BOTTOM,
    RIGHT,
    TOP,
    PARALLEL
  }

  enum {
    TICK_SIMPLE = 0,
    TICK_WILKINSON_EXTENDED
  }

  enum {
    STANDARD_NOTATION = 0,
    SCIENTIFIC_NOTATION,
    FIXED_NOTATION,
    STANDARD = STANDARD_NOTATION,
    SCIENTIFIC = SCIENTIFIC_NOTATION,
    MIXED = FIXED_NOTATION
  }

  enum {
    AUTO = 0,
    FIXED,
    CUSTOM
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkAxis_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkAxis SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkAxis_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkAxis ret = (cPtr is null) ? null : new vtkAxis(cPtr, false);
    return ret;
  }

  public vtkAxis NewInstance() const {
    void* cPtr = vtkd_im.vtkAxis_NewInstance(cast(void*)swigCPtr);
    vtkAxis ret = (cPtr is null) ? null : new vtkAxis(cPtr, false);
    return ret;
  }

  alias vtkContextItem.vtkContextItem.NewInstance NewInstance;

  public static vtkAxis New() {
    void* cPtr = vtkd_im.vtkAxis_New();
    vtkAxis ret = (cPtr is null) ? null : new vtkAxis(cPtr, false);
    return ret;
  }

  public void SetPosition(int position) {
    vtkd_im.vtkAxis_SetPosition(cast(void*)swigCPtr, position);
  }

  public int GetPosition() {
    auto ret = vtkd_im.vtkAxis_GetPosition(cast(void*)swigCPtr);
    return ret;
  }

  public void SetPoint1(vtkVector2f.vtkVector2f pos) {
    vtkd_im.vtkAxis_SetPoint1__SWIG_0(cast(void*)swigCPtr, vtkVector2f.vtkVector2f.swigGetCPtr(pos));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void SetPoint1(float x, float y) {
    vtkd_im.vtkAxis_SetPoint1__SWIG_1(cast(void*)swigCPtr, x, y);
  }

  public float* GetPoint1() {
    auto ret = cast(float*)vtkd_im.vtkAxis_GetPoint1__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetPoint1(float* _arg1, float* _arg2) {
    vtkd_im.vtkAxis_GetPoint1__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetPoint1(SWIGTYPE_p_float.SWIGTYPE_p_float _arg) {
    vtkd_im.vtkAxis_GetPoint1__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(_arg));
  }

  public vtkVector2f.vtkVector2f GetPosition1() {
    vtkVector2f.vtkVector2f ret = new vtkVector2f.vtkVector2f(vtkd_im.vtkAxis_GetPosition1(cast(void*)swigCPtr), true);
    return ret;
  }

  public void SetPoint2(vtkVector2f.vtkVector2f pos) {
    vtkd_im.vtkAxis_SetPoint2__SWIG_0(cast(void*)swigCPtr, vtkVector2f.vtkVector2f.swigGetCPtr(pos));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void SetPoint2(float x, float y) {
    vtkd_im.vtkAxis_SetPoint2__SWIG_1(cast(void*)swigCPtr, x, y);
  }

  public float* GetPoint2() {
    auto ret = cast(float*)vtkd_im.vtkAxis_GetPoint2__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetPoint2(float* _arg1, float* _arg2) {
    vtkd_im.vtkAxis_GetPoint2__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetPoint2(SWIGTYPE_p_float.SWIGTYPE_p_float _arg) {
    vtkd_im.vtkAxis_GetPoint2__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(_arg));
  }

  public vtkVector2f.vtkVector2f GetPosition2() {
    vtkVector2f.vtkVector2f ret = new vtkVector2f.vtkVector2f(vtkd_im.vtkAxis_GetPosition2(cast(void*)swigCPtr), true);
    return ret;
  }

  public void SetNumberOfTicks(int numberOfTicks) {
    vtkd_im.vtkAxis_SetNumberOfTicks(cast(void*)swigCPtr, numberOfTicks);
  }

  public int GetNumberOfTicks() {
    auto ret = vtkd_im.vtkAxis_GetNumberOfTicks(cast(void*)swigCPtr);
    return ret;
  }

  public vtkTextProperty.vtkTextProperty GetLabelProperties() {
    void* cPtr = vtkd_im.vtkAxis_GetLabelProperties(cast(void*)swigCPtr);
    vtkTextProperty.vtkTextProperty ret = (cPtr is null) ? null : new vtkTextProperty.vtkTextProperty(cPtr, false);
    return ret;
  }

  public void SetMinimum(double minimum) {
    vtkd_im.vtkAxis_SetMinimum(cast(void*)swigCPtr, minimum);
  }

  public double GetMinimum() {
    auto ret = vtkd_im.vtkAxis_GetMinimum(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMaximum(double maximum) {
    vtkd_im.vtkAxis_SetMaximum(cast(void*)swigCPtr, maximum);
  }

  public double GetMaximum() {
    auto ret = vtkd_im.vtkAxis_GetMaximum(cast(void*)swigCPtr);
    return ret;
  }

  public void SetUnscaledMinimum(double minimum) {
    vtkd_im.vtkAxis_SetUnscaledMinimum(cast(void*)swigCPtr, minimum);
  }

  public double GetUnscaledMinimum() {
    auto ret = vtkd_im.vtkAxis_GetUnscaledMinimum(cast(void*)swigCPtr);
    return ret;
  }

  public void SetUnscaledMaximum(double maximum) {
    vtkd_im.vtkAxis_SetUnscaledMaximum(cast(void*)swigCPtr, maximum);
  }

  public double GetUnscaledMaximum() {
    auto ret = vtkd_im.vtkAxis_GetUnscaledMaximum(cast(void*)swigCPtr);
    return ret;
  }

  public void SetRange(double minimum, double maximum) {
    vtkd_im.vtkAxis_SetRange__SWIG_0(cast(void*)swigCPtr, minimum, maximum);
  }

  public void SetRange(SWIGTYPE_p_double.SWIGTYPE_p_double range) {
    vtkd_im.vtkAxis_SetRange__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(range));
  }

  public void SetUnscaledRange(double minimum, double maximum) {
    vtkd_im.vtkAxis_SetUnscaledRange__SWIG_0(cast(void*)swigCPtr, minimum, maximum);
  }

  public void SetUnscaledRange(SWIGTYPE_p_double.SWIGTYPE_p_double range) {
    vtkd_im.vtkAxis_SetUnscaledRange__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(range));
  }

  public void GetRange(double* range) {
    vtkd_im.vtkAxis_GetRange(cast(void*)swigCPtr, cast(void*)range);
  }

  public void GetUnscaledRange(double* range) {
    vtkd_im.vtkAxis_GetUnscaledRange(cast(void*)swigCPtr, cast(void*)range);
  }

  public void SetMinimumLimit(double lowest) {
    vtkd_im.vtkAxis_SetMinimumLimit(cast(void*)swigCPtr, lowest);
  }

  public double GetMinimumLimit() {
    auto ret = vtkd_im.vtkAxis_GetMinimumLimit(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMaximumLimit(double highest) {
    vtkd_im.vtkAxis_SetMaximumLimit(cast(void*)swigCPtr, highest);
  }

  public double GetMaximumLimit() {
    auto ret = vtkd_im.vtkAxis_GetMaximumLimit(cast(void*)swigCPtr);
    return ret;
  }

  public void SetUnscaledMinimumLimit(double lowest) {
    vtkd_im.vtkAxis_SetUnscaledMinimumLimit(cast(void*)swigCPtr, lowest);
  }

  public double GetUnscaledMinimumLimit() {
    auto ret = vtkd_im.vtkAxis_GetUnscaledMinimumLimit(cast(void*)swigCPtr);
    return ret;
  }

  public void SetUnscaledMaximumLimit(double highest) {
    vtkd_im.vtkAxis_SetUnscaledMaximumLimit(cast(void*)swigCPtr, highest);
  }

  public double GetUnscaledMaximumLimit() {
    auto ret = vtkd_im.vtkAxis_GetUnscaledMaximumLimit(cast(void*)swigCPtr);
    return ret;
  }

  public int* GetMargins() {
    auto ret = cast(int*)vtkd_im.vtkAxis_GetMargins__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetMargins(int* _arg1, int* _arg2) {
    vtkd_im.vtkAxis_GetMargins__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetMargins(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkAxis_GetMargins__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public void SetMargins(int _arg1, int _arg2) {
    vtkd_im.vtkAxis_SetMargins__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2);
  }

  public void SetMargins(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkAxis_SetMargins__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public void SetTitle(vtkStdString.vtkStdString title) {
    vtkd_im.vtkAxis_SetTitle(cast(void*)swigCPtr, vtkStdString.vtkStdString.swigGetCPtr(title));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public vtkStdString.vtkStdString GetTitle() {
    vtkStdString.vtkStdString ret = new vtkStdString.vtkStdString(vtkd_im.vtkAxis_GetTitle(cast(void*)swigCPtr), true);
    return ret;
  }

  public vtkTextProperty.vtkTextProperty GetTitleProperties() {
    void* cPtr = vtkd_im.vtkAxis_GetTitleProperties(cast(void*)swigCPtr);
    vtkTextProperty.vtkTextProperty ret = (cPtr is null) ? null : new vtkTextProperty.vtkTextProperty(cPtr, false);
    return ret;
  }

  public bool GetLogScaleActive() {
    bool ret = vtkd_im.vtkAxis_GetLogScaleActive(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool GetLogScale() {
    bool ret = vtkd_im.vtkAxis_GetLogScale(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetLogScale(bool logScale) {
    vtkd_im.vtkAxis_SetLogScale(cast(void*)swigCPtr, logScale);
  }

  public void LogScaleOn() {
    vtkd_im.vtkAxis_LogScaleOn(cast(void*)swigCPtr);
  }

  public void LogScaleOff() {
    vtkd_im.vtkAxis_LogScaleOff(cast(void*)swigCPtr);
  }

  public void SetGridVisible(bool _arg) {
    vtkd_im.vtkAxis_SetGridVisible(cast(void*)swigCPtr, _arg);
  }

  public bool GetGridVisible() {
    bool ret = vtkd_im.vtkAxis_GetGridVisible(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetLabelsVisible(bool _arg) {
    vtkd_im.vtkAxis_SetLabelsVisible(cast(void*)swigCPtr, _arg);
  }

  public bool GetLabelsVisible() {
    bool ret = vtkd_im.vtkAxis_GetLabelsVisible(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetTicksVisible(bool _arg) {
    vtkd_im.vtkAxis_SetTicksVisible(cast(void*)swigCPtr, _arg);
  }

  public bool GetTicksVisible() {
    bool ret = vtkd_im.vtkAxis_GetTicksVisible(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetPrecision(int precision) {
    vtkd_im.vtkAxis_SetPrecision(cast(void*)swigCPtr, precision);
  }

  public int GetPrecision() {
    auto ret = vtkd_im.vtkAxis_GetPrecision(cast(void*)swigCPtr);
    return ret;
  }

  public void SetNotation(int notation) {
    vtkd_im.vtkAxis_SetNotation(cast(void*)swigCPtr, notation);
  }

  public int GetNotation() {
    auto ret = vtkd_im.vtkAxis_GetNotation(cast(void*)swigCPtr);
    return ret;
  }

  public void SetBehavior(int _arg) {
    vtkd_im.vtkAxis_SetBehavior(cast(void*)swigCPtr, _arg);
  }

  public int GetBehavior() {
    auto ret = vtkd_im.vtkAxis_GetBehavior(cast(void*)swigCPtr);
    return ret;
  }

  public vtkPen.vtkPen GetPen() {
    void* cPtr = vtkd_im.vtkAxis_GetPen(cast(void*)swigCPtr);
    vtkPen.vtkPen ret = (cPtr is null) ? null : new vtkPen.vtkPen(cPtr, false);
    return ret;
  }

  public vtkPen.vtkPen GetGridPen() {
    void* cPtr = vtkd_im.vtkAxis_GetGridPen(cast(void*)swigCPtr);
    vtkPen.vtkPen ret = (cPtr is null) ? null : new vtkPen.vtkPen(cPtr, false);
    return ret;
  }

  public void SetTickLabelAlgorithm(int _arg) {
    vtkd_im.vtkAxis_SetTickLabelAlgorithm(cast(void*)swigCPtr, _arg);
  }

  public int GetTickLabelAlgorithm() {
    auto ret = vtkd_im.vtkAxis_GetTickLabelAlgorithm(cast(void*)swigCPtr);
    return ret;
  }

  public void AutoScale() {
    vtkd_im.vtkAxis_AutoScale(cast(void*)swigCPtr);
  }

  public void RecalculateTickSpacing() {
    vtkd_im.vtkAxis_RecalculateTickSpacing(cast(void*)swigCPtr);
  }

  public vtkDoubleArray.vtkDoubleArray GetTickPositions() {
    void* cPtr = vtkd_im.vtkAxis_GetTickPositions(cast(void*)swigCPtr);
    vtkDoubleArray.vtkDoubleArray ret = (cPtr is null) ? null : new vtkDoubleArray.vtkDoubleArray(cPtr, false);
    return ret;
  }

  public vtkFloatArray.vtkFloatArray GetTickScenePositions() {
    void* cPtr = vtkd_im.vtkAxis_GetTickScenePositions(cast(void*)swigCPtr);
    vtkFloatArray.vtkFloatArray ret = (cPtr is null) ? null : new vtkFloatArray.vtkFloatArray(cPtr, false);
    return ret;
  }

  public vtkStringArray.vtkStringArray GetTickLabels() {
    void* cPtr = vtkd_im.vtkAxis_GetTickLabels(cast(void*)swigCPtr);
    vtkStringArray.vtkStringArray ret = (cPtr is null) ? null : new vtkStringArray.vtkStringArray(cPtr, false);
    return ret;
  }

  public bool SetCustomTickPositions(vtkDoubleArray.vtkDoubleArray positions, vtkStringArray.vtkStringArray labels) {
    bool ret = vtkd_im.vtkAxis_SetCustomTickPositions__SWIG_0(cast(void*)swigCPtr, vtkDoubleArray.vtkDoubleArray.swigGetCPtr(positions), vtkStringArray.vtkStringArray.swigGetCPtr(labels)) ? true : false;
    return ret;
  }

  public bool SetCustomTickPositions(vtkDoubleArray.vtkDoubleArray positions) {
    bool ret = vtkd_im.vtkAxis_SetCustomTickPositions__SWIG_1(cast(void*)swigCPtr, vtkDoubleArray.vtkDoubleArray.swigGetCPtr(positions)) ? true : false;
    return ret;
  }

  public void SetTickPositions(vtkDoubleArray.vtkDoubleArray positions) {
    vtkd_im.vtkAxis_SetTickPositions(cast(void*)swigCPtr, vtkDoubleArray.vtkDoubleArray.swigGetCPtr(positions));
  }

  public void SetTickLabels(vtkStringArray.vtkStringArray labels) {
    vtkd_im.vtkAxis_SetTickLabels(cast(void*)swigCPtr, vtkStringArray.vtkStringArray.swigGetCPtr(labels));
  }

  public vtkRectf.vtkRectf GetBoundingRect(vtkContext2D.vtkContext2D painter) {
    vtkRectf.vtkRectf ret = new vtkRectf.vtkRectf(vtkd_im.vtkAxis_GetBoundingRect(cast(void*)swigCPtr, vtkContext2D.vtkContext2D.swigGetCPtr(painter)), true);
    return ret;
  }

  public static double NiceNumber(double number, bool roundUp) {
    auto ret = vtkd_im.vtkAxis_NiceNumber(number, roundUp);
    return ret;
  }

  public static double NiceMinMax(double* min, double* max, float pixelRange, float tickPixelSpacing) {
    auto ret = vtkd_im.vtkAxis_NiceMinMax(cast(void*)min, cast(void*)max, pixelRange, tickPixelSpacing);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public this() {
    this(vtkd_im.new_vtkAxis(), true);
  }
}
