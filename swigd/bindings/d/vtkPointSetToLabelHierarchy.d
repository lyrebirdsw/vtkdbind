/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPointSetToLabelHierarchy;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkTextProperty;
static import vtkLabelHierarchyAlgorithm;

class vtkPointSetToLabelHierarchy : vtkLabelHierarchyAlgorithm.vtkLabelHierarchyAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPointSetToLabelHierarchy_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPointSetToLabelHierarchy obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkPointSetToLabelHierarchy New() {
    void* cPtr = vtkd_im.vtkPointSetToLabelHierarchy_New();
    vtkPointSetToLabelHierarchy ret = (cPtr is null) ? null : new vtkPointSetToLabelHierarchy(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPointSetToLabelHierarchy_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPointSetToLabelHierarchy SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPointSetToLabelHierarchy_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPointSetToLabelHierarchy ret = (cPtr is null) ? null : new vtkPointSetToLabelHierarchy(cPtr, false);
    return ret;
  }

  public vtkPointSetToLabelHierarchy NewInstance() const {
    void* cPtr = vtkd_im.vtkPointSetToLabelHierarchy_NewInstance(cast(void*)swigCPtr);
    vtkPointSetToLabelHierarchy ret = (cPtr is null) ? null : new vtkPointSetToLabelHierarchy(cPtr, false);
    return ret;
  }

  alias vtkLabelHierarchyAlgorithm.vtkLabelHierarchyAlgorithm.NewInstance NewInstance;

  public void SetTargetLabelCount(int _arg) {
    vtkd_im.vtkPointSetToLabelHierarchy_SetTargetLabelCount(cast(void*)swigCPtr, _arg);
  }

  public int GetTargetLabelCount() {
    auto ret = vtkd_im.vtkPointSetToLabelHierarchy_GetTargetLabelCount(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMaximumDepth(int _arg) {
    vtkd_im.vtkPointSetToLabelHierarchy_SetMaximumDepth(cast(void*)swigCPtr, _arg);
  }

  public int GetMaximumDepth() {
    auto ret = vtkd_im.vtkPointSetToLabelHierarchy_GetMaximumDepth(cast(void*)swigCPtr);
    return ret;
  }

  public void SetUseUnicodeStrings(bool _arg) {
    vtkd_im.vtkPointSetToLabelHierarchy_SetUseUnicodeStrings(cast(void*)swigCPtr, _arg);
  }

  public bool GetUseUnicodeStrings() {
    bool ret = vtkd_im.vtkPointSetToLabelHierarchy_GetUseUnicodeStrings(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void UseUnicodeStringsOn() {
    vtkd_im.vtkPointSetToLabelHierarchy_UseUnicodeStringsOn(cast(void*)swigCPtr);
  }

  public void UseUnicodeStringsOff() {
    vtkd_im.vtkPointSetToLabelHierarchy_UseUnicodeStringsOff(cast(void*)swigCPtr);
  }

  public void SetLabelArrayName(string name) {
    vtkd_im.vtkPointSetToLabelHierarchy_SetLabelArrayName(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
  }

  public string GetLabelArrayName() {
    string ret = std.conv.to!string(vtkd_im.vtkPointSetToLabelHierarchy_GetLabelArrayName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetSizeArrayName(string name) {
    vtkd_im.vtkPointSetToLabelHierarchy_SetSizeArrayName(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
  }

  public string GetSizeArrayName() {
    string ret = std.conv.to!string(vtkd_im.vtkPointSetToLabelHierarchy_GetSizeArrayName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetPriorityArrayName(string name) {
    vtkd_im.vtkPointSetToLabelHierarchy_SetPriorityArrayName(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
  }

  public string GetPriorityArrayName() {
    string ret = std.conv.to!string(vtkd_im.vtkPointSetToLabelHierarchy_GetPriorityArrayName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetIconIndexArrayName(string name) {
    vtkd_im.vtkPointSetToLabelHierarchy_SetIconIndexArrayName(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
  }

  public string GetIconIndexArrayName() {
    string ret = std.conv.to!string(vtkd_im.vtkPointSetToLabelHierarchy_GetIconIndexArrayName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetOrientationArrayName(string name) {
    vtkd_im.vtkPointSetToLabelHierarchy_SetOrientationArrayName(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
  }

  public string GetOrientationArrayName() {
    string ret = std.conv.to!string(vtkd_im.vtkPointSetToLabelHierarchy_GetOrientationArrayName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetBoundedSizeArrayName(string name) {
    vtkd_im.vtkPointSetToLabelHierarchy_SetBoundedSizeArrayName(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
  }

  public string GetBoundedSizeArrayName() {
    string ret = std.conv.to!string(vtkd_im.vtkPointSetToLabelHierarchy_GetBoundedSizeArrayName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetTextProperty(vtkTextProperty.vtkTextProperty tprop) {
    vtkd_im.vtkPointSetToLabelHierarchy_SetTextProperty(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop));
  }

  public vtkTextProperty.vtkTextProperty GetTextProperty() {
    void* cPtr = vtkd_im.vtkPointSetToLabelHierarchy_GetTextProperty(cast(void*)swigCPtr);
    vtkTextProperty.vtkTextProperty ret = (cPtr is null) ? null : new vtkTextProperty.vtkTextProperty(cPtr, false);
    return ret;
  }
}
