/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkMoleculeMapper;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkMolecule;
static import SWIGTYPE_p_unsigned_char;
static import vtkSelection;
static import vtkIdTypeArray;
static import SWIGTYPE_p_double;
static import vtkInformation;
static import vtkMapper;

class vtkMoleculeMapper : vtkMapper.vtkMapper {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkMoleculeMapper_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkMoleculeMapper obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  enum {
    CovalentRadius = 0,
    VDWRadius,
    UnitRadius
  }

  enum {
    SingleColor = 0,
    DiscreteByAtom
  }

  public static vtkMoleculeMapper New() {
    void* cPtr = vtkd_im.vtkMoleculeMapper_New();
    vtkMoleculeMapper ret = (cPtr is null) ? null : new vtkMoleculeMapper(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkMoleculeMapper_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkMoleculeMapper SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkMoleculeMapper_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkMoleculeMapper ret = (cPtr is null) ? null : new vtkMoleculeMapper(cPtr, false);
    return ret;
  }

  public vtkMoleculeMapper NewInstance() const {
    void* cPtr = vtkd_im.vtkMoleculeMapper_NewInstance(cast(void*)swigCPtr);
    vtkMoleculeMapper ret = (cPtr is null) ? null : new vtkMoleculeMapper(cPtr, false);
    return ret;
  }

  alias vtkMapper.vtkMapper.NewInstance NewInstance;

  public void SetInputData(vtkMolecule.vtkMolecule arg0) {
    vtkd_im.vtkMoleculeMapper_SetInputData(cast(void*)swigCPtr, vtkMolecule.vtkMolecule.swigGetCPtr(arg0));
  }

  public vtkMolecule.vtkMolecule GetInput() {
    void* cPtr = vtkd_im.vtkMoleculeMapper_GetInput(cast(void*)swigCPtr);
    vtkMolecule.vtkMolecule ret = (cPtr is null) ? null : new vtkMolecule.vtkMolecule(cPtr, false);
    return ret;
  }

  public void UseBallAndStickSettings() {
    vtkd_im.vtkMoleculeMapper_UseBallAndStickSettings(cast(void*)swigCPtr);
  }

  public void UseVDWSpheresSettings() {
    vtkd_im.vtkMoleculeMapper_UseVDWSpheresSettings(cast(void*)swigCPtr);
  }

  public void UseLiquoriceStickSettings() {
    vtkd_im.vtkMoleculeMapper_UseLiquoriceStickSettings(cast(void*)swigCPtr);
  }

  public void UseFastSettings() {
    vtkd_im.vtkMoleculeMapper_UseFastSettings(cast(void*)swigCPtr);
  }

  public bool GetRenderAtoms() {
    bool ret = vtkd_im.vtkMoleculeMapper_GetRenderAtoms(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetRenderAtoms(bool _arg) {
    vtkd_im.vtkMoleculeMapper_SetRenderAtoms(cast(void*)swigCPtr, _arg);
  }

  public void RenderAtomsOn() {
    vtkd_im.vtkMoleculeMapper_RenderAtomsOn(cast(void*)swigCPtr);
  }

  public void RenderAtomsOff() {
    vtkd_im.vtkMoleculeMapper_RenderAtomsOff(cast(void*)swigCPtr);
  }

  public bool GetRenderBonds() {
    bool ret = vtkd_im.vtkMoleculeMapper_GetRenderBonds(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetRenderBonds(bool _arg) {
    vtkd_im.vtkMoleculeMapper_SetRenderBonds(cast(void*)swigCPtr, _arg);
  }

  public void RenderBondsOn() {
    vtkd_im.vtkMoleculeMapper_RenderBondsOn(cast(void*)swigCPtr);
  }

  public void RenderBondsOff() {
    vtkd_im.vtkMoleculeMapper_RenderBondsOff(cast(void*)swigCPtr);
  }

  public int GetAtomicRadiusType() {
    auto ret = vtkd_im.vtkMoleculeMapper_GetAtomicRadiusType(cast(void*)swigCPtr);
    return ret;
  }

  public void SetAtomicRadiusType(int _arg) {
    vtkd_im.vtkMoleculeMapper_SetAtomicRadiusType(cast(void*)swigCPtr, _arg);
  }

  public string GetAtomicRadiusTypeAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkMoleculeMapper_GetAtomicRadiusTypeAsString(cast(void*)swigCPtr));
    return ret;
  }

  public void SetAtomicRadiusTypeToCovalentRadius() {
    vtkd_im.vtkMoleculeMapper_SetAtomicRadiusTypeToCovalentRadius(cast(void*)swigCPtr);
  }

  public void SetAtomicRadiusTypeToVDWRadius() {
    vtkd_im.vtkMoleculeMapper_SetAtomicRadiusTypeToVDWRadius(cast(void*)swigCPtr);
  }

  public void SetAtomicRadiusTypeToUnitRadius() {
    vtkd_im.vtkMoleculeMapper_SetAtomicRadiusTypeToUnitRadius(cast(void*)swigCPtr);
  }

  public float GetAtomicRadiusScaleFactor() {
    auto ret = vtkd_im.vtkMoleculeMapper_GetAtomicRadiusScaleFactor(cast(void*)swigCPtr);
    return ret;
  }

  public void SetAtomicRadiusScaleFactor(float _arg) {
    vtkd_im.vtkMoleculeMapper_SetAtomicRadiusScaleFactor(cast(void*)swigCPtr, _arg);
  }

  public bool GetUseMultiCylindersForBonds() {
    bool ret = vtkd_im.vtkMoleculeMapper_GetUseMultiCylindersForBonds(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetUseMultiCylindersForBonds(bool _arg) {
    vtkd_im.vtkMoleculeMapper_SetUseMultiCylindersForBonds(cast(void*)swigCPtr, _arg);
  }

  public void UseMultiCylindersForBondsOn() {
    vtkd_im.vtkMoleculeMapper_UseMultiCylindersForBondsOn(cast(void*)swigCPtr);
  }

  public void UseMultiCylindersForBondsOff() {
    vtkd_im.vtkMoleculeMapper_UseMultiCylindersForBondsOff(cast(void*)swigCPtr);
  }

  public int GetBondColorMode() {
    auto ret = vtkd_im.vtkMoleculeMapper_GetBondColorMode(cast(void*)swigCPtr);
    return ret;
  }

  public void SetBondColorMode(int _arg) {
    vtkd_im.vtkMoleculeMapper_SetBondColorMode(cast(void*)swigCPtr, _arg);
  }

  public string GetBondColorModeAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkMoleculeMapper_GetBondColorModeAsString(cast(void*)swigCPtr));
    return ret;
  }

  public void SetBondColorModeToSingleColor() {
    vtkd_im.vtkMoleculeMapper_SetBondColorModeToSingleColor(cast(void*)swigCPtr);
  }

  public void SetBondColorModeToDiscreteByAtom() {
    vtkd_im.vtkMoleculeMapper_SetBondColorModeToDiscreteByAtom(cast(void*)swigCPtr);
  }

  public ubyte* GetBondColor() {
    auto ret = cast(ubyte*)vtkd_im.vtkMoleculeMapper_GetBondColor__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetBondColor(ubyte* _arg1, ubyte* _arg2, ubyte* _arg3) {
    vtkd_im.vtkMoleculeMapper_GetBondColor__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetBondColor(SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char _arg) {
    vtkd_im.vtkMoleculeMapper_GetBondColor__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char.swigGetCPtr(_arg));
  }

  public void SetBondColor(ubyte _arg1, ubyte _arg2, ubyte _arg3) {
    vtkd_im.vtkMoleculeMapper_SetBondColor__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetBondColor(SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char _arg) {
    vtkd_im.vtkMoleculeMapper_SetBondColor__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char.swigGetCPtr(_arg));
  }

  public float GetBondRadius() {
    auto ret = vtkd_im.vtkMoleculeMapper_GetBondRadius(cast(void*)swigCPtr);
    return ret;
  }

  public void SetBondRadius(float _arg) {
    vtkd_im.vtkMoleculeMapper_SetBondRadius(cast(void*)swigCPtr, _arg);
  }

  public void GetSelectedAtomsAndBonds(vtkSelection.vtkSelection selection, vtkIdTypeArray.vtkIdTypeArray atomIds, vtkIdTypeArray.vtkIdTypeArray bondIds) {
    vtkd_im.vtkMoleculeMapper_GetSelectedAtomsAndBonds(cast(void*)swigCPtr, vtkSelection.vtkSelection.swigGetCPtr(selection), vtkIdTypeArray.vtkIdTypeArray.swigGetCPtr(atomIds), vtkIdTypeArray.vtkIdTypeArray.swigGetCPtr(bondIds));
  }

  public void GetSelectedAtoms(vtkSelection.vtkSelection selection, vtkIdTypeArray.vtkIdTypeArray atomIds) {
    vtkd_im.vtkMoleculeMapper_GetSelectedAtoms(cast(void*)swigCPtr, vtkSelection.vtkSelection.swigGetCPtr(selection), vtkIdTypeArray.vtkIdTypeArray.swigGetCPtr(atomIds));
  }

  public void GetSelectedBonds(vtkSelection.vtkSelection selection, vtkIdTypeArray.vtkIdTypeArray bondIds) {
    vtkd_im.vtkMoleculeMapper_GetSelectedBonds(cast(void*)swigCPtr, vtkSelection.vtkSelection.swigGetCPtr(selection), vtkIdTypeArray.vtkIdTypeArray.swigGetCPtr(bondIds));
  }

  public override double* GetBounds() {
    auto ret = cast(double*)vtkd_im.vtkMoleculeMapper_GetBounds__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public override void GetBounds(SWIGTYPE_p_double.SWIGTYPE_p_double bounds) {
    vtkd_im.vtkMoleculeMapper_GetBounds__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
  }

  public int FillInputPortInformation(int port, vtkInformation.vtkInformation info) {
    auto ret = vtkd_im.vtkMoleculeMapper_FillInputPortInformation(cast(void*)swigCPtr, port, vtkInformation.vtkInformation.swigGetCPtr(info));
    return ret;
  }
}
