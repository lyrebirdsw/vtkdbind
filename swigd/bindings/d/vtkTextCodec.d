/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkTextCodec;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_istream;
static import SWIGTYPE_p_vtkTextCodec__OutputIterator;
static import vtkUnicodeString;
static import vtkObject;

class vtkTextCodec : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkTextCodec_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkTextCodec obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkTextCodec(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkTextCodec_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkTextCodec SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkTextCodec_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkTextCodec ret = (cPtr is null) ? null : new vtkTextCodec(cPtr, false);
    return ret;
  }

  public vtkTextCodec NewInstance() const {
    void* cPtr = vtkd_im.vtkTextCodec_NewInstance(cast(void*)swigCPtr);
    vtkTextCodec ret = (cPtr is null) ? null : new vtkTextCodec(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public string Name() {
    string ret = std.conv.to!string(vtkd_im.vtkTextCodec_Name(cast(void*)swigCPtr));
    return ret;
  }

  public bool CanHandle(string NameString) {
    bool ret = vtkd_im.vtkTextCodec_CanHandle(cast(void*)swigCPtr, (NameString ? std.string.toStringz(NameString) : null)) ? true : false;
    return ret;
  }

  public bool IsValid(SWIGTYPE_p_istream.SWIGTYPE_p_istream InputStream) {
    bool ret = vtkd_im.vtkTextCodec_IsValid(cast(void*)swigCPtr, SWIGTYPE_p_istream.SWIGTYPE_p_istream.swigGetCPtr(InputStream)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ToUnicode(SWIGTYPE_p_istream.SWIGTYPE_p_istream InputStream, SWIGTYPE_p_vtkTextCodec__OutputIterator.SWIGTYPE_p_vtkTextCodec__OutputIterator output) {
    vtkd_im.vtkTextCodec_ToUnicode__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_istream.SWIGTYPE_p_istream.swigGetCPtr(InputStream), SWIGTYPE_p_vtkTextCodec__OutputIterator.SWIGTYPE_p_vtkTextCodec__OutputIterator.swigGetCPtr(output));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public vtkUnicodeString.vtkUnicodeString ToUnicode(SWIGTYPE_p_istream.SWIGTYPE_p_istream inputStream) {
    vtkUnicodeString.vtkUnicodeString ret = new vtkUnicodeString.vtkUnicodeString(vtkd_im.vtkTextCodec_ToUnicode__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_istream.SWIGTYPE_p_istream.swigGetCPtr(inputStream)), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public uint NextUnicode(SWIGTYPE_p_istream.SWIGTYPE_p_istream inputStream) {
    auto ret = vtkd_im.vtkTextCodec_NextUnicode(cast(void*)swigCPtr, SWIGTYPE_p_istream.SWIGTYPE_p_istream.swigGetCPtr(inputStream));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }
}
