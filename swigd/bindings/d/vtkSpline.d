/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkSpline;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkObject;

class vtkSpline : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkSpline_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkSpline obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkSpline_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkSpline SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkSpline_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkSpline ret = (cPtr is null) ? null : new vtkSpline(cPtr, false);
    return ret;
  }

  public vtkSpline NewInstance() const {
    void* cPtr = vtkd_im.vtkSpline_NewInstance(cast(void*)swigCPtr);
    vtkSpline ret = (cPtr is null) ? null : new vtkSpline(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public void SetParametricRange(double tMin, double tMax) {
    vtkd_im.vtkSpline_SetParametricRange__SWIG_0(cast(void*)swigCPtr, tMin, tMax);
  }

  public void SetParametricRange(SWIGTYPE_p_double.SWIGTYPE_p_double tRange) {
    vtkd_im.vtkSpline_SetParametricRange__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(tRange));
  }

  public void GetParametricRange(SWIGTYPE_p_double.SWIGTYPE_p_double tRange) const {
    vtkd_im.vtkSpline_GetParametricRange(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(tRange));
  }

  public void SetClampValue(int _arg) {
    vtkd_im.vtkSpline_SetClampValue(cast(void*)swigCPtr, _arg);
  }

  public int GetClampValue() {
    auto ret = vtkd_im.vtkSpline_GetClampValue(cast(void*)swigCPtr);
    return ret;
  }

  public void ClampValueOn() {
    vtkd_im.vtkSpline_ClampValueOn(cast(void*)swigCPtr);
  }

  public void ClampValueOff() {
    vtkd_im.vtkSpline_ClampValueOff(cast(void*)swigCPtr);
  }

  public void Compute() {
    vtkd_im.vtkSpline_Compute(cast(void*)swigCPtr);
  }

  public double Evaluate(double t) {
    auto ret = vtkd_im.vtkSpline_Evaluate(cast(void*)swigCPtr, t);
    return ret;
  }

  public int GetNumberOfPoints() {
    auto ret = vtkd_im.vtkSpline_GetNumberOfPoints(cast(void*)swigCPtr);
    return ret;
  }

  public void AddPoint(double t, double x) {
    vtkd_im.vtkSpline_AddPoint(cast(void*)swigCPtr, t, x);
  }

  public void RemovePoint(double t) {
    vtkd_im.vtkSpline_RemovePoint(cast(void*)swigCPtr, t);
  }

  public void RemoveAllPoints() {
    vtkd_im.vtkSpline_RemoveAllPoints(cast(void*)swigCPtr);
  }

  public void SetClosed(int _arg) {
    vtkd_im.vtkSpline_SetClosed(cast(void*)swigCPtr, _arg);
  }

  public int GetClosed() {
    auto ret = vtkd_im.vtkSpline_GetClosed(cast(void*)swigCPtr);
    return ret;
  }

  public void ClosedOn() {
    vtkd_im.vtkSpline_ClosedOn(cast(void*)swigCPtr);
  }

  public void ClosedOff() {
    vtkd_im.vtkSpline_ClosedOff(cast(void*)swigCPtr);
  }

  public void SetLeftConstraint(int _arg) {
    vtkd_im.vtkSpline_SetLeftConstraint(cast(void*)swigCPtr, _arg);
  }

  public int GetLeftConstraintMinValue() {
    auto ret = vtkd_im.vtkSpline_GetLeftConstraintMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetLeftConstraintMaxValue() {
    auto ret = vtkd_im.vtkSpline_GetLeftConstraintMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetLeftConstraint() {
    auto ret = vtkd_im.vtkSpline_GetLeftConstraint(cast(void*)swigCPtr);
    return ret;
  }

  public void SetRightConstraint(int _arg) {
    vtkd_im.vtkSpline_SetRightConstraint(cast(void*)swigCPtr, _arg);
  }

  public int GetRightConstraintMinValue() {
    auto ret = vtkd_im.vtkSpline_GetRightConstraintMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetRightConstraintMaxValue() {
    auto ret = vtkd_im.vtkSpline_GetRightConstraintMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetRightConstraint() {
    auto ret = vtkd_im.vtkSpline_GetRightConstraint(cast(void*)swigCPtr);
    return ret;
  }

  public void SetLeftValue(double _arg) {
    vtkd_im.vtkSpline_SetLeftValue(cast(void*)swigCPtr, _arg);
  }

  public double GetLeftValue() {
    auto ret = vtkd_im.vtkSpline_GetLeftValue(cast(void*)swigCPtr);
    return ret;
  }

  public void SetRightValue(double _arg) {
    vtkd_im.vtkSpline_SetRightValue(cast(void*)swigCPtr, _arg);
  }

  public double GetRightValue() {
    auto ret = vtkd_im.vtkSpline_GetRightValue(cast(void*)swigCPtr);
    return ret;
  }

  public void DeepCopy(vtkSpline s) {
    vtkd_im.vtkSpline_DeepCopy(cast(void*)swigCPtr, vtkSpline.swigGetCPtr(s));
  }
}
