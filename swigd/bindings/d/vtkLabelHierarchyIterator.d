/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkLabelHierarchyIterator;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkIdTypeArray;
static import SWIGTYPE_p_double;
static import vtkStdString;
static import vtkUnicodeString;
static import vtkLabelHierarchy;
static import vtkPolyData;
static import vtkObject;

class vtkLabelHierarchyIterator : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkLabelHierarchyIterator_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkLabelHierarchyIterator obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkLabelHierarchyIterator_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkLabelHierarchyIterator SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkLabelHierarchyIterator_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkLabelHierarchyIterator ret = (cPtr is null) ? null : new vtkLabelHierarchyIterator(cPtr, false);
    return ret;
  }

  public vtkLabelHierarchyIterator NewInstance() const {
    void* cPtr = vtkd_im.vtkLabelHierarchyIterator_NewInstance(cast(void*)swigCPtr);
    vtkLabelHierarchyIterator ret = (cPtr is null) ? null : new vtkLabelHierarchyIterator(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public void Begin(vtkIdTypeArray.vtkIdTypeArray arg0) {
    vtkd_im.vtkLabelHierarchyIterator_Begin(cast(void*)swigCPtr, vtkIdTypeArray.vtkIdTypeArray.swigGetCPtr(arg0));
  }

  public void Next() {
    vtkd_im.vtkLabelHierarchyIterator_Next(cast(void*)swigCPtr);
  }

  public bool IsAtEnd() {
    bool ret = vtkd_im.vtkLabelHierarchyIterator_IsAtEnd(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void GetPoint(SWIGTYPE_p_double.SWIGTYPE_p_double x) {
    vtkd_im.vtkLabelHierarchyIterator_GetPoint(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x));
  }

  public void GetSize(SWIGTYPE_p_double.SWIGTYPE_p_double sz) {
    vtkd_im.vtkLabelHierarchyIterator_GetSize(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(sz));
  }

  public void GetBoundedSize(SWIGTYPE_p_double.SWIGTYPE_p_double sz) {
    vtkd_im.vtkLabelHierarchyIterator_GetBoundedSize(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(sz));
  }

  public int GetType() {
    auto ret = vtkd_im.vtkLabelHierarchyIterator_GetType(cast(void*)swigCPtr);
    return ret;
  }

  public vtkStdString.vtkStdString GetLabel() {
    vtkStdString.vtkStdString ret = new vtkStdString.vtkStdString(vtkd_im.vtkLabelHierarchyIterator_GetLabel(cast(void*)swigCPtr), true);
    return ret;
  }

  public vtkUnicodeString.vtkUnicodeString GetUnicodeLabel() {
    vtkUnicodeString.vtkUnicodeString ret = new vtkUnicodeString.vtkUnicodeString(vtkd_im.vtkLabelHierarchyIterator_GetUnicodeLabel(cast(void*)swigCPtr), true);
    return ret;
  }

  public double GetOrientation() {
    auto ret = vtkd_im.vtkLabelHierarchyIterator_GetOrientation(cast(void*)swigCPtr);
    return ret;
  }

  public long GetLabelId() {
    auto ret = vtkd_im.vtkLabelHierarchyIterator_GetLabelId(cast(void*)swigCPtr);
    return ret;
  }

  public vtkLabelHierarchy.vtkLabelHierarchy GetHierarchy() {
    void* cPtr = vtkd_im.vtkLabelHierarchyIterator_GetHierarchy(cast(void*)swigCPtr);
    vtkLabelHierarchy.vtkLabelHierarchy ret = (cPtr is null) ? null : new vtkLabelHierarchy.vtkLabelHierarchy(cPtr, false);
    return ret;
  }

  public void SetTraversedBounds(vtkPolyData.vtkPolyData arg0) {
    vtkd_im.vtkLabelHierarchyIterator_SetTraversedBounds(cast(void*)swigCPtr, vtkPolyData.vtkPolyData.swigGetCPtr(arg0));
  }

  public void GetNodeGeometry(SWIGTYPE_p_double.SWIGTYPE_p_double ctr, double* size) {
    vtkd_im.vtkLabelHierarchyIterator_GetNodeGeometry(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(ctr), cast(void*)size);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void BoxNode() {
    vtkd_im.vtkLabelHierarchyIterator_BoxNode(cast(void*)swigCPtr);
  }

  public void BoxAllNodes(vtkPolyData.vtkPolyData arg0) {
    vtkd_im.vtkLabelHierarchyIterator_BoxAllNodes(cast(void*)swigCPtr, vtkPolyData.vtkPolyData.swigGetCPtr(arg0));
  }

  public void SetAllBounds(int _arg) {
    vtkd_im.vtkLabelHierarchyIterator_SetAllBounds(cast(void*)swigCPtr, _arg);
  }

  public int GetAllBounds() {
    auto ret = vtkd_im.vtkLabelHierarchyIterator_GetAllBounds(cast(void*)swigCPtr);
    return ret;
  }
}
