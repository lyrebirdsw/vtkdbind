/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkFLUENTReader;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkMultiBlockDataSetAlgorithm;

class vtkFLUENTReader : vtkMultiBlockDataSetAlgorithm.vtkMultiBlockDataSetAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkFLUENTReader_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkFLUENTReader obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkFLUENTReader New() {
    void* cPtr = vtkd_im.vtkFLUENTReader_New();
    vtkFLUENTReader ret = (cPtr is null) ? null : new vtkFLUENTReader(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkFLUENTReader_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkFLUENTReader SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkFLUENTReader_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkFLUENTReader ret = (cPtr is null) ? null : new vtkFLUENTReader(cPtr, false);
    return ret;
  }

  public vtkFLUENTReader NewInstance() const {
    void* cPtr = vtkd_im.vtkFLUENTReader_NewInstance(cast(void*)swigCPtr);
    vtkFLUENTReader ret = (cPtr is null) ? null : new vtkFLUENTReader(cPtr, false);
    return ret;
  }

  alias vtkMultiBlockDataSetAlgorithm.vtkMultiBlockDataSetAlgorithm.NewInstance NewInstance;

  public void SetFileName(string _arg) {
    vtkd_im.vtkFLUENTReader_SetFileName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetFileName() {
    string ret = std.conv.to!string(vtkd_im.vtkFLUENTReader_GetFileName(cast(void*)swigCPtr));
    return ret;
  }

  public int GetNumberOfCells() {
    auto ret = vtkd_im.vtkFLUENTReader_GetNumberOfCells(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfCellArrays() {
    auto ret = vtkd_im.vtkFLUENTReader_GetNumberOfCellArrays(cast(void*)swigCPtr);
    return ret;
  }

  public string GetCellArrayName(int index) {
    string ret = std.conv.to!string(vtkd_im.vtkFLUENTReader_GetCellArrayName(cast(void*)swigCPtr, index));
    return ret;
  }

  public int GetCellArrayStatus(string name) {
    auto ret = vtkd_im.vtkFLUENTReader_GetCellArrayStatus(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
    return ret;
  }

  public void SetCellArrayStatus(string name, int status) {
    vtkd_im.vtkFLUENTReader_SetCellArrayStatus(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), status);
  }

  public void DisableAllCellArrays() {
    vtkd_im.vtkFLUENTReader_DisableAllCellArrays(cast(void*)swigCPtr);
  }

  public void EnableAllCellArrays() {
    vtkd_im.vtkFLUENTReader_EnableAllCellArrays(cast(void*)swigCPtr);
  }

  public void SetDataByteOrderToBigEndian() {
    vtkd_im.vtkFLUENTReader_SetDataByteOrderToBigEndian(cast(void*)swigCPtr);
  }

  public void SetDataByteOrderToLittleEndian() {
    vtkd_im.vtkFLUENTReader_SetDataByteOrderToLittleEndian(cast(void*)swigCPtr);
  }

  public int GetDataByteOrder() {
    auto ret = vtkd_im.vtkFLUENTReader_GetDataByteOrder(cast(void*)swigCPtr);
    return ret;
  }

  public void SetDataByteOrder(int arg0) {
    vtkd_im.vtkFLUENTReader_SetDataByteOrder(cast(void*)swigCPtr, arg0);
  }

  public string GetDataByteOrderAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkFLUENTReader_GetDataByteOrderAsString(cast(void*)swigCPtr));
    return ret;
  }
}
