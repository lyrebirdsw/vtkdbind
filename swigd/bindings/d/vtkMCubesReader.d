/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkMCubesReader;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkIncrementalPointLocator;
static import vtkPolyDataAlgorithm;

class vtkMCubesReader : vtkPolyDataAlgorithm.vtkPolyDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkMCubesReader_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkMCubesReader obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkMCubesReader_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkMCubesReader SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkMCubesReader_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkMCubesReader ret = (cPtr is null) ? null : new vtkMCubesReader(cPtr, false);
    return ret;
  }

  public vtkMCubesReader NewInstance() const {
    void* cPtr = vtkd_im.vtkMCubesReader_NewInstance(cast(void*)swigCPtr);
    vtkMCubesReader ret = (cPtr is null) ? null : new vtkMCubesReader(cPtr, false);
    return ret;
  }

  alias vtkPolyDataAlgorithm.vtkPolyDataAlgorithm.NewInstance NewInstance;

  public static vtkMCubesReader New() {
    void* cPtr = vtkd_im.vtkMCubesReader_New();
    vtkMCubesReader ret = (cPtr is null) ? null : new vtkMCubesReader(cPtr, false);
    return ret;
  }

  public void SetFileName(string _arg) {
    vtkd_im.vtkMCubesReader_SetFileName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetFileName() {
    string ret = std.conv.to!string(vtkd_im.vtkMCubesReader_GetFileName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetLimitsFileName(string _arg) {
    vtkd_im.vtkMCubesReader_SetLimitsFileName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetLimitsFileName() {
    string ret = std.conv.to!string(vtkd_im.vtkMCubesReader_GetLimitsFileName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetHeaderSize(int _arg) {
    vtkd_im.vtkMCubesReader_SetHeaderSize(cast(void*)swigCPtr, _arg);
  }

  public int GetHeaderSizeMinValue() {
    auto ret = vtkd_im.vtkMCubesReader_GetHeaderSizeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetHeaderSizeMaxValue() {
    auto ret = vtkd_im.vtkMCubesReader_GetHeaderSizeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetHeaderSize() {
    auto ret = vtkd_im.vtkMCubesReader_GetHeaderSize(cast(void*)swigCPtr);
    return ret;
  }

  public void SetFlipNormals(int _arg) {
    vtkd_im.vtkMCubesReader_SetFlipNormals(cast(void*)swigCPtr, _arg);
  }

  public int GetFlipNormals() {
    auto ret = vtkd_im.vtkMCubesReader_GetFlipNormals(cast(void*)swigCPtr);
    return ret;
  }

  public void FlipNormalsOn() {
    vtkd_im.vtkMCubesReader_FlipNormalsOn(cast(void*)swigCPtr);
  }

  public void FlipNormalsOff() {
    vtkd_im.vtkMCubesReader_FlipNormalsOff(cast(void*)swigCPtr);
  }

  public void SetNormals(int _arg) {
    vtkd_im.vtkMCubesReader_SetNormals(cast(void*)swigCPtr, _arg);
  }

  public int GetNormals() {
    auto ret = vtkd_im.vtkMCubesReader_GetNormals(cast(void*)swigCPtr);
    return ret;
  }

  public void NormalsOn() {
    vtkd_im.vtkMCubesReader_NormalsOn(cast(void*)swigCPtr);
  }

  public void NormalsOff() {
    vtkd_im.vtkMCubesReader_NormalsOff(cast(void*)swigCPtr);
  }

  public void SetDataByteOrderToBigEndian() {
    vtkd_im.vtkMCubesReader_SetDataByteOrderToBigEndian(cast(void*)swigCPtr);
  }

  public void SetDataByteOrderToLittleEndian() {
    vtkd_im.vtkMCubesReader_SetDataByteOrderToLittleEndian(cast(void*)swigCPtr);
  }

  public int GetDataByteOrder() {
    auto ret = vtkd_im.vtkMCubesReader_GetDataByteOrder(cast(void*)swigCPtr);
    return ret;
  }

  public void SetDataByteOrder(int arg0) {
    vtkd_im.vtkMCubesReader_SetDataByteOrder(cast(void*)swigCPtr, arg0);
  }

  public string GetDataByteOrderAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkMCubesReader_GetDataByteOrderAsString(cast(void*)swigCPtr));
    return ret;
  }

  public void SetSwapBytes(int _arg) {
    vtkd_im.vtkMCubesReader_SetSwapBytes(cast(void*)swigCPtr, _arg);
  }

  public int GetSwapBytes() {
    auto ret = vtkd_im.vtkMCubesReader_GetSwapBytes(cast(void*)swigCPtr);
    return ret;
  }

  public void SwapBytesOn() {
    vtkd_im.vtkMCubesReader_SwapBytesOn(cast(void*)swigCPtr);
  }

  public void SwapBytesOff() {
    vtkd_im.vtkMCubesReader_SwapBytesOff(cast(void*)swigCPtr);
  }

  public void SetLocator(vtkIncrementalPointLocator.vtkIncrementalPointLocator locator) {
    vtkd_im.vtkMCubesReader_SetLocator(cast(void*)swigCPtr, vtkIncrementalPointLocator.vtkIncrementalPointLocator.swigGetCPtr(locator));
  }

  public vtkIncrementalPointLocator.vtkIncrementalPointLocator GetLocator() {
    void* cPtr = vtkd_im.vtkMCubesReader_GetLocator(cast(void*)swigCPtr);
    vtkIncrementalPointLocator.vtkIncrementalPointLocator ret = (cPtr is null) ? null : new vtkIncrementalPointLocator.vtkIncrementalPointLocator(cPtr, false);
    return ret;
  }

  public void CreateDefaultLocator() {
    vtkd_im.vtkMCubesReader_CreateDefaultLocator(cast(void*)swigCPtr);
  }
}
