/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkImageMapper3D;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkRenderer;
static import vtkImageSlice;
static import vtkImageData;
static import vtkDataSet;
static import vtkDataObject;
static import vtkPlane;
static import vtkMatrix4x4;
static import SWIGTYPE_p_double;
static import vtkAbstractMapper3D;

class vtkImageMapper3D : vtkAbstractMapper3D.vtkAbstractMapper3D {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkImageMapper3D_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkImageMapper3D obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkImageMapper3D_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkImageMapper3D SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkImageMapper3D_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkImageMapper3D ret = (cPtr is null) ? null : new vtkImageMapper3D(cPtr, false);
    return ret;
  }

  public vtkImageMapper3D NewInstance() const {
    void* cPtr = vtkd_im.vtkImageMapper3D_NewInstance(cast(void*)swigCPtr);
    vtkImageMapper3D ret = (cPtr is null) ? null : new vtkImageMapper3D(cPtr, false);
    return ret;
  }

  alias vtkAbstractMapper3D.vtkAbstractMapper3D.NewInstance NewInstance;

  public void Render(vtkRenderer.vtkRenderer renderer, vtkImageSlice.vtkImageSlice prop) {
    vtkd_im.vtkImageMapper3D_Render(cast(void*)swigCPtr, vtkRenderer.vtkRenderer.swigGetCPtr(renderer), vtkImageSlice.vtkImageSlice.swigGetCPtr(prop));
  }

  public void SetInputData(vtkImageData.vtkImageData input) {
    vtkd_im.vtkImageMapper3D_SetInputData(cast(void*)swigCPtr, vtkImageData.vtkImageData.swigGetCPtr(input));
  }

  public vtkImageData.vtkImageData GetInput() {
    void* cPtr = vtkd_im.vtkImageMapper3D_GetInput(cast(void*)swigCPtr);
    vtkImageData.vtkImageData ret = (cPtr is null) ? null : new vtkImageData.vtkImageData(cPtr, false);
    return ret;
  }

  public vtkDataSet.vtkDataSet GetDataSetInput() {
    void* cPtr = vtkd_im.vtkImageMapper3D_GetDataSetInput(cast(void*)swigCPtr);
    vtkDataSet.vtkDataSet ret = (cPtr is null) ? null : new vtkDataSet.vtkDataSet(cPtr, false);
    return ret;
  }

  public vtkDataObject.vtkDataObject GetDataObjectInput() {
    void* cPtr = vtkd_im.vtkImageMapper3D_GetDataObjectInput(cast(void*)swigCPtr);
    vtkDataObject.vtkDataObject ret = (cPtr is null) ? null : new vtkDataObject.vtkDataObject(cPtr, false);
    return ret;
  }

  public void SetBorder(int _arg) {
    vtkd_im.vtkImageMapper3D_SetBorder(cast(void*)swigCPtr, _arg);
  }

  public void BorderOn() {
    vtkd_im.vtkImageMapper3D_BorderOn(cast(void*)swigCPtr);
  }

  public void BorderOff() {
    vtkd_im.vtkImageMapper3D_BorderOff(cast(void*)swigCPtr);
  }

  public int GetBorder() {
    auto ret = vtkd_im.vtkImageMapper3D_GetBorder(cast(void*)swigCPtr);
    return ret;
  }

  public void SetBackground(int _arg) {
    vtkd_im.vtkImageMapper3D_SetBackground(cast(void*)swigCPtr, _arg);
  }

  public void BackgroundOn() {
    vtkd_im.vtkImageMapper3D_BackgroundOn(cast(void*)swigCPtr);
  }

  public void BackgroundOff() {
    vtkd_im.vtkImageMapper3D_BackgroundOff(cast(void*)swigCPtr);
  }

  public int GetBackground() {
    auto ret = vtkd_im.vtkImageMapper3D_GetBackground(cast(void*)swigCPtr);
    return ret;
  }

  public void SetSliceAtFocalPoint(int _arg) {
    vtkd_im.vtkImageMapper3D_SetSliceAtFocalPoint(cast(void*)swigCPtr, _arg);
  }

  public void SliceAtFocalPointOn() {
    vtkd_im.vtkImageMapper3D_SliceAtFocalPointOn(cast(void*)swigCPtr);
  }

  public void SliceAtFocalPointOff() {
    vtkd_im.vtkImageMapper3D_SliceAtFocalPointOff(cast(void*)swigCPtr);
  }

  public int GetSliceAtFocalPoint() {
    auto ret = vtkd_im.vtkImageMapper3D_GetSliceAtFocalPoint(cast(void*)swigCPtr);
    return ret;
  }

  public void SetSliceFacesCamera(int _arg) {
    vtkd_im.vtkImageMapper3D_SetSliceFacesCamera(cast(void*)swigCPtr, _arg);
  }

  public void SliceFacesCameraOn() {
    vtkd_im.vtkImageMapper3D_SliceFacesCameraOn(cast(void*)swigCPtr);
  }

  public void SliceFacesCameraOff() {
    vtkd_im.vtkImageMapper3D_SliceFacesCameraOff(cast(void*)swigCPtr);
  }

  public int GetSliceFacesCamera() {
    auto ret = vtkd_im.vtkImageMapper3D_GetSliceFacesCamera(cast(void*)swigCPtr);
    return ret;
  }

  public vtkPlane.vtkPlane GetSlicePlane() {
    void* cPtr = vtkd_im.vtkImageMapper3D_GetSlicePlane(cast(void*)swigCPtr);
    vtkPlane.vtkPlane ret = (cPtr is null) ? null : new vtkPlane.vtkPlane(cPtr, false);
    return ret;
  }

  public void GetSlicePlaneInDataCoords(vtkMatrix4x4.vtkMatrix4x4 propMatrix, SWIGTYPE_p_double.SWIGTYPE_p_double plane) {
    vtkd_im.vtkImageMapper3D_GetSlicePlaneInDataCoords(cast(void*)swigCPtr, vtkMatrix4x4.vtkMatrix4x4.swigGetCPtr(propMatrix), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(plane));
  }

  public void SetNumberOfThreads(int _arg) {
    vtkd_im.vtkImageMapper3D_SetNumberOfThreads(cast(void*)swigCPtr, _arg);
  }

  public int GetNumberOfThreadsMinValue() {
    auto ret = vtkd_im.vtkImageMapper3D_GetNumberOfThreadsMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfThreadsMaxValue() {
    auto ret = vtkd_im.vtkImageMapper3D_GetNumberOfThreadsMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfThreads() {
    auto ret = vtkd_im.vtkImageMapper3D_GetNumberOfThreads(cast(void*)swigCPtr);
    return ret;
  }
}
