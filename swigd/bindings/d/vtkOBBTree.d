/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkOBBTree;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkPoints;
static import vtkIdList;
static import vtkGenericCell;
static import vtkDataSet;
static import vtkAbstractCellLocator;

class vtkOBBTree : vtkAbstractCellLocator.vtkAbstractCellLocator {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkOBBTree_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkOBBTree obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkOBBTree(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkOBBTree_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkOBBTree SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkOBBTree_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkOBBTree ret = (cPtr is null) ? null : new vtkOBBTree(cPtr, false);
    return ret;
  }

  public vtkOBBTree NewInstance() const {
    void* cPtr = vtkd_im.vtkOBBTree_NewInstance(cast(void*)swigCPtr);
    vtkOBBTree ret = (cPtr is null) ? null : new vtkOBBTree(cPtr, false);
    return ret;
  }

  alias vtkAbstractCellLocator.vtkAbstractCellLocator.NewInstance NewInstance;

  public static vtkOBBTree New() {
    void* cPtr = vtkd_im.vtkOBBTree_New();
    vtkOBBTree ret = (cPtr is null) ? null : new vtkOBBTree(cPtr, false);
    return ret;
  }

  public override int IntersectWithLine(SWIGTYPE_p_double.SWIGTYPE_p_double a0, SWIGTYPE_p_double.SWIGTYPE_p_double a1, double tol, double* t, SWIGTYPE_p_double.SWIGTYPE_p_double x, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, int* subId) {
    auto ret = vtkd_im.vtkOBBTree_IntersectWithLine__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(a0), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(a1), tol, cast(void*)t, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), cast(void*)subId);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public override int IntersectWithLine(SWIGTYPE_p_double.SWIGTYPE_p_double a0, SWIGTYPE_p_double.SWIGTYPE_p_double a1, double tol, double* t, SWIGTYPE_p_double.SWIGTYPE_p_double x, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, int* subId, long* cellId) {
    auto ret = vtkd_im.vtkOBBTree_IntersectWithLine__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(a0), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(a1), tol, cast(void*)t, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), cast(void*)subId, cast(void*)cellId);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public override int IntersectWithLine(SWIGTYPE_p_double.SWIGTYPE_p_double a0, SWIGTYPE_p_double.SWIGTYPE_p_double a1, vtkPoints.vtkPoints points, vtkIdList.vtkIdList cellIds) {
    auto ret = vtkd_im.vtkOBBTree_IntersectWithLine__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(a0), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(a1), vtkPoints.vtkPoints.swigGetCPtr(points), vtkIdList.vtkIdList.swigGetCPtr(cellIds));
    return ret;
  }

  public override int IntersectWithLine(SWIGTYPE_p_double.SWIGTYPE_p_double a0, SWIGTYPE_p_double.SWIGTYPE_p_double a1, double tol, double* t, SWIGTYPE_p_double.SWIGTYPE_p_double x, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, int* subId, long* cellId, vtkGenericCell.vtkGenericCell cell) {
    auto ret = vtkd_im.vtkOBBTree_IntersectWithLine__SWIG_3(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(a0), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(a1), tol, cast(void*)t, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), cast(void*)subId, cast(void*)cellId, vtkGenericCell.vtkGenericCell.swigGetCPtr(cell));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public override void FindClosestPoint(SWIGTYPE_p_double.SWIGTYPE_p_double x, SWIGTYPE_p_double.SWIGTYPE_p_double closestPoint, long* cellId, int* subId, double* dist2) {
    vtkd_im.vtkOBBTree_FindClosestPoint__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(closestPoint), cast(void*)cellId, cast(void*)subId, cast(void*)dist2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public override void FindClosestPoint(SWIGTYPE_p_double.SWIGTYPE_p_double x, SWIGTYPE_p_double.SWIGTYPE_p_double closestPoint, vtkGenericCell.vtkGenericCell cell, long* cellId, int* subId, double* dist2) {
    vtkd_im.vtkOBBTree_FindClosestPoint__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(closestPoint), vtkGenericCell.vtkGenericCell.swigGetCPtr(cell), cast(void*)cellId, cast(void*)subId, cast(void*)dist2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public override long FindClosestPointWithinRadius(SWIGTYPE_p_double.SWIGTYPE_p_double x, double radius, SWIGTYPE_p_double.SWIGTYPE_p_double closestPoint, long* cellId, int* subId, double* dist2) {
    auto ret = vtkd_im.vtkOBBTree_FindClosestPointWithinRadius__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), radius, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(closestPoint), cast(void*)cellId, cast(void*)subId, cast(void*)dist2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public override long FindClosestPointWithinRadius(SWIGTYPE_p_double.SWIGTYPE_p_double x, double radius, SWIGTYPE_p_double.SWIGTYPE_p_double closestPoint, vtkGenericCell.vtkGenericCell cell, long* cellId, int* subId, double* dist2) {
    auto ret = vtkd_im.vtkOBBTree_FindClosestPointWithinRadius__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), radius, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(closestPoint), vtkGenericCell.vtkGenericCell.swigGetCPtr(cell), cast(void*)cellId, cast(void*)subId, cast(void*)dist2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public override long FindClosestPointWithinRadius(SWIGTYPE_p_double.SWIGTYPE_p_double x, double radius, SWIGTYPE_p_double.SWIGTYPE_p_double closestPoint, vtkGenericCell.vtkGenericCell cell, long* cellId, int* subId, double* dist2, int* inside) {
    auto ret = vtkd_im.vtkOBBTree_FindClosestPointWithinRadius__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), radius, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(closestPoint), vtkGenericCell.vtkGenericCell.swigGetCPtr(cell), cast(void*)cellId, cast(void*)subId, cast(void*)dist2, cast(void*)inside);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public static void ComputeOBB(vtkPoints.vtkPoints pts, SWIGTYPE_p_double.SWIGTYPE_p_double corner, SWIGTYPE_p_double.SWIGTYPE_p_double max, SWIGTYPE_p_double.SWIGTYPE_p_double mid, SWIGTYPE_p_double.SWIGTYPE_p_double min, SWIGTYPE_p_double.SWIGTYPE_p_double size) {
    vtkd_im.vtkOBBTree_ComputeOBB__SWIG_0(vtkPoints.vtkPoints.swigGetCPtr(pts), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(corner), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(max), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(mid), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(min), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(size));
  }

  public void ComputeOBB(vtkDataSet.vtkDataSet input, SWIGTYPE_p_double.SWIGTYPE_p_double corner, SWIGTYPE_p_double.SWIGTYPE_p_double max, SWIGTYPE_p_double.SWIGTYPE_p_double mid, SWIGTYPE_p_double.SWIGTYPE_p_double min, SWIGTYPE_p_double.SWIGTYPE_p_double size) {
    vtkd_im.vtkOBBTree_ComputeOBB__SWIG_1(cast(void*)swigCPtr, vtkDataSet.vtkDataSet.swigGetCPtr(input), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(corner), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(max), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(mid), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(min), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(size));
  }

  public int InsideOrOutside(SWIGTYPE_p_double.SWIGTYPE_p_double point) {
    auto ret = vtkd_im.vtkOBBTree_InsideOrOutside(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(point));
    return ret;
  }
}
