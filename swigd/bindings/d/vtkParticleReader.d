/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkParticleReader;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkPolyDataAlgorithm;

class vtkParticleReader : vtkPolyDataAlgorithm.vtkPolyDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkParticleReader_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkParticleReader obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkParticleReader New() {
    void* cPtr = vtkd_im.vtkParticleReader_New();
    vtkParticleReader ret = (cPtr is null) ? null : new vtkParticleReader(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkParticleReader_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkParticleReader SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkParticleReader_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkParticleReader ret = (cPtr is null) ? null : new vtkParticleReader(cPtr, false);
    return ret;
  }

  public vtkParticleReader NewInstance() const {
    void* cPtr = vtkd_im.vtkParticleReader_NewInstance(cast(void*)swigCPtr);
    vtkParticleReader ret = (cPtr is null) ? null : new vtkParticleReader(cPtr, false);
    return ret;
  }

  alias vtkPolyDataAlgorithm.vtkPolyDataAlgorithm.NewInstance NewInstance;

  public void SetFileName(string _arg) {
    vtkd_im.vtkParticleReader_SetFileName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetFileName() {
    string ret = std.conv.to!string(vtkd_im.vtkParticleReader_GetFileName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetDataByteOrderToBigEndian() {
    vtkd_im.vtkParticleReader_SetDataByteOrderToBigEndian(cast(void*)swigCPtr);
  }

  public void SetDataByteOrderToLittleEndian() {
    vtkd_im.vtkParticleReader_SetDataByteOrderToLittleEndian(cast(void*)swigCPtr);
  }

  public int GetDataByteOrder() {
    auto ret = vtkd_im.vtkParticleReader_GetDataByteOrder(cast(void*)swigCPtr);
    return ret;
  }

  public void SetDataByteOrder(int arg0) {
    vtkd_im.vtkParticleReader_SetDataByteOrder(cast(void*)swigCPtr, arg0);
  }

  public string GetDataByteOrderAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkParticleReader_GetDataByteOrderAsString(cast(void*)swigCPtr));
    return ret;
  }

  public void SetSwapBytes(int _arg) {
    vtkd_im.vtkParticleReader_SetSwapBytes(cast(void*)swigCPtr, _arg);
  }

  public int GetSwapBytes() {
    auto ret = vtkd_im.vtkParticleReader_GetSwapBytes(cast(void*)swigCPtr);
    return ret;
  }

  public void SwapBytesOn() {
    vtkd_im.vtkParticleReader_SwapBytesOn(cast(void*)swigCPtr);
  }

  public void SwapBytesOff() {
    vtkd_im.vtkParticleReader_SwapBytesOff(cast(void*)swigCPtr);
  }

  public void SetHasScalar(int _arg) {
    vtkd_im.vtkParticleReader_SetHasScalar(cast(void*)swigCPtr, _arg);
  }

  public int GetHasScalar() {
    auto ret = vtkd_im.vtkParticleReader_GetHasScalar(cast(void*)swigCPtr);
    return ret;
  }

  public void HasScalarOn() {
    vtkd_im.vtkParticleReader_HasScalarOn(cast(void*)swigCPtr);
  }

  public void HasScalarOff() {
    vtkd_im.vtkParticleReader_HasScalarOff(cast(void*)swigCPtr);
  }

  public void SetFileType(int _arg) {
    vtkd_im.vtkParticleReader_SetFileType(cast(void*)swigCPtr, _arg);
  }

  public int GetFileTypeMinValue() {
    auto ret = vtkd_im.vtkParticleReader_GetFileTypeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetFileTypeMaxValue() {
    auto ret = vtkd_im.vtkParticleReader_GetFileTypeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetFileType() {
    auto ret = vtkd_im.vtkParticleReader_GetFileType(cast(void*)swigCPtr);
    return ret;
  }

  public void SetFileTypeToUnknown() {
    vtkd_im.vtkParticleReader_SetFileTypeToUnknown(cast(void*)swigCPtr);
  }

  public void SetFileTypeToText() {
    vtkd_im.vtkParticleReader_SetFileTypeToText(cast(void*)swigCPtr);
  }

  public void SetFileTypeToBinary() {
    vtkd_im.vtkParticleReader_SetFileTypeToBinary(cast(void*)swigCPtr);
  }

  public void SetDataType(int _arg) {
    vtkd_im.vtkParticleReader_SetDataType(cast(void*)swigCPtr, _arg);
  }

  public int GetDataTypeMinValue() {
    auto ret = vtkd_im.vtkParticleReader_GetDataTypeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetDataTypeMaxValue() {
    auto ret = vtkd_im.vtkParticleReader_GetDataTypeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetDataType() {
    auto ret = vtkd_im.vtkParticleReader_GetDataType(cast(void*)swigCPtr);
    return ret;
  }

  public void SetDataTypeToFloat() {
    vtkd_im.vtkParticleReader_SetDataTypeToFloat(cast(void*)swigCPtr);
  }

  public void SetDataTypeToDouble() {
    vtkd_im.vtkParticleReader_SetDataTypeToDouble(cast(void*)swigCPtr);
  }
}
