/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkImageMaskBits;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_unsigned_int;
static import vtkThreadedImageAlgorithm;

class vtkImageMaskBits : vtkThreadedImageAlgorithm.vtkThreadedImageAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkImageMaskBits_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkImageMaskBits obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkImageMaskBits New() {
    void* cPtr = vtkd_im.vtkImageMaskBits_New();
    vtkImageMaskBits ret = (cPtr is null) ? null : new vtkImageMaskBits(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkImageMaskBits_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkImageMaskBits SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkImageMaskBits_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkImageMaskBits ret = (cPtr is null) ? null : new vtkImageMaskBits(cPtr, false);
    return ret;
  }

  public vtkImageMaskBits NewInstance() const {
    void* cPtr = vtkd_im.vtkImageMaskBits_NewInstance(cast(void*)swigCPtr);
    vtkImageMaskBits ret = (cPtr is null) ? null : new vtkImageMaskBits(cPtr, false);
    return ret;
  }

  alias vtkThreadedImageAlgorithm.vtkThreadedImageAlgorithm.NewInstance NewInstance;

  public void SetMasks(uint _arg1, uint _arg2, uint _arg3, uint _arg4) {
    vtkd_im.vtkImageMaskBits_SetMasks__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3, _arg4);
  }

  public void SetMasks(SWIGTYPE_p_unsigned_int.SWIGTYPE_p_unsigned_int _arg) {
    vtkd_im.vtkImageMaskBits_SetMasks__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_unsigned_int.SWIGTYPE_p_unsigned_int.swigGetCPtr(_arg));
  }

  public void SetMask(uint mask) {
    vtkd_im.vtkImageMaskBits_SetMask(cast(void*)swigCPtr, mask);
  }

  public void SetMasks(uint mask1, uint mask2) {
    vtkd_im.vtkImageMaskBits_SetMasks__SWIG_2(cast(void*)swigCPtr, mask1, mask2);
  }

  public void SetMasks(uint mask1, uint mask2, uint mask3) {
    vtkd_im.vtkImageMaskBits_SetMasks__SWIG_3(cast(void*)swigCPtr, mask1, mask2, mask3);
  }

  public uint* GetMasks() {
    auto ret = cast(uint*)vtkd_im.vtkImageMaskBits_GetMasks__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetMasks(uint* _arg1, uint* _arg2, uint* _arg3, uint* _arg4) {
    vtkd_im.vtkImageMaskBits_GetMasks__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3, cast(void*)_arg4);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetMasks(SWIGTYPE_p_unsigned_int.SWIGTYPE_p_unsigned_int _arg) {
    vtkd_im.vtkImageMaskBits_GetMasks__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_unsigned_int.SWIGTYPE_p_unsigned_int.swigGetCPtr(_arg));
  }

  public void SetOperation(int _arg) {
    vtkd_im.vtkImageMaskBits_SetOperation(cast(void*)swigCPtr, _arg);
  }

  public int GetOperation() {
    auto ret = vtkd_im.vtkImageMaskBits_GetOperation(cast(void*)swigCPtr);
    return ret;
  }

  public void SetOperationToAnd() {
    vtkd_im.vtkImageMaskBits_SetOperationToAnd(cast(void*)swigCPtr);
  }

  public void SetOperationToOr() {
    vtkd_im.vtkImageMaskBits_SetOperationToOr(cast(void*)swigCPtr);
  }

  public void SetOperationToXor() {
    vtkd_im.vtkImageMaskBits_SetOperationToXor(cast(void*)swigCPtr);
  }

  public void SetOperationToNand() {
    vtkd_im.vtkImageMaskBits_SetOperationToNand(cast(void*)swigCPtr);
  }

  public void SetOperationToNor() {
    vtkd_im.vtkImageMaskBits_SetOperationToNor(cast(void*)swigCPtr);
  }
}
