/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkCollectPolyData;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkMultiProcessController;
static import vtkSocketController;
static import vtkPolyDataAlgorithm;

class vtkCollectPolyData : vtkPolyDataAlgorithm.vtkPolyDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkCollectPolyData_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkCollectPolyData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkCollectPolyData New() {
    void* cPtr = vtkd_im.vtkCollectPolyData_New();
    vtkCollectPolyData ret = (cPtr is null) ? null : new vtkCollectPolyData(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkCollectPolyData_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkCollectPolyData SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkCollectPolyData_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkCollectPolyData ret = (cPtr is null) ? null : new vtkCollectPolyData(cPtr, false);
    return ret;
  }

  public vtkCollectPolyData NewInstance() const {
    void* cPtr = vtkd_im.vtkCollectPolyData_NewInstance(cast(void*)swigCPtr);
    vtkCollectPolyData ret = (cPtr is null) ? null : new vtkCollectPolyData(cPtr, false);
    return ret;
  }

  alias vtkPolyDataAlgorithm.vtkPolyDataAlgorithm.NewInstance NewInstance;

  public void SetController(vtkMultiProcessController.vtkMultiProcessController arg0) {
    vtkd_im.vtkCollectPolyData_SetController(cast(void*)swigCPtr, vtkMultiProcessController.vtkMultiProcessController.swigGetCPtr(arg0));
  }

  public vtkMultiProcessController.vtkMultiProcessController GetController() {
    void* cPtr = vtkd_im.vtkCollectPolyData_GetController(cast(void*)swigCPtr);
    vtkMultiProcessController.vtkMultiProcessController ret = (cPtr is null) ? null : new vtkMultiProcessController.vtkMultiProcessController(cPtr, false);
    return ret;
  }

  public void SetSocketController(vtkSocketController.vtkSocketController arg0) {
    vtkd_im.vtkCollectPolyData_SetSocketController(cast(void*)swigCPtr, vtkSocketController.vtkSocketController.swigGetCPtr(arg0));
  }

  public vtkSocketController.vtkSocketController GetSocketController() {
    void* cPtr = vtkd_im.vtkCollectPolyData_GetSocketController(cast(void*)swigCPtr);
    vtkSocketController.vtkSocketController ret = (cPtr is null) ? null : new vtkSocketController.vtkSocketController(cPtr, false);
    return ret;
  }

  public void SetPassThrough(int _arg) {
    vtkd_im.vtkCollectPolyData_SetPassThrough(cast(void*)swigCPtr, _arg);
  }

  public int GetPassThrough() {
    auto ret = vtkd_im.vtkCollectPolyData_GetPassThrough(cast(void*)swigCPtr);
    return ret;
  }

  public void PassThroughOn() {
    vtkd_im.vtkCollectPolyData_PassThroughOn(cast(void*)swigCPtr);
  }

  public void PassThroughOff() {
    vtkd_im.vtkCollectPolyData_PassThroughOff(cast(void*)swigCPtr);
  }
}
