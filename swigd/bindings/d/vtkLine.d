/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkLine;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkCell;

class vtkLine : vtkCell.vtkCell {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkLine_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkLine obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkLine New() {
    void* cPtr = vtkd_im.vtkLine_New();
    vtkLine ret = (cPtr is null) ? null : new vtkLine(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkLine_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkLine SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkLine_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkLine ret = (cPtr is null) ? null : new vtkLine(cPtr, false);
    return ret;
  }

  public vtkLine NewInstance() const {
    void* cPtr = vtkd_im.vtkLine_NewInstance(cast(void*)swigCPtr);
    vtkLine ret = (cPtr is null) ? null : new vtkLine(cPtr, false);
    return ret;
  }

  alias vtkCell.vtkCell.NewInstance NewInstance;

  public static int Intersection(SWIGTYPE_p_double.SWIGTYPE_p_double p1, SWIGTYPE_p_double.SWIGTYPE_p_double p2, SWIGTYPE_p_double.SWIGTYPE_p_double x1, SWIGTYPE_p_double.SWIGTYPE_p_double x2, double* u, double* v) {
    auto ret = vtkd_im.vtkLine_Intersection(SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p1), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p2), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x1), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x2), cast(void*)u, cast(void*)v);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public static double DistanceToLine(SWIGTYPE_p_double.SWIGTYPE_p_double x, SWIGTYPE_p_double.SWIGTYPE_p_double p1, SWIGTYPE_p_double.SWIGTYPE_p_double p2, double* t, SWIGTYPE_p_double.SWIGTYPE_p_double closestPoint) {
    auto ret = vtkd_im.vtkLine_DistanceToLine__SWIG_0(SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p1), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p2), cast(void*)t, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(closestPoint));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public static double DistanceToLine(SWIGTYPE_p_double.SWIGTYPE_p_double x, SWIGTYPE_p_double.SWIGTYPE_p_double p1, SWIGTYPE_p_double.SWIGTYPE_p_double p2) {
    auto ret = vtkd_im.vtkLine_DistanceToLine__SWIG_1(SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p1), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p2));
    return ret;
  }

  public static double DistanceBetweenLines(SWIGTYPE_p_double.SWIGTYPE_p_double l0, SWIGTYPE_p_double.SWIGTYPE_p_double l1, SWIGTYPE_p_double.SWIGTYPE_p_double m0, SWIGTYPE_p_double.SWIGTYPE_p_double m1, SWIGTYPE_p_double.SWIGTYPE_p_double closestPt1, SWIGTYPE_p_double.SWIGTYPE_p_double closestPt2, double* t1, double* t2) {
    auto ret = vtkd_im.vtkLine_DistanceBetweenLines(SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(l0), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(l1), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(m0), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(m1), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(closestPt1), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(closestPt2), cast(void*)t1, cast(void*)t2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public static double DistanceBetweenLineSegments(SWIGTYPE_p_double.SWIGTYPE_p_double l0, SWIGTYPE_p_double.SWIGTYPE_p_double l1, SWIGTYPE_p_double.SWIGTYPE_p_double m0, SWIGTYPE_p_double.SWIGTYPE_p_double m1, SWIGTYPE_p_double.SWIGTYPE_p_double closestPt1, SWIGTYPE_p_double.SWIGTYPE_p_double closestPt2, double* t1, double* t2) {
    auto ret = vtkd_im.vtkLine_DistanceBetweenLineSegments(SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(l0), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(l1), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(m0), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(m1), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(closestPt1), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(closestPt2), cast(void*)t1, cast(void*)t2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public static void InterpolationFunctions(SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, SWIGTYPE_p_double.SWIGTYPE_p_double weights) {
    vtkd_im.vtkLine_InterpolationFunctions(SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(weights));
  }

  public static void InterpolationDerivs(SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, SWIGTYPE_p_double.SWIGTYPE_p_double derivs) {
    vtkd_im.vtkLine_InterpolationDerivs(SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(derivs));
  }

  public void InterpolateFunctions(SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, SWIGTYPE_p_double.SWIGTYPE_p_double weights) {
    vtkd_im.vtkLine_InterpolateFunctions(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(weights));
  }

  alias vtkCell.vtkCell.InterpolateFunctions InterpolateFunctions;

  public void InterpolateDerivs(SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, SWIGTYPE_p_double.SWIGTYPE_p_double derivs) {
    vtkd_im.vtkLine_InterpolateDerivs(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(derivs));
  }

  alias vtkCell.vtkCell.InterpolateDerivs InterpolateDerivs;
}
