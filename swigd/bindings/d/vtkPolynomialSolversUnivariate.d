/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPolynomialSolversUnivariate;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_ostream;
static import vtkObject;

class vtkPolynomialSolversUnivariate : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPolynomialSolversUnivariate_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPolynomialSolversUnivariate obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkPolynomialSolversUnivariate New() {
    void* cPtr = vtkd_im.vtkPolynomialSolversUnivariate_New();
    vtkPolynomialSolversUnivariate ret = (cPtr is null) ? null : new vtkPolynomialSolversUnivariate(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPolynomialSolversUnivariate_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPolynomialSolversUnivariate SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPolynomialSolversUnivariate_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPolynomialSolversUnivariate ret = (cPtr is null) ? null : new vtkPolynomialSolversUnivariate(cPtr, false);
    return ret;
  }

  public vtkPolynomialSolversUnivariate NewInstance() const {
    void* cPtr = vtkd_im.vtkPolynomialSolversUnivariate_NewInstance(cast(void*)swigCPtr);
    vtkPolynomialSolversUnivariate ret = (cPtr is null) ? null : new vtkPolynomialSolversUnivariate(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public static SWIGTYPE_p_ostream.SWIGTYPE_p_ostream PrintPolynomial(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream os, double* P, int degP) {
    SWIGTYPE_p_ostream.SWIGTYPE_p_ostream ret = new SWIGTYPE_p_ostream.SWIGTYPE_p_ostream(vtkd_im.vtkPolynomialSolversUnivariate_PrintPolynomial(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(os), cast(void*)P, degP), false);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public static int HabichtBisectionSolve(double* P, int d, double* a, double* upperBnds, double tol) {
    auto ret = vtkd_im.vtkPolynomialSolversUnivariate_HabichtBisectionSolve__SWIG_0(cast(void*)P, d, cast(void*)a, cast(void*)upperBnds, tol);
    return ret;
  }

  public static int HabichtBisectionSolve(double* P, int d, double* a, double* upperBnds, double tol, int intervalType) {
    auto ret = vtkd_im.vtkPolynomialSolversUnivariate_HabichtBisectionSolve__SWIG_1(cast(void*)P, d, cast(void*)a, cast(void*)upperBnds, tol, intervalType);
    return ret;
  }

  public static int HabichtBisectionSolve(double* P, int d, double* a, double* upperBnds, double tol, int intervalType, bool divideGCD) {
    auto ret = vtkd_im.vtkPolynomialSolversUnivariate_HabichtBisectionSolve__SWIG_2(cast(void*)P, d, cast(void*)a, cast(void*)upperBnds, tol, intervalType, divideGCD);
    return ret;
  }

  public static int SturmBisectionSolve(double* P, int d, double* a, double* upperBnds, double tol) {
    auto ret = vtkd_im.vtkPolynomialSolversUnivariate_SturmBisectionSolve__SWIG_0(cast(void*)P, d, cast(void*)a, cast(void*)upperBnds, tol);
    return ret;
  }

  public static int SturmBisectionSolve(double* P, int d, double* a, double* upperBnds, double tol, int intervalType) {
    auto ret = vtkd_im.vtkPolynomialSolversUnivariate_SturmBisectionSolve__SWIG_1(cast(void*)P, d, cast(void*)a, cast(void*)upperBnds, tol, intervalType);
    return ret;
  }

  public static int SturmBisectionSolve(double* P, int d, double* a, double* upperBnds, double tol, int intervalType, bool divideGCD) {
    auto ret = vtkd_im.vtkPolynomialSolversUnivariate_SturmBisectionSolve__SWIG_2(cast(void*)P, d, cast(void*)a, cast(void*)upperBnds, tol, intervalType, divideGCD);
    return ret;
  }

  public static int FilterRoots(double* P, int d, double* upperBnds, int rootcount, double diameter) {
    auto ret = vtkd_im.vtkPolynomialSolversUnivariate_FilterRoots(cast(void*)P, d, cast(void*)upperBnds, rootcount, diameter);
    return ret;
  }

  public static int LinBairstowSolve(double* c, int d, double* r, double* tolerance) {
    auto ret = vtkd_im.vtkPolynomialSolversUnivariate_LinBairstowSolve(cast(void*)c, d, cast(void*)r, cast(void*)tolerance);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public static int FerrariSolve(double* c, double* r, int* m, double tol) {
    auto ret = vtkd_im.vtkPolynomialSolversUnivariate_FerrariSolve(cast(void*)c, cast(void*)r, cast(void*)m, tol);
    return ret;
  }

  public static int TartagliaCardanSolve(double* c, double* r, int* m, double tol) {
    auto ret = vtkd_im.vtkPolynomialSolversUnivariate_TartagliaCardanSolve(cast(void*)c, cast(void*)r, cast(void*)m, tol);
    return ret;
  }

  public static double* SolveCubic(double c0, double c1, double c2, double c3) {
    auto ret = cast(double*)vtkd_im.vtkPolynomialSolversUnivariate_SolveCubic__SWIG_0(c0, c1, c2, c3);
    return ret;
  }

  public static double* SolveQuadratic(double c0, double c1, double c2) {
    auto ret = cast(double*)vtkd_im.vtkPolynomialSolversUnivariate_SolveQuadratic__SWIG_0(c0, c1, c2);
    return ret;
  }

  public static double* SolveLinear(double c0, double c1) {
    auto ret = cast(double*)vtkd_im.vtkPolynomialSolversUnivariate_SolveLinear__SWIG_0(c0, c1);
    return ret;
  }

  public static int SolveCubic(double c0, double c1, double c2, double c3, double* r1, double* r2, double* r3, int* num_roots) {
    auto ret = vtkd_im.vtkPolynomialSolversUnivariate_SolveCubic__SWIG_1(c0, c1, c2, c3, cast(void*)r1, cast(void*)r2, cast(void*)r3, cast(void*)num_roots);
    return ret;
  }

  public static int SolveQuadratic(double c0, double c1, double c2, double* r1, double* r2, int* num_roots) {
    auto ret = vtkd_im.vtkPolynomialSolversUnivariate_SolveQuadratic__SWIG_1(c0, c1, c2, cast(void*)r1, cast(void*)r2, cast(void*)num_roots);
    return ret;
  }

  public static int SolveQuadratic(double* c, double* r, int* m) {
    auto ret = vtkd_im.vtkPolynomialSolversUnivariate_SolveQuadratic__SWIG_2(cast(void*)c, cast(void*)r, cast(void*)m);
    return ret;
  }

  public static int SolveLinear(double c0, double c1, double* r1, int* num_roots) {
    auto ret = vtkd_im.vtkPolynomialSolversUnivariate_SolveLinear__SWIG_1(c0, c1, cast(void*)r1, cast(void*)num_roots);
    return ret;
  }

  public static void SetDivisionTolerance(double tol) {
    vtkd_im.vtkPolynomialSolversUnivariate_SetDivisionTolerance(tol);
  }

  public static double GetDivisionTolerance() {
    auto ret = vtkd_im.vtkPolynomialSolversUnivariate_GetDivisionTolerance();
    return ret;
  }
}
