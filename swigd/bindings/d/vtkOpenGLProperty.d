/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkOpenGLProperty;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkOpenGLRenderWindow;
static import vtkProperty;

class vtkOpenGLProperty : vtkProperty.vtkProperty {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkOpenGLProperty_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkOpenGLProperty obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkOpenGLProperty New() {
    void* cPtr = vtkd_im.vtkOpenGLProperty_New();
    vtkOpenGLProperty ret = (cPtr is null) ? null : new vtkOpenGLProperty(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkOpenGLProperty_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkOpenGLProperty SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkOpenGLProperty_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkOpenGLProperty ret = (cPtr is null) ? null : new vtkOpenGLProperty(cPtr, false);
    return ret;
  }

  public vtkOpenGLProperty NewInstance() const {
    void* cPtr = vtkd_im.vtkOpenGLProperty_NewInstance(cast(void*)swigCPtr);
    vtkOpenGLProperty ret = (cPtr is null) ? null : new vtkOpenGLProperty(cPtr, false);
    return ret;
  }

  alias vtkProperty.vtkProperty.NewInstance NewInstance;

  public override void AddShaderVariable(string name, int numVars, int* x) {
    vtkd_im.vtkOpenGLProperty_AddShaderVariable__SWIG_0(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), numVars, cast(void*)x);
  }

  public override void AddShaderVariable(string name, int numVars, float* x) {
    vtkd_im.vtkOpenGLProperty_AddShaderVariable__SWIG_1(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), numVars, cast(void*)x);
  }

  public override void AddShaderVariable(string name, int numVars, double* x) {
    vtkd_im.vtkOpenGLProperty_AddShaderVariable__SWIG_2(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), numVars, cast(void*)x);
  }

  alias vtkProperty.vtkProperty.AddShaderVariable AddShaderVariable;

  public static void SetMaterialProperties(uint face, double ambient, SWIGTYPE_p_double.SWIGTYPE_p_double ambient_color, double diffuse, SWIGTYPE_p_double.SWIGTYPE_p_double diffuse_color, double specular, SWIGTYPE_p_double.SWIGTYPE_p_double specular_color, double specular_power, double opacity, vtkOpenGLRenderWindow.vtkOpenGLRenderWindow context) {
    vtkd_im.vtkOpenGLProperty_SetMaterialProperties(face, ambient, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(ambient_color), diffuse, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(diffuse_color), specular, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(specular_color), specular_power, opacity, vtkOpenGLRenderWindow.vtkOpenGLRenderWindow.swigGetCPtr(context));
  }
}
