/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkAppendSelection;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkSelection;
static import vtkAlgorithmOutput;
static import vtkSelectionAlgorithm;

class vtkAppendSelection : vtkSelectionAlgorithm.vtkSelectionAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkAppendSelection_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkAppendSelection obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkAppendSelection New() {
    void* cPtr = vtkd_im.vtkAppendSelection_New();
    vtkAppendSelection ret = (cPtr is null) ? null : new vtkAppendSelection(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkAppendSelection_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkAppendSelection SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkAppendSelection_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkAppendSelection ret = (cPtr is null) ? null : new vtkAppendSelection(cPtr, false);
    return ret;
  }

  public vtkAppendSelection NewInstance() const {
    void* cPtr = vtkd_im.vtkAppendSelection_NewInstance(cast(void*)swigCPtr);
    vtkAppendSelection ret = (cPtr is null) ? null : new vtkAppendSelection(cPtr, false);
    return ret;
  }

  alias vtkSelectionAlgorithm.vtkSelectionAlgorithm.NewInstance NewInstance;

  public void SetUserManagedInputs(int _arg) {
    vtkd_im.vtkAppendSelection_SetUserManagedInputs(cast(void*)swigCPtr, _arg);
  }

  public int GetUserManagedInputs() {
    auto ret = vtkd_im.vtkAppendSelection_GetUserManagedInputs(cast(void*)swigCPtr);
    return ret;
  }

  public void UserManagedInputsOn() {
    vtkd_im.vtkAppendSelection_UserManagedInputsOn(cast(void*)swigCPtr);
  }

  public void UserManagedInputsOff() {
    vtkd_im.vtkAppendSelection_UserManagedInputsOff(cast(void*)swigCPtr);
  }

  public void AddInputData(vtkSelection.vtkSelection arg0) {
    vtkd_im.vtkAppendSelection_AddInputData(cast(void*)swigCPtr, vtkSelection.vtkSelection.swigGetCPtr(arg0));
  }

  public void RemoveInputData(vtkSelection.vtkSelection arg0) {
    vtkd_im.vtkAppendSelection_RemoveInputData(cast(void*)swigCPtr, vtkSelection.vtkSelection.swigGetCPtr(arg0));
  }

  public void SetNumberOfInputs(int num) {
    vtkd_im.vtkAppendSelection_SetNumberOfInputs(cast(void*)swigCPtr, num);
  }

  public void SetInputConnectionByNumber(int num, vtkAlgorithmOutput.vtkAlgorithmOutput input) {
    vtkd_im.vtkAppendSelection_SetInputConnectionByNumber(cast(void*)swigCPtr, num, vtkAlgorithmOutput.vtkAlgorithmOutput.swigGetCPtr(input));
  }

  public void SetAppendByUnion(int _arg) {
    vtkd_im.vtkAppendSelection_SetAppendByUnion(cast(void*)swigCPtr, _arg);
  }

  public int GetAppendByUnion() {
    auto ret = vtkd_im.vtkAppendSelection_GetAppendByUnion(cast(void*)swigCPtr);
    return ret;
  }

  public void AppendByUnionOn() {
    vtkd_im.vtkAppendSelection_AppendByUnionOn(cast(void*)swigCPtr);
  }

  public void AppendByUnionOff() {
    vtkd_im.vtkAppendSelection_AppendByUnionOff(cast(void*)swigCPtr);
  }
}
