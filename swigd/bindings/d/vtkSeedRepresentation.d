/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkSeedRepresentation;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkHandleRepresentation;
static import vtkWidgetRepresentation;

class vtkSeedRepresentation : vtkWidgetRepresentation.vtkWidgetRepresentation {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkSeedRepresentation_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkSeedRepresentation obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkSeedRepresentation New() {
    void* cPtr = vtkd_im.vtkSeedRepresentation_New();
    vtkSeedRepresentation ret = (cPtr is null) ? null : new vtkSeedRepresentation(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkSeedRepresentation_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkSeedRepresentation SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkSeedRepresentation_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkSeedRepresentation ret = (cPtr is null) ? null : new vtkSeedRepresentation(cPtr, false);
    return ret;
  }

  public vtkSeedRepresentation NewInstance() const {
    void* cPtr = vtkd_im.vtkSeedRepresentation_NewInstance(cast(void*)swigCPtr);
    vtkSeedRepresentation ret = (cPtr is null) ? null : new vtkSeedRepresentation(cPtr, false);
    return ret;
  }

  alias vtkWidgetRepresentation.vtkWidgetRepresentation.NewInstance NewInstance;

  public void GetSeedWorldPosition(uint seedNum, SWIGTYPE_p_double.SWIGTYPE_p_double pos) {
    vtkd_im.vtkSeedRepresentation_GetSeedWorldPosition(cast(void*)swigCPtr, seedNum, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pos));
  }

  public void SetSeedDisplayPosition(uint seedNum, SWIGTYPE_p_double.SWIGTYPE_p_double pos) {
    vtkd_im.vtkSeedRepresentation_SetSeedDisplayPosition(cast(void*)swigCPtr, seedNum, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pos));
  }

  public void GetSeedDisplayPosition(uint seedNum, SWIGTYPE_p_double.SWIGTYPE_p_double pos) {
    vtkd_im.vtkSeedRepresentation_GetSeedDisplayPosition(cast(void*)swigCPtr, seedNum, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pos));
  }

  public int GetNumberOfSeeds() {
    auto ret = vtkd_im.vtkSeedRepresentation_GetNumberOfSeeds(cast(void*)swigCPtr);
    return ret;
  }

  public void SetHandleRepresentation(vtkHandleRepresentation.vtkHandleRepresentation handle) {
    vtkd_im.vtkSeedRepresentation_SetHandleRepresentation(cast(void*)swigCPtr, vtkHandleRepresentation.vtkHandleRepresentation.swigGetCPtr(handle));
  }

  public vtkHandleRepresentation.vtkHandleRepresentation GetHandleRepresentation(uint num) {
    void* cPtr = vtkd_im.vtkSeedRepresentation_GetHandleRepresentation__SWIG_0(cast(void*)swigCPtr, num);
    vtkHandleRepresentation.vtkHandleRepresentation ret = (cPtr is null) ? null : new vtkHandleRepresentation.vtkHandleRepresentation(cPtr, false);
    return ret;
  }

  public vtkHandleRepresentation.vtkHandleRepresentation GetHandleRepresentation() {
    void* cPtr = vtkd_im.vtkSeedRepresentation_GetHandleRepresentation__SWIG_1(cast(void*)swigCPtr);
    vtkHandleRepresentation.vtkHandleRepresentation ret = (cPtr is null) ? null : new vtkHandleRepresentation.vtkHandleRepresentation(cPtr, false);
    return ret;
  }

  public void SetTolerance(int _arg) {
    vtkd_im.vtkSeedRepresentation_SetTolerance(cast(void*)swigCPtr, _arg);
  }

  public int GetToleranceMinValue() {
    auto ret = vtkd_im.vtkSeedRepresentation_GetToleranceMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetToleranceMaxValue() {
    auto ret = vtkd_im.vtkSeedRepresentation_GetToleranceMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetTolerance() {
    auto ret = vtkd_im.vtkSeedRepresentation_GetTolerance(cast(void*)swigCPtr);
    return ret;
  }

  public int GetActiveHandle() {
    auto ret = vtkd_im.vtkSeedRepresentation_GetActiveHandle(cast(void*)swigCPtr);
    return ret;
  }

  public int CreateHandle(SWIGTYPE_p_double.SWIGTYPE_p_double e) {
    auto ret = vtkd_im.vtkSeedRepresentation_CreateHandle(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(e));
    return ret;
  }

  public void RemoveLastHandle() {
    vtkd_im.vtkSeedRepresentation_RemoveLastHandle(cast(void*)swigCPtr);
  }

  public void RemoveActiveHandle() {
    vtkd_im.vtkSeedRepresentation_RemoveActiveHandle(cast(void*)swigCPtr);
  }

  public void RemoveHandle(int n) {
    vtkd_im.vtkSeedRepresentation_RemoveHandle(cast(void*)swigCPtr, n);
  }

  public override int ComputeInteractionState(int X, int Y, int modify) {
    auto ret = vtkd_im.vtkSeedRepresentation_ComputeInteractionState__SWIG_0(cast(void*)swigCPtr, X, Y, modify);
    return ret;
  }

  public override int ComputeInteractionState(int X, int Y) {
    auto ret = vtkd_im.vtkSeedRepresentation_ComputeInteractionState__SWIG_1(cast(void*)swigCPtr, X, Y);
    return ret;
  }
}
