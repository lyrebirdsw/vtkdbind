/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkUnstructuredGridLinearRayIntegrator;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_float;
static import SWIGTYPE_p_double;
static import vtkUnstructuredGridVolumeRayIntegrator;

class vtkUnstructuredGridLinearRayIntegrator : vtkUnstructuredGridVolumeRayIntegrator.vtkUnstructuredGridVolumeRayIntegrator {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkUnstructuredGridLinearRayIntegrator_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkUnstructuredGridLinearRayIntegrator obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkUnstructuredGridLinearRayIntegrator_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkUnstructuredGridLinearRayIntegrator SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkUnstructuredGridLinearRayIntegrator_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkUnstructuredGridLinearRayIntegrator ret = (cPtr is null) ? null : new vtkUnstructuredGridLinearRayIntegrator(cPtr, false);
    return ret;
  }

  public vtkUnstructuredGridLinearRayIntegrator NewInstance() const {
    void* cPtr = vtkd_im.vtkUnstructuredGridLinearRayIntegrator_NewInstance(cast(void*)swigCPtr);
    vtkUnstructuredGridLinearRayIntegrator ret = (cPtr is null) ? null : new vtkUnstructuredGridLinearRayIntegrator(cPtr, false);
    return ret;
  }

  alias vtkUnstructuredGridVolumeRayIntegrator.vtkUnstructuredGridVolumeRayIntegrator.NewInstance NewInstance;

  public static vtkUnstructuredGridLinearRayIntegrator New() {
    void* cPtr = vtkd_im.vtkUnstructuredGridLinearRayIntegrator_New();
    vtkUnstructuredGridLinearRayIntegrator ret = (cPtr is null) ? null : new vtkUnstructuredGridLinearRayIntegrator(cPtr, false);
    return ret;
  }

  public static void IntegrateRay(double length, double intensity_front, double attenuation_front, double intensity_back, double attenuation_back, SWIGTYPE_p_float.SWIGTYPE_p_float color) {
    vtkd_im.vtkUnstructuredGridLinearRayIntegrator_IntegrateRay__SWIG_0(length, intensity_front, attenuation_front, intensity_back, attenuation_back, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(color));
  }

  public static void IntegrateRay(double length, SWIGTYPE_p_double.SWIGTYPE_p_double color_front, double attenuation_front, SWIGTYPE_p_double.SWIGTYPE_p_double color_back, double attenuation_back, SWIGTYPE_p_float.SWIGTYPE_p_float color) {
    vtkd_im.vtkUnstructuredGridLinearRayIntegrator_IntegrateRay__SWIG_1(length, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(color_front), attenuation_front, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(color_back), attenuation_back, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(color));
  }

  public static float Psi(float length, float attenuation_front, float attenuation_back) {
    auto ret = vtkd_im.vtkUnstructuredGridLinearRayIntegrator_Psi(length, attenuation_front, attenuation_back);
    return ret;
  }
}
