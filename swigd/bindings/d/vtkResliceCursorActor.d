/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkResliceCursorActor;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkResliceCursorPolyDataAlgorithm;
static import vtkViewport;
static import vtkWindow;
static import vtkProperty;
static import vtkActor;
static import vtkMatrix4x4;
static import vtkProp3D;

class vtkResliceCursorActor : vtkProp3D.vtkProp3D {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkResliceCursorActor_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkResliceCursorActor obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkResliceCursorActor New() {
    void* cPtr = vtkd_im.vtkResliceCursorActor_New();
    vtkResliceCursorActor ret = (cPtr is null) ? null : new vtkResliceCursorActor(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkResliceCursorActor_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkResliceCursorActor SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkResliceCursorActor_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkResliceCursorActor ret = (cPtr is null) ? null : new vtkResliceCursorActor(cPtr, false);
    return ret;
  }

  public vtkResliceCursorActor NewInstance() const {
    void* cPtr = vtkd_im.vtkResliceCursorActor_NewInstance(cast(void*)swigCPtr);
    vtkResliceCursorActor ret = (cPtr is null) ? null : new vtkResliceCursorActor(cPtr, false);
    return ret;
  }

  alias vtkProp3D.vtkProp3D.NewInstance NewInstance;

  public vtkResliceCursorPolyDataAlgorithm.vtkResliceCursorPolyDataAlgorithm GetCursorAlgorithm() {
    void* cPtr = vtkd_im.vtkResliceCursorActor_GetCursorAlgorithm(cast(void*)swigCPtr);
    vtkResliceCursorPolyDataAlgorithm.vtkResliceCursorPolyDataAlgorithm ret = (cPtr is null) ? null : new vtkResliceCursorPolyDataAlgorithm.vtkResliceCursorPolyDataAlgorithm(cPtr, false);
    return ret;
  }

  public int RenderOpaqueGeometry(vtkViewport.vtkViewport viewport) {
    auto ret = vtkd_im.vtkResliceCursorActor_RenderOpaqueGeometry(cast(void*)swigCPtr, vtkViewport.vtkViewport.swigGetCPtr(viewport));
    return ret;
  }

  public int HasTranslucentPolygonalGeometry() {
    auto ret = vtkd_im.vtkResliceCursorActor_HasTranslucentPolygonalGeometry(cast(void*)swigCPtr);
    return ret;
  }

  public void ReleaseGraphicsResources(vtkWindow.vtkWindow arg0) {
    vtkd_im.vtkResliceCursorActor_ReleaseGraphicsResources(cast(void*)swigCPtr, vtkWindow.vtkWindow.swigGetCPtr(arg0));
  }

  public vtkProperty.vtkProperty GetCenterlineProperty(int i) {
    void* cPtr = vtkd_im.vtkResliceCursorActor_GetCenterlineProperty(cast(void*)swigCPtr, i);
    vtkProperty.vtkProperty ret = (cPtr is null) ? null : new vtkProperty.vtkProperty(cPtr, false);
    return ret;
  }

  public vtkProperty.vtkProperty GetThickSlabProperty(int i) {
    void* cPtr = vtkd_im.vtkResliceCursorActor_GetThickSlabProperty(cast(void*)swigCPtr, i);
    vtkProperty.vtkProperty ret = (cPtr is null) ? null : new vtkProperty.vtkProperty(cPtr, false);
    return ret;
  }

  public vtkActor.vtkActor GetCenterlineActor(int axis) {
    void* cPtr = vtkd_im.vtkResliceCursorActor_GetCenterlineActor(cast(void*)swigCPtr, axis);
    vtkActor.vtkActor ret = (cPtr is null) ? null : new vtkActor.vtkActor(cPtr, false);
    return ret;
  }

  public void SetUserMatrix(vtkMatrix4x4.vtkMatrix4x4 matrix) {
    vtkd_im.vtkResliceCursorActor_SetUserMatrix(cast(void*)swigCPtr, vtkMatrix4x4.vtkMatrix4x4.swigGetCPtr(matrix));
  }

  alias vtkProp3D.vtkProp3D.SetUserMatrix SetUserMatrix;
}
