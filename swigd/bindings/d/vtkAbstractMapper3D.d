/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkAbstractMapper3D;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkMatrix4x4;
static import vtkAbstractMapper;

class vtkAbstractMapper3D : vtkAbstractMapper.vtkAbstractMapper {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkAbstractMapper3D_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkAbstractMapper3D obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkAbstractMapper3D_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkAbstractMapper3D SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkAbstractMapper3D_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkAbstractMapper3D ret = (cPtr is null) ? null : new vtkAbstractMapper3D(cPtr, false);
    return ret;
  }

  public vtkAbstractMapper3D NewInstance() const {
    void* cPtr = vtkd_im.vtkAbstractMapper3D_NewInstance(cast(void*)swigCPtr);
    vtkAbstractMapper3D ret = (cPtr is null) ? null : new vtkAbstractMapper3D(cPtr, false);
    return ret;
  }

  alias vtkAbstractMapper.vtkAbstractMapper.NewInstance NewInstance;

  public double* GetBounds() {
    auto ret = cast(double*)vtkd_im.vtkAbstractMapper3D_GetBounds__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetBounds(SWIGTYPE_p_double.SWIGTYPE_p_double bounds) {
    vtkd_im.vtkAbstractMapper3D_GetBounds__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
  }

  public double* GetCenter() {
    auto ret = cast(double*)vtkd_im.vtkAbstractMapper3D_GetCenter__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetCenter(SWIGTYPE_p_double.SWIGTYPE_p_double center) {
    vtkd_im.vtkAbstractMapper3D_GetCenter__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(center));
  }

  public double GetLength() {
    auto ret = vtkd_im.vtkAbstractMapper3D_GetLength(cast(void*)swigCPtr);
    return ret;
  }

  public int IsARayCastMapper() {
    auto ret = vtkd_im.vtkAbstractMapper3D_IsARayCastMapper(cast(void*)swigCPtr);
    return ret;
  }

  public int IsARenderIntoImageMapper() {
    auto ret = vtkd_im.vtkAbstractMapper3D_IsARenderIntoImageMapper(cast(void*)swigCPtr);
    return ret;
  }

  public void GetClippingPlaneInDataCoords(vtkMatrix4x4.vtkMatrix4x4 propMatrix, int i, SWIGTYPE_p_double.SWIGTYPE_p_double planeEquation) {
    vtkd_im.vtkAbstractMapper3D_GetClippingPlaneInDataCoords(cast(void*)swigCPtr, vtkMatrix4x4.vtkMatrix4x4.swigGetCPtr(propMatrix), i, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(planeEquation));
  }

  public int GetNumberOfClippingPlanes() {
    auto ret = vtkd_im.vtkAbstractMapper3D_GetNumberOfClippingPlanes(cast(void*)swigCPtr);
    return ret;
  }
}
