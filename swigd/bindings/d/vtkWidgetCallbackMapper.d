/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkWidgetCallbackMapper;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkWidgetEventTranslator;
static import vtkAbstractWidget;
static import SWIGTYPE_p_CallbackType;
static import vtkObject;

class vtkWidgetCallbackMapper : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkWidgetCallbackMapper_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkWidgetCallbackMapper obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkWidgetCallbackMapper New() {
    void* cPtr = vtkd_im.vtkWidgetCallbackMapper_New();
    vtkWidgetCallbackMapper ret = (cPtr is null) ? null : new vtkWidgetCallbackMapper(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkWidgetCallbackMapper_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkWidgetCallbackMapper SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkWidgetCallbackMapper_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkWidgetCallbackMapper ret = (cPtr is null) ? null : new vtkWidgetCallbackMapper(cPtr, false);
    return ret;
  }

  public vtkWidgetCallbackMapper NewInstance() const {
    void* cPtr = vtkd_im.vtkWidgetCallbackMapper_NewInstance(cast(void*)swigCPtr);
    vtkWidgetCallbackMapper ret = (cPtr is null) ? null : new vtkWidgetCallbackMapper(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public void SetEventTranslator(vtkWidgetEventTranslator.vtkWidgetEventTranslator t) {
    vtkd_im.vtkWidgetCallbackMapper_SetEventTranslator(cast(void*)swigCPtr, vtkWidgetEventTranslator.vtkWidgetEventTranslator.swigGetCPtr(t));
  }

  public vtkWidgetEventTranslator.vtkWidgetEventTranslator GetEventTranslator() {
    void* cPtr = vtkd_im.vtkWidgetCallbackMapper_GetEventTranslator(cast(void*)swigCPtr);
    vtkWidgetEventTranslator.vtkWidgetEventTranslator ret = (cPtr is null) ? null : new vtkWidgetEventTranslator.vtkWidgetEventTranslator(cPtr, false);
    return ret;
  }

  public void SetCallbackMethod(core.stdc.config.c_ulong VTKEvent, core.stdc.config.c_ulong widgetEvent, vtkAbstractWidget.vtkAbstractWidget w, SWIGTYPE_p_CallbackType.SWIGTYPE_p_CallbackType f) {
    vtkd_im.vtkWidgetCallbackMapper_SetCallbackMethod__SWIG_0(cast(void*)swigCPtr, VTKEvent, widgetEvent, vtkAbstractWidget.vtkAbstractWidget.swigGetCPtr(w), SWIGTYPE_p_CallbackType.SWIGTYPE_p_CallbackType.swigGetCPtr(f));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void SetCallbackMethod(core.stdc.config.c_ulong VTKEvent, int modifiers, char keyCode, int repeatCount, string keySym, core.stdc.config.c_ulong widgetEvent, vtkAbstractWidget.vtkAbstractWidget w, SWIGTYPE_p_CallbackType.SWIGTYPE_p_CallbackType f) {
    vtkd_im.vtkWidgetCallbackMapper_SetCallbackMethod__SWIG_1(cast(void*)swigCPtr, VTKEvent, modifiers, keyCode, repeatCount, (keySym ? std.string.toStringz(keySym) : null), widgetEvent, vtkAbstractWidget.vtkAbstractWidget.swigGetCPtr(w), SWIGTYPE_p_CallbackType.SWIGTYPE_p_CallbackType.swigGetCPtr(f));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void InvokeCallback(core.stdc.config.c_ulong widgetEvent) {
    vtkd_im.vtkWidgetCallbackMapper_InvokeCallback(cast(void*)swigCPtr, widgetEvent);
  }
}
