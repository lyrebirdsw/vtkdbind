/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkVolumeRayCastSpaceLeapingImageFilter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkDataArray;
static import SWIGTYPE_p_float;
static import SWIGTYPE_p_int;
static import vtkImageData;
static import vtkThreadedImageAlgorithm;

class vtkVolumeRayCastSpaceLeapingImageFilter : vtkThreadedImageAlgorithm.vtkThreadedImageAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkVolumeRayCastSpaceLeapingImageFilter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkVolumeRayCastSpaceLeapingImageFilter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkVolumeRayCastSpaceLeapingImageFilter ret = (cPtr is null) ? null : new vtkVolumeRayCastSpaceLeapingImageFilter(cPtr, false);
    return ret;
  }

  public vtkVolumeRayCastSpaceLeapingImageFilter NewInstance() const {
    void* cPtr = vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_NewInstance(cast(void*)swigCPtr);
    vtkVolumeRayCastSpaceLeapingImageFilter ret = (cPtr is null) ? null : new vtkVolumeRayCastSpaceLeapingImageFilter(cPtr, false);
    return ret;
  }

  alias vtkThreadedImageAlgorithm.vtkThreadedImageAlgorithm.NewInstance NewInstance;

  public static vtkVolumeRayCastSpaceLeapingImageFilter New() {
    void* cPtr = vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_New();
    vtkVolumeRayCastSpaceLeapingImageFilter ret = (cPtr is null) ? null : new vtkVolumeRayCastSpaceLeapingImageFilter(cPtr, false);
    return ret;
  }

  public void SetCurrentScalars(vtkDataArray.vtkDataArray arg0) {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_SetCurrentScalars(cast(void*)swigCPtr, vtkDataArray.vtkDataArray.swigGetCPtr(arg0));
  }

  public vtkDataArray.vtkDataArray GetCurrentScalars() {
    void* cPtr = vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_GetCurrentScalars(cast(void*)swigCPtr);
    vtkDataArray.vtkDataArray ret = (cPtr is null) ? null : new vtkDataArray.vtkDataArray(cPtr, false);
    return ret;
  }

  public void SetIndependentComponents(int _arg) {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_SetIndependentComponents(cast(void*)swigCPtr, _arg);
  }

  public int GetIndependentComponents() {
    auto ret = vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_GetIndependentComponents(cast(void*)swigCPtr);
    return ret;
  }

  public void SetComputeGradientOpacity(int _arg) {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_SetComputeGradientOpacity(cast(void*)swigCPtr, _arg);
  }

  public int GetComputeGradientOpacity() {
    auto ret = vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_GetComputeGradientOpacity(cast(void*)swigCPtr);
    return ret;
  }

  public void ComputeGradientOpacityOn() {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_ComputeGradientOpacityOn(cast(void*)swigCPtr);
  }

  public void ComputeGradientOpacityOff() {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_ComputeGradientOpacityOff(cast(void*)swigCPtr);
  }

  public void SetComputeMinMax(int _arg) {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_SetComputeMinMax(cast(void*)swigCPtr, _arg);
  }

  public int GetComputeMinMax() {
    auto ret = vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_GetComputeMinMax(cast(void*)swigCPtr);
    return ret;
  }

  public void ComputeMinMaxOn() {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_ComputeMinMaxOn(cast(void*)swigCPtr);
  }

  public void ComputeMinMaxOff() {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_ComputeMinMaxOff(cast(void*)swigCPtr);
  }

  public void SetUpdateGradientOpacityFlags(int _arg) {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_SetUpdateGradientOpacityFlags(cast(void*)swigCPtr, _arg);
  }

  public int GetUpdateGradientOpacityFlags() {
    auto ret = vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_GetUpdateGradientOpacityFlags(cast(void*)swigCPtr);
    return ret;
  }

  public void UpdateGradientOpacityFlagsOn() {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_UpdateGradientOpacityFlagsOn(cast(void*)swigCPtr);
  }

  public void UpdateGradientOpacityFlagsOff() {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_UpdateGradientOpacityFlagsOff(cast(void*)swigCPtr);
  }

  public core.stdc.config.c_ulong GetLastMinMaxBuildTime() {
    auto ret = vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_GetLastMinMaxBuildTime(cast(void*)swigCPtr);
    return ret;
  }

  public core.stdc.config.c_ulong GetLastMinMaxFlagTime() {
    auto ret = vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_GetLastMinMaxFlagTime(cast(void*)swigCPtr);
    return ret;
  }

  public void SetTableShift(float _arg1, float _arg2, float _arg3, float _arg4) {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_SetTableShift__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3, _arg4);
  }

  public void SetTableShift(SWIGTYPE_p_float.SWIGTYPE_p_float _arg) {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_SetTableShift__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(_arg));
  }

  public float* GetTableShift() {
    auto ret = cast(float*)vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_GetTableShift__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetTableShift(float* _arg1, float* _arg2, float* _arg3, float* _arg4) {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_GetTableShift__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3, cast(void*)_arg4);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetTableShift(SWIGTYPE_p_float.SWIGTYPE_p_float _arg) {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_GetTableShift__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(_arg));
  }

  public void SetTableScale(float _arg1, float _arg2, float _arg3, float _arg4) {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_SetTableScale__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3, _arg4);
  }

  public void SetTableScale(SWIGTYPE_p_float.SWIGTYPE_p_float _arg) {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_SetTableScale__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(_arg));
  }

  public float* GetTableScale() {
    auto ret = cast(float*)vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_GetTableScale__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetTableScale(float* _arg1, float* _arg2, float* _arg3, float* _arg4) {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_GetTableScale__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3, cast(void*)_arg4);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetTableScale(SWIGTYPE_p_float.SWIGTYPE_p_float _arg) {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_GetTableScale__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(_arg));
  }

  public void SetTableSize(int _arg1, int _arg2, int _arg3, int _arg4) {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_SetTableSize__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3, _arg4);
  }

  public void SetTableSize(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_SetTableSize__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public int* GetTableSize() {
    auto ret = cast(int*)vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_GetTableSize__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetTableSize(int* _arg1, int* _arg2, int* _arg3, int* _arg4) {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_GetTableSize__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3, cast(void*)_arg4);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetTableSize(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_GetTableSize__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public int GetNumberOfIndependentComponents() {
    auto ret = vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_GetNumberOfIndependentComponents(cast(void*)swigCPtr);
    return ret;
  }

  public ushort* GetMinMaxVolume(SWIGTYPE_p_int.SWIGTYPE_p_int dims) {
    auto ret = cast(ushort*)vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_GetMinMaxVolume(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(dims));
    return ret;
  }

  public void SetCache(vtkImageData.vtkImageData imageCache) {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_SetCache(cast(void*)swigCPtr, vtkImageData.vtkImageData.swigGetCPtr(imageCache));
  }

  public static void ComputeInputExtentsForOutput(SWIGTYPE_p_int.SWIGTYPE_p_int inExt, SWIGTYPE_p_int.SWIGTYPE_p_int inDim, SWIGTYPE_p_int.SWIGTYPE_p_int outExt, vtkImageData.vtkImageData inData) {
    vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_ComputeInputExtentsForOutput(SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(inExt), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(inDim), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(outExt), vtkImageData.vtkImageData.swigGetCPtr(inData));
  }

  public ushort* GetMinNonZeroScalarIndex() {
    auto ret = cast(ushort*)vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_GetMinNonZeroScalarIndex(cast(void*)swigCPtr);
    return ret;
  }

  public ubyte* GetMinNonZeroGradientMagnitudeIndex() {
    auto ret = cast(ubyte*)vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_GetMinNonZeroGradientMagnitudeIndex(cast(void*)swigCPtr);
    return ret;
  }

  public long ComputeOffset(SWIGTYPE_p_int.SWIGTYPE_p_int ext, SWIGTYPE_p_int.SWIGTYPE_p_int wholeExt, int nComponents) {
    auto ret = vtkd_im.vtkVolumeRayCastSpaceLeapingImageFilter_ComputeOffset(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(ext), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(wholeExt), nComponents);
    return ret;
  }
}
