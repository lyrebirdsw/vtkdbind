/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkQuaterniond;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkQuaternionDoubleT;

class vtkQuaterniond : vtkQuaternionDoubleT.vtkQuaternionDoubleT {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkQuaterniond_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkQuaterniond obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkQuaterniond(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(vtkd_im.new_vtkQuaterniond__SWIG_0(), true);
  }

  public this(double w, double x, double y, double z) {
    this(vtkd_im.new_vtkQuaterniond__SWIG_1(w, x, y, z), true);
  }

  public this(double scalar) {
    this(vtkd_im.new_vtkQuaterniond__SWIG_2(scalar), true);
  }

  public this(double* init) {
    this(vtkd_im.new_vtkQuaterniond__SWIG_3(cast(void*)init), true);
  }

  public vtkQuaterniond Identity() const {
    vtkQuaterniond ret = new vtkQuaterniond(vtkd_im.vtkQuaterniond_Identity(cast(void*)swigCPtr), true);
    return ret;
  }

  alias vtkQuaternionDoubleT.vtkQuaternionDoubleT.Identity Identity;

  public vtkQuaterniond Normalized() const {
    vtkQuaterniond ret = new vtkQuaterniond(vtkd_im.vtkQuaterniond_Normalized(cast(void*)swigCPtr), true);
    return ret;
  }

  alias vtkQuaternionDoubleT.vtkQuaternionDoubleT.Normalized Normalized;

  public vtkQuaterniond Conjugated() const {
    vtkQuaterniond ret = new vtkQuaterniond(vtkd_im.vtkQuaterniond_Conjugated(cast(void*)swigCPtr), true);
    return ret;
  }

  alias vtkQuaternionDoubleT.vtkQuaternionDoubleT.Conjugated Conjugated;

  public vtkQuaterniond Inverse() const {
    vtkQuaterniond ret = new vtkQuaterniond(vtkd_im.vtkQuaterniond_Inverse(cast(void*)swigCPtr), true);
    return ret;
  }

  alias vtkQuaternionDoubleT.vtkQuaternionDoubleT.Inverse Inverse;

  public vtkQuaterniond UnitLog() const {
    vtkQuaterniond ret = new vtkQuaterniond(vtkd_im.vtkQuaterniond_UnitLog(cast(void*)swigCPtr), true);
    return ret;
  }

  alias vtkQuaternionDoubleT.vtkQuaternionDoubleT.UnitLog UnitLog;

  public vtkQuaterniond UnitExp() const {
    vtkQuaterniond ret = new vtkQuaterniond(vtkd_im.vtkQuaterniond_UnitExp(cast(void*)swigCPtr), true);
    return ret;
  }

  alias vtkQuaternionDoubleT.vtkQuaternionDoubleT.UnitExp UnitExp;

  public vtkQuaterniond NormalizedWithAngleInDegrees() const {
    vtkQuaterniond ret = new vtkQuaterniond(vtkd_im.vtkQuaterniond_NormalizedWithAngleInDegrees(cast(void*)swigCPtr), true);
    return ret;
  }

  alias vtkQuaternionDoubleT.vtkQuaternionDoubleT.NormalizedWithAngleInDegrees NormalizedWithAngleInDegrees;

  public vtkQuaterniond Slerp(double t, vtkQuaterniond q) const {
    vtkQuaterniond ret = new vtkQuaterniond(vtkd_im.vtkQuaterniond_Slerp(cast(void*)swigCPtr, t, vtkQuaterniond.swigGetCPtr(q)), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  alias vtkQuaternionDoubleT.vtkQuaternionDoubleT.Slerp Slerp;

  public vtkQuaterniond InnerPoint(vtkQuaterniond q1, vtkQuaterniond q2) const {
    vtkQuaterniond ret = new vtkQuaterniond(vtkd_im.vtkQuaterniond_InnerPoint(cast(void*)swigCPtr, vtkQuaterniond.swigGetCPtr(q1), vtkQuaterniond.swigGetCPtr(q2)), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  alias vtkQuaternionDoubleT.vtkQuaternionDoubleT.InnerPoint InnerPoint;

  public vtkQuaterniond swigOpAdd(vtkQuaterniond q) const {
    vtkQuaterniond ret = new vtkQuaterniond(vtkd_im.vtkQuaterniond_swigOpAdd(cast(void*)swigCPtr, vtkQuaterniond.swigGetCPtr(q)), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  alias vtkQuaternionDoubleT.vtkQuaternionDoubleT.swigOpAdd swigOpAdd;

  public vtkQuaterniond swigOpSub(vtkQuaterniond q) const {
    vtkQuaterniond ret = new vtkQuaterniond(vtkd_im.vtkQuaterniond_swigOpSub(cast(void*)swigCPtr, vtkQuaterniond.swigGetCPtr(q)), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  alias vtkQuaternionDoubleT.vtkQuaternionDoubleT.swigOpSub swigOpSub;

  public vtkQuaterniond swigOpMul(vtkQuaterniond q) const {
    vtkQuaterniond ret = new vtkQuaterniond(vtkd_im.vtkQuaterniond_swigOpMul__SWIG_0(cast(void*)swigCPtr, vtkQuaterniond.swigGetCPtr(q)), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public vtkQuaterniond swigOpMul(double scalar) const {
    vtkQuaterniond ret = new vtkQuaterniond(vtkd_im.vtkQuaterniond_swigOpMul__SWIG_1(cast(void*)swigCPtr, scalar), true);
    return ret;
  }

  alias vtkQuaternionDoubleT.vtkQuaternionDoubleT.swigOpMul swigOpMul;

  public vtkQuaterniond swigOpDiv(vtkQuaterniond q) const {
    vtkQuaterniond ret = new vtkQuaterniond(vtkd_im.vtkQuaterniond_swigOpDiv__SWIG_0(cast(void*)swigCPtr, vtkQuaterniond.swigGetCPtr(q)), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public vtkQuaterniond swigOpDiv(double scalar) const {
    vtkQuaterniond ret = new vtkQuaterniond(vtkd_im.vtkQuaterniond_swigOpDiv__SWIG_1(cast(void*)swigCPtr, scalar), true);
    return ret;
  }

  alias vtkQuaternionDoubleT.vtkQuaternionDoubleT.swigOpDiv swigOpDiv;
}
