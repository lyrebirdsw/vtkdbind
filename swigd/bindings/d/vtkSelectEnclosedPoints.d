/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkSelectEnclosedPoints;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkPolyData;
static import vtkAlgorithmOutput;
static import vtkInformationVector;
static import SWIGTYPE_p_double;
static import vtkDataSetAlgorithm;

class vtkSelectEnclosedPoints : vtkDataSetAlgorithm.vtkDataSetAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkSelectEnclosedPoints_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkSelectEnclosedPoints obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkSelectEnclosedPoints_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkSelectEnclosedPoints SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkSelectEnclosedPoints_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkSelectEnclosedPoints ret = (cPtr is null) ? null : new vtkSelectEnclosedPoints(cPtr, false);
    return ret;
  }

  public vtkSelectEnclosedPoints NewInstance() const {
    void* cPtr = vtkd_im.vtkSelectEnclosedPoints_NewInstance(cast(void*)swigCPtr);
    vtkSelectEnclosedPoints ret = (cPtr is null) ? null : new vtkSelectEnclosedPoints(cPtr, false);
    return ret;
  }

  alias vtkDataSetAlgorithm.vtkDataSetAlgorithm.NewInstance NewInstance;

  public static vtkSelectEnclosedPoints New() {
    void* cPtr = vtkd_im.vtkSelectEnclosedPoints_New();
    vtkSelectEnclosedPoints ret = (cPtr is null) ? null : new vtkSelectEnclosedPoints(cPtr, false);
    return ret;
  }

  public void SetSurfaceData(vtkPolyData.vtkPolyData pd) {
    vtkd_im.vtkSelectEnclosedPoints_SetSurfaceData(cast(void*)swigCPtr, vtkPolyData.vtkPolyData.swigGetCPtr(pd));
  }

  public void SetSurfaceConnection(vtkAlgorithmOutput.vtkAlgorithmOutput algOutput) {
    vtkd_im.vtkSelectEnclosedPoints_SetSurfaceConnection(cast(void*)swigCPtr, vtkAlgorithmOutput.vtkAlgorithmOutput.swigGetCPtr(algOutput));
  }

  public vtkPolyData.vtkPolyData GetSurface() {
    void* cPtr = vtkd_im.vtkSelectEnclosedPoints_GetSurface__SWIG_0(cast(void*)swigCPtr);
    vtkPolyData.vtkPolyData ret = (cPtr is null) ? null : new vtkPolyData.vtkPolyData(cPtr, false);
    return ret;
  }

  public vtkPolyData.vtkPolyData GetSurface(vtkInformationVector.vtkInformationVector sourceInfo) {
    void* cPtr = vtkd_im.vtkSelectEnclosedPoints_GetSurface__SWIG_1(cast(void*)swigCPtr, vtkInformationVector.vtkInformationVector.swigGetCPtr(sourceInfo));
    vtkPolyData.vtkPolyData ret = (cPtr is null) ? null : new vtkPolyData.vtkPolyData(cPtr, false);
    return ret;
  }

  public void SetInsideOut(int _arg) {
    vtkd_im.vtkSelectEnclosedPoints_SetInsideOut(cast(void*)swigCPtr, _arg);
  }

  public void InsideOutOn() {
    vtkd_im.vtkSelectEnclosedPoints_InsideOutOn(cast(void*)swigCPtr);
  }

  public void InsideOutOff() {
    vtkd_im.vtkSelectEnclosedPoints_InsideOutOff(cast(void*)swigCPtr);
  }

  public int GetInsideOut() {
    auto ret = vtkd_im.vtkSelectEnclosedPoints_GetInsideOut(cast(void*)swigCPtr);
    return ret;
  }

  public void SetCheckSurface(int _arg) {
    vtkd_im.vtkSelectEnclosedPoints_SetCheckSurface(cast(void*)swigCPtr, _arg);
  }

  public void CheckSurfaceOn() {
    vtkd_im.vtkSelectEnclosedPoints_CheckSurfaceOn(cast(void*)swigCPtr);
  }

  public void CheckSurfaceOff() {
    vtkd_im.vtkSelectEnclosedPoints_CheckSurfaceOff(cast(void*)swigCPtr);
  }

  public int GetCheckSurface() {
    auto ret = vtkd_im.vtkSelectEnclosedPoints_GetCheckSurface(cast(void*)swigCPtr);
    return ret;
  }

  public int IsInside(long inputPtId) {
    auto ret = vtkd_im.vtkSelectEnclosedPoints_IsInside(cast(void*)swigCPtr, inputPtId);
    return ret;
  }

  public void SetTolerance(double _arg) {
    vtkd_im.vtkSelectEnclosedPoints_SetTolerance(cast(void*)swigCPtr, _arg);
  }

  public double GetToleranceMinValue() {
    auto ret = vtkd_im.vtkSelectEnclosedPoints_GetToleranceMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetToleranceMaxValue() {
    auto ret = vtkd_im.vtkSelectEnclosedPoints_GetToleranceMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetTolerance() {
    auto ret = vtkd_im.vtkSelectEnclosedPoints_GetTolerance(cast(void*)swigCPtr);
    return ret;
  }

  public void Initialize(vtkPolyData.vtkPolyData surface) {
    vtkd_im.vtkSelectEnclosedPoints_Initialize(cast(void*)swigCPtr, vtkPolyData.vtkPolyData.swigGetCPtr(surface));
  }

  public int IsInsideSurface(double x, double y, double z) {
    auto ret = vtkd_im.vtkSelectEnclosedPoints_IsInsideSurface__SWIG_0(cast(void*)swigCPtr, x, y, z);
    return ret;
  }

  public int IsInsideSurface(SWIGTYPE_p_double.SWIGTYPE_p_double x) {
    auto ret = vtkd_im.vtkSelectEnclosedPoints_IsInsideSurface__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x));
    return ret;
  }

  public void Complete() {
    vtkd_im.vtkSelectEnclosedPoints_Complete(cast(void*)swigCPtr);
  }
}
