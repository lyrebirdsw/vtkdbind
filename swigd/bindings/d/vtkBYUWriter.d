/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkBYUWriter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkPolyData;
static import vtkWriter;

class vtkBYUWriter : vtkWriter.vtkWriter {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkBYUWriter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkBYUWriter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkBYUWriter New() {
    void* cPtr = vtkd_im.vtkBYUWriter_New();
    vtkBYUWriter ret = (cPtr is null) ? null : new vtkBYUWriter(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkBYUWriter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkBYUWriter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkBYUWriter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkBYUWriter ret = (cPtr is null) ? null : new vtkBYUWriter(cPtr, false);
    return ret;
  }

  public vtkBYUWriter NewInstance() const {
    void* cPtr = vtkd_im.vtkBYUWriter_NewInstance(cast(void*)swigCPtr);
    vtkBYUWriter ret = (cPtr is null) ? null : new vtkBYUWriter(cPtr, false);
    return ret;
  }

  alias vtkWriter.vtkWriter.NewInstance NewInstance;

  public void SetGeometryFileName(string _arg) {
    vtkd_im.vtkBYUWriter_SetGeometryFileName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetGeometryFileName() {
    string ret = std.conv.to!string(vtkd_im.vtkBYUWriter_GetGeometryFileName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetDisplacementFileName(string _arg) {
    vtkd_im.vtkBYUWriter_SetDisplacementFileName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetDisplacementFileName() {
    string ret = std.conv.to!string(vtkd_im.vtkBYUWriter_GetDisplacementFileName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetScalarFileName(string _arg) {
    vtkd_im.vtkBYUWriter_SetScalarFileName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetScalarFileName() {
    string ret = std.conv.to!string(vtkd_im.vtkBYUWriter_GetScalarFileName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetTextureFileName(string _arg) {
    vtkd_im.vtkBYUWriter_SetTextureFileName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetTextureFileName() {
    string ret = std.conv.to!string(vtkd_im.vtkBYUWriter_GetTextureFileName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetWriteDisplacement(int _arg) {
    vtkd_im.vtkBYUWriter_SetWriteDisplacement(cast(void*)swigCPtr, _arg);
  }

  public int GetWriteDisplacement() {
    auto ret = vtkd_im.vtkBYUWriter_GetWriteDisplacement(cast(void*)swigCPtr);
    return ret;
  }

  public void WriteDisplacementOn() {
    vtkd_im.vtkBYUWriter_WriteDisplacementOn(cast(void*)swigCPtr);
  }

  public void WriteDisplacementOff() {
    vtkd_im.vtkBYUWriter_WriteDisplacementOff(cast(void*)swigCPtr);
  }

  public void SetWriteScalar(int _arg) {
    vtkd_im.vtkBYUWriter_SetWriteScalar(cast(void*)swigCPtr, _arg);
  }

  public int GetWriteScalar() {
    auto ret = vtkd_im.vtkBYUWriter_GetWriteScalar(cast(void*)swigCPtr);
    return ret;
  }

  public void WriteScalarOn() {
    vtkd_im.vtkBYUWriter_WriteScalarOn(cast(void*)swigCPtr);
  }

  public void WriteScalarOff() {
    vtkd_im.vtkBYUWriter_WriteScalarOff(cast(void*)swigCPtr);
  }

  public void SetWriteTexture(int _arg) {
    vtkd_im.vtkBYUWriter_SetWriteTexture(cast(void*)swigCPtr, _arg);
  }

  public int GetWriteTexture() {
    auto ret = vtkd_im.vtkBYUWriter_GetWriteTexture(cast(void*)swigCPtr);
    return ret;
  }

  public void WriteTextureOn() {
    vtkd_im.vtkBYUWriter_WriteTextureOn(cast(void*)swigCPtr);
  }

  public void WriteTextureOff() {
    vtkd_im.vtkBYUWriter_WriteTextureOff(cast(void*)swigCPtr);
  }

  public vtkPolyData.vtkPolyData GetInput() {
    void* cPtr = vtkd_im.vtkBYUWriter_GetInput__SWIG_0(cast(void*)swigCPtr);
    vtkPolyData.vtkPolyData ret = (cPtr is null) ? null : new vtkPolyData.vtkPolyData(cPtr, false);
    return ret;
  }

  public vtkPolyData.vtkPolyData GetInput(int port) {
    void* cPtr = vtkd_im.vtkBYUWriter_GetInput__SWIG_1(cast(void*)swigCPtr, port);
    vtkPolyData.vtkPolyData ret = (cPtr is null) ? null : new vtkPolyData.vtkPolyData(cPtr, false);
    return ret;
  }
}
