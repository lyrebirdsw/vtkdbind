/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkImageThreshold;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkThreadedImageAlgorithm;

class vtkImageThreshold : vtkThreadedImageAlgorithm.vtkThreadedImageAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkImageThreshold_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkImageThreshold obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkImageThreshold New() {
    void* cPtr = vtkd_im.vtkImageThreshold_New();
    vtkImageThreshold ret = (cPtr is null) ? null : new vtkImageThreshold(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkImageThreshold_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkImageThreshold SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkImageThreshold_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkImageThreshold ret = (cPtr is null) ? null : new vtkImageThreshold(cPtr, false);
    return ret;
  }

  public vtkImageThreshold NewInstance() const {
    void* cPtr = vtkd_im.vtkImageThreshold_NewInstance(cast(void*)swigCPtr);
    vtkImageThreshold ret = (cPtr is null) ? null : new vtkImageThreshold(cPtr, false);
    return ret;
  }

  alias vtkThreadedImageAlgorithm.vtkThreadedImageAlgorithm.NewInstance NewInstance;

  public void ThresholdByUpper(double thresh) {
    vtkd_im.vtkImageThreshold_ThresholdByUpper(cast(void*)swigCPtr, thresh);
  }

  public void ThresholdByLower(double thresh) {
    vtkd_im.vtkImageThreshold_ThresholdByLower(cast(void*)swigCPtr, thresh);
  }

  public void ThresholdBetween(double lower, double upper) {
    vtkd_im.vtkImageThreshold_ThresholdBetween(cast(void*)swigCPtr, lower, upper);
  }

  public void SetReplaceIn(int _arg) {
    vtkd_im.vtkImageThreshold_SetReplaceIn(cast(void*)swigCPtr, _arg);
  }

  public int GetReplaceIn() {
    auto ret = vtkd_im.vtkImageThreshold_GetReplaceIn(cast(void*)swigCPtr);
    return ret;
  }

  public void ReplaceInOn() {
    vtkd_im.vtkImageThreshold_ReplaceInOn(cast(void*)swigCPtr);
  }

  public void ReplaceInOff() {
    vtkd_im.vtkImageThreshold_ReplaceInOff(cast(void*)swigCPtr);
  }

  public void SetInValue(double val) {
    vtkd_im.vtkImageThreshold_SetInValue(cast(void*)swigCPtr, val);
  }

  public double GetInValue() {
    auto ret = vtkd_im.vtkImageThreshold_GetInValue(cast(void*)swigCPtr);
    return ret;
  }

  public void SetReplaceOut(int _arg) {
    vtkd_im.vtkImageThreshold_SetReplaceOut(cast(void*)swigCPtr, _arg);
  }

  public int GetReplaceOut() {
    auto ret = vtkd_im.vtkImageThreshold_GetReplaceOut(cast(void*)swigCPtr);
    return ret;
  }

  public void ReplaceOutOn() {
    vtkd_im.vtkImageThreshold_ReplaceOutOn(cast(void*)swigCPtr);
  }

  public void ReplaceOutOff() {
    vtkd_im.vtkImageThreshold_ReplaceOutOff(cast(void*)swigCPtr);
  }

  public void SetOutValue(double val) {
    vtkd_im.vtkImageThreshold_SetOutValue(cast(void*)swigCPtr, val);
  }

  public double GetOutValue() {
    auto ret = vtkd_im.vtkImageThreshold_GetOutValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetUpperThreshold() {
    auto ret = vtkd_im.vtkImageThreshold_GetUpperThreshold(cast(void*)swigCPtr);
    return ret;
  }

  public double GetLowerThreshold() {
    auto ret = vtkd_im.vtkImageThreshold_GetLowerThreshold(cast(void*)swigCPtr);
    return ret;
  }

  public void SetOutputScalarType(int _arg) {
    vtkd_im.vtkImageThreshold_SetOutputScalarType(cast(void*)swigCPtr, _arg);
  }

  public int GetOutputScalarType() {
    auto ret = vtkd_im.vtkImageThreshold_GetOutputScalarType(cast(void*)swigCPtr);
    return ret;
  }

  public void SetOutputScalarTypeToDouble() {
    vtkd_im.vtkImageThreshold_SetOutputScalarTypeToDouble(cast(void*)swigCPtr);
  }

  public void SetOutputScalarTypeToFloat() {
    vtkd_im.vtkImageThreshold_SetOutputScalarTypeToFloat(cast(void*)swigCPtr);
  }

  public void SetOutputScalarTypeToLong() {
    vtkd_im.vtkImageThreshold_SetOutputScalarTypeToLong(cast(void*)swigCPtr);
  }

  public void SetOutputScalarTypeToUnsignedLong() {
    vtkd_im.vtkImageThreshold_SetOutputScalarTypeToUnsignedLong(cast(void*)swigCPtr);
  }

  public void SetOutputScalarTypeToInt() {
    vtkd_im.vtkImageThreshold_SetOutputScalarTypeToInt(cast(void*)swigCPtr);
  }

  public void SetOutputScalarTypeToUnsignedInt() {
    vtkd_im.vtkImageThreshold_SetOutputScalarTypeToUnsignedInt(cast(void*)swigCPtr);
  }

  public void SetOutputScalarTypeToShort() {
    vtkd_im.vtkImageThreshold_SetOutputScalarTypeToShort(cast(void*)swigCPtr);
  }

  public void SetOutputScalarTypeToUnsignedShort() {
    vtkd_im.vtkImageThreshold_SetOutputScalarTypeToUnsignedShort(cast(void*)swigCPtr);
  }

  public void SetOutputScalarTypeToChar() {
    vtkd_im.vtkImageThreshold_SetOutputScalarTypeToChar(cast(void*)swigCPtr);
  }

  public void SetOutputScalarTypeToSignedChar() {
    vtkd_im.vtkImageThreshold_SetOutputScalarTypeToSignedChar(cast(void*)swigCPtr);
  }

  public void SetOutputScalarTypeToUnsignedChar() {
    vtkd_im.vtkImageThreshold_SetOutputScalarTypeToUnsignedChar(cast(void*)swigCPtr);
  }
}
