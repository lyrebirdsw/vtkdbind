/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkCollapseVerticesByArray;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkGraphAlgorithm;

class vtkCollapseVerticesByArray : vtkGraphAlgorithm.vtkGraphAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkCollapseVerticesByArray_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkCollapseVerticesByArray obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkCollapseVerticesByArray New() {
    void* cPtr = vtkd_im.vtkCollapseVerticesByArray_New();
    vtkCollapseVerticesByArray ret = (cPtr is null) ? null : new vtkCollapseVerticesByArray(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkCollapseVerticesByArray_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkCollapseVerticesByArray SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkCollapseVerticesByArray_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkCollapseVerticesByArray ret = (cPtr is null) ? null : new vtkCollapseVerticesByArray(cPtr, false);
    return ret;
  }

  public vtkCollapseVerticesByArray NewInstance() const {
    void* cPtr = vtkd_im.vtkCollapseVerticesByArray_NewInstance(cast(void*)swigCPtr);
    vtkCollapseVerticesByArray ret = (cPtr is null) ? null : new vtkCollapseVerticesByArray(cPtr, false);
    return ret;
  }

  alias vtkGraphAlgorithm.vtkGraphAlgorithm.NewInstance NewInstance;

  public bool GetAllowSelfLoops() {
    bool ret = vtkd_im.vtkCollapseVerticesByArray_GetAllowSelfLoops(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetAllowSelfLoops(bool _arg) {
    vtkd_im.vtkCollapseVerticesByArray_SetAllowSelfLoops(cast(void*)swigCPtr, _arg);
  }

  public void AllowSelfLoopsOn() {
    vtkd_im.vtkCollapseVerticesByArray_AllowSelfLoopsOn(cast(void*)swigCPtr);
  }

  public void AllowSelfLoopsOff() {
    vtkd_im.vtkCollapseVerticesByArray_AllowSelfLoopsOff(cast(void*)swigCPtr);
  }

  public void AddAggregateEdgeArray(string arrName) {
    vtkd_im.vtkCollapseVerticesByArray_AddAggregateEdgeArray(cast(void*)swigCPtr, (arrName ? std.string.toStringz(arrName) : null));
  }

  public void ClearAggregateEdgeArray() {
    vtkd_im.vtkCollapseVerticesByArray_ClearAggregateEdgeArray(cast(void*)swigCPtr);
  }

  public string GetVertexArray() {
    string ret = std.conv.to!string(vtkd_im.vtkCollapseVerticesByArray_GetVertexArray(cast(void*)swigCPtr));
    return ret;
  }

  public void SetVertexArray(string _arg) {
    vtkd_im.vtkCollapseVerticesByArray_SetVertexArray(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public bool GetCountEdgesCollapsed() {
    bool ret = vtkd_im.vtkCollapseVerticesByArray_GetCountEdgesCollapsed(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetCountEdgesCollapsed(bool _arg) {
    vtkd_im.vtkCollapseVerticesByArray_SetCountEdgesCollapsed(cast(void*)swigCPtr, _arg);
  }

  public void CountEdgesCollapsedOn() {
    vtkd_im.vtkCollapseVerticesByArray_CountEdgesCollapsedOn(cast(void*)swigCPtr);
  }

  public void CountEdgesCollapsedOff() {
    vtkd_im.vtkCollapseVerticesByArray_CountEdgesCollapsedOff(cast(void*)swigCPtr);
  }

  public string GetEdgesCollapsedArray() {
    string ret = std.conv.to!string(vtkd_im.vtkCollapseVerticesByArray_GetEdgesCollapsedArray(cast(void*)swigCPtr));
    return ret;
  }

  public void SetEdgesCollapsedArray(string _arg) {
    vtkd_im.vtkCollapseVerticesByArray_SetEdgesCollapsedArray(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public bool GetCountVerticesCollapsed() {
    bool ret = vtkd_im.vtkCollapseVerticesByArray_GetCountVerticesCollapsed(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetCountVerticesCollapsed(bool _arg) {
    vtkd_im.vtkCollapseVerticesByArray_SetCountVerticesCollapsed(cast(void*)swigCPtr, _arg);
  }

  public void CountVerticesCollapsedOn() {
    vtkd_im.vtkCollapseVerticesByArray_CountVerticesCollapsedOn(cast(void*)swigCPtr);
  }

  public void CountVerticesCollapsedOff() {
    vtkd_im.vtkCollapseVerticesByArray_CountVerticesCollapsedOff(cast(void*)swigCPtr);
  }

  public string GetVerticesCollapsedArray() {
    string ret = std.conv.to!string(vtkd_im.vtkCollapseVerticesByArray_GetVerticesCollapsedArray(cast(void*)swigCPtr));
    return ret;
  }

  public void SetVerticesCollapsedArray(string _arg) {
    vtkd_im.vtkCollapseVerticesByArray_SetVerticesCollapsedArray(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }
}
