/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkVolumeTextureMapper3D;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_int;
static import SWIGTYPE_p_float;
static import vtkVolumeProperty;
static import vtkRenderer;
static import vtkVolumeMapper;

class vtkVolumeTextureMapper3D : vtkVolumeMapper.vtkVolumeMapper {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkVolumeTextureMapper3D_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkVolumeTextureMapper3D obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkVolumeTextureMapper3D_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkVolumeTextureMapper3D SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkVolumeTextureMapper3D_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkVolumeTextureMapper3D ret = (cPtr is null) ? null : new vtkVolumeTextureMapper3D(cPtr, false);
    return ret;
  }

  public vtkVolumeTextureMapper3D NewInstance() const {
    void* cPtr = vtkd_im.vtkVolumeTextureMapper3D_NewInstance(cast(void*)swigCPtr);
    vtkVolumeTextureMapper3D ret = (cPtr is null) ? null : new vtkVolumeTextureMapper3D(cPtr, false);
    return ret;
  }

  alias vtkVolumeMapper.vtkVolumeMapper.NewInstance NewInstance;

  public static vtkVolumeTextureMapper3D New() {
    void* cPtr = vtkd_im.vtkVolumeTextureMapper3D_New();
    vtkVolumeTextureMapper3D ret = (cPtr is null) ? null : new vtkVolumeTextureMapper3D(cPtr, false);
    return ret;
  }

  public void SetSampleDistance(float _arg) {
    vtkd_im.vtkVolumeTextureMapper3D_SetSampleDistance(cast(void*)swigCPtr, _arg);
  }

  public float GetSampleDistance() {
    auto ret = vtkd_im.vtkVolumeTextureMapper3D_GetSampleDistance(cast(void*)swigCPtr);
    return ret;
  }

  public int* GetVolumeDimensions() {
    auto ret = cast(int*)vtkd_im.vtkVolumeTextureMapper3D_GetVolumeDimensions__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetVolumeDimensions(SWIGTYPE_p_int.SWIGTYPE_p_int data) {
    vtkd_im.vtkVolumeTextureMapper3D_GetVolumeDimensions__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(data));
  }

  public float* GetVolumeSpacing() {
    auto ret = cast(float*)vtkd_im.vtkVolumeTextureMapper3D_GetVolumeSpacing__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetVolumeSpacing(SWIGTYPE_p_float.SWIGTYPE_p_float data) {
    vtkd_im.vtkVolumeTextureMapper3D_GetVolumeSpacing__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(data));
  }

  public int IsRenderSupported(vtkVolumeProperty.vtkVolumeProperty arg0, vtkRenderer.vtkRenderer arg1) {
    auto ret = vtkd_im.vtkVolumeTextureMapper3D_IsRenderSupported(cast(void*)swigCPtr, vtkVolumeProperty.vtkVolumeProperty.swigGetCPtr(arg0), vtkRenderer.vtkRenderer.swigGetCPtr(arg1));
    return ret;
  }

  public int GetNumberOfPolygons() {
    auto ret = vtkd_im.vtkVolumeTextureMapper3D_GetNumberOfPolygons(cast(void*)swigCPtr);
    return ret;
  }

  public float GetActualSampleDistance() {
    auto ret = vtkd_im.vtkVolumeTextureMapper3D_GetActualSampleDistance(cast(void*)swigCPtr);
    return ret;
  }

  public void SetPreferredRenderMethod(int _arg) {
    vtkd_im.vtkVolumeTextureMapper3D_SetPreferredRenderMethod(cast(void*)swigCPtr, _arg);
  }

  public int GetPreferredRenderMethodMinValue() {
    auto ret = vtkd_im.vtkVolumeTextureMapper3D_GetPreferredRenderMethodMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetPreferredRenderMethodMaxValue() {
    auto ret = vtkd_im.vtkVolumeTextureMapper3D_GetPreferredRenderMethodMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public void SetPreferredMethodToFragmentProgram() {
    vtkd_im.vtkVolumeTextureMapper3D_SetPreferredMethodToFragmentProgram(cast(void*)swigCPtr);
  }

  public void SetPreferredMethodToNVidia() {
    vtkd_im.vtkVolumeTextureMapper3D_SetPreferredMethodToNVidia(cast(void*)swigCPtr);
  }

  public int GetPreferredRenderMethod() {
    auto ret = vtkd_im.vtkVolumeTextureMapper3D_GetPreferredRenderMethod(cast(void*)swigCPtr);
    return ret;
  }

  public void SetUseCompressedTexture(bool _arg) {
    vtkd_im.vtkVolumeTextureMapper3D_SetUseCompressedTexture(cast(void*)swigCPtr, _arg);
  }

  public bool GetUseCompressedTexture() {
    bool ret = vtkd_im.vtkVolumeTextureMapper3D_GetUseCompressedTexture(cast(void*)swigCPtr) ? true : false;
    return ret;
  }
}
