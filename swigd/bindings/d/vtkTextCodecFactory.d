/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkTextCodecFactory;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_f___p_vtkTextCodec;
static import vtkTextCodec;
static import SWIGTYPE_p_istream;
static import vtkObject;

class vtkTextCodecFactory : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkTextCodecFactory_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkTextCodecFactory obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkTextCodecFactory(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkTextCodecFactory_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkTextCodecFactory SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkTextCodecFactory_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkTextCodecFactory ret = (cPtr is null) ? null : new vtkTextCodecFactory(cPtr, false);
    return ret;
  }

  public vtkTextCodecFactory NewInstance() const {
    void* cPtr = vtkd_im.vtkTextCodecFactory_NewInstance(cast(void*)swigCPtr);
    vtkTextCodecFactory ret = (cPtr is null) ? null : new vtkTextCodecFactory(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public static vtkTextCodecFactory New() {
    void* cPtr = vtkd_im.vtkTextCodecFactory_New();
    vtkTextCodecFactory ret = (cPtr is null) ? null : new vtkTextCodecFactory(cPtr, false);
    return ret;
  }

  public static void RegisterCreateCallback(SWIGTYPE_p_f___p_vtkTextCodec.SWIGTYPE_p_f___p_vtkTextCodec callback) {
    vtkd_im.vtkTextCodecFactory_RegisterCreateCallback(SWIGTYPE_p_f___p_vtkTextCodec.SWIGTYPE_p_f___p_vtkTextCodec.swigGetCPtr(callback));
  }

  public static void UnRegisterCreateCallback(SWIGTYPE_p_f___p_vtkTextCodec.SWIGTYPE_p_f___p_vtkTextCodec callback) {
    vtkd_im.vtkTextCodecFactory_UnRegisterCreateCallback(SWIGTYPE_p_f___p_vtkTextCodec.SWIGTYPE_p_f___p_vtkTextCodec.swigGetCPtr(callback));
  }

  public static void UnRegisterAllCreateCallbacks() {
    vtkd_im.vtkTextCodecFactory_UnRegisterAllCreateCallbacks();
  }

  public static vtkTextCodec.vtkTextCodec CodecForName(string CodecName) {
    void* cPtr = vtkd_im.vtkTextCodecFactory_CodecForName((CodecName ? std.string.toStringz(CodecName) : null));
    vtkTextCodec.vtkTextCodec ret = (cPtr is null) ? null : new vtkTextCodec.vtkTextCodec(cPtr, false);
    return ret;
  }

  public static vtkTextCodec.vtkTextCodec CodecToHandle(SWIGTYPE_p_istream.SWIGTYPE_p_istream InputStream) {
    void* cPtr = vtkd_im.vtkTextCodecFactory_CodecToHandle(SWIGTYPE_p_istream.SWIGTYPE_p_istream.swigGetCPtr(InputStream));
    vtkTextCodec.vtkTextCodec ret = (cPtr is null) ? null : new vtkTextCodec.vtkTextCodec(cPtr, false);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public static void Initialize() {
    vtkd_im.vtkTextCodecFactory_Initialize();
  }

  public this() {
    this(vtkd_im.new_vtkTextCodecFactory(), true);
  }
}
