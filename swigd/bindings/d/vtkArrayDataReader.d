/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkArrayDataReader;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkStdString;
static import vtkArrayData;
static import SWIGTYPE_p_istream;
static import vtkArrayDataAlgorithm;

class vtkArrayDataReader : vtkArrayDataAlgorithm.vtkArrayDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkArrayDataReader_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkArrayDataReader obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkArrayDataReader New() {
    void* cPtr = vtkd_im.vtkArrayDataReader_New();
    vtkArrayDataReader ret = (cPtr is null) ? null : new vtkArrayDataReader(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkArrayDataReader_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkArrayDataReader SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkArrayDataReader_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkArrayDataReader ret = (cPtr is null) ? null : new vtkArrayDataReader(cPtr, false);
    return ret;
  }

  public vtkArrayDataReader NewInstance() const {
    void* cPtr = vtkd_im.vtkArrayDataReader_NewInstance(cast(void*)swigCPtr);
    vtkArrayDataReader ret = (cPtr is null) ? null : new vtkArrayDataReader(cPtr, false);
    return ret;
  }

  alias vtkArrayDataAlgorithm.vtkArrayDataAlgorithm.NewInstance NewInstance;

  public string GetFileName() {
    string ret = std.conv.to!string(vtkd_im.vtkArrayDataReader_GetFileName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetFileName(string _arg) {
    vtkd_im.vtkArrayDataReader_SetFileName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public void SetInputString(vtkStdString.vtkStdString arg0) {
    vtkd_im.vtkArrayDataReader_SetInputString(cast(void*)swigCPtr, vtkStdString.vtkStdString.swigGetCPtr(arg0));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public vtkStdString.vtkStdString GetInputString() {
    vtkStdString.vtkStdString ret = new vtkStdString.vtkStdString(vtkd_im.vtkArrayDataReader_GetInputString(cast(void*)swigCPtr), true);
    return ret;
  }

  public void SetReadFromInputString(bool _arg) {
    vtkd_im.vtkArrayDataReader_SetReadFromInputString(cast(void*)swigCPtr, _arg);
  }

  public bool GetReadFromInputString() {
    bool ret = vtkd_im.vtkArrayDataReader_GetReadFromInputString(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void ReadFromInputStringOn() {
    vtkd_im.vtkArrayDataReader_ReadFromInputStringOn(cast(void*)swigCPtr);
  }

  public void ReadFromInputStringOff() {
    vtkd_im.vtkArrayDataReader_ReadFromInputStringOff(cast(void*)swigCPtr);
  }

  public static vtkArrayData.vtkArrayData Read(SWIGTYPE_p_istream.SWIGTYPE_p_istream stream) {
    void* cPtr = vtkd_im.vtkArrayDataReader_Read__SWIG_0(SWIGTYPE_p_istream.SWIGTYPE_p_istream.swigGetCPtr(stream));
    vtkArrayData.vtkArrayData ret = (cPtr is null) ? null : new vtkArrayData.vtkArrayData(cPtr, false);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public static vtkArrayData.vtkArrayData Read(vtkStdString.vtkStdString str) {
    void* cPtr = vtkd_im.vtkArrayDataReader_Read__SWIG_1(vtkStdString.vtkStdString.swigGetCPtr(str));
    vtkArrayData.vtkArrayData ret = (cPtr is null) ? null : new vtkArrayData.vtkArrayData(cPtr, false);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }
}
