/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPointHandleRepresentation2D;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkPolyData;
static import vtkProperty2D;
static import vtkHandleRepresentation;

class vtkPointHandleRepresentation2D : vtkHandleRepresentation.vtkHandleRepresentation {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPointHandleRepresentation2D_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPointHandleRepresentation2D obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkPointHandleRepresentation2D New() {
    void* cPtr = vtkd_im.vtkPointHandleRepresentation2D_New();
    vtkPointHandleRepresentation2D ret = (cPtr is null) ? null : new vtkPointHandleRepresentation2D(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPointHandleRepresentation2D_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPointHandleRepresentation2D SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPointHandleRepresentation2D_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPointHandleRepresentation2D ret = (cPtr is null) ? null : new vtkPointHandleRepresentation2D(cPtr, false);
    return ret;
  }

  public vtkPointHandleRepresentation2D NewInstance() const {
    void* cPtr = vtkd_im.vtkPointHandleRepresentation2D_NewInstance(cast(void*)swigCPtr);
    vtkPointHandleRepresentation2D ret = (cPtr is null) ? null : new vtkPointHandleRepresentation2D(cPtr, false);
    return ret;
  }

  alias vtkHandleRepresentation.vtkHandleRepresentation.NewInstance NewInstance;

  public void SetCursorShape(vtkPolyData.vtkPolyData cursorShape) {
    vtkd_im.vtkPointHandleRepresentation2D_SetCursorShape(cast(void*)swigCPtr, vtkPolyData.vtkPolyData.swigGetCPtr(cursorShape));
  }

  public vtkPolyData.vtkPolyData GetCursorShape() {
    void* cPtr = vtkd_im.vtkPointHandleRepresentation2D_GetCursorShape(cast(void*)swigCPtr);
    vtkPolyData.vtkPolyData ret = (cPtr is null) ? null : new vtkPolyData.vtkPolyData(cPtr, false);
    return ret;
  }

  public void SetProperty(vtkProperty2D.vtkProperty2D arg0) {
    vtkd_im.vtkPointHandleRepresentation2D_SetProperty(cast(void*)swigCPtr, vtkProperty2D.vtkProperty2D.swigGetCPtr(arg0));
  }

  public void SetSelectedProperty(vtkProperty2D.vtkProperty2D arg0) {
    vtkd_im.vtkPointHandleRepresentation2D_SetSelectedProperty(cast(void*)swigCPtr, vtkProperty2D.vtkProperty2D.swigGetCPtr(arg0));
  }

  public vtkProperty2D.vtkProperty2D GetProperty() {
    void* cPtr = vtkd_im.vtkPointHandleRepresentation2D_GetProperty(cast(void*)swigCPtr);
    vtkProperty2D.vtkProperty2D ret = (cPtr is null) ? null : new vtkProperty2D.vtkProperty2D(cPtr, false);
    return ret;
  }

  public vtkProperty2D.vtkProperty2D GetSelectedProperty() {
    void* cPtr = vtkd_im.vtkPointHandleRepresentation2D_GetSelectedProperty(cast(void*)swigCPtr);
    vtkProperty2D.vtkProperty2D ret = (cPtr is null) ? null : new vtkProperty2D.vtkProperty2D(cPtr, false);
    return ret;
  }

  public override int ComputeInteractionState(int X, int Y, int modify) {
    auto ret = vtkd_im.vtkPointHandleRepresentation2D_ComputeInteractionState__SWIG_0(cast(void*)swigCPtr, X, Y, modify);
    return ret;
  }

  public override int ComputeInteractionState(int X, int Y) {
    auto ret = vtkd_im.vtkPointHandleRepresentation2D_ComputeInteractionState__SWIG_1(cast(void*)swigCPtr, X, Y);
    return ret;
  }
}
