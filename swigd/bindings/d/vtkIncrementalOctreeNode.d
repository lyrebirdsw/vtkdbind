/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkIncrementalOctreeNode;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkIdList;
static import SWIGTYPE_p_double;
static import vtkPoints;
static import vtkObject;

class vtkIncrementalOctreeNode : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkIncrementalOctreeNode_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkIncrementalOctreeNode obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkIncrementalOctreeNode(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkIncrementalOctreeNode_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkIncrementalOctreeNode SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkIncrementalOctreeNode_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkIncrementalOctreeNode ret = (cPtr is null) ? null : new vtkIncrementalOctreeNode(cPtr, false);
    return ret;
  }

  public vtkIncrementalOctreeNode NewInstance() const {
    void* cPtr = vtkd_im.vtkIncrementalOctreeNode_NewInstance(cast(void*)swigCPtr);
    vtkIncrementalOctreeNode ret = (cPtr is null) ? null : new vtkIncrementalOctreeNode(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public static vtkIncrementalOctreeNode New() {
    void* cPtr = vtkd_im.vtkIncrementalOctreeNode_New();
    vtkIncrementalOctreeNode ret = (cPtr is null) ? null : new vtkIncrementalOctreeNode(cPtr, false);
    return ret;
  }

  public int GetNumberOfPoints() {
    auto ret = vtkd_im.vtkIncrementalOctreeNode_GetNumberOfPoints(cast(void*)swigCPtr);
    return ret;
  }

  public vtkIdList.vtkIdList GetPointIdSet() {
    void* cPtr = vtkd_im.vtkIncrementalOctreeNode_GetPointIdSet(cast(void*)swigCPtr);
    vtkIdList.vtkIdList ret = (cPtr is null) ? null : new vtkIdList.vtkIdList(cPtr, false);
    return ret;
  }

  public void DeleteChildNodes() {
    vtkd_im.vtkIncrementalOctreeNode_DeleteChildNodes(cast(void*)swigCPtr);
  }

  public void SetBounds(double x1, double x2, double y1, double y2, double z1, double z2) {
    vtkd_im.vtkIncrementalOctreeNode_SetBounds(cast(void*)swigCPtr, x1, x2, y1, y2, z1, z2);
  }

  public void GetBounds(SWIGTYPE_p_double.SWIGTYPE_p_double bounds) const {
    vtkd_im.vtkIncrementalOctreeNode_GetBounds(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
  }

  public double* GetMinBounds() {
    auto ret = cast(double*)vtkd_im.vtkIncrementalOctreeNode_GetMinBounds__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetMinBounds(double* _arg1, double* _arg2, double* _arg3) {
    vtkd_im.vtkIncrementalOctreeNode_GetMinBounds__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetMinBounds(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkIncrementalOctreeNode_GetMinBounds__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetMaxBounds() {
    auto ret = cast(double*)vtkd_im.vtkIncrementalOctreeNode_GetMaxBounds__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetMaxBounds(double* _arg1, double* _arg2, double* _arg3) {
    vtkd_im.vtkIncrementalOctreeNode_GetMaxBounds__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetMaxBounds(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkIncrementalOctreeNode_GetMaxBounds__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetMinDataBounds() {
    auto ret = cast(double*)vtkd_im.vtkIncrementalOctreeNode_GetMinDataBounds(cast(void*)swigCPtr);
    return ret;
  }

  public double* GetMaxDataBounds() {
    auto ret = cast(double*)vtkd_im.vtkIncrementalOctreeNode_GetMaxDataBounds(cast(void*)swigCPtr);
    return ret;
  }

  public int IsLeaf() {
    auto ret = vtkd_im.vtkIncrementalOctreeNode_IsLeaf(cast(void*)swigCPtr);
    return ret;
  }

  public int GetChildIndex(SWIGTYPE_p_double.SWIGTYPE_p_double point) {
    auto ret = vtkd_im.vtkIncrementalOctreeNode_GetChildIndex(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(point));
    return ret;
  }

  public vtkIncrementalOctreeNode GetChild(int i) {
    void* cPtr = vtkd_im.vtkIncrementalOctreeNode_GetChild(cast(void*)swigCPtr, i);
    vtkIncrementalOctreeNode ret = (cPtr is null) ? null : new vtkIncrementalOctreeNode(cPtr, false);
    return ret;
  }

  public int ContainsPoint(SWIGTYPE_p_double.SWIGTYPE_p_double pnt) {
    auto ret = vtkd_im.vtkIncrementalOctreeNode_ContainsPoint(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pnt));
    return ret;
  }

  public int ContainsPointByData(SWIGTYPE_p_double.SWIGTYPE_p_double pnt) {
    auto ret = vtkd_im.vtkIncrementalOctreeNode_ContainsPointByData(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pnt));
    return ret;
  }

  public int InsertPoint(vtkPoints.vtkPoints points, SWIGTYPE_p_double.SWIGTYPE_p_double newPnt, int maxPts, long* pntId, int ptMode) {
    auto ret = vtkd_im.vtkIncrementalOctreeNode_InsertPoint(cast(void*)swigCPtr, vtkPoints.vtkPoints.swigGetCPtr(points), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(newPnt), maxPts, cast(void*)pntId, ptMode);
    return ret;
  }

  public double GetDistance2ToInnerBoundary(SWIGTYPE_p_double.SWIGTYPE_p_double point, vtkIncrementalOctreeNode rootNode) {
    auto ret = vtkd_im.vtkIncrementalOctreeNode_GetDistance2ToInnerBoundary(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(point), vtkIncrementalOctreeNode.swigGetCPtr(rootNode));
    return ret;
  }

  public double GetDistance2ToBoundary(SWIGTYPE_p_double.SWIGTYPE_p_double point, vtkIncrementalOctreeNode rootNode, int checkData) {
    auto ret = vtkd_im.vtkIncrementalOctreeNode_GetDistance2ToBoundary__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(point), vtkIncrementalOctreeNode.swigGetCPtr(rootNode), checkData);
    return ret;
  }

  public double GetDistance2ToBoundary(SWIGTYPE_p_double.SWIGTYPE_p_double point, SWIGTYPE_p_double.SWIGTYPE_p_double closest, vtkIncrementalOctreeNode rootNode, int checkData) {
    auto ret = vtkd_im.vtkIncrementalOctreeNode_GetDistance2ToBoundary__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(point), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(closest), vtkIncrementalOctreeNode.swigGetCPtr(rootNode), checkData);
    return ret;
  }

  public void ExportAllPointIdsByInsertion(vtkIdList.vtkIdList idList) {
    vtkd_im.vtkIncrementalOctreeNode_ExportAllPointIdsByInsertion(cast(void*)swigCPtr, vtkIdList.vtkIdList.swigGetCPtr(idList));
  }

  public void ExportAllPointIdsByDirectSet(long* pntIdx, vtkIdList.vtkIdList idList) {
    vtkd_im.vtkIncrementalOctreeNode_ExportAllPointIdsByDirectSet(cast(void*)swigCPtr, cast(void*)pntIdx, vtkIdList.vtkIdList.swigGetCPtr(idList));
  }

  public this() {
    this(vtkd_im.new_vtkIncrementalOctreeNode(), true);
  }
}
