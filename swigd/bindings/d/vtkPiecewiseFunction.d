/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPiecewiseFunction;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkDataObject;

class vtkPiecewiseFunction : vtkDataObject.vtkDataObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPiecewiseFunction_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPiecewiseFunction obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkPiecewiseFunction New() {
    void* cPtr = vtkd_im.vtkPiecewiseFunction_New();
    vtkPiecewiseFunction ret = (cPtr is null) ? null : new vtkPiecewiseFunction(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPiecewiseFunction_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPiecewiseFunction SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPiecewiseFunction_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPiecewiseFunction ret = (cPtr is null) ? null : new vtkPiecewiseFunction(cPtr, false);
    return ret;
  }

  public vtkPiecewiseFunction NewInstance() const {
    void* cPtr = vtkd_im.vtkPiecewiseFunction_NewInstance(cast(void*)swigCPtr);
    vtkPiecewiseFunction ret = (cPtr is null) ? null : new vtkPiecewiseFunction(cPtr, false);
    return ret;
  }

  alias vtkDataObject.vtkDataObject.NewInstance NewInstance;

  public int GetSize() {
    auto ret = vtkd_im.vtkPiecewiseFunction_GetSize(cast(void*)swigCPtr);
    return ret;
  }

  public int AddPoint(double x, double y) {
    auto ret = vtkd_im.vtkPiecewiseFunction_AddPoint__SWIG_0(cast(void*)swigCPtr, x, y);
    return ret;
  }

  public int AddPoint(double x, double y, double midpoint, double sharpness) {
    auto ret = vtkd_im.vtkPiecewiseFunction_AddPoint__SWIG_1(cast(void*)swigCPtr, x, y, midpoint, sharpness);
    return ret;
  }

  public int RemovePoint(double x) {
    auto ret = vtkd_im.vtkPiecewiseFunction_RemovePoint(cast(void*)swigCPtr, x);
    return ret;
  }

  public void RemoveAllPoints() {
    vtkd_im.vtkPiecewiseFunction_RemoveAllPoints(cast(void*)swigCPtr);
  }

  public void AddSegment(double x1, double y1, double x2, double y2) {
    vtkd_im.vtkPiecewiseFunction_AddSegment(cast(void*)swigCPtr, x1, y1, x2, y2);
  }

  public double GetValue(double x) {
    auto ret = vtkd_im.vtkPiecewiseFunction_GetValue(cast(void*)swigCPtr, x);
    return ret;
  }

  public int GetNodeValue(int index, SWIGTYPE_p_double.SWIGTYPE_p_double val) {
    auto ret = vtkd_im.vtkPiecewiseFunction_GetNodeValue(cast(void*)swigCPtr, index, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(val));
    return ret;
  }

  public int SetNodeValue(int index, SWIGTYPE_p_double.SWIGTYPE_p_double val) {
    auto ret = vtkd_im.vtkPiecewiseFunction_SetNodeValue(cast(void*)swigCPtr, index, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(val));
    return ret;
  }

  public double* GetDataPointer() {
    auto ret = cast(double*)vtkd_im.vtkPiecewiseFunction_GetDataPointer(cast(void*)swigCPtr);
    return ret;
  }

  public void FillFromDataPointer(int arg0, double* arg1) {
    vtkd_im.vtkPiecewiseFunction_FillFromDataPointer(cast(void*)swigCPtr, arg0, cast(void*)arg1);
  }

  public double* GetRange() {
    auto ret = cast(double*)vtkd_im.vtkPiecewiseFunction_GetRange__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetRange(double* _arg1, double* _arg2) {
    vtkd_im.vtkPiecewiseFunction_GetRange__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetRange(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkPiecewiseFunction_GetRange__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public int AdjustRange(SWIGTYPE_p_double.SWIGTYPE_p_double range) {
    auto ret = vtkd_im.vtkPiecewiseFunction_AdjustRange(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(range));
    return ret;
  }

  public void GetTable(double x1, double x2, int size, float* table, int stride) {
    vtkd_im.vtkPiecewiseFunction_GetTable__SWIG_0(cast(void*)swigCPtr, x1, x2, size, cast(void*)table, stride);
  }

  public void GetTable(double x1, double x2, int size, float* table) {
    vtkd_im.vtkPiecewiseFunction_GetTable__SWIG_1(cast(void*)swigCPtr, x1, x2, size, cast(void*)table);
  }

  public void GetTable(double x1, double x2, int size, double* table, int stride) {
    vtkd_im.vtkPiecewiseFunction_GetTable__SWIG_2(cast(void*)swigCPtr, x1, x2, size, cast(void*)table, stride);
  }

  public void GetTable(double x1, double x2, int size, double* table) {
    vtkd_im.vtkPiecewiseFunction_GetTable__SWIG_3(cast(void*)swigCPtr, x1, x2, size, cast(void*)table);
  }

  public void BuildFunctionFromTable(double x1, double x2, int size, double* table, int stride) {
    vtkd_im.vtkPiecewiseFunction_BuildFunctionFromTable__SWIG_0(cast(void*)swigCPtr, x1, x2, size, cast(void*)table, stride);
  }

  public void BuildFunctionFromTable(double x1, double x2, int size, double* table) {
    vtkd_im.vtkPiecewiseFunction_BuildFunctionFromTable__SWIG_1(cast(void*)swigCPtr, x1, x2, size, cast(void*)table);
  }

  public void SetClamping(int _arg) {
    vtkd_im.vtkPiecewiseFunction_SetClamping(cast(void*)swigCPtr, _arg);
  }

  public int GetClamping() {
    auto ret = vtkd_im.vtkPiecewiseFunction_GetClamping(cast(void*)swigCPtr);
    return ret;
  }

  public void ClampingOn() {
    vtkd_im.vtkPiecewiseFunction_ClampingOn(cast(void*)swigCPtr);
  }

  public void ClampingOff() {
    vtkd_im.vtkPiecewiseFunction_ClampingOff(cast(void*)swigCPtr);
  }

  public string GetType() {
    string ret = std.conv.to!string(vtkd_im.vtkPiecewiseFunction_GetType(cast(void*)swigCPtr));
    return ret;
  }

  public double GetFirstNonZeroValue() {
    auto ret = vtkd_im.vtkPiecewiseFunction_GetFirstNonZeroValue(cast(void*)swigCPtr);
    return ret;
  }

  public void SetAllowDuplicateScalars(int _arg) {
    vtkd_im.vtkPiecewiseFunction_SetAllowDuplicateScalars(cast(void*)swigCPtr, _arg);
  }

  public int GetAllowDuplicateScalars() {
    auto ret = vtkd_im.vtkPiecewiseFunction_GetAllowDuplicateScalars(cast(void*)swigCPtr);
    return ret;
  }

  public void AllowDuplicateScalarsOn() {
    vtkd_im.vtkPiecewiseFunction_AllowDuplicateScalarsOn(cast(void*)swigCPtr);
  }

  public void AllowDuplicateScalarsOff() {
    vtkd_im.vtkPiecewiseFunction_AllowDuplicateScalarsOff(cast(void*)swigCPtr);
  }
}
