/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkAssemblyPath;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkProp;
static import vtkMatrix4x4;
static import vtkAssemblyNode;
static import vtkCollection;

class vtkAssemblyPath : vtkCollection.vtkCollection {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkAssemblyPath_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkAssemblyPath obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkAssemblyPath_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkAssemblyPath SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkAssemblyPath_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkAssemblyPath ret = (cPtr is null) ? null : new vtkAssemblyPath(cPtr, false);
    return ret;
  }

  public vtkAssemblyPath NewInstance() const {
    void* cPtr = vtkd_im.vtkAssemblyPath_NewInstance(cast(void*)swigCPtr);
    vtkAssemblyPath ret = (cPtr is null) ? null : new vtkAssemblyPath(cPtr, false);
    return ret;
  }

  alias vtkCollection.vtkCollection.NewInstance NewInstance;

  public static vtkAssemblyPath New() {
    void* cPtr = vtkd_im.vtkAssemblyPath_New();
    vtkAssemblyPath ret = (cPtr is null) ? null : new vtkAssemblyPath(cPtr, false);
    return ret;
  }

  public void AddNode(vtkProp.vtkProp p, vtkMatrix4x4.vtkMatrix4x4 m) {
    vtkd_im.vtkAssemblyPath_AddNode(cast(void*)swigCPtr, vtkProp.vtkProp.swigGetCPtr(p), vtkMatrix4x4.vtkMatrix4x4.swigGetCPtr(m));
  }

  public vtkAssemblyNode.vtkAssemblyNode GetNextNode() {
    void* cPtr = vtkd_im.vtkAssemblyPath_GetNextNode(cast(void*)swigCPtr);
    vtkAssemblyNode.vtkAssemblyNode ret = (cPtr is null) ? null : new vtkAssemblyNode.vtkAssemblyNode(cPtr, false);
    return ret;
  }

  public vtkAssemblyNode.vtkAssemblyNode GetFirstNode() {
    void* cPtr = vtkd_im.vtkAssemblyPath_GetFirstNode(cast(void*)swigCPtr);
    vtkAssemblyNode.vtkAssemblyNode ret = (cPtr is null) ? null : new vtkAssemblyNode.vtkAssemblyNode(cPtr, false);
    return ret;
  }

  public vtkAssemblyNode.vtkAssemblyNode GetLastNode() {
    void* cPtr = vtkd_im.vtkAssemblyPath_GetLastNode(cast(void*)swigCPtr);
    vtkAssemblyNode.vtkAssemblyNode ret = (cPtr is null) ? null : new vtkAssemblyNode.vtkAssemblyNode(cPtr, false);
    return ret;
  }

  public void DeleteLastNode() {
    vtkd_im.vtkAssemblyPath_DeleteLastNode(cast(void*)swigCPtr);
  }

  public void ShallowCopy(vtkAssemblyPath path) {
    vtkd_im.vtkAssemblyPath_ShallowCopy(cast(void*)swigCPtr, vtkAssemblyPath.swigGetCPtr(path));
  }
}
