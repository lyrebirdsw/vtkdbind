/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkFieldDataSerializer;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkFieldData;
static import vtkMultiProcessStream;
static import vtkStringArray;
static import vtkIntArray;
static import vtkIdList;
static import SWIGTYPE_p_int;
static import vtkObject;

class vtkFieldDataSerializer : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkFieldDataSerializer_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkFieldDataSerializer obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkFieldDataSerializer New() {
    void* cPtr = vtkd_im.vtkFieldDataSerializer_New();
    vtkFieldDataSerializer ret = (cPtr is null) ? null : new vtkFieldDataSerializer(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkFieldDataSerializer_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkFieldDataSerializer SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkFieldDataSerializer_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkFieldDataSerializer ret = (cPtr is null) ? null : new vtkFieldDataSerializer(cPtr, false);
    return ret;
  }

  public vtkFieldDataSerializer NewInstance() const {
    void* cPtr = vtkd_im.vtkFieldDataSerializer_NewInstance(cast(void*)swigCPtr);
    vtkFieldDataSerializer ret = (cPtr is null) ? null : new vtkFieldDataSerializer(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public static void SerializeMetaData(vtkFieldData.vtkFieldData fieldData, vtkMultiProcessStream.vtkMultiProcessStream bytestream) {
    vtkd_im.vtkFieldDataSerializer_SerializeMetaData(vtkFieldData.vtkFieldData.swigGetCPtr(fieldData), vtkMultiProcessStream.vtkMultiProcessStream.swigGetCPtr(bytestream));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public static void DeserializeMetaData(vtkMultiProcessStream.vtkMultiProcessStream bytestream, vtkStringArray.vtkStringArray names, vtkIntArray.vtkIntArray datatypes, vtkIntArray.vtkIntArray dimensions) {
    vtkd_im.vtkFieldDataSerializer_DeserializeMetaData(vtkMultiProcessStream.vtkMultiProcessStream.swigGetCPtr(bytestream), vtkStringArray.vtkStringArray.swigGetCPtr(names), vtkIntArray.vtkIntArray.swigGetCPtr(datatypes), vtkIntArray.vtkIntArray.swigGetCPtr(dimensions));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public static void Serialize(vtkFieldData.vtkFieldData fieldData, vtkMultiProcessStream.vtkMultiProcessStream bytestream) {
    vtkd_im.vtkFieldDataSerializer_Serialize(vtkFieldData.vtkFieldData.swigGetCPtr(fieldData), vtkMultiProcessStream.vtkMultiProcessStream.swigGetCPtr(bytestream));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public static void SerializeTuples(vtkIdList.vtkIdList tupleIds, vtkFieldData.vtkFieldData fieldData, vtkMultiProcessStream.vtkMultiProcessStream bytestream) {
    vtkd_im.vtkFieldDataSerializer_SerializeTuples(vtkIdList.vtkIdList.swigGetCPtr(tupleIds), vtkFieldData.vtkFieldData.swigGetCPtr(fieldData), vtkMultiProcessStream.vtkMultiProcessStream.swigGetCPtr(bytestream));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public static void SerializeSubExtent(SWIGTYPE_p_int.SWIGTYPE_p_int subext, SWIGTYPE_p_int.SWIGTYPE_p_int gridExtent, vtkFieldData.vtkFieldData fieldData, vtkMultiProcessStream.vtkMultiProcessStream bytestream) {
    vtkd_im.vtkFieldDataSerializer_SerializeSubExtent(SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(subext), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(gridExtent), vtkFieldData.vtkFieldData.swigGetCPtr(fieldData), vtkMultiProcessStream.vtkMultiProcessStream.swigGetCPtr(bytestream));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public static void Deserialize(vtkMultiProcessStream.vtkMultiProcessStream bytestream, vtkFieldData.vtkFieldData fieldData) {
    vtkd_im.vtkFieldDataSerializer_Deserialize(vtkMultiProcessStream.vtkMultiProcessStream.swigGetCPtr(bytestream), vtkFieldData.vtkFieldData.swigGetCPtr(fieldData));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }
}
