/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPlot3D;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkPen;
static import vtkTable;
static import vtkStdString;
static import vtkDataArray;
static import SWIGTYPE_p_std__vectorT_vtkVector3f_t;
static import vtkChartXYZ;
static import vtkIdTypeArray;
static import vtkContextItem;

class vtkPlot3D : vtkContextItem.vtkContextItem {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPlot3D_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPlot3D obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkPlot3D(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPlot3D_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPlot3D SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPlot3D_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPlot3D ret = (cPtr is null) ? null : new vtkPlot3D(cPtr, false);
    return ret;
  }

  public vtkPlot3D NewInstance() const {
    void* cPtr = vtkd_im.vtkPlot3D_NewInstance(cast(void*)swigCPtr);
    vtkPlot3D ret = (cPtr is null) ? null : new vtkPlot3D(cPtr, false);
    return ret;
  }

  alias vtkContextItem.vtkContextItem.NewInstance NewInstance;

  public void SetPen(vtkPen.vtkPen pen) {
    vtkd_im.vtkPlot3D_SetPen(cast(void*)swigCPtr, vtkPen.vtkPen.swigGetCPtr(pen));
  }

  public vtkPen.vtkPen GetPen() {
    void* cPtr = vtkd_im.vtkPlot3D_GetPen(cast(void*)swigCPtr);
    vtkPen.vtkPen ret = (cPtr is null) ? null : new vtkPen.vtkPen(cPtr, false);
    return ret;
  }

  public void SetInputData(vtkTable.vtkTable input) {
    vtkd_im.vtkPlot3D_SetInputData__SWIG_0(cast(void*)swigCPtr, vtkTable.vtkTable.swigGetCPtr(input));
  }

  public void SetInputData(vtkTable.vtkTable input, vtkStdString.vtkStdString xName, vtkStdString.vtkStdString yName, vtkStdString.vtkStdString zName) {
    vtkd_im.vtkPlot3D_SetInputData__SWIG_1(cast(void*)swigCPtr, vtkTable.vtkTable.swigGetCPtr(input), vtkStdString.vtkStdString.swigGetCPtr(xName), vtkStdString.vtkStdString.swigGetCPtr(yName), vtkStdString.vtkStdString.swigGetCPtr(zName));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void SetInputData(vtkTable.vtkTable input, vtkStdString.vtkStdString xName, vtkStdString.vtkStdString yName, vtkStdString.vtkStdString zName, vtkStdString.vtkStdString colorName) {
    vtkd_im.vtkPlot3D_SetInputData__SWIG_2(cast(void*)swigCPtr, vtkTable.vtkTable.swigGetCPtr(input), vtkStdString.vtkStdString.swigGetCPtr(xName), vtkStdString.vtkStdString.swigGetCPtr(yName), vtkStdString.vtkStdString.swigGetCPtr(zName), vtkStdString.vtkStdString.swigGetCPtr(colorName));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void SetInputData(vtkTable.vtkTable input, long xColumn, long yColumn, long zColumn) {
    vtkd_im.vtkPlot3D_SetInputData__SWIG_3(cast(void*)swigCPtr, vtkTable.vtkTable.swigGetCPtr(input), xColumn, yColumn, zColumn);
  }

  public void SetColors(vtkDataArray.vtkDataArray colorArr) {
    vtkd_im.vtkPlot3D_SetColors(cast(void*)swigCPtr, vtkDataArray.vtkDataArray.swigGetCPtr(colorArr));
  }

  public SWIGTYPE_p_std__vectorT_vtkVector3f_t.SWIGTYPE_p_std__vectorT_vtkVector3f_t GetPoints() {
    SWIGTYPE_p_std__vectorT_vtkVector3f_t.SWIGTYPE_p_std__vectorT_vtkVector3f_t ret = new SWIGTYPE_p_std__vectorT_vtkVector3f_t.SWIGTYPE_p_std__vectorT_vtkVector3f_t(vtkd_im.vtkPlot3D_GetPoints(cast(void*)swigCPtr), true);
    return ret;
  }

  public vtkChartXYZ.vtkChartXYZ GetChart() {
    void* cPtr = vtkd_im.vtkPlot3D_GetChart(cast(void*)swigCPtr);
    vtkChartXYZ.vtkChartXYZ ret = (cPtr is null) ? null : new vtkChartXYZ.vtkChartXYZ(cPtr, false);
    return ret;
  }

  public void SetChart(vtkChartXYZ.vtkChartXYZ chart) {
    vtkd_im.vtkPlot3D_SetChart(cast(void*)swigCPtr, vtkChartXYZ.vtkChartXYZ.swigGetCPtr(chart));
  }

  public string GetXAxisLabel() {
    string ret = std.conv.to!string(vtkd_im.vtkPlot3D_GetXAxisLabel(cast(void*)swigCPtr));
    return ret;
  }

  public string GetYAxisLabel() {
    string ret = std.conv.to!string(vtkd_im.vtkPlot3D_GetYAxisLabel(cast(void*)swigCPtr));
    return ret;
  }

  public string GetZAxisLabel() {
    string ret = std.conv.to!string(vtkd_im.vtkPlot3D_GetZAxisLabel(cast(void*)swigCPtr));
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_vtkVector3f_t.SWIGTYPE_p_std__vectorT_vtkVector3f_t GetDataBounds() {
    SWIGTYPE_p_std__vectorT_vtkVector3f_t.SWIGTYPE_p_std__vectorT_vtkVector3f_t ret = new SWIGTYPE_p_std__vectorT_vtkVector3f_t.SWIGTYPE_p_std__vectorT_vtkVector3f_t(vtkd_im.vtkPlot3D_GetDataBounds(cast(void*)swigCPtr), true);
    return ret;
  }

  public void SetSelection(vtkIdTypeArray.vtkIdTypeArray id) {
    vtkd_im.vtkPlot3D_SetSelection(cast(void*)swigCPtr, vtkIdTypeArray.vtkIdTypeArray.swigGetCPtr(id));
  }

  public vtkIdTypeArray.vtkIdTypeArray GetSelection() {
    void* cPtr = vtkd_im.vtkPlot3D_GetSelection(cast(void*)swigCPtr);
    vtkIdTypeArray.vtkIdTypeArray ret = (cPtr is null) ? null : new vtkIdTypeArray.vtkIdTypeArray(cPtr, false);
    return ret;
  }

  public this() {
    this(vtkd_im.new_vtkPlot3D(), true);
  }
}
