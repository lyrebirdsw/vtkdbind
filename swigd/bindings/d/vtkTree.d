/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkTree;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkAdjacentVertexIterator;
static import vtkIdTypeArray;
static import vtkDirectedAcyclicGraph;

class vtkTree : vtkDirectedAcyclicGraph.vtkDirectedAcyclicGraph {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkTree_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkTree obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkTree New() {
    void* cPtr = vtkd_im.vtkTree_New();
    vtkTree ret = (cPtr is null) ? null : new vtkTree(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkTree_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkTree SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkTree_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkTree ret = (cPtr is null) ? null : new vtkTree(cPtr, false);
    return ret;
  }

  public vtkTree NewInstance() const {
    void* cPtr = vtkd_im.vtkTree_NewInstance(cast(void*)swigCPtr);
    vtkTree ret = (cPtr is null) ? null : new vtkTree(cPtr, false);
    return ret;
  }

  alias vtkDirectedAcyclicGraph.vtkDirectedAcyclicGraph.NewInstance NewInstance;

  public long GetRoot() {
    auto ret = vtkd_im.vtkTree_GetRoot(cast(void*)swigCPtr);
    return ret;
  }

  public long GetNumberOfChildren(long v) {
    auto ret = vtkd_im.vtkTree_GetNumberOfChildren(cast(void*)swigCPtr, v);
    return ret;
  }

  public long GetChild(long v, long i) {
    auto ret = vtkd_im.vtkTree_GetChild(cast(void*)swigCPtr, v, i);
    return ret;
  }

  public void GetChildren(long v, vtkAdjacentVertexIterator.vtkAdjacentVertexIterator it) {
    vtkd_im.vtkTree_GetChildren(cast(void*)swigCPtr, v, vtkAdjacentVertexIterator.vtkAdjacentVertexIterator.swigGetCPtr(it));
  }

  public long GetParent(long v) {
    auto ret = vtkd_im.vtkTree_GetParent(cast(void*)swigCPtr, v);
    return ret;
  }

  public long GetLevel(long v) {
    auto ret = vtkd_im.vtkTree_GetLevel(cast(void*)swigCPtr, v);
    return ret;
  }

  public bool IsLeaf(long vertex) {
    bool ret = vtkd_im.vtkTree_IsLeaf(cast(void*)swigCPtr, vertex) ? true : false;
    return ret;
  }

  public void ReorderChildren(long parent, vtkIdTypeArray.vtkIdTypeArray children) {
    vtkd_im.vtkTree_ReorderChildren(cast(void*)swigCPtr, parent, vtkIdTypeArray.vtkIdTypeArray.swigGetCPtr(children));
  }
}
