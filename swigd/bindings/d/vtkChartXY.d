/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkChartXY;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkPlot;
static import vtkTooltipItem;
static import vtkContextMouseEvent;
static import vtkVector2f;
static import vtkChart;

class vtkChartXY : vtkChart.vtkChart {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkChartXY_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkChartXY obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkChartXY(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkChartXY_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkChartXY SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkChartXY_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkChartXY ret = (cPtr is null) ? null : new vtkChartXY(cPtr, false);
    return ret;
  }

  public vtkChartXY NewInstance() const {
    void* cPtr = vtkd_im.vtkChartXY_NewInstance(cast(void*)swigCPtr);
    vtkChartXY ret = (cPtr is null) ? null : new vtkChartXY(cPtr, false);
    return ret;
  }

  alias vtkChart.vtkChart.NewInstance NewInstance;

  public static vtkChartXY New() {
    void* cPtr = vtkd_im.vtkChartXY_New();
    vtkChartXY ret = (cPtr is null) ? null : new vtkChartXY(cPtr, false);
    return ret;
  }

  public override vtkPlot.vtkPlot AddPlot(int type) {
    void* cPtr = vtkd_im.vtkChartXY_AddPlot__SWIG_0(cast(void*)swigCPtr, type);
    vtkPlot.vtkPlot ret = (cPtr is null) ? null : new vtkPlot.vtkPlot(cPtr, false);
    return ret;
  }

  public override long AddPlot(vtkPlot.vtkPlot plot) {
    auto ret = vtkd_im.vtkChartXY_AddPlot__SWIG_1(cast(void*)swigCPtr, vtkPlot.vtkPlot.swigGetCPtr(plot));
    return ret;
  }

  public int GetPlotCorner(vtkPlot.vtkPlot plot) {
    auto ret = vtkd_im.vtkChartXY_GetPlotCorner(cast(void*)swigCPtr, vtkPlot.vtkPlot.swigGetCPtr(plot));
    return ret;
  }

  public void SetPlotCorner(vtkPlot.vtkPlot plot, int corner) {
    vtkd_im.vtkChartXY_SetPlotCorner(cast(void*)swigCPtr, vtkPlot.vtkPlot.swigGetCPtr(plot), corner);
  }

  public void SetTooltip(vtkTooltipItem.vtkTooltipItem tooltip) {
    vtkd_im.vtkChartXY_SetTooltip(cast(void*)swigCPtr, vtkTooltipItem.vtkTooltipItem.swigGetCPtr(tooltip));
  }

  public vtkTooltipItem.vtkTooltipItem GetTooltip() {
    void* cPtr = vtkd_im.vtkChartXY_GetTooltip(cast(void*)swigCPtr);
    vtkTooltipItem.vtkTooltipItem ret = (cPtr is null) ? null : new vtkTooltipItem.vtkTooltipItem(cPtr, false);
    return ret;
  }

  public void SetDrawAxesAtOrigin(bool _arg) {
    vtkd_im.vtkChartXY_SetDrawAxesAtOrigin(cast(void*)swigCPtr, _arg);
  }

  public bool GetDrawAxesAtOrigin() {
    bool ret = vtkd_im.vtkChartXY_GetDrawAxesAtOrigin(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void DrawAxesAtOriginOn() {
    vtkd_im.vtkChartXY_DrawAxesAtOriginOn(cast(void*)swigCPtr);
  }

  public void DrawAxesAtOriginOff() {
    vtkd_im.vtkChartXY_DrawAxesAtOriginOff(cast(void*)swigCPtr);
  }

  public void SetAutoAxes(bool _arg) {
    vtkd_im.vtkChartXY_SetAutoAxes(cast(void*)swigCPtr, _arg);
  }

  public bool GetAutoAxes() {
    bool ret = vtkd_im.vtkChartXY_GetAutoAxes(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void AutoAxesOn() {
    vtkd_im.vtkChartXY_AutoAxesOn(cast(void*)swigCPtr);
  }

  public void AutoAxesOff() {
    vtkd_im.vtkChartXY_AutoAxesOff(cast(void*)swigCPtr);
  }

  public void SetHiddenAxisBorder(int _arg) {
    vtkd_im.vtkChartXY_SetHiddenAxisBorder(cast(void*)swigCPtr, _arg);
  }

  public int GetHiddenAxisBorder() {
    auto ret = vtkd_im.vtkChartXY_GetHiddenAxisBorder(cast(void*)swigCPtr);
    return ret;
  }

  public void SetForceAxesToBounds(bool _arg) {
    vtkd_im.vtkChartXY_SetForceAxesToBounds(cast(void*)swigCPtr, _arg);
  }

  public bool GetForceAxesToBounds() {
    bool ret = vtkd_im.vtkChartXY_GetForceAxesToBounds(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void ForceAxesToBoundsOn() {
    vtkd_im.vtkChartXY_ForceAxesToBoundsOn(cast(void*)swigCPtr);
  }

  public void ForceAxesToBoundsOff() {
    vtkd_im.vtkChartXY_ForceAxesToBoundsOff(cast(void*)swigCPtr);
  }

  public void SetBarWidthFraction(float _arg) {
    vtkd_im.vtkChartXY_SetBarWidthFraction(cast(void*)swigCPtr, _arg);
  }

  public float GetBarWidthFraction() {
    auto ret = vtkd_im.vtkChartXY_GetBarWidthFraction(cast(void*)swigCPtr);
    return ret;
  }

  public void SetTooltipInfo(vtkContextMouseEvent.vtkContextMouseEvent arg0, vtkVector2f.vtkVector2f arg1, long arg2, vtkPlot.vtkPlot arg3, long segmentIndex) {
    vtkd_im.vtkChartXY_SetTooltipInfo__SWIG_0(cast(void*)swigCPtr, vtkContextMouseEvent.vtkContextMouseEvent.swigGetCPtr(arg0), vtkVector2f.vtkVector2f.swigGetCPtr(arg1), arg2, vtkPlot.vtkPlot.swigGetCPtr(arg3), segmentIndex);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void SetTooltipInfo(vtkContextMouseEvent.vtkContextMouseEvent arg0, vtkVector2f.vtkVector2f arg1, long arg2, vtkPlot.vtkPlot arg3) {
    vtkd_im.vtkChartXY_SetTooltipInfo__SWIG_1(cast(void*)swigCPtr, vtkContextMouseEvent.vtkContextMouseEvent.swigGetCPtr(arg0), vtkVector2f.vtkVector2f.swigGetCPtr(arg1), arg2, vtkPlot.vtkPlot.swigGetCPtr(arg3));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public this() {
    this(vtkd_im.new_vtkChartXY(), true);
  }
}
