/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkDataWriter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkStdString;
static import SWIGTYPE_p_ostream;
static import vtkPoints;
static import vtkDataArray;
static import vtkCellArray;
static import vtkDataSet;
static import vtkGraph;
static import vtkTable;
static import vtkFieldData;
static import vtkWriter;

class vtkDataWriter : vtkWriter.vtkWriter {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkDataWriter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkDataWriter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkDataWriter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkDataWriter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkDataWriter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkDataWriter ret = (cPtr is null) ? null : new vtkDataWriter(cPtr, false);
    return ret;
  }

  public vtkDataWriter NewInstance() const {
    void* cPtr = vtkd_im.vtkDataWriter_NewInstance(cast(void*)swigCPtr);
    vtkDataWriter ret = (cPtr is null) ? null : new vtkDataWriter(cPtr, false);
    return ret;
  }

  alias vtkWriter.vtkWriter.NewInstance NewInstance;

  public static vtkDataWriter New() {
    void* cPtr = vtkd_im.vtkDataWriter_New();
    vtkDataWriter ret = (cPtr is null) ? null : new vtkDataWriter(cPtr, false);
    return ret;
  }

  public void SetFileName(string _arg) {
    vtkd_im.vtkDataWriter_SetFileName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetFileName() {
    string ret = std.conv.to!string(vtkd_im.vtkDataWriter_GetFileName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetWriteToOutputString(int _arg) {
    vtkd_im.vtkDataWriter_SetWriteToOutputString(cast(void*)swigCPtr, _arg);
  }

  public int GetWriteToOutputString() {
    auto ret = vtkd_im.vtkDataWriter_GetWriteToOutputString(cast(void*)swigCPtr);
    return ret;
  }

  public void WriteToOutputStringOn() {
    vtkd_im.vtkDataWriter_WriteToOutputStringOn(cast(void*)swigCPtr);
  }

  public void WriteToOutputStringOff() {
    vtkd_im.vtkDataWriter_WriteToOutputStringOff(cast(void*)swigCPtr);
  }

  public int GetOutputStringLength() {
    auto ret = vtkd_im.vtkDataWriter_GetOutputStringLength(cast(void*)swigCPtr);
    return ret;
  }

  public string GetOutputString() {
    string ret = std.conv.to!string(vtkd_im.vtkDataWriter_GetOutputString(cast(void*)swigCPtr));
    return ret;
  }

  public ubyte* GetBinaryOutputString() {
    auto ret = cast(ubyte*)vtkd_im.vtkDataWriter_GetBinaryOutputString(cast(void*)swigCPtr);
    return ret;
  }

  public vtkStdString.vtkStdString GetOutputStdString() {
    vtkStdString.vtkStdString ret = new vtkStdString.vtkStdString(vtkd_im.vtkDataWriter_GetOutputStdString(cast(void*)swigCPtr), true);
    return ret;
  }

  public string RegisterAndGetOutputString() {
    string ret = std.conv.to!string(vtkd_im.vtkDataWriter_RegisterAndGetOutputString(cast(void*)swigCPtr));
    return ret;
  }

  public void SetHeader(string _arg) {
    vtkd_im.vtkDataWriter_SetHeader(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetHeader() {
    string ret = std.conv.to!string(vtkd_im.vtkDataWriter_GetHeader(cast(void*)swigCPtr));
    return ret;
  }

  public void SetFileType(int _arg) {
    vtkd_im.vtkDataWriter_SetFileType(cast(void*)swigCPtr, _arg);
  }

  public int GetFileTypeMinValue() {
    auto ret = vtkd_im.vtkDataWriter_GetFileTypeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetFileTypeMaxValue() {
    auto ret = vtkd_im.vtkDataWriter_GetFileTypeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetFileType() {
    auto ret = vtkd_im.vtkDataWriter_GetFileType(cast(void*)swigCPtr);
    return ret;
  }

  public void SetFileTypeToASCII() {
    vtkd_im.vtkDataWriter_SetFileTypeToASCII(cast(void*)swigCPtr);
  }

  public void SetFileTypeToBinary() {
    vtkd_im.vtkDataWriter_SetFileTypeToBinary(cast(void*)swigCPtr);
  }

  public void SetScalarsName(string _arg) {
    vtkd_im.vtkDataWriter_SetScalarsName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetScalarsName() {
    string ret = std.conv.to!string(vtkd_im.vtkDataWriter_GetScalarsName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetVectorsName(string _arg) {
    vtkd_im.vtkDataWriter_SetVectorsName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetVectorsName() {
    string ret = std.conv.to!string(vtkd_im.vtkDataWriter_GetVectorsName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetTensorsName(string _arg) {
    vtkd_im.vtkDataWriter_SetTensorsName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetTensorsName() {
    string ret = std.conv.to!string(vtkd_im.vtkDataWriter_GetTensorsName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetNormalsName(string _arg) {
    vtkd_im.vtkDataWriter_SetNormalsName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetNormalsName() {
    string ret = std.conv.to!string(vtkd_im.vtkDataWriter_GetNormalsName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetTCoordsName(string _arg) {
    vtkd_im.vtkDataWriter_SetTCoordsName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetTCoordsName() {
    string ret = std.conv.to!string(vtkd_im.vtkDataWriter_GetTCoordsName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetGlobalIdsName(string _arg) {
    vtkd_im.vtkDataWriter_SetGlobalIdsName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetGlobalIdsName() {
    string ret = std.conv.to!string(vtkd_im.vtkDataWriter_GetGlobalIdsName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetPedigreeIdsName(string _arg) {
    vtkd_im.vtkDataWriter_SetPedigreeIdsName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetPedigreeIdsName() {
    string ret = std.conv.to!string(vtkd_im.vtkDataWriter_GetPedigreeIdsName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetLookupTableName(string _arg) {
    vtkd_im.vtkDataWriter_SetLookupTableName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetLookupTableName() {
    string ret = std.conv.to!string(vtkd_im.vtkDataWriter_GetLookupTableName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetFieldDataName(string _arg) {
    vtkd_im.vtkDataWriter_SetFieldDataName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetFieldDataName() {
    string ret = std.conv.to!string(vtkd_im.vtkDataWriter_GetFieldDataName(cast(void*)swigCPtr));
    return ret;
  }

  public SWIGTYPE_p_ostream.SWIGTYPE_p_ostream OpenVTKFile() {
    void* cPtr = vtkd_im.vtkDataWriter_OpenVTKFile(cast(void*)swigCPtr);
    SWIGTYPE_p_ostream.SWIGTYPE_p_ostream ret = (cPtr is null) ? null : new SWIGTYPE_p_ostream.SWIGTYPE_p_ostream(cPtr, false);
    return ret;
  }

  public int WriteHeader(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream fp) {
    auto ret = vtkd_im.vtkDataWriter_WriteHeader(cast(void*)swigCPtr, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(fp));
    return ret;
  }

  public int WritePoints(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream fp, vtkPoints.vtkPoints p) {
    auto ret = vtkd_im.vtkDataWriter_WritePoints(cast(void*)swigCPtr, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(fp), vtkPoints.vtkPoints.swigGetCPtr(p));
    return ret;
  }

  public int WriteCoordinates(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream fp, vtkDataArray.vtkDataArray coords, int axes) {
    auto ret = vtkd_im.vtkDataWriter_WriteCoordinates(cast(void*)swigCPtr, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(fp), vtkDataArray.vtkDataArray.swigGetCPtr(coords), axes);
    return ret;
  }

  public int WriteCells(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream fp, vtkCellArray.vtkCellArray cells, string label) {
    auto ret = vtkd_im.vtkDataWriter_WriteCells(cast(void*)swigCPtr, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(fp), vtkCellArray.vtkCellArray.swigGetCPtr(cells), (label ? std.string.toStringz(label) : null));
    return ret;
  }

  public int WriteCellData(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream fp, vtkDataSet.vtkDataSet ds) {
    auto ret = vtkd_im.vtkDataWriter_WriteCellData(cast(void*)swigCPtr, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(fp), vtkDataSet.vtkDataSet.swigGetCPtr(ds));
    return ret;
  }

  public int WritePointData(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream fp, vtkDataSet.vtkDataSet ds) {
    auto ret = vtkd_im.vtkDataWriter_WritePointData(cast(void*)swigCPtr, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(fp), vtkDataSet.vtkDataSet.swigGetCPtr(ds));
    return ret;
  }

  public int WriteEdgeData(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream fp, vtkGraph.vtkGraph g) {
    auto ret = vtkd_im.vtkDataWriter_WriteEdgeData(cast(void*)swigCPtr, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(fp), vtkGraph.vtkGraph.swigGetCPtr(g));
    return ret;
  }

  public int WriteVertexData(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream fp, vtkGraph.vtkGraph g) {
    auto ret = vtkd_im.vtkDataWriter_WriteVertexData(cast(void*)swigCPtr, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(fp), vtkGraph.vtkGraph.swigGetCPtr(g));
    return ret;
  }

  public int WriteRowData(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream fp, vtkTable.vtkTable g) {
    auto ret = vtkd_im.vtkDataWriter_WriteRowData(cast(void*)swigCPtr, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(fp), vtkTable.vtkTable.swigGetCPtr(g));
    return ret;
  }

  public int WriteFieldData(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream fp, vtkFieldData.vtkFieldData f) {
    auto ret = vtkd_im.vtkDataWriter_WriteFieldData(cast(void*)swigCPtr, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(fp), vtkFieldData.vtkFieldData.swigGetCPtr(f));
    return ret;
  }

  public int WriteDataSetData(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream fp, vtkDataSet.vtkDataSet ds) {
    auto ret = vtkd_im.vtkDataWriter_WriteDataSetData(cast(void*)swigCPtr, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(fp), vtkDataSet.vtkDataSet.swigGetCPtr(ds));
    return ret;
  }

  public void CloseVTKFile(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream fp) {
    vtkd_im.vtkDataWriter_CloseVTKFile(cast(void*)swigCPtr, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(fp));
  }
}
