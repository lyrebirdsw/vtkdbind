/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkSplineFilter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkSpline;
static import vtkPolyDataAlgorithm;

class vtkSplineFilter : vtkPolyDataAlgorithm.vtkPolyDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkSplineFilter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkSplineFilter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkSplineFilter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkSplineFilter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkSplineFilter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkSplineFilter ret = (cPtr is null) ? null : new vtkSplineFilter(cPtr, false);
    return ret;
  }

  public vtkSplineFilter NewInstance() const {
    void* cPtr = vtkd_im.vtkSplineFilter_NewInstance(cast(void*)swigCPtr);
    vtkSplineFilter ret = (cPtr is null) ? null : new vtkSplineFilter(cPtr, false);
    return ret;
  }

  alias vtkPolyDataAlgorithm.vtkPolyDataAlgorithm.NewInstance NewInstance;

  public static vtkSplineFilter New() {
    void* cPtr = vtkd_im.vtkSplineFilter_New();
    vtkSplineFilter ret = (cPtr is null) ? null : new vtkSplineFilter(cPtr, false);
    return ret;
  }

  public void SetMaximumNumberOfSubdivisions(int _arg) {
    vtkd_im.vtkSplineFilter_SetMaximumNumberOfSubdivisions(cast(void*)swigCPtr, _arg);
  }

  public int GetMaximumNumberOfSubdivisionsMinValue() {
    auto ret = vtkd_im.vtkSplineFilter_GetMaximumNumberOfSubdivisionsMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetMaximumNumberOfSubdivisionsMaxValue() {
    auto ret = vtkd_im.vtkSplineFilter_GetMaximumNumberOfSubdivisionsMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetMaximumNumberOfSubdivisions() {
    auto ret = vtkd_im.vtkSplineFilter_GetMaximumNumberOfSubdivisions(cast(void*)swigCPtr);
    return ret;
  }

  public void SetSubdivide(int _arg) {
    vtkd_im.vtkSplineFilter_SetSubdivide(cast(void*)swigCPtr, _arg);
  }

  public int GetSubdivideMinValue() {
    auto ret = vtkd_im.vtkSplineFilter_GetSubdivideMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetSubdivideMaxValue() {
    auto ret = vtkd_im.vtkSplineFilter_GetSubdivideMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetSubdivide() {
    auto ret = vtkd_im.vtkSplineFilter_GetSubdivide(cast(void*)swigCPtr);
    return ret;
  }

  public void SetSubdivideToSpecified() {
    vtkd_im.vtkSplineFilter_SetSubdivideToSpecified(cast(void*)swigCPtr);
  }

  public void SetSubdivideToLength() {
    vtkd_im.vtkSplineFilter_SetSubdivideToLength(cast(void*)swigCPtr);
  }

  public string GetSubdivideAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkSplineFilter_GetSubdivideAsString(cast(void*)swigCPtr));
    return ret;
  }

  public void SetNumberOfSubdivisions(int _arg) {
    vtkd_im.vtkSplineFilter_SetNumberOfSubdivisions(cast(void*)swigCPtr, _arg);
  }

  public int GetNumberOfSubdivisionsMinValue() {
    auto ret = vtkd_im.vtkSplineFilter_GetNumberOfSubdivisionsMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfSubdivisionsMaxValue() {
    auto ret = vtkd_im.vtkSplineFilter_GetNumberOfSubdivisionsMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfSubdivisions() {
    auto ret = vtkd_im.vtkSplineFilter_GetNumberOfSubdivisions(cast(void*)swigCPtr);
    return ret;
  }

  public void SetLength(double _arg) {
    vtkd_im.vtkSplineFilter_SetLength(cast(void*)swigCPtr, _arg);
  }

  public double GetLengthMinValue() {
    auto ret = vtkd_im.vtkSplineFilter_GetLengthMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetLengthMaxValue() {
    auto ret = vtkd_im.vtkSplineFilter_GetLengthMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetLength() {
    auto ret = vtkd_im.vtkSplineFilter_GetLength(cast(void*)swigCPtr);
    return ret;
  }

  public void SetSpline(vtkSpline.vtkSpline arg0) {
    vtkd_im.vtkSplineFilter_SetSpline(cast(void*)swigCPtr, vtkSpline.vtkSpline.swigGetCPtr(arg0));
  }

  public vtkSpline.vtkSpline GetSpline() {
    void* cPtr = vtkd_im.vtkSplineFilter_GetSpline(cast(void*)swigCPtr);
    vtkSpline.vtkSpline ret = (cPtr is null) ? null : new vtkSpline.vtkSpline(cPtr, false);
    return ret;
  }

  public void SetGenerateTCoords(int _arg) {
    vtkd_im.vtkSplineFilter_SetGenerateTCoords(cast(void*)swigCPtr, _arg);
  }

  public int GetGenerateTCoordsMinValue() {
    auto ret = vtkd_im.vtkSplineFilter_GetGenerateTCoordsMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetGenerateTCoordsMaxValue() {
    auto ret = vtkd_im.vtkSplineFilter_GetGenerateTCoordsMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetGenerateTCoords() {
    auto ret = vtkd_im.vtkSplineFilter_GetGenerateTCoords(cast(void*)swigCPtr);
    return ret;
  }

  public void SetGenerateTCoordsToOff() {
    vtkd_im.vtkSplineFilter_SetGenerateTCoordsToOff(cast(void*)swigCPtr);
  }

  public void SetGenerateTCoordsToNormalizedLength() {
    vtkd_im.vtkSplineFilter_SetGenerateTCoordsToNormalizedLength(cast(void*)swigCPtr);
  }

  public void SetGenerateTCoordsToUseLength() {
    vtkd_im.vtkSplineFilter_SetGenerateTCoordsToUseLength(cast(void*)swigCPtr);
  }

  public void SetGenerateTCoordsToUseScalars() {
    vtkd_im.vtkSplineFilter_SetGenerateTCoordsToUseScalars(cast(void*)swigCPtr);
  }

  public string GetGenerateTCoordsAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkSplineFilter_GetGenerateTCoordsAsString(cast(void*)swigCPtr));
    return ret;
  }

  public void SetTextureLength(double _arg) {
    vtkd_im.vtkSplineFilter_SetTextureLength(cast(void*)swigCPtr, _arg);
  }

  public double GetTextureLengthMinValue() {
    auto ret = vtkd_im.vtkSplineFilter_GetTextureLengthMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetTextureLengthMaxValue() {
    auto ret = vtkd_im.vtkSplineFilter_GetTextureLengthMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetTextureLength() {
    auto ret = vtkd_im.vtkSplineFilter_GetTextureLength(cast(void*)swigCPtr);
    return ret;
  }
}
