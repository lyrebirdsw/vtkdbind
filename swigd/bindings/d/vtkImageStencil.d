/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkImageStencil;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkImageStencilData;
static import vtkAlgorithmOutput;
static import vtkImageData;
static import SWIGTYPE_p_double;
static import vtkThreadedImageAlgorithm;

class vtkImageStencil : vtkThreadedImageAlgorithm.vtkThreadedImageAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkImageStencil_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkImageStencil obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkImageStencil New() {
    void* cPtr = vtkd_im.vtkImageStencil_New();
    vtkImageStencil ret = (cPtr is null) ? null : new vtkImageStencil(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkImageStencil_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkImageStencil SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkImageStencil_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkImageStencil ret = (cPtr is null) ? null : new vtkImageStencil(cPtr, false);
    return ret;
  }

  public vtkImageStencil NewInstance() const {
    void* cPtr = vtkd_im.vtkImageStencil_NewInstance(cast(void*)swigCPtr);
    vtkImageStencil ret = (cPtr is null) ? null : new vtkImageStencil(cPtr, false);
    return ret;
  }

  alias vtkThreadedImageAlgorithm.vtkThreadedImageAlgorithm.NewInstance NewInstance;

  public void SetStencilData(vtkImageStencilData.vtkImageStencilData stencil) {
    vtkd_im.vtkImageStencil_SetStencilData(cast(void*)swigCPtr, vtkImageStencilData.vtkImageStencilData.swigGetCPtr(stencil));
  }

  public vtkImageStencilData.vtkImageStencilData GetStencil() {
    void* cPtr = vtkd_im.vtkImageStencil_GetStencil(cast(void*)swigCPtr);
    vtkImageStencilData.vtkImageStencilData ret = (cPtr is null) ? null : new vtkImageStencilData.vtkImageStencilData(cPtr, false);
    return ret;
  }

  public void SetStencilConnection(vtkAlgorithmOutput.vtkAlgorithmOutput outputPort) {
    vtkd_im.vtkImageStencil_SetStencilConnection(cast(void*)swigCPtr, vtkAlgorithmOutput.vtkAlgorithmOutput.swigGetCPtr(outputPort));
  }

  public void SetReverseStencil(int _arg) {
    vtkd_im.vtkImageStencil_SetReverseStencil(cast(void*)swigCPtr, _arg);
  }

  public void ReverseStencilOn() {
    vtkd_im.vtkImageStencil_ReverseStencilOn(cast(void*)swigCPtr);
  }

  public void ReverseStencilOff() {
    vtkd_im.vtkImageStencil_ReverseStencilOff(cast(void*)swigCPtr);
  }

  public int GetReverseStencil() {
    auto ret = vtkd_im.vtkImageStencil_GetReverseStencil(cast(void*)swigCPtr);
    return ret;
  }

  public void SetBackgroundInputData(vtkImageData.vtkImageData input) {
    vtkd_im.vtkImageStencil_SetBackgroundInputData(cast(void*)swigCPtr, vtkImageData.vtkImageData.swigGetCPtr(input));
  }

  public vtkImageData.vtkImageData GetBackgroundInput() {
    void* cPtr = vtkd_im.vtkImageStencil_GetBackgroundInput(cast(void*)swigCPtr);
    vtkImageData.vtkImageData ret = (cPtr is null) ? null : new vtkImageData.vtkImageData(cPtr, false);
    return ret;
  }

  public void SetBackgroundValue(double val) {
    vtkd_im.vtkImageStencil_SetBackgroundValue(cast(void*)swigCPtr, val);
  }

  public double GetBackgroundValue() {
    auto ret = vtkd_im.vtkImageStencil_GetBackgroundValue(cast(void*)swigCPtr);
    return ret;
  }

  public void SetBackgroundColor(double _arg1, double _arg2, double _arg3, double _arg4) {
    vtkd_im.vtkImageStencil_SetBackgroundColor__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3, _arg4);
  }

  public void SetBackgroundColor(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkImageStencil_SetBackgroundColor__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetBackgroundColor() {
    auto ret = cast(double*)vtkd_im.vtkImageStencil_GetBackgroundColor__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetBackgroundColor(double* _arg1, double* _arg2, double* _arg3, double* _arg4) {
    vtkd_im.vtkImageStencil_GetBackgroundColor__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3, cast(void*)_arg4);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetBackgroundColor(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkImageStencil_GetBackgroundColor__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }
}
