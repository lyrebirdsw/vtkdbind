/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkDelimitedTextWriter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkStdString;
static import vtkWriter;

class vtkDelimitedTextWriter : vtkWriter.vtkWriter {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkDelimitedTextWriter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkDelimitedTextWriter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkDelimitedTextWriter New() {
    void* cPtr = vtkd_im.vtkDelimitedTextWriter_New();
    vtkDelimitedTextWriter ret = (cPtr is null) ? null : new vtkDelimitedTextWriter(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkDelimitedTextWriter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkDelimitedTextWriter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkDelimitedTextWriter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkDelimitedTextWriter ret = (cPtr is null) ? null : new vtkDelimitedTextWriter(cPtr, false);
    return ret;
  }

  public vtkDelimitedTextWriter NewInstance() const {
    void* cPtr = vtkd_im.vtkDelimitedTextWriter_NewInstance(cast(void*)swigCPtr);
    vtkDelimitedTextWriter ret = (cPtr is null) ? null : new vtkDelimitedTextWriter(cPtr, false);
    return ret;
  }

  alias vtkWriter.vtkWriter.NewInstance NewInstance;

  public void SetFieldDelimiter(string _arg) {
    vtkd_im.vtkDelimitedTextWriter_SetFieldDelimiter(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetFieldDelimiter() {
    string ret = std.conv.to!string(vtkd_im.vtkDelimitedTextWriter_GetFieldDelimiter(cast(void*)swigCPtr));
    return ret;
  }

  public void SetStringDelimiter(string _arg) {
    vtkd_im.vtkDelimitedTextWriter_SetStringDelimiter(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetStringDelimiter() {
    string ret = std.conv.to!string(vtkd_im.vtkDelimitedTextWriter_GetStringDelimiter(cast(void*)swigCPtr));
    return ret;
  }

  public void SetFileName(string _arg) {
    vtkd_im.vtkDelimitedTextWriter_SetFileName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetFileName() {
    string ret = std.conv.to!string(vtkd_im.vtkDelimitedTextWriter_GetFileName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetUseStringDelimiter(bool _arg) {
    vtkd_im.vtkDelimitedTextWriter_SetUseStringDelimiter(cast(void*)swigCPtr, _arg);
  }

  public bool GetUseStringDelimiter() {
    bool ret = vtkd_im.vtkDelimitedTextWriter_GetUseStringDelimiter(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetWriteToOutputString(bool _arg) {
    vtkd_im.vtkDelimitedTextWriter_SetWriteToOutputString(cast(void*)swigCPtr, _arg);
  }

  public bool GetWriteToOutputString() {
    bool ret = vtkd_im.vtkDelimitedTextWriter_GetWriteToOutputString(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void WriteToOutputStringOn() {
    vtkd_im.vtkDelimitedTextWriter_WriteToOutputStringOn(cast(void*)swigCPtr);
  }

  public void WriteToOutputStringOff() {
    vtkd_im.vtkDelimitedTextWriter_WriteToOutputStringOff(cast(void*)swigCPtr);
  }

  public string RegisterAndGetOutputString() {
    string ret = std.conv.to!string(vtkd_im.vtkDelimitedTextWriter_RegisterAndGetOutputString(cast(void*)swigCPtr));
    return ret;
  }

  public vtkStdString.vtkStdString GetString(vtkStdString.vtkStdString arg0) {
    vtkStdString.vtkStdString ret = new vtkStdString.vtkStdString(vtkd_im.vtkDelimitedTextWriter_GetString(cast(void*)swigCPtr, vtkStdString.vtkStdString.swigGetCPtr(arg0)), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }
}
