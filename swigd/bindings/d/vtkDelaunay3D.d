/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkDelaunay3D;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkIncrementalPointLocator;
static import vtkUnstructuredGrid;
static import SWIGTYPE_p_double;
static import SWIGTYPE_p_p_vtkPoints;
static import vtkPoints;
static import vtkIdList;
static import vtkUnstructuredGridAlgorithm;

class vtkDelaunay3D : vtkUnstructuredGridAlgorithm.vtkUnstructuredGridAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkDelaunay3D_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkDelaunay3D obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkDelaunay3D_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkDelaunay3D SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkDelaunay3D_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkDelaunay3D ret = (cPtr is null) ? null : new vtkDelaunay3D(cPtr, false);
    return ret;
  }

  public vtkDelaunay3D NewInstance() const {
    void* cPtr = vtkd_im.vtkDelaunay3D_NewInstance(cast(void*)swigCPtr);
    vtkDelaunay3D ret = (cPtr is null) ? null : new vtkDelaunay3D(cPtr, false);
    return ret;
  }

  alias vtkUnstructuredGridAlgorithm.vtkUnstructuredGridAlgorithm.NewInstance NewInstance;

  public static vtkDelaunay3D New() {
    void* cPtr = vtkd_im.vtkDelaunay3D_New();
    vtkDelaunay3D ret = (cPtr is null) ? null : new vtkDelaunay3D(cPtr, false);
    return ret;
  }

  public void SetAlpha(double _arg) {
    vtkd_im.vtkDelaunay3D_SetAlpha(cast(void*)swigCPtr, _arg);
  }

  public double GetAlphaMinValue() {
    auto ret = vtkd_im.vtkDelaunay3D_GetAlphaMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetAlphaMaxValue() {
    auto ret = vtkd_im.vtkDelaunay3D_GetAlphaMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetAlpha() {
    auto ret = vtkd_im.vtkDelaunay3D_GetAlpha(cast(void*)swigCPtr);
    return ret;
  }

  public void SetTolerance(double _arg) {
    vtkd_im.vtkDelaunay3D_SetTolerance(cast(void*)swigCPtr, _arg);
  }

  public double GetToleranceMinValue() {
    auto ret = vtkd_im.vtkDelaunay3D_GetToleranceMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetToleranceMaxValue() {
    auto ret = vtkd_im.vtkDelaunay3D_GetToleranceMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetTolerance() {
    auto ret = vtkd_im.vtkDelaunay3D_GetTolerance(cast(void*)swigCPtr);
    return ret;
  }

  public void SetOffset(double _arg) {
    vtkd_im.vtkDelaunay3D_SetOffset(cast(void*)swigCPtr, _arg);
  }

  public double GetOffsetMinValue() {
    auto ret = vtkd_im.vtkDelaunay3D_GetOffsetMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetOffsetMaxValue() {
    auto ret = vtkd_im.vtkDelaunay3D_GetOffsetMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetOffset() {
    auto ret = vtkd_im.vtkDelaunay3D_GetOffset(cast(void*)swigCPtr);
    return ret;
  }

  public void SetBoundingTriangulation(int _arg) {
    vtkd_im.vtkDelaunay3D_SetBoundingTriangulation(cast(void*)swigCPtr, _arg);
  }

  public int GetBoundingTriangulation() {
    auto ret = vtkd_im.vtkDelaunay3D_GetBoundingTriangulation(cast(void*)swigCPtr);
    return ret;
  }

  public void BoundingTriangulationOn() {
    vtkd_im.vtkDelaunay3D_BoundingTriangulationOn(cast(void*)swigCPtr);
  }

  public void BoundingTriangulationOff() {
    vtkd_im.vtkDelaunay3D_BoundingTriangulationOff(cast(void*)swigCPtr);
  }

  public void SetLocator(vtkIncrementalPointLocator.vtkIncrementalPointLocator locator) {
    vtkd_im.vtkDelaunay3D_SetLocator(cast(void*)swigCPtr, vtkIncrementalPointLocator.vtkIncrementalPointLocator.swigGetCPtr(locator));
  }

  public vtkIncrementalPointLocator.vtkIncrementalPointLocator GetLocator() {
    void* cPtr = vtkd_im.vtkDelaunay3D_GetLocator(cast(void*)swigCPtr);
    vtkIncrementalPointLocator.vtkIncrementalPointLocator ret = (cPtr is null) ? null : new vtkIncrementalPointLocator.vtkIncrementalPointLocator(cPtr, false);
    return ret;
  }

  public void CreateDefaultLocator() {
    vtkd_im.vtkDelaunay3D_CreateDefaultLocator(cast(void*)swigCPtr);
  }

  public vtkUnstructuredGrid.vtkUnstructuredGrid InitPointInsertion(SWIGTYPE_p_double.SWIGTYPE_p_double center, double length, long numPts, SWIGTYPE_p_p_vtkPoints.SWIGTYPE_p_p_vtkPoints pts) {
    void* cPtr = vtkd_im.vtkDelaunay3D_InitPointInsertion(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(center), length, numPts, SWIGTYPE_p_p_vtkPoints.SWIGTYPE_p_p_vtkPoints.swigGetCPtr(pts));
    vtkUnstructuredGrid.vtkUnstructuredGrid ret = (cPtr is null) ? null : new vtkUnstructuredGrid.vtkUnstructuredGrid(cPtr, false);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void InsertPoint(vtkUnstructuredGrid.vtkUnstructuredGrid Mesh, vtkPoints.vtkPoints points, long id, SWIGTYPE_p_double.SWIGTYPE_p_double x, vtkIdList.vtkIdList holeTetras) {
    vtkd_im.vtkDelaunay3D_InsertPoint(cast(void*)swigCPtr, vtkUnstructuredGrid.vtkUnstructuredGrid.swigGetCPtr(Mesh), vtkPoints.vtkPoints.swigGetCPtr(points), id, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), vtkIdList.vtkIdList.swigGetCPtr(holeTetras));
  }

  public void EndPointInsertion() {
    vtkd_im.vtkDelaunay3D_EndPointInsertion(cast(void*)swigCPtr);
  }
}
