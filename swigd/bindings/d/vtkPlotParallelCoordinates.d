/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPlotParallelCoordinates;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkTable;
static import vtkStdString;
static import vtkScalarsToColors;
static import vtkPlot;

class vtkPlotParallelCoordinates : vtkPlot.vtkPlot {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPlotParallelCoordinates_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPlotParallelCoordinates obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkPlotParallelCoordinates(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPlotParallelCoordinates_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPlotParallelCoordinates SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPlotParallelCoordinates_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPlotParallelCoordinates ret = (cPtr is null) ? null : new vtkPlotParallelCoordinates(cPtr, false);
    return ret;
  }

  public vtkPlotParallelCoordinates NewInstance() const {
    void* cPtr = vtkd_im.vtkPlotParallelCoordinates_NewInstance(cast(void*)swigCPtr);
    vtkPlotParallelCoordinates ret = (cPtr is null) ? null : new vtkPlotParallelCoordinates(cPtr, false);
    return ret;
  }

  alias vtkPlot.vtkPlot.NewInstance NewInstance;

  public static vtkPlotParallelCoordinates New() {
    void* cPtr = vtkd_im.vtkPlotParallelCoordinates_New();
    vtkPlotParallelCoordinates ret = (cPtr is null) ? null : new vtkPlotParallelCoordinates(cPtr, false);
    return ret;
  }

  public bool SetSelectionRange(int Axis, float low, float high) {
    bool ret = vtkd_im.vtkPlotParallelCoordinates_SetSelectionRange(cast(void*)swigCPtr, Axis, low, high) ? true : false;
    return ret;
  }

  public bool ResetSelectionRange() {
    bool ret = vtkd_im.vtkPlotParallelCoordinates_ResetSelectionRange(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public override void SetInputData(vtkTable.vtkTable table) {
    vtkd_im.vtkPlotParallelCoordinates_SetInputData__SWIG_0(cast(void*)swigCPtr, vtkTable.vtkTable.swigGetCPtr(table));
  }

  public override void SetInputData(vtkTable.vtkTable table, vtkStdString.vtkStdString arg1, vtkStdString.vtkStdString arg2) {
    vtkd_im.vtkPlotParallelCoordinates_SetInputData__SWIG_1(cast(void*)swigCPtr, vtkTable.vtkTable.swigGetCPtr(table), vtkStdString.vtkStdString.swigGetCPtr(arg1), vtkStdString.vtkStdString.swigGetCPtr(arg2));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  alias vtkPlot.vtkPlot.SetInputData SetInputData;

  public void SetLookupTable(vtkScalarsToColors.vtkScalarsToColors lut) {
    vtkd_im.vtkPlotParallelCoordinates_SetLookupTable(cast(void*)swigCPtr, vtkScalarsToColors.vtkScalarsToColors.swigGetCPtr(lut));
  }

  public vtkScalarsToColors.vtkScalarsToColors GetLookupTable() {
    void* cPtr = vtkd_im.vtkPlotParallelCoordinates_GetLookupTable(cast(void*)swigCPtr);
    vtkScalarsToColors.vtkScalarsToColors ret = (cPtr is null) ? null : new vtkScalarsToColors.vtkScalarsToColors(cPtr, false);
    return ret;
  }

  public void CreateDefaultLookupTable() {
    vtkd_im.vtkPlotParallelCoordinates_CreateDefaultLookupTable(cast(void*)swigCPtr);
  }

  public void SetScalarVisibility(int _arg) {
    vtkd_im.vtkPlotParallelCoordinates_SetScalarVisibility(cast(void*)swigCPtr, _arg);
  }

  public int GetScalarVisibility() {
    auto ret = vtkd_im.vtkPlotParallelCoordinates_GetScalarVisibility(cast(void*)swigCPtr);
    return ret;
  }

  public void ScalarVisibilityOn() {
    vtkd_im.vtkPlotParallelCoordinates_ScalarVisibilityOn(cast(void*)swigCPtr);
  }

  public void ScalarVisibilityOff() {
    vtkd_im.vtkPlotParallelCoordinates_ScalarVisibilityOff(cast(void*)swigCPtr);
  }

  public void SelectColorArray(long arrayNum) {
    vtkd_im.vtkPlotParallelCoordinates_SelectColorArray__SWIG_0(cast(void*)swigCPtr, arrayNum);
  }

  public void SelectColorArray(vtkStdString.vtkStdString arrayName) {
    vtkd_im.vtkPlotParallelCoordinates_SelectColorArray__SWIG_1(cast(void*)swigCPtr, vtkStdString.vtkStdString.swigGetCPtr(arrayName));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public vtkStdString.vtkStdString GetColorArrayName() {
    vtkStdString.vtkStdString ret = new vtkStdString.vtkStdString(vtkd_im.vtkPlotParallelCoordinates_GetColorArrayName(cast(void*)swigCPtr), true);
    return ret;
  }

  public this() {
    this(vtkd_im.new_vtkPlotParallelCoordinates(), true);
  }
}
