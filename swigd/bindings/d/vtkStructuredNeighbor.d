/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkStructuredNeighbor;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import SWIGTYPE_p_int;

class vtkStructuredNeighbor {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(vtkStructuredNeighbor obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkStructuredNeighbor(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  enum NeighborOrientation {
    SUBSET_LO = -2,
    LO = -1,
    ONE_TO_ONE = 0,
    HI = 1,
    SUBSET_HI = 2,
    SUBSET_BOTH = 3,
    SUPERSET = 4,
    UNDEFINED = 5
  }

  public void NeighborID(int value) @property {
    vtkd_im.vtkStructuredNeighbor_NeighborID_set(cast(void*)swigCPtr, value);
  }

  public int NeighborID() @property const {
    auto ret = vtkd_im.vtkStructuredNeighbor_NeighborID_get(cast(void*)swigCPtr);
    return ret;
  }

  public void OverlapExtent(SWIGTYPE_p_int.SWIGTYPE_p_int value) @property {
    vtkd_im.vtkStructuredNeighbor_OverlapExtent_set(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(value));
  }

  public SWIGTYPE_p_int.SWIGTYPE_p_int OverlapExtent() @property const {
    void* cPtr = vtkd_im.vtkStructuredNeighbor_OverlapExtent_get(cast(void*)swigCPtr);
    SWIGTYPE_p_int.SWIGTYPE_p_int ret = (cPtr is null) ? null : new SWIGTYPE_p_int.SWIGTYPE_p_int(cPtr, false);
    return ret;
  }

  public void SendExtent(SWIGTYPE_p_int.SWIGTYPE_p_int value) @property {
    vtkd_im.vtkStructuredNeighbor_SendExtent_set(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(value));
  }

  public SWIGTYPE_p_int.SWIGTYPE_p_int SendExtent() @property const {
    void* cPtr = vtkd_im.vtkStructuredNeighbor_SendExtent_get(cast(void*)swigCPtr);
    SWIGTYPE_p_int.SWIGTYPE_p_int ret = (cPtr is null) ? null : new SWIGTYPE_p_int.SWIGTYPE_p_int(cPtr, false);
    return ret;
  }

  public void RcvExtent(SWIGTYPE_p_int.SWIGTYPE_p_int value) @property {
    vtkd_im.vtkStructuredNeighbor_RcvExtent_set(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(value));
  }

  public SWIGTYPE_p_int.SWIGTYPE_p_int RcvExtent() @property const {
    void* cPtr = vtkd_im.vtkStructuredNeighbor_RcvExtent_get(cast(void*)swigCPtr);
    SWIGTYPE_p_int.SWIGTYPE_p_int ret = (cPtr is null) ? null : new SWIGTYPE_p_int.SWIGTYPE_p_int(cPtr, false);
    return ret;
  }

  public void Orientation(SWIGTYPE_p_int.SWIGTYPE_p_int value) @property {
    vtkd_im.vtkStructuredNeighbor_Orientation_set(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(value));
  }

  public SWIGTYPE_p_int.SWIGTYPE_p_int Orientation() @property const {
    void* cPtr = vtkd_im.vtkStructuredNeighbor_Orientation_get(cast(void*)swigCPtr);
    SWIGTYPE_p_int.SWIGTYPE_p_int ret = (cPtr is null) ? null : new SWIGTYPE_p_int.SWIGTYPE_p_int(cPtr, false);
    return ret;
  }

  public this() {
    this(vtkd_im.new_vtkStructuredNeighbor__SWIG_0(), true);
  }

  public this(int NeiID, SWIGTYPE_p_int.SWIGTYPE_p_int overlap) {
    this(vtkd_im.new_vtkStructuredNeighbor__SWIG_1(NeiID, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(overlap)), true);
  }

  public this(int NeiID, SWIGTYPE_p_int.SWIGTYPE_p_int overlap, SWIGTYPE_p_int.SWIGTYPE_p_int orient) {
    this(vtkd_im.new_vtkStructuredNeighbor__SWIG_2(NeiID, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(overlap), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(orient)), true);
  }

  public this(vtkStructuredNeighbor N) {
    this(vtkd_im.new_vtkStructuredNeighbor__SWIG_3(vtkStructuredNeighbor.swigGetCPtr(N)), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public vtkStructuredNeighbor Equal(vtkStructuredNeighbor N) {
    vtkStructuredNeighbor ret = new vtkStructuredNeighbor(vtkd_im.vtkStructuredNeighbor_Equal(cast(void*)swigCPtr, vtkStructuredNeighbor.swigGetCPtr(N)), false);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ComputeSendAndReceiveExtent(SWIGTYPE_p_int.SWIGTYPE_p_int gridRealExtent, SWIGTYPE_p_int.SWIGTYPE_p_int gridGhostedExtent, SWIGTYPE_p_int.SWIGTYPE_p_int neiRealExtent, SWIGTYPE_p_int.SWIGTYPE_p_int WholeExtent, int N) {
    vtkd_im.vtkStructuredNeighbor_ComputeSendAndReceiveExtent(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(gridRealExtent), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(gridGhostedExtent), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(neiRealExtent), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(WholeExtent), N);
  }
}
