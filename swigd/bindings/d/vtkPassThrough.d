/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPassThrough;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkInformation;
static import vtkPassInputTypeAlgorithm;

class vtkPassThrough : vtkPassInputTypeAlgorithm.vtkPassInputTypeAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPassThrough_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPassThrough obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkPassThrough New() {
    void* cPtr = vtkd_im.vtkPassThrough_New();
    vtkPassThrough ret = (cPtr is null) ? null : new vtkPassThrough(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPassThrough_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPassThrough SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPassThrough_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPassThrough ret = (cPtr is null) ? null : new vtkPassThrough(cPtr, false);
    return ret;
  }

  public vtkPassThrough NewInstance() const {
    void* cPtr = vtkd_im.vtkPassThrough_NewInstance(cast(void*)swigCPtr);
    vtkPassThrough ret = (cPtr is null) ? null : new vtkPassThrough(cPtr, false);
    return ret;
  }

  alias vtkPassInputTypeAlgorithm.vtkPassInputTypeAlgorithm.NewInstance NewInstance;

  public int FillInputPortInformation(int port, vtkInformation.vtkInformation info) {
    auto ret = vtkd_im.vtkPassThrough_FillInputPortInformation(cast(void*)swigCPtr, port, vtkInformation.vtkInformation.swigGetCPtr(info));
    return ret;
  }

  public void SetDeepCopyInput(int _arg) {
    vtkd_im.vtkPassThrough_SetDeepCopyInput(cast(void*)swigCPtr, _arg);
  }

  public int GetDeepCopyInput() {
    auto ret = vtkd_im.vtkPassThrough_GetDeepCopyInput(cast(void*)swigCPtr);
    return ret;
  }

  public void DeepCopyInputOn() {
    vtkd_im.vtkPassThrough_DeepCopyInputOn(cast(void*)swigCPtr);
  }

  public void DeepCopyInputOff() {
    vtkd_im.vtkPassThrough_DeepCopyInputOff(cast(void*)swigCPtr);
  }
}
