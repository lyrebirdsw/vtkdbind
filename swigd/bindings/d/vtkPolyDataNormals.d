/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPolyDataNormals;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkPolyDataAlgorithm;

class vtkPolyDataNormals : vtkPolyDataAlgorithm.vtkPolyDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPolyDataNormals_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPolyDataNormals obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPolyDataNormals_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPolyDataNormals SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPolyDataNormals_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPolyDataNormals ret = (cPtr is null) ? null : new vtkPolyDataNormals(cPtr, false);
    return ret;
  }

  public vtkPolyDataNormals NewInstance() const {
    void* cPtr = vtkd_im.vtkPolyDataNormals_NewInstance(cast(void*)swigCPtr);
    vtkPolyDataNormals ret = (cPtr is null) ? null : new vtkPolyDataNormals(cPtr, false);
    return ret;
  }

  alias vtkPolyDataAlgorithm.vtkPolyDataAlgorithm.NewInstance NewInstance;

  public static vtkPolyDataNormals New() {
    void* cPtr = vtkd_im.vtkPolyDataNormals_New();
    vtkPolyDataNormals ret = (cPtr is null) ? null : new vtkPolyDataNormals(cPtr, false);
    return ret;
  }

  public void SetFeatureAngle(double _arg) {
    vtkd_im.vtkPolyDataNormals_SetFeatureAngle(cast(void*)swigCPtr, _arg);
  }

  public double GetFeatureAngleMinValue() {
    auto ret = vtkd_im.vtkPolyDataNormals_GetFeatureAngleMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetFeatureAngleMaxValue() {
    auto ret = vtkd_im.vtkPolyDataNormals_GetFeatureAngleMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetFeatureAngle() {
    auto ret = vtkd_im.vtkPolyDataNormals_GetFeatureAngle(cast(void*)swigCPtr);
    return ret;
  }

  public void SetSplitting(int _arg) {
    vtkd_im.vtkPolyDataNormals_SetSplitting(cast(void*)swigCPtr, _arg);
  }

  public int GetSplitting() {
    auto ret = vtkd_im.vtkPolyDataNormals_GetSplitting(cast(void*)swigCPtr);
    return ret;
  }

  public void SplittingOn() {
    vtkd_im.vtkPolyDataNormals_SplittingOn(cast(void*)swigCPtr);
  }

  public void SplittingOff() {
    vtkd_im.vtkPolyDataNormals_SplittingOff(cast(void*)swigCPtr);
  }

  public void SetConsistency(int _arg) {
    vtkd_im.vtkPolyDataNormals_SetConsistency(cast(void*)swigCPtr, _arg);
  }

  public int GetConsistency() {
    auto ret = vtkd_im.vtkPolyDataNormals_GetConsistency(cast(void*)swigCPtr);
    return ret;
  }

  public void ConsistencyOn() {
    vtkd_im.vtkPolyDataNormals_ConsistencyOn(cast(void*)swigCPtr);
  }

  public void ConsistencyOff() {
    vtkd_im.vtkPolyDataNormals_ConsistencyOff(cast(void*)swigCPtr);
  }

  public void SetAutoOrientNormals(int _arg) {
    vtkd_im.vtkPolyDataNormals_SetAutoOrientNormals(cast(void*)swigCPtr, _arg);
  }

  public int GetAutoOrientNormals() {
    auto ret = vtkd_im.vtkPolyDataNormals_GetAutoOrientNormals(cast(void*)swigCPtr);
    return ret;
  }

  public void AutoOrientNormalsOn() {
    vtkd_im.vtkPolyDataNormals_AutoOrientNormalsOn(cast(void*)swigCPtr);
  }

  public void AutoOrientNormalsOff() {
    vtkd_im.vtkPolyDataNormals_AutoOrientNormalsOff(cast(void*)swigCPtr);
  }

  public void SetComputePointNormals(int _arg) {
    vtkd_im.vtkPolyDataNormals_SetComputePointNormals(cast(void*)swigCPtr, _arg);
  }

  public int GetComputePointNormals() {
    auto ret = vtkd_im.vtkPolyDataNormals_GetComputePointNormals(cast(void*)swigCPtr);
    return ret;
  }

  public void ComputePointNormalsOn() {
    vtkd_im.vtkPolyDataNormals_ComputePointNormalsOn(cast(void*)swigCPtr);
  }

  public void ComputePointNormalsOff() {
    vtkd_im.vtkPolyDataNormals_ComputePointNormalsOff(cast(void*)swigCPtr);
  }

  public void SetComputeCellNormals(int _arg) {
    vtkd_im.vtkPolyDataNormals_SetComputeCellNormals(cast(void*)swigCPtr, _arg);
  }

  public int GetComputeCellNormals() {
    auto ret = vtkd_im.vtkPolyDataNormals_GetComputeCellNormals(cast(void*)swigCPtr);
    return ret;
  }

  public void ComputeCellNormalsOn() {
    vtkd_im.vtkPolyDataNormals_ComputeCellNormalsOn(cast(void*)swigCPtr);
  }

  public void ComputeCellNormalsOff() {
    vtkd_im.vtkPolyDataNormals_ComputeCellNormalsOff(cast(void*)swigCPtr);
  }

  public void SetFlipNormals(int _arg) {
    vtkd_im.vtkPolyDataNormals_SetFlipNormals(cast(void*)swigCPtr, _arg);
  }

  public int GetFlipNormals() {
    auto ret = vtkd_im.vtkPolyDataNormals_GetFlipNormals(cast(void*)swigCPtr);
    return ret;
  }

  public void FlipNormalsOn() {
    vtkd_im.vtkPolyDataNormals_FlipNormalsOn(cast(void*)swigCPtr);
  }

  public void FlipNormalsOff() {
    vtkd_im.vtkPolyDataNormals_FlipNormalsOff(cast(void*)swigCPtr);
  }

  public void SetNonManifoldTraversal(int _arg) {
    vtkd_im.vtkPolyDataNormals_SetNonManifoldTraversal(cast(void*)swigCPtr, _arg);
  }

  public int GetNonManifoldTraversal() {
    auto ret = vtkd_im.vtkPolyDataNormals_GetNonManifoldTraversal(cast(void*)swigCPtr);
    return ret;
  }

  public void NonManifoldTraversalOn() {
    vtkd_im.vtkPolyDataNormals_NonManifoldTraversalOn(cast(void*)swigCPtr);
  }

  public void NonManifoldTraversalOff() {
    vtkd_im.vtkPolyDataNormals_NonManifoldTraversalOff(cast(void*)swigCPtr);
  }

  public void SetOutputPointsPrecision(int _arg) {
    vtkd_im.vtkPolyDataNormals_SetOutputPointsPrecision(cast(void*)swigCPtr, _arg);
  }

  public int GetOutputPointsPrecisionMinValue() {
    auto ret = vtkd_im.vtkPolyDataNormals_GetOutputPointsPrecisionMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetOutputPointsPrecisionMaxValue() {
    auto ret = vtkd_im.vtkPolyDataNormals_GetOutputPointsPrecisionMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetOutputPointsPrecision() {
    auto ret = vtkd_im.vtkPolyDataNormals_GetOutputPointsPrecision(cast(void*)swigCPtr);
    return ret;
  }
}
