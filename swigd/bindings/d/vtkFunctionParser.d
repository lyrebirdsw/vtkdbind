/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkFunctionParser;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkObject;

class vtkFunctionParser : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkFunctionParser_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkFunctionParser obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkFunctionParser New() {
    void* cPtr = vtkd_im.vtkFunctionParser_New();
    vtkFunctionParser ret = (cPtr is null) ? null : new vtkFunctionParser(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkFunctionParser_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkFunctionParser SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkFunctionParser_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkFunctionParser ret = (cPtr is null) ? null : new vtkFunctionParser(cPtr, false);
    return ret;
  }

  public vtkFunctionParser NewInstance() const {
    void* cPtr = vtkd_im.vtkFunctionParser_NewInstance(cast(void*)swigCPtr);
    vtkFunctionParser ret = (cPtr is null) ? null : new vtkFunctionParser(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public void SetFunction(string arg0) {
    vtkd_im.vtkFunctionParser_SetFunction(cast(void*)swigCPtr, (arg0 ? std.string.toStringz(arg0) : null));
  }

  public string GetFunction() {
    string ret = std.conv.to!string(vtkd_im.vtkFunctionParser_GetFunction(cast(void*)swigCPtr));
    return ret;
  }

  public int IsScalarResult() {
    auto ret = vtkd_im.vtkFunctionParser_IsScalarResult(cast(void*)swigCPtr);
    return ret;
  }

  public int IsVectorResult() {
    auto ret = vtkd_im.vtkFunctionParser_IsVectorResult(cast(void*)swigCPtr);
    return ret;
  }

  public double GetScalarResult() {
    auto ret = vtkd_im.vtkFunctionParser_GetScalarResult(cast(void*)swigCPtr);
    return ret;
  }

  public double* GetVectorResult() {
    auto ret = cast(double*)vtkd_im.vtkFunctionParser_GetVectorResult__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetVectorResult(SWIGTYPE_p_double.SWIGTYPE_p_double result) {
    vtkd_im.vtkFunctionParser_GetVectorResult__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(result));
  }

  public void SetScalarVariableValue(string variableName, double value) {
    vtkd_im.vtkFunctionParser_SetScalarVariableValue__SWIG_0(cast(void*)swigCPtr, (variableName ? std.string.toStringz(variableName) : null), value);
  }

  public void SetScalarVariableValue(int i, double value) {
    vtkd_im.vtkFunctionParser_SetScalarVariableValue__SWIG_1(cast(void*)swigCPtr, i, value);
  }

  public double GetScalarVariableValue(string variableName) {
    auto ret = vtkd_im.vtkFunctionParser_GetScalarVariableValue__SWIG_0(cast(void*)swigCPtr, (variableName ? std.string.toStringz(variableName) : null));
    return ret;
  }

  public double GetScalarVariableValue(int i) {
    auto ret = vtkd_im.vtkFunctionParser_GetScalarVariableValue__SWIG_1(cast(void*)swigCPtr, i);
    return ret;
  }

  public void SetVectorVariableValue(string variableName, double xValue, double yValue, double zValue) {
    vtkd_im.vtkFunctionParser_SetVectorVariableValue__SWIG_0(cast(void*)swigCPtr, (variableName ? std.string.toStringz(variableName) : null), xValue, yValue, zValue);
  }

  public void SetVectorVariableValue(string variableName, SWIGTYPE_p_double.SWIGTYPE_p_double values) {
    vtkd_im.vtkFunctionParser_SetVectorVariableValue__SWIG_1(cast(void*)swigCPtr, (variableName ? std.string.toStringz(variableName) : null), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(values));
  }

  public void SetVectorVariableValue(int i, double xValue, double yValue, double zValue) {
    vtkd_im.vtkFunctionParser_SetVectorVariableValue__SWIG_2(cast(void*)swigCPtr, i, xValue, yValue, zValue);
  }

  public void SetVectorVariableValue(int i, SWIGTYPE_p_double.SWIGTYPE_p_double values) {
    vtkd_im.vtkFunctionParser_SetVectorVariableValue__SWIG_3(cast(void*)swigCPtr, i, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(values));
  }

  public double* GetVectorVariableValue(string variableName) {
    auto ret = cast(double*)vtkd_im.vtkFunctionParser_GetVectorVariableValue__SWIG_0(cast(void*)swigCPtr, (variableName ? std.string.toStringz(variableName) : null));
    return ret;
  }

  public void GetVectorVariableValue(string variableName, SWIGTYPE_p_double.SWIGTYPE_p_double value) {
    vtkd_im.vtkFunctionParser_GetVectorVariableValue__SWIG_1(cast(void*)swigCPtr, (variableName ? std.string.toStringz(variableName) : null), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(value));
  }

  public double* GetVectorVariableValue(int i) {
    auto ret = cast(double*)vtkd_im.vtkFunctionParser_GetVectorVariableValue__SWIG_2(cast(void*)swigCPtr, i);
    return ret;
  }

  public void GetVectorVariableValue(int i, SWIGTYPE_p_double.SWIGTYPE_p_double value) {
    vtkd_im.vtkFunctionParser_GetVectorVariableValue__SWIG_3(cast(void*)swigCPtr, i, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(value));
  }

  public int GetNumberOfScalarVariables() {
    auto ret = vtkd_im.vtkFunctionParser_GetNumberOfScalarVariables(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfVectorVariables() {
    auto ret = vtkd_im.vtkFunctionParser_GetNumberOfVectorVariables(cast(void*)swigCPtr);
    return ret;
  }

  public string GetScalarVariableName(int i) {
    string ret = std.conv.to!string(vtkd_im.vtkFunctionParser_GetScalarVariableName(cast(void*)swigCPtr, i));
    return ret;
  }

  public string GetVectorVariableName(int i) {
    string ret = std.conv.to!string(vtkd_im.vtkFunctionParser_GetVectorVariableName(cast(void*)swigCPtr, i));
    return ret;
  }

  public void RemoveAllVariables() {
    vtkd_im.vtkFunctionParser_RemoveAllVariables(cast(void*)swigCPtr);
  }

  public void RemoveScalarVariables() {
    vtkd_im.vtkFunctionParser_RemoveScalarVariables(cast(void*)swigCPtr);
  }

  public void RemoveVectorVariables() {
    vtkd_im.vtkFunctionParser_RemoveVectorVariables(cast(void*)swigCPtr);
  }

  public void SetReplaceInvalidValues(int _arg) {
    vtkd_im.vtkFunctionParser_SetReplaceInvalidValues(cast(void*)swigCPtr, _arg);
  }

  public int GetReplaceInvalidValues() {
    auto ret = vtkd_im.vtkFunctionParser_GetReplaceInvalidValues(cast(void*)swigCPtr);
    return ret;
  }

  public void ReplaceInvalidValuesOn() {
    vtkd_im.vtkFunctionParser_ReplaceInvalidValuesOn(cast(void*)swigCPtr);
  }

  public void ReplaceInvalidValuesOff() {
    vtkd_im.vtkFunctionParser_ReplaceInvalidValuesOff(cast(void*)swigCPtr);
  }

  public void SetReplacementValue(double _arg) {
    vtkd_im.vtkFunctionParser_SetReplacementValue(cast(void*)swigCPtr, _arg);
  }

  public double GetReplacementValue() {
    auto ret = vtkd_im.vtkFunctionParser_GetReplacementValue(cast(void*)swigCPtr);
    return ret;
  }

  public void CheckExpression(int* pos, char** error) {
    vtkd_im.vtkFunctionParser_CheckExpression(cast(void*)swigCPtr, cast(void*)pos, cast(void*)error);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void InvalidateFunction() {
    vtkd_im.vtkFunctionParser_InvalidateFunction(cast(void*)swigCPtr);
  }
}
