/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkGL2PSUtilities;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkTextProperty;
static import SWIGTYPE_p_double;
static import vtkRenderWindow;
static import vtkPath;
static import vtkMatrix4x4;
static import SWIGTYPE_p_unsigned_char;
static import vtkObject;

class vtkGL2PSUtilities : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkGL2PSUtilities_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkGL2PSUtilities obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkGL2PSUtilities New() {
    void* cPtr = vtkd_im.vtkGL2PSUtilities_New();
    vtkGL2PSUtilities ret = (cPtr is null) ? null : new vtkGL2PSUtilities(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkGL2PSUtilities_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkGL2PSUtilities SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkGL2PSUtilities_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkGL2PSUtilities ret = (cPtr is null) ? null : new vtkGL2PSUtilities(cPtr, false);
    return ret;
  }

  public vtkGL2PSUtilities NewInstance() const {
    void* cPtr = vtkd_im.vtkGL2PSUtilities_NewInstance(cast(void*)swigCPtr);
    vtkGL2PSUtilities ret = (cPtr is null) ? null : new vtkGL2PSUtilities(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public static void DrawString(string str, vtkTextProperty.vtkTextProperty tprop, SWIGTYPE_p_double.SWIGTYPE_p_double pos) {
    vtkd_im.vtkGL2PSUtilities_DrawString((str ? std.string.toStringz(str) : null), vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pos));
  }

  public static string TextPropertyToPSFontName(vtkTextProperty.vtkTextProperty tprop) {
    string ret = std.conv.to!string(vtkd_im.vtkGL2PSUtilities_TextPropertyToPSFontName(vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop)));
    return ret;
  }

  public static int TextPropertyToGL2PSAlignment(vtkTextProperty.vtkTextProperty tprop) {
    auto ret = vtkd_im.vtkGL2PSUtilities_TextPropertyToGL2PSAlignment(vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop));
    return ret;
  }

  public static vtkRenderWindow.vtkRenderWindow GetRenderWindow() {
    void* cPtr = vtkd_im.vtkGL2PSUtilities_GetRenderWindow();
    vtkRenderWindow.vtkRenderWindow ret = (cPtr is null) ? null : new vtkRenderWindow.vtkRenderWindow(cPtr, false);
    return ret;
  }

  public static void Draw3DPath(vtkPath.vtkPath path, vtkMatrix4x4.vtkMatrix4x4 actorMatrix, SWIGTYPE_p_double.SWIGTYPE_p_double rasterPos, SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char actorColor) {
    vtkd_im.vtkGL2PSUtilities_Draw3DPath(vtkPath.vtkPath.swigGetCPtr(path), vtkMatrix4x4.vtkMatrix4x4.swigGetCPtr(actorMatrix), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(rasterPos), SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char.swigGetCPtr(actorColor));
  }

  public static void DrawPath(vtkPath.vtkPath path, SWIGTYPE_p_double.SWIGTYPE_p_double rasterPos, SWIGTYPE_p_double.SWIGTYPE_p_double windowPos, SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char rgba, SWIGTYPE_p_double.SWIGTYPE_p_double scale, double rotateAngle, float strokeWidth) {
    vtkd_im.vtkGL2PSUtilities_DrawPath__SWIG_0(vtkPath.vtkPath.swigGetCPtr(path), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(rasterPos), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(windowPos), SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char.swigGetCPtr(rgba), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(scale), rotateAngle, strokeWidth);
  }

  public static void DrawPath(vtkPath.vtkPath path, SWIGTYPE_p_double.SWIGTYPE_p_double rasterPos, SWIGTYPE_p_double.SWIGTYPE_p_double windowPos, SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char rgba, SWIGTYPE_p_double.SWIGTYPE_p_double scale, double rotateAngle) {
    vtkd_im.vtkGL2PSUtilities_DrawPath__SWIG_1(vtkPath.vtkPath.swigGetCPtr(path), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(rasterPos), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(windowPos), SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char.swigGetCPtr(rgba), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(scale), rotateAngle);
  }

  public static void DrawPath(vtkPath.vtkPath path, SWIGTYPE_p_double.SWIGTYPE_p_double rasterPos, SWIGTYPE_p_double.SWIGTYPE_p_double windowPos, SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char rgba, SWIGTYPE_p_double.SWIGTYPE_p_double scale) {
    vtkd_im.vtkGL2PSUtilities_DrawPath__SWIG_2(vtkPath.vtkPath.swigGetCPtr(path), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(rasterPos), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(windowPos), SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char.swigGetCPtr(rgba), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(scale));
  }

  public static void DrawPath(vtkPath.vtkPath path, SWIGTYPE_p_double.SWIGTYPE_p_double rasterPos, SWIGTYPE_p_double.SWIGTYPE_p_double windowPos, SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char rgba) {
    vtkd_im.vtkGL2PSUtilities_DrawPath__SWIG_3(vtkPath.vtkPath.swigGetCPtr(path), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(rasterPos), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(windowPos), SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char.swigGetCPtr(rgba));
  }

  public static bool GetTextAsPath() {
    bool ret = vtkd_im.vtkGL2PSUtilities_GetTextAsPath() ? true : false;
    return ret;
  }

  public static float GetPointSizeFactor() {
    auto ret = vtkd_im.vtkGL2PSUtilities_GetPointSizeFactor();
    return ret;
  }

  public static float GetLineWidthFactor() {
    auto ret = vtkd_im.vtkGL2PSUtilities_GetLineWidthFactor();
    return ret;
  }
}
