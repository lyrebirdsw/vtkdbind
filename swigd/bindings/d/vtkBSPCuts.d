/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkBSPCuts;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkKdNode;
static import vtkDataObject;

class vtkBSPCuts : vtkDataObject.vtkDataObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkBSPCuts_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkBSPCuts obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkBSPCuts New() {
    void* cPtr = vtkd_im.vtkBSPCuts_New();
    vtkBSPCuts ret = (cPtr is null) ? null : new vtkBSPCuts(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkBSPCuts_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkBSPCuts SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkBSPCuts_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkBSPCuts ret = (cPtr is null) ? null : new vtkBSPCuts(cPtr, false);
    return ret;
  }

  public vtkBSPCuts NewInstance() const {
    void* cPtr = vtkd_im.vtkBSPCuts_NewInstance(cast(void*)swigCPtr);
    vtkBSPCuts ret = (cPtr is null) ? null : new vtkBSPCuts(cPtr, false);
    return ret;
  }

  alias vtkDataObject.vtkDataObject.NewInstance NewInstance;

  public void CreateCuts(double* bounds, int ncuts, int* dim, double* coord, int* lower, int* upper, double* lowerDataCoord, double* upperDataCoord, int* npoints) {
    vtkd_im.vtkBSPCuts_CreateCuts__SWIG_0(cast(void*)swigCPtr, cast(void*)bounds, ncuts, cast(void*)dim, cast(void*)coord, cast(void*)lower, cast(void*)upper, cast(void*)lowerDataCoord, cast(void*)upperDataCoord, cast(void*)npoints);
  }

  public void CreateCuts(vtkKdNode.vtkKdNode kd) {
    vtkd_im.vtkBSPCuts_CreateCuts__SWIG_1(cast(void*)swigCPtr, vtkKdNode.vtkKdNode.swigGetCPtr(kd));
  }

  public vtkKdNode.vtkKdNode GetKdNodeTree() {
    void* cPtr = vtkd_im.vtkBSPCuts_GetKdNodeTree(cast(void*)swigCPtr);
    vtkKdNode.vtkKdNode ret = (cPtr is null) ? null : new vtkKdNode.vtkKdNode(cPtr, false);
    return ret;
  }

  public int GetNumberOfCuts() {
    auto ret = vtkd_im.vtkBSPCuts_GetNumberOfCuts(cast(void*)swigCPtr);
    return ret;
  }

  public int GetArrays(int len, int* dim, double* coord, int* lower, int* upper, double* lowerDataCoord, double* upperDataCoord, int* npoints) {
    auto ret = vtkd_im.vtkBSPCuts_GetArrays(cast(void*)swigCPtr, len, cast(void*)dim, cast(void*)coord, cast(void*)lower, cast(void*)upper, cast(void*)lowerDataCoord, cast(void*)upperDataCoord, cast(void*)npoints);
    return ret;
  }

  public int Equals(vtkBSPCuts other, double tolerance) {
    auto ret = vtkd_im.vtkBSPCuts_Equals__SWIG_0(cast(void*)swigCPtr, vtkBSPCuts.swigGetCPtr(other), tolerance);
    return ret;
  }

  public int Equals(vtkBSPCuts other) {
    auto ret = vtkd_im.vtkBSPCuts_Equals__SWIG_1(cast(void*)swigCPtr, vtkBSPCuts.swigGetCPtr(other));
    return ret;
  }

  public void PrintTree() {
    vtkd_im.vtkBSPCuts_PrintTree(cast(void*)swigCPtr);
  }

  public void PrintArrays() {
    vtkd_im.vtkBSPCuts_PrintArrays(cast(void*)swigCPtr);
  }
}
