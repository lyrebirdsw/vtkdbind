/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkImageHistogramStatistics;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkImageHistogram;

class vtkImageHistogramStatistics : vtkImageHistogram.vtkImageHistogram {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkImageHistogramStatistics_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkImageHistogramStatistics obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkImageHistogramStatistics New() {
    void* cPtr = vtkd_im.vtkImageHistogramStatistics_New();
    vtkImageHistogramStatistics ret = (cPtr is null) ? null : new vtkImageHistogramStatistics(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkImageHistogramStatistics_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkImageHistogramStatistics SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkImageHistogramStatistics_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkImageHistogramStatistics ret = (cPtr is null) ? null : new vtkImageHistogramStatistics(cPtr, false);
    return ret;
  }

  public vtkImageHistogramStatistics NewInstance() const {
    void* cPtr = vtkd_im.vtkImageHistogramStatistics_NewInstance(cast(void*)swigCPtr);
    vtkImageHistogramStatistics ret = (cPtr is null) ? null : new vtkImageHistogramStatistics(cPtr, false);
    return ret;
  }

  alias vtkImageHistogram.vtkImageHistogram.NewInstance NewInstance;

  public double GetMinimum() {
    auto ret = vtkd_im.vtkImageHistogramStatistics_GetMinimum(cast(void*)swigCPtr);
    return ret;
  }

  public double GetMaximum() {
    auto ret = vtkd_im.vtkImageHistogramStatistics_GetMaximum(cast(void*)swigCPtr);
    return ret;
  }

  public double GetMean() {
    auto ret = vtkd_im.vtkImageHistogramStatistics_GetMean(cast(void*)swigCPtr);
    return ret;
  }

  public double GetMedian() {
    auto ret = vtkd_im.vtkImageHistogramStatistics_GetMedian(cast(void*)swigCPtr);
    return ret;
  }

  public double GetStandardDeviation() {
    auto ret = vtkd_im.vtkImageHistogramStatistics_GetStandardDeviation(cast(void*)swigCPtr);
    return ret;
  }

  public void SetAutoRangePercentiles(double _arg1, double _arg2) {
    vtkd_im.vtkImageHistogramStatistics_SetAutoRangePercentiles__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2);
  }

  public void SetAutoRangePercentiles(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkImageHistogramStatistics_SetAutoRangePercentiles__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetAutoRangePercentiles() {
    auto ret = cast(double*)vtkd_im.vtkImageHistogramStatistics_GetAutoRangePercentiles__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetAutoRangePercentiles(double* _arg1, double* _arg2) {
    vtkd_im.vtkImageHistogramStatistics_GetAutoRangePercentiles__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetAutoRangePercentiles(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkImageHistogramStatistics_GetAutoRangePercentiles__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public void SetAutoRangeExpansionFactors(double _arg1, double _arg2) {
    vtkd_im.vtkImageHistogramStatistics_SetAutoRangeExpansionFactors__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2);
  }

  public void SetAutoRangeExpansionFactors(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkImageHistogramStatistics_SetAutoRangeExpansionFactors__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetAutoRangeExpansionFactors() {
    auto ret = cast(double*)vtkd_im.vtkImageHistogramStatistics_GetAutoRangeExpansionFactors__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetAutoRangeExpansionFactors(double* _arg1, double* _arg2) {
    vtkd_im.vtkImageHistogramStatistics_GetAutoRangeExpansionFactors__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetAutoRangeExpansionFactors(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkImageHistogramStatistics_GetAutoRangeExpansionFactors__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetAutoRange() {
    auto ret = cast(double*)vtkd_im.vtkImageHistogramStatistics_GetAutoRange__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetAutoRange(double* _arg1, double* _arg2) {
    vtkd_im.vtkImageHistogramStatistics_GetAutoRange__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetAutoRange(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkImageHistogramStatistics_GetAutoRange__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }
}
