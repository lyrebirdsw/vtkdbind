/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkCellLinks;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_Link;
static import vtkDataSet;
static import vtkCellArray;
static import vtkObject;

class vtkCellLinks : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkCellLinks_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkCellLinks obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkCellLinks New() {
    void* cPtr = vtkd_im.vtkCellLinks_New();
    vtkCellLinks ret = (cPtr is null) ? null : new vtkCellLinks(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkCellLinks_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkCellLinks SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkCellLinks_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkCellLinks ret = (cPtr is null) ? null : new vtkCellLinks(cPtr, false);
    return ret;
  }

  public vtkCellLinks NewInstance() const {
    void* cPtr = vtkd_im.vtkCellLinks_NewInstance(cast(void*)swigCPtr);
    vtkCellLinks ret = (cPtr is null) ? null : new vtkCellLinks(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public void Allocate(long numLinks, long ext) {
    vtkd_im.vtkCellLinks_Allocate__SWIG_0(cast(void*)swigCPtr, numLinks, ext);
  }

  public void Allocate(long numLinks) {
    vtkd_im.vtkCellLinks_Allocate__SWIG_1(cast(void*)swigCPtr, numLinks);
  }

  public SWIGTYPE_p_Link.SWIGTYPE_p_Link GetLink(long ptId) {
    SWIGTYPE_p_Link.SWIGTYPE_p_Link ret = new SWIGTYPE_p_Link.SWIGTYPE_p_Link(vtkd_im.vtkCellLinks_GetLink(cast(void*)swigCPtr, ptId), false);
    return ret;
  }

  public ushort GetNcells(long ptId) {
    auto ret = vtkd_im.vtkCellLinks_GetNcells(cast(void*)swigCPtr, ptId);
    return ret;
  }

  public void BuildLinks(vtkDataSet.vtkDataSet data) {
    vtkd_im.vtkCellLinks_BuildLinks__SWIG_0(cast(void*)swigCPtr, vtkDataSet.vtkDataSet.swigGetCPtr(data));
  }

  public void BuildLinks(vtkDataSet.vtkDataSet data, vtkCellArray.vtkCellArray Connectivity) {
    vtkd_im.vtkCellLinks_BuildLinks__SWIG_1(cast(void*)swigCPtr, vtkDataSet.vtkDataSet.swigGetCPtr(data), vtkCellArray.vtkCellArray.swigGetCPtr(Connectivity));
  }

  public long* GetCells(long ptId) {
    auto ret = cast(long*)vtkd_im.vtkCellLinks_GetCells(cast(void*)swigCPtr, ptId);
    return ret;
  }

  public long InsertNextPoint(int numLinks) {
    auto ret = vtkd_im.vtkCellLinks_InsertNextPoint(cast(void*)swigCPtr, numLinks);
    return ret;
  }

  public void InsertNextCellReference(long ptId, long cellId) {
    vtkd_im.vtkCellLinks_InsertNextCellReference(cast(void*)swigCPtr, ptId, cellId);
  }

  public void DeletePoint(long ptId) {
    vtkd_im.vtkCellLinks_DeletePoint(cast(void*)swigCPtr, ptId);
  }

  public void RemoveCellReference(long cellId, long ptId) {
    vtkd_im.vtkCellLinks_RemoveCellReference(cast(void*)swigCPtr, cellId, ptId);
  }

  public void AddCellReference(long cellId, long ptId) {
    vtkd_im.vtkCellLinks_AddCellReference(cast(void*)swigCPtr, cellId, ptId);
  }

  public void ResizeCellList(long ptId, int size) {
    vtkd_im.vtkCellLinks_ResizeCellList(cast(void*)swigCPtr, ptId, size);
  }

  public void Squeeze() {
    vtkd_im.vtkCellLinks_Squeeze(cast(void*)swigCPtr);
  }

  public void Reset() {
    vtkd_im.vtkCellLinks_Reset(cast(void*)swigCPtr);
  }

  public core.stdc.config.c_ulong GetActualMemorySize() {
    auto ret = vtkd_im.vtkCellLinks_GetActualMemorySize(cast(void*)swigCPtr);
    return ret;
  }

  public void DeepCopy(vtkCellLinks src) {
    vtkd_im.vtkCellLinks_DeepCopy(cast(void*)swigCPtr, vtkCellLinks.swigGetCPtr(src));
  }
}
