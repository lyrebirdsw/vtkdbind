/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkOrderedTriangulator;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkUnstructuredGrid;
static import vtkCellArray;
static import vtkIncrementalPointLocator;
static import vtkPointData;
static import vtkCellData;
static import vtkIdList;
static import vtkPoints;
static import vtkTetra;
static import vtkDataArray;
static import vtkDoubleArray;
static import vtkObject;

class vtkOrderedTriangulator : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkOrderedTriangulator_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkOrderedTriangulator obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkOrderedTriangulator_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkOrderedTriangulator SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkOrderedTriangulator_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkOrderedTriangulator ret = (cPtr is null) ? null : new vtkOrderedTriangulator(cPtr, false);
    return ret;
  }

  public vtkOrderedTriangulator NewInstance() const {
    void* cPtr = vtkd_im.vtkOrderedTriangulator_NewInstance(cast(void*)swigCPtr);
    vtkOrderedTriangulator ret = (cPtr is null) ? null : new vtkOrderedTriangulator(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public static vtkOrderedTriangulator New() {
    void* cPtr = vtkd_im.vtkOrderedTriangulator_New();
    vtkOrderedTriangulator ret = (cPtr is null) ? null : new vtkOrderedTriangulator(cPtr, false);
    return ret;
  }

  public void InitTriangulation(double xmin, double xmax, double ymin, double ymax, double zmin, double zmax, int numPts) {
    vtkd_im.vtkOrderedTriangulator_InitTriangulation__SWIG_0(cast(void*)swigCPtr, xmin, xmax, ymin, ymax, zmin, zmax, numPts);
  }

  public void InitTriangulation(SWIGTYPE_p_double.SWIGTYPE_p_double bounds, int numPts) {
    vtkd_im.vtkOrderedTriangulator_InitTriangulation__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds), numPts);
  }

  public long InsertPoint(long id, SWIGTYPE_p_double.SWIGTYPE_p_double x, SWIGTYPE_p_double.SWIGTYPE_p_double p, int type) {
    auto ret = vtkd_im.vtkOrderedTriangulator_InsertPoint__SWIG_0(cast(void*)swigCPtr, id, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p), type);
    return ret;
  }

  public long InsertPoint(long id, long sortid, SWIGTYPE_p_double.SWIGTYPE_p_double x, SWIGTYPE_p_double.SWIGTYPE_p_double p, int type) {
    auto ret = vtkd_im.vtkOrderedTriangulator_InsertPoint__SWIG_1(cast(void*)swigCPtr, id, sortid, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p), type);
    return ret;
  }

  public long InsertPoint(long id, long sortid, long sortid2, SWIGTYPE_p_double.SWIGTYPE_p_double x, SWIGTYPE_p_double.SWIGTYPE_p_double p, int type) {
    auto ret = vtkd_im.vtkOrderedTriangulator_InsertPoint__SWIG_2(cast(void*)swigCPtr, id, sortid, sortid2, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p), type);
    return ret;
  }

  public void Triangulate() {
    vtkd_im.vtkOrderedTriangulator_Triangulate(cast(void*)swigCPtr);
  }

  public void TemplateTriangulate(int cellType, int numPts, int numEdges) {
    vtkd_im.vtkOrderedTriangulator_TemplateTriangulate(cast(void*)swigCPtr, cellType, numPts, numEdges);
  }

  public void UpdatePointType(long internalId, int type) {
    vtkd_im.vtkOrderedTriangulator_UpdatePointType(cast(void*)swigCPtr, internalId, type);
  }

  public double* GetPointPosition(long internalId) {
    auto ret = cast(double*)vtkd_im.vtkOrderedTriangulator_GetPointPosition(cast(void*)swigCPtr, internalId);
    return ret;
  }

  public double* GetPointLocation(long internalId) {
    auto ret = cast(double*)vtkd_im.vtkOrderedTriangulator_GetPointLocation(cast(void*)swigCPtr, internalId);
    return ret;
  }

  public long GetPointId(long internalId) {
    auto ret = vtkd_im.vtkOrderedTriangulator_GetPointId(cast(void*)swigCPtr, internalId);
    return ret;
  }

  public int GetNumberOfPoints() {
    auto ret = vtkd_im.vtkOrderedTriangulator_GetNumberOfPoints(cast(void*)swigCPtr);
    return ret;
  }

  public void SetUseTemplates(int _arg) {
    vtkd_im.vtkOrderedTriangulator_SetUseTemplates(cast(void*)swigCPtr, _arg);
  }

  public int GetUseTemplates() {
    auto ret = vtkd_im.vtkOrderedTriangulator_GetUseTemplates(cast(void*)swigCPtr);
    return ret;
  }

  public void UseTemplatesOn() {
    vtkd_im.vtkOrderedTriangulator_UseTemplatesOn(cast(void*)swigCPtr);
  }

  public void UseTemplatesOff() {
    vtkd_im.vtkOrderedTriangulator_UseTemplatesOff(cast(void*)swigCPtr);
  }

  public void SetPreSorted(int _arg) {
    vtkd_im.vtkOrderedTriangulator_SetPreSorted(cast(void*)swigCPtr, _arg);
  }

  public int GetPreSorted() {
    auto ret = vtkd_im.vtkOrderedTriangulator_GetPreSorted(cast(void*)swigCPtr);
    return ret;
  }

  public void PreSortedOn() {
    vtkd_im.vtkOrderedTriangulator_PreSortedOn(cast(void*)swigCPtr);
  }

  public void PreSortedOff() {
    vtkd_im.vtkOrderedTriangulator_PreSortedOff(cast(void*)swigCPtr);
  }

  public void SetUseTwoSortIds(int _arg) {
    vtkd_im.vtkOrderedTriangulator_SetUseTwoSortIds(cast(void*)swigCPtr, _arg);
  }

  public int GetUseTwoSortIds() {
    auto ret = vtkd_im.vtkOrderedTriangulator_GetUseTwoSortIds(cast(void*)swigCPtr);
    return ret;
  }

  public void UseTwoSortIdsOn() {
    vtkd_im.vtkOrderedTriangulator_UseTwoSortIdsOn(cast(void*)swigCPtr);
  }

  public void UseTwoSortIdsOff() {
    vtkd_im.vtkOrderedTriangulator_UseTwoSortIdsOff(cast(void*)swigCPtr);
  }

  public long GetTetras(int classification, vtkUnstructuredGrid.vtkUnstructuredGrid ugrid) {
    auto ret = vtkd_im.vtkOrderedTriangulator_GetTetras(cast(void*)swigCPtr, classification, vtkUnstructuredGrid.vtkUnstructuredGrid.swigGetCPtr(ugrid));
    return ret;
  }

  public long AddTetras(int classification, vtkUnstructuredGrid.vtkUnstructuredGrid ugrid) {
    auto ret = vtkd_im.vtkOrderedTriangulator_AddTetras__SWIG_0(cast(void*)swigCPtr, classification, vtkUnstructuredGrid.vtkUnstructuredGrid.swigGetCPtr(ugrid));
    return ret;
  }

  public long AddTetras(int classification, vtkCellArray.vtkCellArray connectivity) {
    auto ret = vtkd_im.vtkOrderedTriangulator_AddTetras__SWIG_1(cast(void*)swigCPtr, classification, vtkCellArray.vtkCellArray.swigGetCPtr(connectivity));
    return ret;
  }

  public long AddTetras(int classification, vtkIncrementalPointLocator.vtkIncrementalPointLocator locator, vtkCellArray.vtkCellArray outConnectivity, vtkPointData.vtkPointData inPD, vtkPointData.vtkPointData outPD, vtkCellData.vtkCellData inCD, long cellId, vtkCellData.vtkCellData outCD) {
    auto ret = vtkd_im.vtkOrderedTriangulator_AddTetras__SWIG_2(cast(void*)swigCPtr, classification, vtkIncrementalPointLocator.vtkIncrementalPointLocator.swigGetCPtr(locator), vtkCellArray.vtkCellArray.swigGetCPtr(outConnectivity), vtkPointData.vtkPointData.swigGetCPtr(inPD), vtkPointData.vtkPointData.swigGetCPtr(outPD), vtkCellData.vtkCellData.swigGetCPtr(inCD), cellId, vtkCellData.vtkCellData.swigGetCPtr(outCD));
    return ret;
  }

  public long AddTetras(int classification, vtkIdList.vtkIdList ptIds, vtkPoints.vtkPoints pts) {
    auto ret = vtkd_im.vtkOrderedTriangulator_AddTetras__SWIG_3(cast(void*)swigCPtr, classification, vtkIdList.vtkIdList.swigGetCPtr(ptIds), vtkPoints.vtkPoints.swigGetCPtr(pts));
    return ret;
  }

  public long AddTriangles(vtkCellArray.vtkCellArray connectivity) {
    auto ret = vtkd_im.vtkOrderedTriangulator_AddTriangles__SWIG_0(cast(void*)swigCPtr, vtkCellArray.vtkCellArray.swigGetCPtr(connectivity));
    return ret;
  }

  public long AddTriangles(long id, vtkCellArray.vtkCellArray connectivity) {
    auto ret = vtkd_im.vtkOrderedTriangulator_AddTriangles__SWIG_1(cast(void*)swigCPtr, id, vtkCellArray.vtkCellArray.swigGetCPtr(connectivity));
    return ret;
  }

  public void InitTetraTraversal() {
    vtkd_im.vtkOrderedTriangulator_InitTetraTraversal(cast(void*)swigCPtr);
  }

  public int GetNextTetra(int classification, vtkTetra.vtkTetra tet, vtkDataArray.vtkDataArray cellScalars, vtkDoubleArray.vtkDoubleArray tetScalars) {
    auto ret = vtkd_im.vtkOrderedTriangulator_GetNextTetra(cast(void*)swigCPtr, classification, vtkTetra.vtkTetra.swigGetCPtr(tet), vtkDataArray.vtkDataArray.swigGetCPtr(cellScalars), vtkDoubleArray.vtkDoubleArray.swigGetCPtr(tetScalars));
    return ret;
  }
}
