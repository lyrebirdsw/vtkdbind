/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkAMRBaseParticlesReader;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkMultiProcessController;
static import vtkDataArraySelection;
static import vtkMultiBlockDataSetAlgorithm;

class vtkAMRBaseParticlesReader : vtkMultiBlockDataSetAlgorithm.vtkMultiBlockDataSetAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkAMRBaseParticlesReader_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkAMRBaseParticlesReader obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkAMRBaseParticlesReader_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkAMRBaseParticlesReader SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkAMRBaseParticlesReader_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkAMRBaseParticlesReader ret = (cPtr is null) ? null : new vtkAMRBaseParticlesReader(cPtr, false);
    return ret;
  }

  public vtkAMRBaseParticlesReader NewInstance() const {
    void* cPtr = vtkd_im.vtkAMRBaseParticlesReader_NewInstance(cast(void*)swigCPtr);
    vtkAMRBaseParticlesReader ret = (cPtr is null) ? null : new vtkAMRBaseParticlesReader(cPtr, false);
    return ret;
  }

  alias vtkMultiBlockDataSetAlgorithm.vtkMultiBlockDataSetAlgorithm.NewInstance NewInstance;

  public int GetFrequency() {
    auto ret = vtkd_im.vtkAMRBaseParticlesReader_GetFrequency(cast(void*)swigCPtr);
    return ret;
  }

  public void SetFrequency(int _arg) {
    vtkd_im.vtkAMRBaseParticlesReader_SetFrequency(cast(void*)swigCPtr, _arg);
  }

  public vtkMultiProcessController.vtkMultiProcessController GetController() {
    void* cPtr = vtkd_im.vtkAMRBaseParticlesReader_GetController(cast(void*)swigCPtr);
    vtkMultiProcessController.vtkMultiProcessController ret = (cPtr is null) ? null : new vtkMultiProcessController.vtkMultiProcessController(cPtr, false);
    return ret;
  }

  public void SetController(vtkMultiProcessController.vtkMultiProcessController _arg) {
    vtkd_im.vtkAMRBaseParticlesReader_SetController(cast(void*)swigCPtr, vtkMultiProcessController.vtkMultiProcessController.swigGetCPtr(_arg));
  }

  public void SetFilterLocation(int _arg) {
    vtkd_im.vtkAMRBaseParticlesReader_SetFilterLocation(cast(void*)swigCPtr, _arg);
  }

  public int GetFilterLocation() {
    auto ret = vtkd_im.vtkAMRBaseParticlesReader_GetFilterLocation(cast(void*)swigCPtr);
    return ret;
  }

  public void FilterLocationOn() {
    vtkd_im.vtkAMRBaseParticlesReader_FilterLocationOn(cast(void*)swigCPtr);
  }

  public void FilterLocationOff() {
    vtkd_im.vtkAMRBaseParticlesReader_FilterLocationOff(cast(void*)swigCPtr);
  }

  public vtkDataArraySelection.vtkDataArraySelection GetParticleDataArraySelection() {
    void* cPtr = vtkd_im.vtkAMRBaseParticlesReader_GetParticleDataArraySelection(cast(void*)swigCPtr);
    vtkDataArraySelection.vtkDataArraySelection ret = (cPtr is null) ? null : new vtkDataArraySelection.vtkDataArraySelection(cPtr, false);
    return ret;
  }

  public int GetNumberOfParticleArrays() {
    auto ret = vtkd_im.vtkAMRBaseParticlesReader_GetNumberOfParticleArrays(cast(void*)swigCPtr);
    return ret;
  }

  public string GetParticleArrayName(int index) {
    string ret = std.conv.to!string(vtkd_im.vtkAMRBaseParticlesReader_GetParticleArrayName(cast(void*)swigCPtr, index));
    return ret;
  }

  public int GetParticleArrayStatus(string name) {
    auto ret = vtkd_im.vtkAMRBaseParticlesReader_GetParticleArrayStatus(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
    return ret;
  }

  public void SetParticleArrayStatus(string name, int status) {
    vtkd_im.vtkAMRBaseParticlesReader_SetParticleArrayStatus(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), status);
  }

  public void SetFileName(string fileName) {
    vtkd_im.vtkAMRBaseParticlesReader_SetFileName(cast(void*)swigCPtr, (fileName ? std.string.toStringz(fileName) : null));
  }

  public string GetFileName() {
    string ret = std.conv.to!string(vtkd_im.vtkAMRBaseParticlesReader_GetFileName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetMinLocation(double minx, double miny, double minz) {
    vtkd_im.vtkAMRBaseParticlesReader_SetMinLocation(cast(void*)swigCPtr, minx, miny, minz);
  }

  public void SetMaxLocation(double maxx, double maxy, double maxz) {
    vtkd_im.vtkAMRBaseParticlesReader_SetMaxLocation(cast(void*)swigCPtr, maxx, maxy, maxz);
  }

  public int GetTotalNumberOfParticles() {
    auto ret = vtkd_im.vtkAMRBaseParticlesReader_GetTotalNumberOfParticles(cast(void*)swigCPtr);
    return ret;
  }
}
