/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkGraphMapper;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkTexture;
static import vtkGraph;
static import vtkLookupTable;
static import vtkMapper;

class vtkGraphMapper : vtkMapper.vtkMapper {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkGraphMapper_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkGraphMapper obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkGraphMapper New() {
    void* cPtr = vtkd_im.vtkGraphMapper_New();
    vtkGraphMapper ret = (cPtr is null) ? null : new vtkGraphMapper(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkGraphMapper_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkGraphMapper SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkGraphMapper_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkGraphMapper ret = (cPtr is null) ? null : new vtkGraphMapper(cPtr, false);
    return ret;
  }

  public vtkGraphMapper NewInstance() const {
    void* cPtr = vtkd_im.vtkGraphMapper_NewInstance(cast(void*)swigCPtr);
    vtkGraphMapper ret = (cPtr is null) ? null : new vtkGraphMapper(cPtr, false);
    return ret;
  }

  alias vtkMapper.vtkMapper.NewInstance NewInstance;

  public void SetVertexColorArrayName(string name) {
    vtkd_im.vtkGraphMapper_SetVertexColorArrayName(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
  }

  public string GetVertexColorArrayName() {
    string ret = std.conv.to!string(vtkd_im.vtkGraphMapper_GetVertexColorArrayName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetColorVertices(bool vis) {
    vtkd_im.vtkGraphMapper_SetColorVertices(cast(void*)swigCPtr, vis);
  }

  public bool GetColorVertices() {
    bool ret = vtkd_im.vtkGraphMapper_GetColorVertices(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void ColorVerticesOn() {
    vtkd_im.vtkGraphMapper_ColorVerticesOn(cast(void*)swigCPtr);
  }

  public void ColorVerticesOff() {
    vtkd_im.vtkGraphMapper_ColorVerticesOff(cast(void*)swigCPtr);
  }

  public void SetScaledGlyphs(bool arg) {
    vtkd_im.vtkGraphMapper_SetScaledGlyphs(cast(void*)swigCPtr, arg);
  }

  public bool GetScaledGlyphs() {
    bool ret = vtkd_im.vtkGraphMapper_GetScaledGlyphs(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void ScaledGlyphsOn() {
    vtkd_im.vtkGraphMapper_ScaledGlyphsOn(cast(void*)swigCPtr);
  }

  public void ScaledGlyphsOff() {
    vtkd_im.vtkGraphMapper_ScaledGlyphsOff(cast(void*)swigCPtr);
  }

  public void SetScalingArrayName(string _arg) {
    vtkd_im.vtkGraphMapper_SetScalingArrayName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetScalingArrayName() {
    string ret = std.conv.to!string(vtkd_im.vtkGraphMapper_GetScalingArrayName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetEdgeVisibility(bool vis) {
    vtkd_im.vtkGraphMapper_SetEdgeVisibility(cast(void*)swigCPtr, vis);
  }

  public bool GetEdgeVisibility() {
    bool ret = vtkd_im.vtkGraphMapper_GetEdgeVisibility(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void EdgeVisibilityOn() {
    vtkd_im.vtkGraphMapper_EdgeVisibilityOn(cast(void*)swigCPtr);
  }

  public void EdgeVisibilityOff() {
    vtkd_im.vtkGraphMapper_EdgeVisibilityOff(cast(void*)swigCPtr);
  }

  public void SetEdgeColorArrayName(string name) {
    vtkd_im.vtkGraphMapper_SetEdgeColorArrayName(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
  }

  public string GetEdgeColorArrayName() {
    string ret = std.conv.to!string(vtkd_im.vtkGraphMapper_GetEdgeColorArrayName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetColorEdges(bool vis) {
    vtkd_im.vtkGraphMapper_SetColorEdges(cast(void*)swigCPtr, vis);
  }

  public bool GetColorEdges() {
    bool ret = vtkd_im.vtkGraphMapper_GetColorEdges(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void ColorEdgesOn() {
    vtkd_im.vtkGraphMapper_ColorEdgesOn(cast(void*)swigCPtr);
  }

  public void ColorEdgesOff() {
    vtkd_im.vtkGraphMapper_ColorEdgesOff(cast(void*)swigCPtr);
  }

  public void SetEnabledEdgesArrayName(string _arg) {
    vtkd_im.vtkGraphMapper_SetEnabledEdgesArrayName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetEnabledEdgesArrayName() {
    string ret = std.conv.to!string(vtkd_im.vtkGraphMapper_GetEnabledEdgesArrayName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetEnableEdgesByArray(int _arg) {
    vtkd_im.vtkGraphMapper_SetEnableEdgesByArray(cast(void*)swigCPtr, _arg);
  }

  public int GetEnableEdgesByArray() {
    auto ret = vtkd_im.vtkGraphMapper_GetEnableEdgesByArray(cast(void*)swigCPtr);
    return ret;
  }

  public void EnableEdgesByArrayOn() {
    vtkd_im.vtkGraphMapper_EnableEdgesByArrayOn(cast(void*)swigCPtr);
  }

  public void EnableEdgesByArrayOff() {
    vtkd_im.vtkGraphMapper_EnableEdgesByArrayOff(cast(void*)swigCPtr);
  }

  public void SetEnabledVerticesArrayName(string _arg) {
    vtkd_im.vtkGraphMapper_SetEnabledVerticesArrayName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetEnabledVerticesArrayName() {
    string ret = std.conv.to!string(vtkd_im.vtkGraphMapper_GetEnabledVerticesArrayName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetEnableVerticesByArray(int _arg) {
    vtkd_im.vtkGraphMapper_SetEnableVerticesByArray(cast(void*)swigCPtr, _arg);
  }

  public int GetEnableVerticesByArray() {
    auto ret = vtkd_im.vtkGraphMapper_GetEnableVerticesByArray(cast(void*)swigCPtr);
    return ret;
  }

  public void EnableVerticesByArrayOn() {
    vtkd_im.vtkGraphMapper_EnableVerticesByArrayOn(cast(void*)swigCPtr);
  }

  public void EnableVerticesByArrayOff() {
    vtkd_im.vtkGraphMapper_EnableVerticesByArrayOff(cast(void*)swigCPtr);
  }

  public void SetIconArrayName(string name) {
    vtkd_im.vtkGraphMapper_SetIconArrayName(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
  }

  public string GetIconArrayName() {
    string ret = std.conv.to!string(vtkd_im.vtkGraphMapper_GetIconArrayName(cast(void*)swigCPtr));
    return ret;
  }

  public void AddIconType(string type, int index) {
    vtkd_im.vtkGraphMapper_AddIconType(cast(void*)swigCPtr, (type ? std.string.toStringz(type) : null), index);
  }

  public void ClearIconTypes() {
    vtkd_im.vtkGraphMapper_ClearIconTypes(cast(void*)swigCPtr);
  }

  public void SetIconSize(int* size) {
    vtkd_im.vtkGraphMapper_SetIconSize(cast(void*)swigCPtr, cast(void*)size);
  }

  public int* GetIconSize() {
    auto ret = cast(int*)vtkd_im.vtkGraphMapper_GetIconSize(cast(void*)swigCPtr);
    return ret;
  }

  public void SetIconAlignment(int alignment) {
    vtkd_im.vtkGraphMapper_SetIconAlignment(cast(void*)swigCPtr, alignment);
  }

  public vtkTexture.vtkTexture GetIconTexture() {
    void* cPtr = vtkd_im.vtkGraphMapper_GetIconTexture(cast(void*)swigCPtr);
    vtkTexture.vtkTexture ret = (cPtr is null) ? null : new vtkTexture.vtkTexture(cPtr, false);
    return ret;
  }

  public void SetIconTexture(vtkTexture.vtkTexture texture) {
    vtkd_im.vtkGraphMapper_SetIconTexture(cast(void*)swigCPtr, vtkTexture.vtkTexture.swigGetCPtr(texture));
  }

  public void SetIconVisibility(bool vis) {
    vtkd_im.vtkGraphMapper_SetIconVisibility(cast(void*)swigCPtr, vis);
  }

  public bool GetIconVisibility() {
    bool ret = vtkd_im.vtkGraphMapper_GetIconVisibility(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void IconVisibilityOn() {
    vtkd_im.vtkGraphMapper_IconVisibilityOn(cast(void*)swigCPtr);
  }

  public void IconVisibilityOff() {
    vtkd_im.vtkGraphMapper_IconVisibilityOff(cast(void*)swigCPtr);
  }

  public float GetVertexPointSize() {
    auto ret = vtkd_im.vtkGraphMapper_GetVertexPointSize(cast(void*)swigCPtr);
    return ret;
  }

  public void SetVertexPointSize(float size) {
    vtkd_im.vtkGraphMapper_SetVertexPointSize(cast(void*)swigCPtr, size);
  }

  public float GetEdgeLineWidth() {
    auto ret = vtkd_im.vtkGraphMapper_GetEdgeLineWidth(cast(void*)swigCPtr);
    return ret;
  }

  public void SetEdgeLineWidth(float width) {
    vtkd_im.vtkGraphMapper_SetEdgeLineWidth(cast(void*)swigCPtr, width);
  }

  public void SetInputData(vtkGraph.vtkGraph input) {
    vtkd_im.vtkGraphMapper_SetInputData(cast(void*)swigCPtr, vtkGraph.vtkGraph.swigGetCPtr(input));
  }

  public vtkGraph.vtkGraph GetInput() {
    void* cPtr = vtkd_im.vtkGraphMapper_GetInput(cast(void*)swigCPtr);
    vtkGraph.vtkGraph ret = (cPtr is null) ? null : new vtkGraph.vtkGraph(cPtr, false);
    return ret;
  }

  public override double* GetBounds() {
    auto ret = cast(double*)vtkd_im.vtkGraphMapper_GetBounds__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetBounds(double* bounds) {
    vtkd_im.vtkGraphMapper_GetBounds__SWIG_1(cast(void*)swigCPtr, cast(void*)bounds);
  }

  alias vtkMapper.vtkMapper.GetBounds GetBounds;

  public vtkLookupTable.vtkLookupTable GetEdgeLookupTable() {
    void* cPtr = vtkd_im.vtkGraphMapper_GetEdgeLookupTable(cast(void*)swigCPtr);
    vtkLookupTable.vtkLookupTable ret = (cPtr is null) ? null : new vtkLookupTable.vtkLookupTable(cPtr, false);
    return ret;
  }

  public vtkLookupTable.vtkLookupTable GetVertexLookupTable() {
    void* cPtr = vtkd_im.vtkGraphMapper_GetVertexLookupTable(cast(void*)swigCPtr);
    vtkLookupTable.vtkLookupTable ret = (cPtr is null) ? null : new vtkLookupTable.vtkLookupTable(cPtr, false);
    return ret;
  }
}
