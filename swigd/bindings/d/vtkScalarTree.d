/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkScalarTree;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkDataSet;
static import vtkCell;
static import SWIGTYPE_p_p_vtkIdList;
static import vtkDataArray;
static import vtkObject;

class vtkScalarTree : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkScalarTree_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkScalarTree obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkScalarTree_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkScalarTree SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkScalarTree_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkScalarTree ret = (cPtr is null) ? null : new vtkScalarTree(cPtr, false);
    return ret;
  }

  public vtkScalarTree NewInstance() const {
    void* cPtr = vtkd_im.vtkScalarTree_NewInstance(cast(void*)swigCPtr);
    vtkScalarTree ret = (cPtr is null) ? null : new vtkScalarTree(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public void SetDataSet(vtkDataSet.vtkDataSet arg0) {
    vtkd_im.vtkScalarTree_SetDataSet(cast(void*)swigCPtr, vtkDataSet.vtkDataSet.swigGetCPtr(arg0));
  }

  public vtkDataSet.vtkDataSet GetDataSet() {
    void* cPtr = vtkd_im.vtkScalarTree_GetDataSet(cast(void*)swigCPtr);
    vtkDataSet.vtkDataSet ret = (cPtr is null) ? null : new vtkDataSet.vtkDataSet(cPtr, false);
    return ret;
  }

  public void BuildTree() {
    vtkd_im.vtkScalarTree_BuildTree(cast(void*)swigCPtr);
  }

  public void Initialize() {
    vtkd_im.vtkScalarTree_Initialize(cast(void*)swigCPtr);
  }

  public void InitTraversal(double scalarValue) {
    vtkd_im.vtkScalarTree_InitTraversal(cast(void*)swigCPtr, scalarValue);
  }

  public vtkCell.vtkCell GetNextCell(long* cellId, SWIGTYPE_p_p_vtkIdList.SWIGTYPE_p_p_vtkIdList ptIds, vtkDataArray.vtkDataArray cellScalars) {
    void* cPtr = vtkd_im.vtkScalarTree_GetNextCell(cast(void*)swigCPtr, cast(void*)cellId, SWIGTYPE_p_p_vtkIdList.SWIGTYPE_p_p_vtkIdList.swigGetCPtr(ptIds), vtkDataArray.vtkDataArray.swigGetCPtr(cellScalars));
    vtkCell.vtkCell ret = (cPtr is null) ? null : new vtkCell.vtkCell(cPtr, false);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }
}
