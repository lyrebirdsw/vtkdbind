/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkTextMapper;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkViewport;
static import SWIGTYPE_p_int;
static import vtkTextProperty;
static import SWIGTYPE_p_p_vtkTextMapper;
static import vtkMapper2D;

class vtkTextMapper : vtkMapper2D.vtkMapper2D {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkTextMapper_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkTextMapper obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkTextMapper_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkTextMapper SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkTextMapper_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkTextMapper ret = (cPtr is null) ? null : new vtkTextMapper(cPtr, false);
    return ret;
  }

  public vtkTextMapper NewInstance() const {
    void* cPtr = vtkd_im.vtkTextMapper_NewInstance(cast(void*)swigCPtr);
    vtkTextMapper ret = (cPtr is null) ? null : new vtkTextMapper(cPtr, false);
    return ret;
  }

  alias vtkMapper2D.vtkMapper2D.NewInstance NewInstance;

  public static vtkTextMapper New() {
    void* cPtr = vtkd_im.vtkTextMapper_New();
    vtkTextMapper ret = (cPtr is null) ? null : new vtkTextMapper(cPtr, false);
    return ret;
  }

  public void GetSize(vtkViewport.vtkViewport arg0, SWIGTYPE_p_int.SWIGTYPE_p_int size) {
    vtkd_im.vtkTextMapper_GetSize(cast(void*)swigCPtr, vtkViewport.vtkViewport.swigGetCPtr(arg0), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(size));
  }

  public int GetWidth(vtkViewport.vtkViewport v) {
    auto ret = vtkd_im.vtkTextMapper_GetWidth(cast(void*)swigCPtr, vtkViewport.vtkViewport.swigGetCPtr(v));
    return ret;
  }

  public int GetHeight(vtkViewport.vtkViewport v) {
    auto ret = vtkd_im.vtkTextMapper_GetHeight(cast(void*)swigCPtr, vtkViewport.vtkViewport.swigGetCPtr(v));
    return ret;
  }

  public void SetInput(string inputString) {
    vtkd_im.vtkTextMapper_SetInput(cast(void*)swigCPtr, (inputString ? std.string.toStringz(inputString) : null));
  }

  public string GetInput() {
    string ret = std.conv.to!string(vtkd_im.vtkTextMapper_GetInput(cast(void*)swigCPtr));
    return ret;
  }

  public void SetTextProperty(vtkTextProperty.vtkTextProperty p) {
    vtkd_im.vtkTextMapper_SetTextProperty(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(p));
  }

  public vtkTextProperty.vtkTextProperty GetTextProperty() {
    void* cPtr = vtkd_im.vtkTextMapper_GetTextProperty(cast(void*)swigCPtr);
    vtkTextProperty.vtkTextProperty ret = (cPtr is null) ? null : new vtkTextProperty.vtkTextProperty(cPtr, false);
    return ret;
  }

  public void ShallowCopy(vtkTextMapper tm) {
    vtkd_im.vtkTextMapper_ShallowCopy(cast(void*)swigCPtr, vtkTextMapper.swigGetCPtr(tm));
  }

  public int GetNumberOfLines(string input) {
    auto ret = vtkd_im.vtkTextMapper_GetNumberOfLines__SWIG_0(cast(void*)swigCPtr, (input ? std.string.toStringz(input) : null));
    return ret;
  }

  public int GetNumberOfLines() {
    auto ret = vtkd_im.vtkTextMapper_GetNumberOfLines__SWIG_1(cast(void*)swigCPtr);
    return ret;
  }

  public int SetConstrainedFontSize(vtkViewport.vtkViewport arg0, int targetWidth, int targetHeight) {
    auto ret = vtkd_im.vtkTextMapper_SetConstrainedFontSize__SWIG_0(cast(void*)swigCPtr, vtkViewport.vtkViewport.swigGetCPtr(arg0), targetWidth, targetHeight);
    return ret;
  }

  public static int SetMultipleConstrainedFontSize(vtkViewport.vtkViewport arg0, int targetWidth, int targetHeight, SWIGTYPE_p_p_vtkTextMapper.SWIGTYPE_p_p_vtkTextMapper mappers, int nbOfMappers, int* maxResultingSize) {
    auto ret = vtkd_im.vtkTextMapper_SetMultipleConstrainedFontSize(vtkViewport.vtkViewport.swigGetCPtr(arg0), targetWidth, targetHeight, SWIGTYPE_p_p_vtkTextMapper.SWIGTYPE_p_p_vtkTextMapper.swigGetCPtr(mappers), nbOfMappers, cast(void*)maxResultingSize);
    return ret;
  }

  public static int SetRelativeFontSize(vtkTextMapper arg0, vtkViewport.vtkViewport arg1, int* winSize, int* stringSize, float sizeFactor) {
    auto ret = vtkd_im.vtkTextMapper_SetRelativeFontSize__SWIG_0(vtkTextMapper.swigGetCPtr(arg0), vtkViewport.vtkViewport.swigGetCPtr(arg1), cast(void*)winSize, cast(void*)stringSize, sizeFactor);
    return ret;
  }

  public static int SetRelativeFontSize(vtkTextMapper arg0, vtkViewport.vtkViewport arg1, int* winSize, int* stringSize) {
    auto ret = vtkd_im.vtkTextMapper_SetRelativeFontSize__SWIG_1(vtkTextMapper.swigGetCPtr(arg0), vtkViewport.vtkViewport.swigGetCPtr(arg1), cast(void*)winSize, cast(void*)stringSize);
    return ret;
  }

  public static int SetMultipleRelativeFontSize(vtkViewport.vtkViewport viewport, SWIGTYPE_p_p_vtkTextMapper.SWIGTYPE_p_p_vtkTextMapper textMappers, int nbOfMappers, int* winSize, int* stringSize, float sizeFactor) {
    auto ret = vtkd_im.vtkTextMapper_SetMultipleRelativeFontSize(vtkViewport.vtkViewport.swigGetCPtr(viewport), SWIGTYPE_p_p_vtkTextMapper.SWIGTYPE_p_p_vtkTextMapper.swigGetCPtr(textMappers), nbOfMappers, cast(void*)winSize, cast(void*)stringSize, sizeFactor);
    return ret;
  }

  public int GetSystemFontSize(int size) {
    auto ret = vtkd_im.vtkTextMapper_GetSystemFontSize(cast(void*)swigCPtr, size);
    return ret;
  }
}
