/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPeriodicTable;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkBlueObeliskData;
static import vtkStdString;
static import vtkLookupTable;
static import SWIGTYPE_p_float;
static import vtkColor3f;
static import vtkObject;

class vtkPeriodicTable : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPeriodicTable_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPeriodicTable obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPeriodicTable_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPeriodicTable SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPeriodicTable_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPeriodicTable ret = (cPtr is null) ? null : new vtkPeriodicTable(cPtr, false);
    return ret;
  }

  public vtkPeriodicTable NewInstance() const {
    void* cPtr = vtkd_im.vtkPeriodicTable_NewInstance(cast(void*)swigCPtr);
    vtkPeriodicTable ret = (cPtr is null) ? null : new vtkPeriodicTable(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public static vtkPeriodicTable New() {
    void* cPtr = vtkd_im.vtkPeriodicTable_New();
    vtkPeriodicTable ret = (cPtr is null) ? null : new vtkPeriodicTable(cPtr, false);
    return ret;
  }

  public vtkBlueObeliskData.vtkBlueObeliskData GetBlueObeliskData() {
    void* cPtr = vtkd_im.vtkPeriodicTable_GetBlueObeliskData(cast(void*)swigCPtr);
    vtkBlueObeliskData.vtkBlueObeliskData ret = (cPtr is null) ? null : new vtkBlueObeliskData.vtkBlueObeliskData(cPtr, false);
    return ret;
  }

  public ushort GetNumberOfElements() {
    auto ret = vtkd_im.vtkPeriodicTable_GetNumberOfElements(cast(void*)swigCPtr);
    return ret;
  }

  public string GetSymbol(ushort atomicNum) {
    string ret = std.conv.to!string(vtkd_im.vtkPeriodicTable_GetSymbol(cast(void*)swigCPtr, atomicNum));
    return ret;
  }

  public string GetElementName(ushort atomicNum) {
    string ret = std.conv.to!string(vtkd_im.vtkPeriodicTable_GetElementName(cast(void*)swigCPtr, atomicNum));
    return ret;
  }

  public ushort GetAtomicNumber(vtkStdString.vtkStdString str) {
    auto ret = vtkd_im.vtkPeriodicTable_GetAtomicNumber__SWIG_0(cast(void*)swigCPtr, vtkStdString.vtkStdString.swigGetCPtr(str));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public ushort GetAtomicNumber(string str) {
    auto ret = vtkd_im.vtkPeriodicTable_GetAtomicNumber__SWIG_1(cast(void*)swigCPtr, (str ? std.string.toStringz(str) : null));
    return ret;
  }

  public float GetCovalentRadius(ushort atomicNum) {
    auto ret = vtkd_im.vtkPeriodicTable_GetCovalentRadius(cast(void*)swigCPtr, atomicNum);
    return ret;
  }

  public float GetVDWRadius(ushort atomicNum) {
    auto ret = vtkd_im.vtkPeriodicTable_GetVDWRadius(cast(void*)swigCPtr, atomicNum);
    return ret;
  }

  public void GetDefaultLUT(vtkLookupTable.vtkLookupTable arg0) {
    vtkd_im.vtkPeriodicTable_GetDefaultLUT(cast(void*)swigCPtr, vtkLookupTable.vtkLookupTable.swigGetCPtr(arg0));
  }

  public void GetDefaultRGBTuple(ushort atomicNum, SWIGTYPE_p_float.SWIGTYPE_p_float rgb) {
    vtkd_im.vtkPeriodicTable_GetDefaultRGBTuple__SWIG_0(cast(void*)swigCPtr, atomicNum, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(rgb));
  }

  public vtkColor3f.vtkColor3f GetDefaultRGBTuple(ushort atomicNum) {
    vtkColor3f.vtkColor3f ret = new vtkColor3f.vtkColor3f(vtkd_im.vtkPeriodicTable_GetDefaultRGBTuple__SWIG_1(cast(void*)swigCPtr, atomicNum), true);
    return ret;
  }
}
