/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPointPlacer;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkRenderer;
static import SWIGTYPE_p_double;
static import vtkObject;

class vtkPointPlacer : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPointPlacer_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPointPlacer obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkPointPlacer New() {
    void* cPtr = vtkd_im.vtkPointPlacer_New();
    vtkPointPlacer ret = (cPtr is null) ? null : new vtkPointPlacer(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPointPlacer_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPointPlacer SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPointPlacer_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPointPlacer ret = (cPtr is null) ? null : new vtkPointPlacer(cPtr, false);
    return ret;
  }

  public vtkPointPlacer NewInstance() const {
    void* cPtr = vtkd_im.vtkPointPlacer_NewInstance(cast(void*)swigCPtr);
    vtkPointPlacer ret = (cPtr is null) ? null : new vtkPointPlacer(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public int ComputeWorldPosition(vtkRenderer.vtkRenderer ren, SWIGTYPE_p_double.SWIGTYPE_p_double displayPos, SWIGTYPE_p_double.SWIGTYPE_p_double worldPos, SWIGTYPE_p_double.SWIGTYPE_p_double worldOrient) {
    auto ret = vtkd_im.vtkPointPlacer_ComputeWorldPosition__SWIG_0(cast(void*)swigCPtr, vtkRenderer.vtkRenderer.swigGetCPtr(ren), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(displayPos), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(worldPos), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(worldOrient));
    return ret;
  }

  public int ComputeWorldPosition(vtkRenderer.vtkRenderer ren, SWIGTYPE_p_double.SWIGTYPE_p_double displayPos, SWIGTYPE_p_double.SWIGTYPE_p_double refWorldPos, SWIGTYPE_p_double.SWIGTYPE_p_double worldPos, SWIGTYPE_p_double.SWIGTYPE_p_double worldOrient) {
    auto ret = vtkd_im.vtkPointPlacer_ComputeWorldPosition__SWIG_1(cast(void*)swigCPtr, vtkRenderer.vtkRenderer.swigGetCPtr(ren), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(displayPos), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(refWorldPos), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(worldPos), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(worldOrient));
    return ret;
  }

  public int ValidateWorldPosition(SWIGTYPE_p_double.SWIGTYPE_p_double worldPos) {
    auto ret = vtkd_im.vtkPointPlacer_ValidateWorldPosition__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(worldPos));
    return ret;
  }

  public int ValidateDisplayPosition(vtkRenderer.vtkRenderer arg0, SWIGTYPE_p_double.SWIGTYPE_p_double displayPos) {
    auto ret = vtkd_im.vtkPointPlacer_ValidateDisplayPosition(cast(void*)swigCPtr, vtkRenderer.vtkRenderer.swigGetCPtr(arg0), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(displayPos));
    return ret;
  }

  public int ValidateWorldPosition(SWIGTYPE_p_double.SWIGTYPE_p_double worldPos, SWIGTYPE_p_double.SWIGTYPE_p_double worldOrient) {
    auto ret = vtkd_im.vtkPointPlacer_ValidateWorldPosition__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(worldPos), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(worldOrient));
    return ret;
  }

  public int UpdateWorldPosition(vtkRenderer.vtkRenderer ren, SWIGTYPE_p_double.SWIGTYPE_p_double worldPos, SWIGTYPE_p_double.SWIGTYPE_p_double worldOrient) {
    auto ret = vtkd_im.vtkPointPlacer_UpdateWorldPosition(cast(void*)swigCPtr, vtkRenderer.vtkRenderer.swigGetCPtr(ren), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(worldPos), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(worldOrient));
    return ret;
  }

  public int UpdateNodeWorldPosition(SWIGTYPE_p_double.SWIGTYPE_p_double worldPos, long nodePointId) {
    auto ret = vtkd_im.vtkPointPlacer_UpdateNodeWorldPosition(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(worldPos), nodePointId);
    return ret;
  }

  public int UpdateInternalState() {
    auto ret = vtkd_im.vtkPointPlacer_UpdateInternalState(cast(void*)swigCPtr);
    return ret;
  }

  public void SetPixelTolerance(int _arg) {
    vtkd_im.vtkPointPlacer_SetPixelTolerance(cast(void*)swigCPtr, _arg);
  }

  public int GetPixelToleranceMinValue() {
    auto ret = vtkd_im.vtkPointPlacer_GetPixelToleranceMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetPixelToleranceMaxValue() {
    auto ret = vtkd_im.vtkPointPlacer_GetPixelToleranceMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetPixelTolerance() {
    auto ret = vtkd_im.vtkPointPlacer_GetPixelTolerance(cast(void*)swigCPtr);
    return ret;
  }

  public void SetWorldTolerance(double _arg) {
    vtkd_im.vtkPointPlacer_SetWorldTolerance(cast(void*)swigCPtr, _arg);
  }

  public double GetWorldToleranceMinValue() {
    auto ret = vtkd_im.vtkPointPlacer_GetWorldToleranceMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetWorldToleranceMaxValue() {
    auto ret = vtkd_im.vtkPointPlacer_GetWorldToleranceMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetWorldTolerance() {
    auto ret = vtkd_im.vtkPointPlacer_GetWorldTolerance(cast(void*)swigCPtr);
    return ret;
  }
}
