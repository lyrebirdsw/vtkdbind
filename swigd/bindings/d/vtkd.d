/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkd;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkWeakPointerBase;
static import vtkObjectBase;
static import vtkArrayRange;
static import vtkUnicodeString;
static import vtkVariant;
static import vtkSmartPointerBase;
static import vtkDebugLeaksManager;
static import vtkCommonInformationKeyManager;
static import SWIGTYPE_p_p_char;
static import SWIGTYPE_p_int;
static import SWIGTYPE_p_vtkXMLWriterC_s;
static import SWIGTYPE_p_double;
static import SWIGTYPE_p_Widget;
static import SWIGTYPE_p_XtPointer;
static import SWIGTYPE_p_XEvent;
static import SWIGTYPE_p_Boolean;
static import SWIGTYPE_p_XtIntervalId;
static import SWIGTYPE_p_unsigned_char;
static import SWIGTYPE_p_p_unsigned_char;
static import vtkExecutionSchedulerManager;
static import vtkFilteringInformationKeyManager;
static import vtkVector2i;
static import vtkVector2f;
static import vtkVector2d;
static import vtkVector3i;
static import vtkVector3f;
static import vtkVector3d;
static import vtkGarbageCollectorManager;
static import vtkGarbageCollector;
static import SWIGTYPE_p_GLdouble;


int DEFINE_NO_DEPRECATED() @property {
  auto ret = vtkd_im.DEFINE_NO_DEPRECATED_get();
  return ret;
}

int VTK_MAJOR_VERSION() @property {
  auto ret = vtkd_im.VTK_MAJOR_VERSION_get();
  return ret;
}

int VTK_MINOR_VERSION() @property {
  auto ret = vtkd_im.VTK_MINOR_VERSION_get();
  return ret;
}

int VTK_BUILD_VERSION() @property {
  auto ret = vtkd_im.VTK_BUILD_VERSION_get();
  return ret;
}

string VTK_VERSION() @property {
  string ret = std.conv.to!string(vtkd_im.VTK_VERSION_get());
  return ret;
}

int VTK_MAX_THREADS() @property {
  auto ret = vtkd_im.VTK_MAX_THREADS_get();
  return ret;
}

int VTK_SIZEOF_CHAR() @property {
  auto ret = vtkd_im.VTK_SIZEOF_CHAR_get();
  return ret;
}

int VTK_SIZEOF_SHORT() @property {
  auto ret = vtkd_im.VTK_SIZEOF_SHORT_get();
  return ret;
}

int VTK_SIZEOF_INT() @property {
  auto ret = vtkd_im.VTK_SIZEOF_INT_get();
  return ret;
}

int VTK_SIZEOF_LONG() @property {
  auto ret = vtkd_im.VTK_SIZEOF_LONG_get();
  return ret;
}

int VTK_SIZEOF_FLOAT() @property {
  auto ret = vtkd_im.VTK_SIZEOF_FLOAT_get();
  return ret;
}

int VTK_SIZEOF_DOUBLE() @property {
  auto ret = vtkd_im.VTK_SIZEOF_DOUBLE_get();
  return ret;
}

int VTK_SIZEOF_VOID_P() @property {
  auto ret = vtkd_im.VTK_SIZEOF_VOID_P_get();
  return ret;
}

int VTK_SIZEOF_LONG_LONG() @property {
  auto ret = vtkd_im.VTK_SIZEOF_LONG_LONG_get();
  return ret;
}

int VTK_TYPE_CHAR_IS_SIGNED() @property {
  auto ret = vtkd_im.VTK_TYPE_CHAR_IS_SIGNED_get();
  return ret;
}

int VTK_STREAM_EOF_SEVERITY() @property {
  auto ret = vtkd_im.VTK_STREAM_EOF_SEVERITY_get();
  return ret;
}

string VTK_CXX_COMPILER() @property {
  string ret = std.conv.to!string(vtkd_im.VTK_CXX_COMPILER_get());
  return ret;
}

int VTK_VOID() @property {
  auto ret = vtkd_im.VTK_VOID_get();
  return ret;
}

int VTK_BIT() @property {
  auto ret = vtkd_im.VTK_BIT_get();
  return ret;
}

int VTK_CHAR() @property {
  auto ret = vtkd_im.VTK_CHAR_get();
  return ret;
}

int VTK_SIGNED_CHAR() @property {
  auto ret = vtkd_im.VTK_SIGNED_CHAR_get();
  return ret;
}

int VTK_UNSIGNED_CHAR() @property {
  auto ret = vtkd_im.VTK_UNSIGNED_CHAR_get();
  return ret;
}

int VTK_SHORT() @property {
  auto ret = vtkd_im.VTK_SHORT_get();
  return ret;
}

int VTK_UNSIGNED_SHORT() @property {
  auto ret = vtkd_im.VTK_UNSIGNED_SHORT_get();
  return ret;
}

int VTK_INT() @property {
  auto ret = vtkd_im.VTK_INT_get();
  return ret;
}

int VTK_UNSIGNED_INT() @property {
  auto ret = vtkd_im.VTK_UNSIGNED_INT_get();
  return ret;
}

int VTK_LONG() @property {
  auto ret = vtkd_im.VTK_LONG_get();
  return ret;
}

int VTK_UNSIGNED_LONG() @property {
  auto ret = vtkd_im.VTK_UNSIGNED_LONG_get();
  return ret;
}

int VTK_FLOAT() @property {
  auto ret = vtkd_im.VTK_FLOAT_get();
  return ret;
}

int VTK_DOUBLE() @property {
  auto ret = vtkd_im.VTK_DOUBLE_get();
  return ret;
}

int VTK_ID_TYPE() @property {
  auto ret = vtkd_im.VTK_ID_TYPE_get();
  return ret;
}

int VTK_STRING() @property {
  auto ret = vtkd_im.VTK_STRING_get();
  return ret;
}

int VTK_OPAQUE() @property {
  auto ret = vtkd_im.VTK_OPAQUE_get();
  return ret;
}

int VTK_LONG_LONG() @property {
  auto ret = vtkd_im.VTK_LONG_LONG_get();
  return ret;
}

int VTK_UNSIGNED_LONG_LONG() @property {
  auto ret = vtkd_im.VTK_UNSIGNED_LONG_LONG_get();
  return ret;
}

int VTK___INT64() @property {
  auto ret = vtkd_im.VTK___INT64_get();
  return ret;
}

int VTK_UNSIGNED___INT64() @property {
  auto ret = vtkd_im.VTK_UNSIGNED___INT64_get();
  return ret;
}

int VTK_VARIANT() @property {
  auto ret = vtkd_im.VTK_VARIANT_get();
  return ret;
}

int VTK_OBJECT() @property {
  auto ret = vtkd_im.VTK_OBJECT_get();
  return ret;
}

int VTK_UNICODE_STRING() @property {
  auto ret = vtkd_im.VTK_UNICODE_STRING_get();
  return ret;
}

int VTK_POLY_DATA() @property {
  auto ret = vtkd_im.VTK_POLY_DATA_get();
  return ret;
}

int VTK_STRUCTURED_POINTS() @property {
  auto ret = vtkd_im.VTK_STRUCTURED_POINTS_get();
  return ret;
}

int VTK_STRUCTURED_GRID() @property {
  auto ret = vtkd_im.VTK_STRUCTURED_GRID_get();
  return ret;
}

int VTK_RECTILINEAR_GRID() @property {
  auto ret = vtkd_im.VTK_RECTILINEAR_GRID_get();
  return ret;
}

int VTK_UNSTRUCTURED_GRID() @property {
  auto ret = vtkd_im.VTK_UNSTRUCTURED_GRID_get();
  return ret;
}

int VTK_PIECEWISE_FUNCTION() @property {
  auto ret = vtkd_im.VTK_PIECEWISE_FUNCTION_get();
  return ret;
}

int VTK_IMAGE_DATA() @property {
  auto ret = vtkd_im.VTK_IMAGE_DATA_get();
  return ret;
}

int VTK_DATA_OBJECT() @property {
  auto ret = vtkd_im.VTK_DATA_OBJECT_get();
  return ret;
}

int VTK_DATA_SET() @property {
  auto ret = vtkd_im.VTK_DATA_SET_get();
  return ret;
}

int VTK_POINT_SET() @property {
  auto ret = vtkd_im.VTK_POINT_SET_get();
  return ret;
}

int VTK_UNIFORM_GRID() @property {
  auto ret = vtkd_im.VTK_UNIFORM_GRID_get();
  return ret;
}

int VTK_COMPOSITE_DATA_SET() @property {
  auto ret = vtkd_im.VTK_COMPOSITE_DATA_SET_get();
  return ret;
}

int VTK_MULTIGROUP_DATA_SET() @property {
  auto ret = vtkd_im.VTK_MULTIGROUP_DATA_SET_get();
  return ret;
}

int VTK_MULTIBLOCK_DATA_SET() @property {
  auto ret = vtkd_im.VTK_MULTIBLOCK_DATA_SET_get();
  return ret;
}

int VTK_HIERARCHICAL_DATA_SET() @property {
  auto ret = vtkd_im.VTK_HIERARCHICAL_DATA_SET_get();
  return ret;
}

int VTK_HIERARCHICAL_BOX_DATA_SET() @property {
  auto ret = vtkd_im.VTK_HIERARCHICAL_BOX_DATA_SET_get();
  return ret;
}

int VTK_GENERIC_DATA_SET() @property {
  auto ret = vtkd_im.VTK_GENERIC_DATA_SET_get();
  return ret;
}

int VTK_HYPER_OCTREE() @property {
  auto ret = vtkd_im.VTK_HYPER_OCTREE_get();
  return ret;
}

int VTK_TEMPORAL_DATA_SET() @property {
  auto ret = vtkd_im.VTK_TEMPORAL_DATA_SET_get();
  return ret;
}

int VTK_TABLE() @property {
  auto ret = vtkd_im.VTK_TABLE_get();
  return ret;
}

int VTK_GRAPH() @property {
  auto ret = vtkd_im.VTK_GRAPH_get();
  return ret;
}

int VTK_TREE() @property {
  auto ret = vtkd_im.VTK_TREE_get();
  return ret;
}

int VTK_SELECTION() @property {
  auto ret = vtkd_im.VTK_SELECTION_get();
  return ret;
}

int VTK_DIRECTED_GRAPH() @property {
  auto ret = vtkd_im.VTK_DIRECTED_GRAPH_get();
  return ret;
}

int VTK_UNDIRECTED_GRAPH() @property {
  auto ret = vtkd_im.VTK_UNDIRECTED_GRAPH_get();
  return ret;
}

int VTK_MULTIPIECE_DATA_SET() @property {
  auto ret = vtkd_im.VTK_MULTIPIECE_DATA_SET_get();
  return ret;
}

int VTK_DIRECTED_ACYCLIC_GRAPH() @property {
  auto ret = vtkd_im.VTK_DIRECTED_ACYCLIC_GRAPH_get();
  return ret;
}

int VTK_ARRAY_DATA() @property {
  auto ret = vtkd_im.VTK_ARRAY_DATA_get();
  return ret;
}

int VTK_REEB_GRAPH() @property {
  auto ret = vtkd_im.VTK_REEB_GRAPH_get();
  return ret;
}

int VTK_UNIFORM_GRID_AMR() @property {
  auto ret = vtkd_im.VTK_UNIFORM_GRID_AMR_get();
  return ret;
}

int VTK_NON_OVERLAPPING_AMR() @property {
  auto ret = vtkd_im.VTK_NON_OVERLAPPING_AMR_get();
  return ret;
}

int VTK_OVERLAPPING_AMR() @property {
  auto ret = vtkd_im.VTK_OVERLAPPING_AMR_get();
  return ret;
}

int VTK_HYPER_TREE_GRID() @property {
  auto ret = vtkd_im.VTK_HYPER_TREE_GRID_get();
  return ret;
}

int VTK_MOLECULE() @property {
  auto ret = vtkd_im.VTK_MOLECULE_get();
  return ret;
}

int VTK_PISTON_DATA_OBJECT() @property {
  auto ret = vtkd_im.VTK_PISTON_DATA_OBJECT_get();
  return ret;
}

int VTK_PATH() @property {
  auto ret = vtkd_im.VTK_PATH_get();
  return ret;
}

int VTK_BIT_MIN() @property {
  auto ret = vtkd_im.VTK_BIT_MIN_get();
  return ret;
}

int VTK_BIT_MAX() @property {
  auto ret = vtkd_im.VTK_BIT_MAX_get();
  return ret;
}

int VTK_TYPE_UINT8() @property {
  auto ret = vtkd_im.VTK_TYPE_UINT8_get();
  return ret;
}

int VTK_TYPE_INT8() @property {
  auto ret = vtkd_im.VTK_TYPE_INT8_get();
  return ret;
}

int VTK_TYPE_UINT16() @property {
  auto ret = vtkd_im.VTK_TYPE_UINT16_get();
  return ret;
}

int VTK_TYPE_INT16() @property {
  auto ret = vtkd_im.VTK_TYPE_INT16_get();
  return ret;
}

int VTK_TYPE_UINT32() @property {
  auto ret = vtkd_im.VTK_TYPE_UINT32_get();
  return ret;
}

int VTK_TYPE_INT32() @property {
  auto ret = vtkd_im.VTK_TYPE_INT32_get();
  return ret;
}

int VTK_TYPE_UINT64() @property {
  auto ret = vtkd_im.VTK_TYPE_UINT64_get();
  return ret;
}

int VTK_TYPE_INT64() @property {
  auto ret = vtkd_im.VTK_TYPE_INT64_get();
  return ret;
}

int VTK_TYPE_FLOAT32() @property {
  auto ret = vtkd_im.VTK_TYPE_FLOAT32_get();
  return ret;
}

int VTK_TYPE_FLOAT64() @property {
  auto ret = vtkd_im.VTK_TYPE_FLOAT64_get();
  return ret;
}

int VTK_SIZEOF_ID_TYPE() @property {
  auto ret = vtkd_im.VTK_SIZEOF_ID_TYPE_get();
  return ret;
}

int VTK_OK() @property {
  auto ret = vtkd_im.VTK_OK_get();
  return ret;
}

int VTK_ERROR() @property {
  auto ret = vtkd_im.VTK_ERROR_get();
  return ret;
}

int VTK_ARIAL() @property {
  auto ret = vtkd_im.VTK_ARIAL_get();
  return ret;
}

int VTK_COURIER() @property {
  auto ret = vtkd_im.VTK_COURIER_get();
  return ret;
}

int VTK_TIMES() @property {
  auto ret = vtkd_im.VTK_TIMES_get();
  return ret;
}

int VTK_UNKNOWN_FONT() @property {
  auto ret = vtkd_im.VTK_UNKNOWN_FONT_get();
  return ret;
}

int VTK_TEXT_LEFT() @property {
  auto ret = vtkd_im.VTK_TEXT_LEFT_get();
  return ret;
}

int VTK_TEXT_CENTERED() @property {
  auto ret = vtkd_im.VTK_TEXT_CENTERED_get();
  return ret;
}

int VTK_TEXT_RIGHT() @property {
  auto ret = vtkd_im.VTK_TEXT_RIGHT_get();
  return ret;
}

int VTK_TEXT_BOTTOM() @property {
  auto ret = vtkd_im.VTK_TEXT_BOTTOM_get();
  return ret;
}

int VTK_TEXT_TOP() @property {
  auto ret = vtkd_im.VTK_TEXT_TOP_get();
  return ret;
}

int VTK_TEXT_GLOBAL_ANTIALIASING_SOME() @property {
  auto ret = vtkd_im.VTK_TEXT_GLOBAL_ANTIALIASING_SOME_get();
  return ret;
}

int VTK_TEXT_GLOBAL_ANTIALIASING_NONE() @property {
  auto ret = vtkd_im.VTK_TEXT_GLOBAL_ANTIALIASING_NONE_get();
  return ret;
}

int VTK_TEXT_GLOBAL_ANTIALIASING_ALL() @property {
  auto ret = vtkd_im.VTK_TEXT_GLOBAL_ANTIALIASING_ALL_get();
  return ret;
}

int VTK_LUMINANCE() @property {
  auto ret = vtkd_im.VTK_LUMINANCE_get();
  return ret;
}

int VTK_LUMINANCE_ALPHA() @property {
  auto ret = vtkd_im.VTK_LUMINANCE_ALPHA_get();
  return ret;
}

int VTK_RGB() @property {
  auto ret = vtkd_im.VTK_RGB_get();
  return ret;
}

int VTK_RGBA() @property {
  auto ret = vtkd_im.VTK_RGBA_get();
  return ret;
}

int VTK_COLOR_MODE_DEFAULT() @property {
  auto ret = vtkd_im.VTK_COLOR_MODE_DEFAULT_get();
  return ret;
}

int VTK_COLOR_MODE_MAP_SCALARS() @property {
  auto ret = vtkd_im.VTK_COLOR_MODE_MAP_SCALARS_get();
  return ret;
}

int VTK_NEAREST_INTERPOLATION() @property {
  auto ret = vtkd_im.VTK_NEAREST_INTERPOLATION_get();
  return ret;
}

int VTK_LINEAR_INTERPOLATION() @property {
  auto ret = vtkd_im.VTK_LINEAR_INTERPOLATION_get();
  return ret;
}

int VTK_CUBIC_INTERPOLATION() @property {
  auto ret = vtkd_im.VTK_CUBIC_INTERPOLATION_get();
  return ret;
}

int VTK_IMAGE_SLAB_MIN() @property {
  auto ret = vtkd_im.VTK_IMAGE_SLAB_MIN_get();
  return ret;
}

int VTK_IMAGE_SLAB_MAX() @property {
  auto ret = vtkd_im.VTK_IMAGE_SLAB_MAX_get();
  return ret;
}

int VTK_IMAGE_SLAB_MEAN() @property {
  auto ret = vtkd_im.VTK_IMAGE_SLAB_MEAN_get();
  return ret;
}

int VTK_IMAGE_SLAB_SUM() @property {
  auto ret = vtkd_im.VTK_IMAGE_SLAB_SUM_get();
  return ret;
}

int VTK_MAX_VRCOMP() @property {
  auto ret = vtkd_im.VTK_MAX_VRCOMP_get();
  return ret;
}

int VTK_ENCODING_NONE() @property {
  auto ret = vtkd_im.VTK_ENCODING_NONE_get();
  return ret;
}

int VTK_ENCODING_US_ASCII() @property {
  auto ret = vtkd_im.VTK_ENCODING_US_ASCII_get();
  return ret;
}

int VTK_ENCODING_UNICODE() @property {
  auto ret = vtkd_im.VTK_ENCODING_UNICODE_get();
  return ret;
}

int VTK_ENCODING_UTF_8() @property {
  auto ret = vtkd_im.VTK_ENCODING_UTF_8_get();
  return ret;
}

int VTK_ENCODING_ISO_8859_1() @property {
  auto ret = vtkd_im.VTK_ENCODING_ISO_8859_1_get();
  return ret;
}

int VTK_ENCODING_ISO_8859_2() @property {
  auto ret = vtkd_im.VTK_ENCODING_ISO_8859_2_get();
  return ret;
}

int VTK_ENCODING_ISO_8859_3() @property {
  auto ret = vtkd_im.VTK_ENCODING_ISO_8859_3_get();
  return ret;
}

int VTK_ENCODING_ISO_8859_4() @property {
  auto ret = vtkd_im.VTK_ENCODING_ISO_8859_4_get();
  return ret;
}

int VTK_ENCODING_ISO_8859_5() @property {
  auto ret = vtkd_im.VTK_ENCODING_ISO_8859_5_get();
  return ret;
}

int VTK_ENCODING_ISO_8859_6() @property {
  auto ret = vtkd_im.VTK_ENCODING_ISO_8859_6_get();
  return ret;
}

int VTK_ENCODING_ISO_8859_7() @property {
  auto ret = vtkd_im.VTK_ENCODING_ISO_8859_7_get();
  return ret;
}

int VTK_ENCODING_ISO_8859_8() @property {
  auto ret = vtkd_im.VTK_ENCODING_ISO_8859_8_get();
  return ret;
}

int VTK_ENCODING_ISO_8859_9() @property {
  auto ret = vtkd_im.VTK_ENCODING_ISO_8859_9_get();
  return ret;
}

int VTK_ENCODING_ISO_8859_10() @property {
  auto ret = vtkd_im.VTK_ENCODING_ISO_8859_10_get();
  return ret;
}

int VTK_ENCODING_ISO_8859_11() @property {
  auto ret = vtkd_im.VTK_ENCODING_ISO_8859_11_get();
  return ret;
}

int VTK_ENCODING_ISO_8859_12() @property {
  auto ret = vtkd_im.VTK_ENCODING_ISO_8859_12_get();
  return ret;
}

int VTK_ENCODING_ISO_8859_13() @property {
  auto ret = vtkd_im.VTK_ENCODING_ISO_8859_13_get();
  return ret;
}

int VTK_ENCODING_ISO_8859_14() @property {
  auto ret = vtkd_im.VTK_ENCODING_ISO_8859_14_get();
  return ret;
}

int VTK_ENCODING_ISO_8859_15() @property {
  auto ret = vtkd_im.VTK_ENCODING_ISO_8859_15_get();
  return ret;
}

int VTK_ENCODING_ISO_8859_16() @property {
  auto ret = vtkd_im.VTK_ENCODING_ISO_8859_16_get();
  return ret;
}

int VTK_ENCODING_UNKNOWN() @property {
  auto ret = vtkd_im.VTK_ENCODING_UNKNOWN_get();
  return ret;
}

void vtkOutputWindowDisplayText(string arg0) {
  vtkd_im.vtkOutputWindowDisplayText((arg0 ? std.string.toStringz(arg0) : null));
}

void vtkOutputWindowDisplayErrorText(string arg0) {
  vtkd_im.vtkOutputWindowDisplayErrorText((arg0 ? std.string.toStringz(arg0) : null));
}

void vtkOutputWindowDisplayWarningText(string arg0) {
  vtkd_im.vtkOutputWindowDisplayWarningText((arg0 ? std.string.toStringz(arg0) : null));
}

void vtkOutputWindowDisplayGenericWarningText(string arg0) {
  vtkd_im.vtkOutputWindowDisplayGenericWarningText((arg0 ? std.string.toStringz(arg0) : null));
}

void vtkOutputWindowDisplayDebugText(string arg0) {
  vtkd_im.vtkOutputWindowDisplayDebugText((arg0 ? std.string.toStringz(arg0) : null));
}

bool EqualEqual(vtkWeakPointerBase.vtkWeakPointerBase l, vtkWeakPointerBase.vtkWeakPointerBase r) {
  bool ret = vtkd_im.EqualEqual__SWIG_0(vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(l), vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool EqualEqual(vtkObjectBase.vtkObjectBase l, vtkWeakPointerBase.vtkWeakPointerBase r) {
  bool ret = vtkd_im.EqualEqual__SWIG_1(vtkObjectBase.vtkObjectBase.swigGetCPtr(l), vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool EqualEqual(vtkWeakPointerBase.vtkWeakPointerBase l, vtkObjectBase.vtkObjectBase r) {
  bool ret = vtkd_im.EqualEqual__SWIG_2(vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(l), vtkObjectBase.vtkObjectBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool NotEqual(vtkWeakPointerBase.vtkWeakPointerBase l, vtkWeakPointerBase.vtkWeakPointerBase r) {
  bool ret = vtkd_im.NotEqual__SWIG_0(vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(l), vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool NotEqual(vtkObjectBase.vtkObjectBase l, vtkWeakPointerBase.vtkWeakPointerBase r) {
  bool ret = vtkd_im.NotEqual__SWIG_1(vtkObjectBase.vtkObjectBase.swigGetCPtr(l), vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool NotEqual(vtkWeakPointerBase.vtkWeakPointerBase l, vtkObjectBase.vtkObjectBase r) {
  bool ret = vtkd_im.NotEqual__SWIG_2(vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(l), vtkObjectBase.vtkObjectBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool LessThan(vtkWeakPointerBase.vtkWeakPointerBase l, vtkWeakPointerBase.vtkWeakPointerBase r) {
  bool ret = vtkd_im.LessThan__SWIG_0(vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(l), vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool LessThan(vtkObjectBase.vtkObjectBase l, vtkWeakPointerBase.vtkWeakPointerBase r) {
  bool ret = vtkd_im.LessThan__SWIG_1(vtkObjectBase.vtkObjectBase.swigGetCPtr(l), vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool LessThan(vtkWeakPointerBase.vtkWeakPointerBase l, vtkObjectBase.vtkObjectBase r) {
  bool ret = vtkd_im.LessThan__SWIG_2(vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(l), vtkObjectBase.vtkObjectBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool LessThanEqual(vtkWeakPointerBase.vtkWeakPointerBase l, vtkWeakPointerBase.vtkWeakPointerBase r) {
  bool ret = vtkd_im.LessThanEqual__SWIG_0(vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(l), vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool LessThanEqual(vtkObjectBase.vtkObjectBase l, vtkWeakPointerBase.vtkWeakPointerBase r) {
  bool ret = vtkd_im.LessThanEqual__SWIG_1(vtkObjectBase.vtkObjectBase.swigGetCPtr(l), vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool LessThanEqual(vtkWeakPointerBase.vtkWeakPointerBase l, vtkObjectBase.vtkObjectBase r) {
  bool ret = vtkd_im.LessThanEqual__SWIG_2(vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(l), vtkObjectBase.vtkObjectBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool GreaterThan(vtkWeakPointerBase.vtkWeakPointerBase l, vtkWeakPointerBase.vtkWeakPointerBase r) {
  bool ret = vtkd_im.GreaterThan__SWIG_0(vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(l), vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool GreaterThan(vtkObjectBase.vtkObjectBase l, vtkWeakPointerBase.vtkWeakPointerBase r) {
  bool ret = vtkd_im.GreaterThan__SWIG_1(vtkObjectBase.vtkObjectBase.swigGetCPtr(l), vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool GreaterThan(vtkWeakPointerBase.vtkWeakPointerBase l, vtkObjectBase.vtkObjectBase r) {
  bool ret = vtkd_im.GreaterThan__SWIG_2(vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(l), vtkObjectBase.vtkObjectBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool GreaterThanEqual(vtkWeakPointerBase.vtkWeakPointerBase l, vtkWeakPointerBase.vtkWeakPointerBase r) {
  bool ret = vtkd_im.GreaterThanEqual__SWIG_0(vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(l), vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool GreaterThanEqual(vtkObjectBase.vtkObjectBase l, vtkWeakPointerBase.vtkWeakPointerBase r) {
  bool ret = vtkd_im.GreaterThanEqual__SWIG_1(vtkObjectBase.vtkObjectBase.swigGetCPtr(l), vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool GreaterThanEqual(vtkWeakPointerBase.vtkWeakPointerBase l, vtkObjectBase.vtkObjectBase r) {
  bool ret = vtkd_im.GreaterThanEqual__SWIG_2(vtkWeakPointerBase.vtkWeakPointerBase.swigGetCPtr(l), vtkObjectBase.vtkObjectBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

int VTK_VECTOR_MODE_PASS_VECTORS() @property {
  auto ret = vtkd_im.VTK_VECTOR_MODE_PASS_VECTORS_get();
  return ret;
}

int VTK_VECTOR_MODE_COMPUTE_GRADIENT() @property {
  auto ret = vtkd_im.VTK_VECTOR_MODE_COMPUTE_GRADIENT_get();
  return ret;
}

int VTK_VECTOR_MODE_COMPUTE_VORTICITY() @property {
  auto ret = vtkd_im.VTK_VECTOR_MODE_COMPUTE_VORTICITY_get();
  return ret;
}

int VTK_TENSOR_MODE_PASS_TENSORS() @property {
  auto ret = vtkd_im.VTK_TENSOR_MODE_PASS_TENSORS_get();
  return ret;
}

int VTK_TENSOR_MODE_COMPUTE_GRADIENT() @property {
  auto ret = vtkd_im.VTK_TENSOR_MODE_COMPUTE_GRADIENT_get();
  return ret;
}

int VTK_TENSOR_MODE_COMPUTE_STRAIN() @property {
  auto ret = vtkd_im.VTK_TENSOR_MODE_COMPUTE_STRAIN_get();
  return ret;
}

bool EqualEqual(vtkArrayRange.vtkArrayRange lhs, vtkArrayRange.vtkArrayRange rhs) {
  bool ret = vtkd_im.EqualEqual__SWIG_3(vtkArrayRange.vtkArrayRange.swigGetCPtr(lhs), vtkArrayRange.vtkArrayRange.swigGetCPtr(rhs)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool NotEqual(vtkArrayRange.vtkArrayRange lhs, vtkArrayRange.vtkArrayRange rhs) {
  bool ret = vtkd_im.NotEqual__SWIG_3(vtkArrayRange.vtkArrayRange.swigGetCPtr(lhs), vtkArrayRange.vtkArrayRange.swigGetCPtr(rhs)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool EqualEqual(vtkUnicodeString.vtkUnicodeString lhs, vtkUnicodeString.vtkUnicodeString rhs) {
  bool ret = vtkd_im.EqualEqual__SWIG_4(vtkUnicodeString.vtkUnicodeString.swigGetCPtr(lhs), vtkUnicodeString.vtkUnicodeString.swigGetCPtr(rhs)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool NotEqual(vtkUnicodeString.vtkUnicodeString lhs, vtkUnicodeString.vtkUnicodeString rhs) {
  bool ret = vtkd_im.NotEqual__SWIG_4(vtkUnicodeString.vtkUnicodeString.swigGetCPtr(lhs), vtkUnicodeString.vtkUnicodeString.swigGetCPtr(rhs)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool LessThan(vtkUnicodeString.vtkUnicodeString lhs, vtkUnicodeString.vtkUnicodeString rhs) {
  bool ret = vtkd_im.LessThan__SWIG_3(vtkUnicodeString.vtkUnicodeString.swigGetCPtr(lhs), vtkUnicodeString.vtkUnicodeString.swigGetCPtr(rhs)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool LessThanEqual(vtkUnicodeString.vtkUnicodeString lhs, vtkUnicodeString.vtkUnicodeString rhs) {
  bool ret = vtkd_im.LessThanEqual__SWIG_3(vtkUnicodeString.vtkUnicodeString.swigGetCPtr(lhs), vtkUnicodeString.vtkUnicodeString.swigGetCPtr(rhs)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool GreaterThanEqual(vtkUnicodeString.vtkUnicodeString lhs, vtkUnicodeString.vtkUnicodeString rhs) {
  bool ret = vtkd_im.GreaterThanEqual__SWIG_3(vtkUnicodeString.vtkUnicodeString.swigGetCPtr(lhs), vtkUnicodeString.vtkUnicodeString.swigGetCPtr(rhs)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool GreaterThan(vtkUnicodeString.vtkUnicodeString lhs, vtkUnicodeString.vtkUnicodeString rhs) {
  bool ret = vtkd_im.GreaterThan__SWIG_3(vtkUnicodeString.vtkUnicodeString.swigGetCPtr(lhs), vtkUnicodeString.vtkUnicodeString.swigGetCPtr(rhs)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool IsSigned64Bit(int VariantType) {
  bool ret = vtkd_im.IsSigned64Bit(VariantType) ? true : false;
  return ret;
}

bool IsSigned(int VariantType) {
  bool ret = vtkd_im.IsSigned(VariantType) ? true : false;
  return ret;
}

bool IsFloatingPoint(int VariantType) {
  bool ret = vtkd_im.IsFloatingPoint(VariantType) ? true : false;
  return ret;
}

bool CompareSignedUnsignedEqual(vtkVariant.vtkVariant SignedVariant, vtkVariant.vtkVariant UnsignedVariant) {
  bool ret = vtkd_im.CompareSignedUnsignedEqual(vtkVariant.vtkVariant.swigGetCPtr(SignedVariant), vtkVariant.vtkVariant.swigGetCPtr(UnsignedVariant)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool CompareSignedUnsignedLessThan(vtkVariant.vtkVariant SignedVariant, vtkVariant.vtkVariant UnsignedVariant) {
  bool ret = vtkd_im.CompareSignedUnsignedLessThan(vtkVariant.vtkVariant.swigGetCPtr(SignedVariant), vtkVariant.vtkVariant.swigGetCPtr(UnsignedVariant)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool CompareUnsignedSignedLessThan(vtkVariant.vtkVariant UnsignedVariant, vtkVariant.vtkVariant SignedVariant) {
  bool ret = vtkd_im.CompareUnsignedSignedLessThan(vtkVariant.vtkVariant.swigGetCPtr(UnsignedVariant), vtkVariant.vtkVariant.swigGetCPtr(SignedVariant)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool CompareSignedLessThan(vtkVariant.vtkVariant A, vtkVariant.vtkVariant B) {
  bool ret = vtkd_im.CompareSignedLessThan(vtkVariant.vtkVariant.swigGetCPtr(A), vtkVariant.vtkVariant.swigGetCPtr(B)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool CompareUnsignedLessThan(vtkVariant.vtkVariant A, vtkVariant.vtkVariant B) {
  bool ret = vtkd_im.CompareUnsignedLessThan(vtkVariant.vtkVariant.swigGetCPtr(A), vtkVariant.vtkVariant.swigGetCPtr(B)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

int VTK_PIECES_EXTENT() @property {
  auto ret = vtkd_im.VTK_PIECES_EXTENT_get();
  return ret;
}

int VTK_3D_EXTENT() @property {
  auto ret = vtkd_im.VTK_3D_EXTENT_get();
  return ret;
}

int VTK_TIME_EXTENT() @property {
  auto ret = vtkd_im.VTK_TIME_EXTENT_get();
  return ret;
}

string VTK_MATERIALS_DIRS() @property {
  string ret = std.conv.to!string(vtkd_im.VTK_MATERIALS_DIRS_get());
  return ret;
}

bool EqualEqual(vtkSmartPointerBase.vtkSmartPointerBase l, vtkSmartPointerBase.vtkSmartPointerBase r) {
  bool ret = vtkd_im.EqualEqual__SWIG_5(vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(l), vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool EqualEqual(vtkObjectBase.vtkObjectBase l, vtkSmartPointerBase.vtkSmartPointerBase r) {
  bool ret = vtkd_im.EqualEqual__SWIG_6(vtkObjectBase.vtkObjectBase.swigGetCPtr(l), vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool EqualEqual(vtkSmartPointerBase.vtkSmartPointerBase l, vtkObjectBase.vtkObjectBase r) {
  bool ret = vtkd_im.EqualEqual__SWIG_7(vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(l), vtkObjectBase.vtkObjectBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool NotEqual(vtkSmartPointerBase.vtkSmartPointerBase l, vtkSmartPointerBase.vtkSmartPointerBase r) {
  bool ret = vtkd_im.NotEqual__SWIG_5(vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(l), vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool NotEqual(vtkObjectBase.vtkObjectBase l, vtkSmartPointerBase.vtkSmartPointerBase r) {
  bool ret = vtkd_im.NotEqual__SWIG_6(vtkObjectBase.vtkObjectBase.swigGetCPtr(l), vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool NotEqual(vtkSmartPointerBase.vtkSmartPointerBase l, vtkObjectBase.vtkObjectBase r) {
  bool ret = vtkd_im.NotEqual__SWIG_7(vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(l), vtkObjectBase.vtkObjectBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool LessThan(vtkSmartPointerBase.vtkSmartPointerBase l, vtkSmartPointerBase.vtkSmartPointerBase r) {
  bool ret = vtkd_im.LessThan__SWIG_4(vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(l), vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool LessThan(vtkObjectBase.vtkObjectBase l, vtkSmartPointerBase.vtkSmartPointerBase r) {
  bool ret = vtkd_im.LessThan__SWIG_5(vtkObjectBase.vtkObjectBase.swigGetCPtr(l), vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool LessThan(vtkSmartPointerBase.vtkSmartPointerBase l, vtkObjectBase.vtkObjectBase r) {
  bool ret = vtkd_im.LessThan__SWIG_6(vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(l), vtkObjectBase.vtkObjectBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool LessThanEqual(vtkSmartPointerBase.vtkSmartPointerBase l, vtkSmartPointerBase.vtkSmartPointerBase r) {
  bool ret = vtkd_im.LessThanEqual__SWIG_4(vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(l), vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool LessThanEqual(vtkObjectBase.vtkObjectBase l, vtkSmartPointerBase.vtkSmartPointerBase r) {
  bool ret = vtkd_im.LessThanEqual__SWIG_5(vtkObjectBase.vtkObjectBase.swigGetCPtr(l), vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool LessThanEqual(vtkSmartPointerBase.vtkSmartPointerBase l, vtkObjectBase.vtkObjectBase r) {
  bool ret = vtkd_im.LessThanEqual__SWIG_6(vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(l), vtkObjectBase.vtkObjectBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool GreaterThan(vtkSmartPointerBase.vtkSmartPointerBase l, vtkSmartPointerBase.vtkSmartPointerBase r) {
  bool ret = vtkd_im.GreaterThan__SWIG_4(vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(l), vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool GreaterThan(vtkObjectBase.vtkObjectBase l, vtkSmartPointerBase.vtkSmartPointerBase r) {
  bool ret = vtkd_im.GreaterThan__SWIG_5(vtkObjectBase.vtkObjectBase.swigGetCPtr(l), vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool GreaterThan(vtkSmartPointerBase.vtkSmartPointerBase l, vtkObjectBase.vtkObjectBase r) {
  bool ret = vtkd_im.GreaterThan__SWIG_6(vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(l), vtkObjectBase.vtkObjectBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool GreaterThanEqual(vtkSmartPointerBase.vtkSmartPointerBase l, vtkSmartPointerBase.vtkSmartPointerBase r) {
  bool ret = vtkd_im.GreaterThanEqual__SWIG_4(vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(l), vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool GreaterThanEqual(vtkObjectBase.vtkObjectBase l, vtkSmartPointerBase.vtkSmartPointerBase r) {
  bool ret = vtkd_im.GreaterThanEqual__SWIG_5(vtkObjectBase.vtkObjectBase.swigGetCPtr(l), vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

bool GreaterThanEqual(vtkSmartPointerBase.vtkSmartPointerBase l, vtkObjectBase.vtkObjectBase r) {
  bool ret = vtkd_im.GreaterThanEqual__SWIG_6(vtkSmartPointerBase.vtkSmartPointerBase.swigGetCPtr(l), vtkObjectBase.vtkObjectBase.swigGetCPtr(r)) ? true : false;
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

int VTK_SCALAR_MODE_DEFAULT() @property {
  auto ret = vtkd_im.VTK_SCALAR_MODE_DEFAULT_get();
  return ret;
}

int VTK_SCALAR_MODE_USE_POINT_DATA() @property {
  auto ret = vtkd_im.VTK_SCALAR_MODE_USE_POINT_DATA_get();
  return ret;
}

int VTK_SCALAR_MODE_USE_CELL_DATA() @property {
  auto ret = vtkd_im.VTK_SCALAR_MODE_USE_CELL_DATA_get();
  return ret;
}

int VTK_SCALAR_MODE_USE_POINT_FIELD_DATA() @property {
  auto ret = vtkd_im.VTK_SCALAR_MODE_USE_POINT_FIELD_DATA_get();
  return ret;
}

int VTK_SCALAR_MODE_USE_CELL_FIELD_DATA() @property {
  auto ret = vtkd_im.VTK_SCALAR_MODE_USE_CELL_FIELD_DATA_get();
  return ret;
}

int VTK_SCALAR_MODE_USE_FIELD_DATA() @property {
  auto ret = vtkd_im.VTK_SCALAR_MODE_USE_FIELD_DATA_get();
  return ret;
}

int VTK_GET_ARRAY_BY_ID() @property {
  auto ret = vtkd_im.VTK_GET_ARRAY_BY_ID_get();
  return ret;
}

int VTK_GET_ARRAY_BY_NAME() @property {
  auto ret = vtkd_im.VTK_GET_ARRAY_BY_NAME_get();
  return ret;
}

int VTK_UNCHANGED() @property {
  auto ret = vtkd_im.VTK_UNCHANGED_get();
  return ret;
}

int VTK_SINGLE_POINT() @property {
  auto ret = vtkd_im.VTK_SINGLE_POINT_get();
  return ret;
}

int VTK_X_LINE() @property {
  auto ret = vtkd_im.VTK_X_LINE_get();
  return ret;
}

int VTK_Y_LINE() @property {
  auto ret = vtkd_im.VTK_Y_LINE_get();
  return ret;
}

int VTK_Z_LINE() @property {
  auto ret = vtkd_im.VTK_Z_LINE_get();
  return ret;
}

int VTK_XY_PLANE() @property {
  auto ret = vtkd_im.VTK_XY_PLANE_get();
  return ret;
}

int VTK_YZ_PLANE() @property {
  auto ret = vtkd_im.VTK_YZ_PLANE_get();
  return ret;
}

int VTK_XZ_PLANE() @property {
  auto ret = vtkd_im.VTK_XZ_PLANE_get();
  return ret;
}

int VTK_XYZ_GRID() @property {
  auto ret = vtkd_im.VTK_XYZ_GRID_get();
  return ret;
}

int VTK_EMPTY() @property {
  auto ret = vtkd_im.VTK_EMPTY_get();
  return ret;
}

int VTK_RESOLVE_OFF() @property {
  auto ret = vtkd_im.VTK_RESOLVE_OFF_get();
  return ret;
}

int VTK_RESOLVE_POLYGON_OFFSET() @property {
  auto ret = vtkd_im.VTK_RESOLVE_POLYGON_OFFSET_get();
  return ret;
}

int VTK_RESOLVE_SHIFT_ZBUFFER() @property {
  auto ret = vtkd_im.VTK_RESOLVE_SHIFT_ZBUFFER_get();
  return ret;
}

int VTK_MATERIALMODE_DEFAULT() @property {
  auto ret = vtkd_im.VTK_MATERIALMODE_DEFAULT_get();
  return ret;
}

int VTK_MATERIALMODE_AMBIENT() @property {
  auto ret = vtkd_im.VTK_MATERIALMODE_AMBIENT_get();
  return ret;
}

int VTK_MATERIALMODE_DIFFUSE() @property {
  auto ret = vtkd_im.VTK_MATERIALMODE_DIFFUSE_get();
  return ret;
}

int VTK_MATERIALMODE_AMBIENT_AND_DIFFUSE() @property {
  auto ret = vtkd_im.VTK_MATERIALMODE_AMBIENT_AND_DIFFUSE_get();
  return ret;
}

int VTK_STEREO_CRYSTAL_EYES() @property {
  auto ret = vtkd_im.VTK_STEREO_CRYSTAL_EYES_get();
  return ret;
}

int VTK_STEREO_RED_BLUE() @property {
  auto ret = vtkd_im.VTK_STEREO_RED_BLUE_get();
  return ret;
}

int VTK_STEREO_INTERLACED() @property {
  auto ret = vtkd_im.VTK_STEREO_INTERLACED_get();
  return ret;
}

int VTK_STEREO_LEFT() @property {
  auto ret = vtkd_im.VTK_STEREO_LEFT_get();
  return ret;
}

int VTK_STEREO_RIGHT() @property {
  auto ret = vtkd_im.VTK_STEREO_RIGHT_get();
  return ret;
}

int VTK_STEREO_DRESDEN() @property {
  auto ret = vtkd_im.VTK_STEREO_DRESDEN_get();
  return ret;
}

int VTK_STEREO_ANAGLYPH() @property {
  auto ret = vtkd_im.VTK_STEREO_ANAGLYPH_get();
  return ret;
}

int VTK_STEREO_CHECKERBOARD() @property {
  auto ret = vtkd_im.VTK_STEREO_CHECKERBOARD_get();
  return ret;
}

int VTK_STEREO_SPLITVIEWPORT_HORIZONTAL() @property {
  auto ret = vtkd_im.VTK_STEREO_SPLITVIEWPORT_HORIZONTAL_get();
  return ret;
}

int VTK_CURSOR_DEFAULT() @property {
  auto ret = vtkd_im.VTK_CURSOR_DEFAULT_get();
  return ret;
}

int VTK_CURSOR_ARROW() @property {
  auto ret = vtkd_im.VTK_CURSOR_ARROW_get();
  return ret;
}

int VTK_CURSOR_SIZENE() @property {
  auto ret = vtkd_im.VTK_CURSOR_SIZENE_get();
  return ret;
}

int VTK_CURSOR_SIZENW() @property {
  auto ret = vtkd_im.VTK_CURSOR_SIZENW_get();
  return ret;
}

int VTK_CURSOR_SIZESW() @property {
  auto ret = vtkd_im.VTK_CURSOR_SIZESW_get();
  return ret;
}

int VTK_CURSOR_SIZESE() @property {
  auto ret = vtkd_im.VTK_CURSOR_SIZESE_get();
  return ret;
}

int VTK_CURSOR_SIZENS() @property {
  auto ret = vtkd_im.VTK_CURSOR_SIZENS_get();
  return ret;
}

int VTK_CURSOR_SIZEWE() @property {
  auto ret = vtkd_im.VTK_CURSOR_SIZEWE_get();
  return ret;
}

int VTK_CURSOR_SIZEALL() @property {
  auto ret = vtkd_im.VTK_CURSOR_SIZEALL_get();
  return ret;
}

int VTK_CURSOR_HAND() @property {
  auto ret = vtkd_im.VTK_CURSOR_HAND_get();
  return ret;
}

int VTK_CURSOR_CROSSHAIR() @property {
  auto ret = vtkd_im.VTK_CURSOR_CROSSHAIR_get();
  return ret;
}

int VTK_SQL_FEATURE_TRANSACTIONS() @property {
  auto ret = vtkd_im.VTK_SQL_FEATURE_TRANSACTIONS_get();
  return ret;
}

int VTK_SQL_FEATURE_QUERY_SIZE() @property {
  auto ret = vtkd_im.VTK_SQL_FEATURE_QUERY_SIZE_get();
  return ret;
}

int VTK_SQL_FEATURE_BLOB() @property {
  auto ret = vtkd_im.VTK_SQL_FEATURE_BLOB_get();
  return ret;
}

int VTK_SQL_FEATURE_UNICODE() @property {
  auto ret = vtkd_im.VTK_SQL_FEATURE_UNICODE_get();
  return ret;
}

int VTK_SQL_FEATURE_PREPARED_QUERIES() @property {
  auto ret = vtkd_im.VTK_SQL_FEATURE_PREPARED_QUERIES_get();
  return ret;
}

int VTK_SQL_FEATURE_NAMED_PLACEHOLDERS() @property {
  auto ret = vtkd_im.VTK_SQL_FEATURE_NAMED_PLACEHOLDERS_get();
  return ret;
}

int VTK_SQL_FEATURE_POSITIONAL_PLACEHOLDERS() @property {
  auto ret = vtkd_im.VTK_SQL_FEATURE_POSITIONAL_PLACEHOLDERS_get();
  return ret;
}

int VTK_SQL_FEATURE_LAST_INSERT_ID() @property {
  auto ret = vtkd_im.VTK_SQL_FEATURE_LAST_INSERT_ID_get();
  return ret;
}

int VTK_SQL_FEATURE_BATCH_OPERATIONS() @property {
  auto ret = vtkd_im.VTK_SQL_FEATURE_BATCH_OPERATIONS_get();
  return ret;
}

int VTK_SQL_FEATURE_TRIGGERS() @property {
  auto ret = vtkd_im.VTK_SQL_FEATURE_TRIGGERS_get();
  return ret;
}

int VTK_SQL_DEFAULT_COLUMN_SIZE() @property {
  auto ret = vtkd_im.VTK_SQL_DEFAULT_COLUMN_SIZE_get();
  return ret;
}

int VTK_ASCII() @property {
  auto ret = vtkd_im.VTK_ASCII_get();
  return ret;
}

int VTK_BINARY() @property {
  auto ret = vtkd_im.VTK_BINARY_get();
  return ret;
}

int VTK_PROJECTION_YZ() @property {
  auto ret = vtkd_im.VTK_PROJECTION_YZ_get();
  return ret;
}

int VTK_PROJECTION_XZ() @property {
  auto ret = vtkd_im.VTK_PROJECTION_XZ_get();
  return ret;
}

int VTK_PROJECTION_XY() @property {
  auto ret = vtkd_im.VTK_PROJECTION_XY_get();
  return ret;
}

int VTK_PROJECTION_OBLIQUE() @property {
  auto ret = vtkd_im.VTK_PROJECTION_OBLIQUE_get();
  return ret;
}

int VTK_RESLICE_NEAREST() @property {
  auto ret = vtkd_im.VTK_RESLICE_NEAREST_get();
  return ret;
}

int VTK_RESLICE_LINEAR() @property {
  auto ret = vtkd_im.VTK_RESLICE_LINEAR_get();
  return ret;
}

int VTK_RESLICE_CUBIC() @property {
  auto ret = vtkd_im.VTK_RESLICE_CUBIC_get();
  return ret;
}

int VTK_CROP_SUBVOLUME() @property {
  auto ret = vtkd_im.VTK_CROP_SUBVOLUME_get();
  return ret;
}

int VTK_CROP_FENCE() @property {
  auto ret = vtkd_im.VTK_CROP_FENCE_get();
  return ret;
}

int VTK_CROP_INVERTED_FENCE() @property {
  auto ret = vtkd_im.VTK_CROP_INVERTED_FENCE_get();
  return ret;
}

int VTK_CROP_CROSS() @property {
  auto ret = vtkd_im.VTK_CROP_CROSS_get();
  return ret;
}

int VTK_CROP_INVERTED_CROSS() @property {
  auto ret = vtkd_im.VTK_CROP_INVERTED_CROSS_get();
  return ret;
}

void vtkDebugLeaksManagerInstance(vtkDebugLeaksManager.vtkDebugLeaksManager value) @property {
  vtkd_im.vtkDebugLeaksManagerInstance_set(vtkDebugLeaksManager.vtkDebugLeaksManager.swigGetCPtr(value));
}

vtkDebugLeaksManager.vtkDebugLeaksManager vtkDebugLeaksManagerInstance() @property {
  void* cPtr = vtkd_im.vtkDebugLeaksManagerInstance_get();
  vtkDebugLeaksManager.vtkDebugLeaksManager ret = (cPtr is null) ? null : new vtkDebugLeaksManager.vtkDebugLeaksManager(cPtr, false);
  return ret;
}

void vtkCommonInformationKeyManagerInstance(vtkCommonInformationKeyManager.vtkCommonInformationKeyManager value) @property {
  vtkd_im.vtkCommonInformationKeyManagerInstance_set(vtkCommonInformationKeyManager.vtkCommonInformationKeyManager.swigGetCPtr(value));
}

vtkCommonInformationKeyManager.vtkCommonInformationKeyManager vtkCommonInformationKeyManagerInstance() @property {
  void* cPtr = vtkd_im.vtkCommonInformationKeyManagerInstance_get();
  vtkCommonInformationKeyManager.vtkCommonInformationKeyManager ret = (cPtr is null) ? null : new vtkCommonInformationKeyManager.vtkCommonInformationKeyManager(cPtr, false);
  return ret;
}

int VTK_ATTRIBUTE_MODE_DEFAULT() @property {
  auto ret = vtkd_im.VTK_ATTRIBUTE_MODE_DEFAULT_get();
  return ret;
}

int VTK_ATTRIBUTE_MODE_USE_POINT_DATA() @property {
  auto ret = vtkd_im.VTK_ATTRIBUTE_MODE_USE_POINT_DATA_get();
  return ret;
}

int VTK_ATTRIBUTE_MODE_USE_CELL_DATA() @property {
  auto ret = vtkd_im.VTK_ATTRIBUTE_MODE_USE_CELL_DATA_get();
  return ret;
}

int VTK_COMPONENT_MODE_USE_SELECTED() @property {
  auto ret = vtkd_im.VTK_COMPONENT_MODE_USE_SELECTED_get();
  return ret;
}

int VTK_COMPONENT_MODE_USE_ALL() @property {
  auto ret = vtkd_im.VTK_COMPONENT_MODE_USE_ALL_get();
  return ret;
}

int VTK_COMPONENT_MODE_USE_ANY() @property {
  auto ret = vtkd_im.VTK_COMPONENT_MODE_USE_ANY_get();
  return ret;
}

int VTK_FILE_BYTE_ORDER_BIG_ENDIAN() @property {
  auto ret = vtkd_im.VTK_FILE_BYTE_ORDER_BIG_ENDIAN_get();
  return ret;
}

int VTK_FILE_BYTE_ORDER_LITTLE_ENDIAN() @property {
  auto ret = vtkd_im.VTK_FILE_BYTE_ORDER_LITTLE_ENDIAN_get();
  return ret;
}

int VTK_ITW_PROJECTION_YZ() @property {
  auto ret = vtkd_im.VTK_ITW_PROJECTION_YZ_get();
  return ret;
}

int VTK_ITW_PROJECTION_XZ() @property {
  auto ret = vtkd_im.VTK_ITW_PROJECTION_XZ_get();
  return ret;
}

int VTK_ITW_PROJECTION_XY() @property {
  auto ret = vtkd_im.VTK_ITW_PROJECTION_XY_get();
  return ret;
}

int VTK_ITW_SNAP_CELLS() @property {
  auto ret = vtkd_im.VTK_ITW_SNAP_CELLS_get();
  return ret;
}

int VTK_ITW_SNAP_POINTS() @property {
  auto ret = vtkd_im.VTK_ITW_SNAP_POINTS_get();
  return ret;
}

int VTK_RAMP_LINEAR() @property {
  auto ret = vtkd_im.VTK_RAMP_LINEAR_get();
  return ret;
}

int VTK_RAMP_SCURVE() @property {
  auto ret = vtkd_im.VTK_RAMP_SCURVE_get();
  return ret;
}

int VTK_RAMP_SQRT() @property {
  auto ret = vtkd_im.VTK_RAMP_SQRT_get();
  return ret;
}

int VTK_SCALE_LINEAR() @property {
  auto ret = vtkd_im.VTK_SCALE_LINEAR_get();
  return ret;
}

int VTK_SCALE_LOG10() @property {
  auto ret = vtkd_im.VTK_SCALE_LOG10_get();
  return ret;
}

int VTK_POINT_UNIFORM() @property {
  auto ret = vtkd_im.VTK_POINT_UNIFORM_get();
  return ret;
}

int VTK_POINT_SHELL() @property {
  auto ret = vtkd_im.VTK_POINT_SHELL_get();
  return ret;
}

int VTK_SORT_BY_VALUE() @property {
  auto ret = vtkd_im.VTK_SORT_BY_VALUE_get();
  return ret;
}

int VTK_SORT_BY_CELL() @property {
  auto ret = vtkd_im.VTK_SORT_BY_CELL_get();
  return ret;
}

int VTKIS_START() @property {
  auto ret = vtkd_im.VTKIS_START_get();
  return ret;
}

int VTKIS_NONE() @property {
  auto ret = vtkd_im.VTKIS_NONE_get();
  return ret;
}

int VTKIS_ROTATE() @property {
  auto ret = vtkd_im.VTKIS_ROTATE_get();
  return ret;
}

int VTKIS_PAN() @property {
  auto ret = vtkd_im.VTKIS_PAN_get();
  return ret;
}

int VTKIS_SPIN() @property {
  auto ret = vtkd_im.VTKIS_SPIN_get();
  return ret;
}

int VTKIS_DOLLY() @property {
  auto ret = vtkd_im.VTKIS_DOLLY_get();
  return ret;
}

int VTKIS_ZOOM() @property {
  auto ret = vtkd_im.VTKIS_ZOOM_get();
  return ret;
}

int VTKIS_USCALE() @property {
  auto ret = vtkd_im.VTKIS_USCALE_get();
  return ret;
}

int VTKIS_TIMER() @property {
  auto ret = vtkd_im.VTKIS_TIMER_get();
  return ret;
}

int VTKIS_FORWARDFLY() @property {
  auto ret = vtkd_im.VTKIS_FORWARDFLY_get();
  return ret;
}

int VTKIS_REVERSEFLY() @property {
  auto ret = vtkd_im.VTKIS_REVERSEFLY_get();
  return ret;
}

int VTKIS_ANIM_OFF() @property {
  auto ret = vtkd_im.VTKIS_ANIM_OFF_get();
  return ret;
}

int VTKIS_ANIM_ON() @property {
  auto ret = vtkd_im.VTKIS_ANIM_ON_get();
  return ret;
}

int VTK_IMAGE_BORDER_CLAMP() @property {
  auto ret = vtkd_im.VTK_IMAGE_BORDER_CLAMP_get();
  return ret;
}

int VTK_IMAGE_BORDER_REPEAT() @property {
  auto ret = vtkd_im.VTK_IMAGE_BORDER_REPEAT_get();
  return ret;
}

int VTK_IMAGE_BORDER_MIRROR() @property {
  auto ret = vtkd_im.VTK_IMAGE_BORDER_MIRROR_get();
  return ret;
}

int VTK_LANCZOS_WINDOW() @property {
  auto ret = vtkd_im.VTK_LANCZOS_WINDOW_get();
  return ret;
}

int VTK_KAISER_WINDOW() @property {
  auto ret = vtkd_im.VTK_KAISER_WINDOW_get();
  return ret;
}

int VTK_COSINE_WINDOW() @property {
  auto ret = vtkd_im.VTK_COSINE_WINDOW_get();
  return ret;
}

int VTK_HANN_WINDOW() @property {
  auto ret = vtkd_im.VTK_HANN_WINDOW_get();
  return ret;
}

int VTK_HAMMING_WINDOW() @property {
  auto ret = vtkd_im.VTK_HAMMING_WINDOW_get();
  return ret;
}

int VTK_BLACKMAN_WINDOW() @property {
  auto ret = vtkd_im.VTK_BLACKMAN_WINDOW_get();
  return ret;
}

int VTK_BLACKMAN_HARRIS3() @property {
  auto ret = vtkd_im.VTK_BLACKMAN_HARRIS3_get();
  return ret;
}

int VTK_BLACKMAN_HARRIS4() @property {
  auto ret = vtkd_im.VTK_BLACKMAN_HARRIS4_get();
  return ret;
}

int VTK_NUTTALL_WINDOW() @property {
  auto ret = vtkd_im.VTK_NUTTALL_WINDOW_get();
  return ret;
}

int VTK_BLACKMAN_NUTTALL3() @property {
  auto ret = vtkd_im.VTK_BLACKMAN_NUTTALL3_get();
  return ret;
}

int VTK_BLACKMAN_NUTTALL4() @property {
  auto ret = vtkd_im.VTK_BLACKMAN_NUTTALL4_get();
  return ret;
}

int VTK_SINC_KERNEL_SIZE_MAX() @property {
  auto ret = vtkd_im.VTK_SINC_KERNEL_SIZE_MAX_get();
  return ret;
}

int VTK_ZBUFFER() @property {
  auto ret = vtkd_im.VTK_ZBUFFER_get();
  return ret;
}

int VTK_TEXTURE_STYLE_FIT_IMAGE() @property {
  auto ret = vtkd_im.VTK_TEXTURE_STYLE_FIT_IMAGE_get();
  return ret;
}

int VTK_TEXTURE_STYLE_PROPORTIONAL() @property {
  auto ret = vtkd_im.VTK_TEXTURE_STYLE_PROPORTIONAL_get();
  return ret;
}

int VTK_BOX_TYPE_AXIS_ALIGNED() @property {
  auto ret = vtkd_im.VTK_BOX_TYPE_AXIS_ALIGNED_get();
  return ret;
}

int VTK_BOX_TYPE_ORIENTED() @property {
  auto ret = vtkd_im.VTK_BOX_TYPE_ORIENTED_get();
  return ret;
}

int PLY_ASCII() @property {
  auto ret = vtkd_im.PLY_ASCII_get();
  return ret;
}

int PLY_BINARY_BE() @property {
  auto ret = vtkd_im.PLY_BINARY_BE_get();
  return ret;
}

int PLY_BINARY_LE() @property {
  auto ret = vtkd_im.PLY_BINARY_LE_get();
  return ret;
}

int PLY_OKAY() @property {
  auto ret = vtkd_im.PLY_OKAY_get();
  return ret;
}

int PLY_ERROR() @property {
  auto ret = vtkd_im.PLY_ERROR_get();
  return ret;
}

int PLY_START_TYPE() @property {
  auto ret = vtkd_im.PLY_START_TYPE_get();
  return ret;
}

int PLY_CHAR() @property {
  auto ret = vtkd_im.PLY_CHAR_get();
  return ret;
}

int PLY_SHORT() @property {
  auto ret = vtkd_im.PLY_SHORT_get();
  return ret;
}

int PLY_INT() @property {
  auto ret = vtkd_im.PLY_INT_get();
  return ret;
}

int PLY_INT32() @property {
  auto ret = vtkd_im.PLY_INT32_get();
  return ret;
}

int PLY_UCHAR() @property {
  auto ret = vtkd_im.PLY_UCHAR_get();
  return ret;
}

int PLY_USHORT() @property {
  auto ret = vtkd_im.PLY_USHORT_get();
  return ret;
}

int PLY_UINT() @property {
  auto ret = vtkd_im.PLY_UINT_get();
  return ret;
}

int PLY_UINT8() @property {
  auto ret = vtkd_im.PLY_UINT8_get();
  return ret;
}

int PLY_FLOAT() @property {
  auto ret = vtkd_im.PLY_FLOAT_get();
  return ret;
}

int PLY_FLOAT32() @property {
  auto ret = vtkd_im.PLY_FLOAT32_get();
  return ret;
}

int PLY_DOUBLE() @property {
  auto ret = vtkd_im.PLY_DOUBLE_get();
  return ret;
}

int PLY_END_TYPE() @property {
  auto ret = vtkd_im.PLY_END_TYPE_get();
  return ret;
}

int PLY_SCALAR() @property {
  auto ret = vtkd_im.PLY_SCALAR_get();
  return ret;
}

int PLY_LIST() @property {
  auto ret = vtkd_im.PLY_LIST_get();
  return ret;
}

int VTK_IMAGE_NON_MAXIMUM_SUPPRESSION_MAGNITUDE_INPUT() @property {
  auto ret = vtkd_im.VTK_IMAGE_NON_MAXIMUM_SUPPRESSION_MAGNITUDE_INPUT_get();
  return ret;
}

int VTK_IMAGE_NON_MAXIMUM_SUPPRESSION_VECTOR_INPUT() @property {
  auto ret = vtkd_im.VTK_IMAGE_NON_MAXIMUM_SUPPRESSION_VECTOR_INPUT_get();
  return ret;
}

int VTK_CELL_SIZE() @property {
  auto ret = vtkd_im.VTK_CELL_SIZE_get();
  return ret;
}

double VTK_TOL() @property {
  auto ret = vtkd_im.VTK_TOL_get();
  return ret;
}

int VTK_MAX_SPHERE_RESOLUTION() @property {
  auto ret = vtkd_im.VTK_MAX_SPHERE_RESOLUTION_get();
  return ret;
}

int VTK_SPHERE_OFF() @property {
  auto ret = vtkd_im.VTK_SPHERE_OFF_get();
  return ret;
}

int VTK_SPHERE_WIREFRAME() @property {
  auto ret = vtkd_im.VTK_SPHERE_WIREFRAME_get();
  return ret;
}

int VTK_SPHERE_SURFACE() @property {
  auto ret = vtkd_im.VTK_SPHERE_SURFACE_get();
  return ret;
}

double VTK_MIN_SUPERQUADRIC_THICKNESS() @property {
  auto ret = vtkd_im.VTK_MIN_SUPERQUADRIC_THICKNESS_get();
  return ret;
}

int VTK_FLAT() @property {
  auto ret = vtkd_im.VTK_FLAT_get();
  return ret;
}

int VTK_GOURAUD() @property {
  auto ret = vtkd_im.VTK_GOURAUD_get();
  return ret;
}

int VTK_PHONG() @property {
  auto ret = vtkd_im.VTK_PHONG_get();
  return ret;
}

int VTK_POINTS() @property {
  auto ret = vtkd_im.VTK_POINTS_get();
  return ret;
}

int VTK_WIREFRAME() @property {
  auto ret = vtkd_im.VTK_WIREFRAME_get();
  return ret;
}

int VTK_SURFACE() @property {
  auto ret = vtkd_im.VTK_SURFACE_get();
  return ret;
}

int VTK_UPDATE_EXTENT_COMBINE() @property {
  auto ret = vtkd_im.VTK_UPDATE_EXTENT_COMBINE_get();
  return ret;
}

int VTK_UPDATE_EXTENT_REPLACE() @property {
  auto ret = vtkd_im.VTK_UPDATE_EXTENT_REPLACE_get();
  return ret;
}

string VTK_SOURCE_VERSION() @property {
  string ret = std.conv.to!string(vtkd_im.VTK_SOURCE_VERSION_get());
  return ret;
}

enum {
  VTK_MARKER_NONE = 0,
  VTK_MARKER_CROSS,
  VTK_MARKER_PLUS,
  VTK_MARKER_SQUARE,
  VTK_MARKER_CIRCLE,
  VTK_MARKER_DIAMOND,
  VTK_MARKER_UNKNOWN
}

int VTK_LOG_EVENT_LENGTH() @property {
  auto ret = vtkd_im.VTK_LOG_EVENT_LENGTH_get();
  return ret;
}

int VTK_DISPLAY() @property {
  auto ret = vtkd_im.VTK_DISPLAY_get();
  return ret;
}

int VTK_NORMALIZED_DISPLAY() @property {
  auto ret = vtkd_im.VTK_NORMALIZED_DISPLAY_get();
  return ret;
}

int VTK_VIEWPORT() @property {
  auto ret = vtkd_im.VTK_VIEWPORT_get();
  return ret;
}

int VTK_NORMALIZED_VIEWPORT() @property {
  auto ret = vtkd_im.VTK_NORMALIZED_VIEWPORT_get();
  return ret;
}

int VTK_VIEW() @property {
  auto ret = vtkd_im.VTK_VIEW_get();
  return ret;
}

int VTK_WORLD() @property {
  auto ret = vtkd_im.VTK_WORLD_get();
  return ret;
}

int VTK_USERDEFINED() @property {
  auto ret = vtkd_im.VTK_USERDEFINED_get();
  return ret;
}

int ID_INSIDE_ALL() @property {
  auto ret = vtkd_im.ID_INSIDE_ALL_get();
  return ret;
}

int ID_OUTSIDE_ALL() @property {
  auto ret = vtkd_im.ID_OUTSIDE_ALL_get();
  return ret;
}

int ID_OUTSIDE_T0() @property {
  auto ret = vtkd_im.ID_OUTSIDE_T0_get();
  return ret;
}

int ID_OUTSIDE_T1() @property {
  auto ret = vtkd_im.ID_OUTSIDE_T1_get();
  return ret;
}

int VTK_PARSER_IMMEDIATE() @property {
  auto ret = vtkd_im.VTK_PARSER_IMMEDIATE_get();
  return ret;
}

int VTK_PARSER_UNARY_MINUS() @property {
  auto ret = vtkd_im.VTK_PARSER_UNARY_MINUS_get();
  return ret;
}

int VTK_PARSER_ADD() @property {
  auto ret = vtkd_im.VTK_PARSER_ADD_get();
  return ret;
}

int VTK_PARSER_SUBTRACT() @property {
  auto ret = vtkd_im.VTK_PARSER_SUBTRACT_get();
  return ret;
}

int VTK_PARSER_MULTIPLY() @property {
  auto ret = vtkd_im.VTK_PARSER_MULTIPLY_get();
  return ret;
}

int VTK_PARSER_DIVIDE() @property {
  auto ret = vtkd_im.VTK_PARSER_DIVIDE_get();
  return ret;
}

int VTK_PARSER_POWER() @property {
  auto ret = vtkd_im.VTK_PARSER_POWER_get();
  return ret;
}

int VTK_PARSER_ABSOLUTE_VALUE() @property {
  auto ret = vtkd_im.VTK_PARSER_ABSOLUTE_VALUE_get();
  return ret;
}

int VTK_PARSER_EXPONENT() @property {
  auto ret = vtkd_im.VTK_PARSER_EXPONENT_get();
  return ret;
}

int VTK_PARSER_CEILING() @property {
  auto ret = vtkd_im.VTK_PARSER_CEILING_get();
  return ret;
}

int VTK_PARSER_FLOOR() @property {
  auto ret = vtkd_im.VTK_PARSER_FLOOR_get();
  return ret;
}

int VTK_PARSER_LOGARITHM() @property {
  auto ret = vtkd_im.VTK_PARSER_LOGARITHM_get();
  return ret;
}

int VTK_PARSER_LOGARITHME() @property {
  auto ret = vtkd_im.VTK_PARSER_LOGARITHME_get();
  return ret;
}

int VTK_PARSER_LOGARITHM10() @property {
  auto ret = vtkd_im.VTK_PARSER_LOGARITHM10_get();
  return ret;
}

int VTK_PARSER_SQUARE_ROOT() @property {
  auto ret = vtkd_im.VTK_PARSER_SQUARE_ROOT_get();
  return ret;
}

int VTK_PARSER_SINE() @property {
  auto ret = vtkd_im.VTK_PARSER_SINE_get();
  return ret;
}

int VTK_PARSER_COSINE() @property {
  auto ret = vtkd_im.VTK_PARSER_COSINE_get();
  return ret;
}

int VTK_PARSER_TANGENT() @property {
  auto ret = vtkd_im.VTK_PARSER_TANGENT_get();
  return ret;
}

int VTK_PARSER_ARCSINE() @property {
  auto ret = vtkd_im.VTK_PARSER_ARCSINE_get();
  return ret;
}

int VTK_PARSER_ARCCOSINE() @property {
  auto ret = vtkd_im.VTK_PARSER_ARCCOSINE_get();
  return ret;
}

int VTK_PARSER_ARCTANGENT() @property {
  auto ret = vtkd_im.VTK_PARSER_ARCTANGENT_get();
  return ret;
}

int VTK_PARSER_HYPERBOLIC_SINE() @property {
  auto ret = vtkd_im.VTK_PARSER_HYPERBOLIC_SINE_get();
  return ret;
}

int VTK_PARSER_HYPERBOLIC_COSINE() @property {
  auto ret = vtkd_im.VTK_PARSER_HYPERBOLIC_COSINE_get();
  return ret;
}

int VTK_PARSER_HYPERBOLIC_TANGENT() @property {
  auto ret = vtkd_im.VTK_PARSER_HYPERBOLIC_TANGENT_get();
  return ret;
}

int VTK_PARSER_MIN() @property {
  auto ret = vtkd_im.VTK_PARSER_MIN_get();
  return ret;
}

int VTK_PARSER_MAX() @property {
  auto ret = vtkd_im.VTK_PARSER_MAX_get();
  return ret;
}

int VTK_PARSER_CROSS() @property {
  auto ret = vtkd_im.VTK_PARSER_CROSS_get();
  return ret;
}

int VTK_PARSER_SIGN() @property {
  auto ret = vtkd_im.VTK_PARSER_SIGN_get();
  return ret;
}

int VTK_PARSER_VECTOR_UNARY_MINUS() @property {
  auto ret = vtkd_im.VTK_PARSER_VECTOR_UNARY_MINUS_get();
  return ret;
}

int VTK_PARSER_DOT_PRODUCT() @property {
  auto ret = vtkd_im.VTK_PARSER_DOT_PRODUCT_get();
  return ret;
}

int VTK_PARSER_VECTOR_ADD() @property {
  auto ret = vtkd_im.VTK_PARSER_VECTOR_ADD_get();
  return ret;
}

int VTK_PARSER_VECTOR_SUBTRACT() @property {
  auto ret = vtkd_im.VTK_PARSER_VECTOR_SUBTRACT_get();
  return ret;
}

int VTK_PARSER_SCALAR_TIMES_VECTOR() @property {
  auto ret = vtkd_im.VTK_PARSER_SCALAR_TIMES_VECTOR_get();
  return ret;
}

int VTK_PARSER_VECTOR_TIMES_SCALAR() @property {
  auto ret = vtkd_im.VTK_PARSER_VECTOR_TIMES_SCALAR_get();
  return ret;
}

int VTK_PARSER_VECTOR_OVER_SCALAR() @property {
  auto ret = vtkd_im.VTK_PARSER_VECTOR_OVER_SCALAR_get();
  return ret;
}

int VTK_PARSER_MAGNITUDE() @property {
  auto ret = vtkd_im.VTK_PARSER_MAGNITUDE_get();
  return ret;
}

int VTK_PARSER_NORMALIZE() @property {
  auto ret = vtkd_im.VTK_PARSER_NORMALIZE_get();
  return ret;
}

int VTK_PARSER_IHAT() @property {
  auto ret = vtkd_im.VTK_PARSER_IHAT_get();
  return ret;
}

int VTK_PARSER_JHAT() @property {
  auto ret = vtkd_im.VTK_PARSER_JHAT_get();
  return ret;
}

int VTK_PARSER_KHAT() @property {
  auto ret = vtkd_im.VTK_PARSER_KHAT_get();
  return ret;
}

int VTK_PARSER_IF() @property {
  auto ret = vtkd_im.VTK_PARSER_IF_get();
  return ret;
}

int VTK_PARSER_VECTOR_IF() @property {
  auto ret = vtkd_im.VTK_PARSER_VECTOR_IF_get();
  return ret;
}

int VTK_PARSER_LESS_THAN() @property {
  auto ret = vtkd_im.VTK_PARSER_LESS_THAN_get();
  return ret;
}

int VTK_PARSER_GREATER_THAN() @property {
  auto ret = vtkd_im.VTK_PARSER_GREATER_THAN_get();
  return ret;
}

int VTK_PARSER_EQUAL_TO() @property {
  auto ret = vtkd_im.VTK_PARSER_EQUAL_TO_get();
  return ret;
}

int VTK_PARSER_AND() @property {
  auto ret = vtkd_im.VTK_PARSER_AND_get();
  return ret;
}

int VTK_PARSER_OR() @property {
  auto ret = vtkd_im.VTK_PARSER_OR_get();
  return ret;
}

int VTK_PARSER_BEGIN_VARIABLES() @property {
  auto ret = vtkd_im.VTK_PARSER_BEGIN_VARIABLES_get();
  return ret;
}

int VTK_GRID_NEAREST() @property {
  auto ret = vtkd_im.VTK_GRID_NEAREST_get();
  return ret;
}

int VTK_GRID_LINEAR() @property {
  auto ret = vtkd_im.VTK_GRID_LINEAR_get();
  return ret;
}

int VTK_GRID_CUBIC() @property {
  auto ret = vtkd_im.VTK_GRID_CUBIC_get();
  return ret;
}

int vtkSimple3DCirclesStrategyH() @property {
  auto ret = vtkd_im.vtkSimple3DCirclesStrategyH_get();
  return ret;
}

int VTK_QUALITY_EDGE_RATIO() @property {
  auto ret = vtkd_im.VTK_QUALITY_EDGE_RATIO_get();
  return ret;
}

int VTK_QUALITY_ASPECT_RATIO() @property {
  auto ret = vtkd_im.VTK_QUALITY_ASPECT_RATIO_get();
  return ret;
}

int VTK_QUALITY_RADIUS_RATIO() @property {
  auto ret = vtkd_im.VTK_QUALITY_RADIUS_RATIO_get();
  return ret;
}

int VTK_QUALITY_ASPECT_FROBENIUS() @property {
  auto ret = vtkd_im.VTK_QUALITY_ASPECT_FROBENIUS_get();
  return ret;
}

int VTK_QUALITY_MED_ASPECT_FROBENIUS() @property {
  auto ret = vtkd_im.VTK_QUALITY_MED_ASPECT_FROBENIUS_get();
  return ret;
}

int VTK_QUALITY_MAX_ASPECT_FROBENIUS() @property {
  auto ret = vtkd_im.VTK_QUALITY_MAX_ASPECT_FROBENIUS_get();
  return ret;
}

int VTK_QUALITY_MIN_ANGLE() @property {
  auto ret = vtkd_im.VTK_QUALITY_MIN_ANGLE_get();
  return ret;
}

int VTK_QUALITY_COLLAPSE_RATIO() @property {
  auto ret = vtkd_im.VTK_QUALITY_COLLAPSE_RATIO_get();
  return ret;
}

int VTK_QUALITY_MAX_ANGLE() @property {
  auto ret = vtkd_im.VTK_QUALITY_MAX_ANGLE_get();
  return ret;
}

int VTK_QUALITY_CONDITION() @property {
  auto ret = vtkd_im.VTK_QUALITY_CONDITION_get();
  return ret;
}

int VTK_QUALITY_SCALED_JACOBIAN() @property {
  auto ret = vtkd_im.VTK_QUALITY_SCALED_JACOBIAN_get();
  return ret;
}

int VTK_QUALITY_SHEAR() @property {
  auto ret = vtkd_im.VTK_QUALITY_SHEAR_get();
  return ret;
}

int VTK_QUALITY_RELATIVE_SIZE_SQUARED() @property {
  auto ret = vtkd_im.VTK_QUALITY_RELATIVE_SIZE_SQUARED_get();
  return ret;
}

int VTK_QUALITY_SHAPE() @property {
  auto ret = vtkd_im.VTK_QUALITY_SHAPE_get();
  return ret;
}

int VTK_QUALITY_SHAPE_AND_SIZE() @property {
  auto ret = vtkd_im.VTK_QUALITY_SHAPE_AND_SIZE_get();
  return ret;
}

int VTK_QUALITY_DISTORTION() @property {
  auto ret = vtkd_im.VTK_QUALITY_DISTORTION_get();
  return ret;
}

int VTK_QUALITY_MAX_EDGE_RATIO() @property {
  auto ret = vtkd_im.VTK_QUALITY_MAX_EDGE_RATIO_get();
  return ret;
}

int VTK_QUALITY_SKEW() @property {
  auto ret = vtkd_im.VTK_QUALITY_SKEW_get();
  return ret;
}

int VTK_QUALITY_TAPER() @property {
  auto ret = vtkd_im.VTK_QUALITY_TAPER_get();
  return ret;
}

int VTK_QUALITY_VOLUME() @property {
  auto ret = vtkd_im.VTK_QUALITY_VOLUME_get();
  return ret;
}

int VTK_QUALITY_STRETCH() @property {
  auto ret = vtkd_im.VTK_QUALITY_STRETCH_get();
  return ret;
}

int VTK_QUALITY_DIAGONAL() @property {
  auto ret = vtkd_im.VTK_QUALITY_DIAGONAL_get();
  return ret;
}

int VTK_QUALITY_DIMENSION() @property {
  auto ret = vtkd_im.VTK_QUALITY_DIMENSION_get();
  return ret;
}

int VTK_QUALITY_ODDY() @property {
  auto ret = vtkd_im.VTK_QUALITY_ODDY_get();
  return ret;
}

int VTK_QUALITY_SHEAR_AND_SIZE() @property {
  auto ret = vtkd_im.VTK_QUALITY_SHEAR_AND_SIZE_get();
  return ret;
}

int VTK_QUALITY_JACOBIAN() @property {
  auto ret = vtkd_im.VTK_QUALITY_JACOBIAN_get();
  return ret;
}

int VTK_QUALITY_WARPAGE() @property {
  auto ret = vtkd_im.VTK_QUALITY_WARPAGE_get();
  return ret;
}

int VTK_QUALITY_ASPECT_GAMMA() @property {
  auto ret = vtkd_im.VTK_QUALITY_ASPECT_GAMMA_get();
  return ret;
}

int VTK_QUALITY_AREA() @property {
  auto ret = vtkd_im.VTK_QUALITY_AREA_get();
  return ret;
}

int VTK_QUALITY_ASPECT_BETA() @property {
  auto ret = vtkd_im.VTK_QUALITY_ASPECT_BETA_get();
  return ret;
}

SWIGTYPE_p_p_char.SWIGTYPE_p_p_char x3dElementString() @property {
  void* cPtr = vtkd_im.x3dElementString_get();
  SWIGTYPE_p_p_char.SWIGTYPE_p_p_char ret = (cPtr is null) ? null : new SWIGTYPE_p_p_char.SWIGTYPE_p_p_char(cPtr, false);
  return ret;
}

SWIGTYPE_p_p_char.SWIGTYPE_p_p_char x3dAttributeString() @property {
  void* cPtr = vtkd_im.x3dAttributeString_get();
  SWIGTYPE_p_p_char.SWIGTYPE_p_p_char ret = (cPtr is null) ? null : new SWIGTYPE_p_p_char.SWIGTYPE_p_p_char(cPtr, false);
  return ret;
}

void vtkXMLParserStartElement(void* arg0, string arg1, char** arg2) {
  vtkd_im.vtkXMLParserStartElement(cast(void*)arg0, (arg1 ? std.string.toStringz(arg1) : null), cast(void*)arg2);
}

void vtkXMLParserEndElement(void* arg0, string arg1) {
  vtkd_im.vtkXMLParserEndElement(cast(void*)arg0, (arg1 ? std.string.toStringz(arg1) : null));
}

void vtkXMLParserCharacterDataHandler(void* arg0, string arg1, int arg2) {
  vtkd_im.vtkXMLParserCharacterDataHandler(cast(void*)arg0, (arg1 ? std.string.toStringz(arg1) : null), arg2);
}

int VTK_STYLE_PIXELIZE() @property {
  auto ret = vtkd_im.VTK_STYLE_PIXELIZE_get();
  return ret;
}

int VTK_STYLE_POLYGONALIZE() @property {
  auto ret = vtkd_im.VTK_STYLE_POLYGONALIZE_get();
  return ret;
}

int VTK_STYLE_RUN_LENGTH() @property {
  auto ret = vtkd_im.VTK_STYLE_RUN_LENGTH_get();
  return ret;
}

int VTK_COLOR_MODE_LUT() @property {
  auto ret = vtkd_im.VTK_COLOR_MODE_LUT_get();
  return ret;
}

int VTK_COLOR_MODE_LINEAR_256() @property {
  auto ret = vtkd_im.VTK_COLOR_MODE_LINEAR_256_get();
  return ret;
}

int VTK_SCALE_BY_SCALAR() @property {
  auto ret = vtkd_im.VTK_SCALE_BY_SCALAR_get();
  return ret;
}

int VTK_SCALE_BY_VECTOR() @property {
  auto ret = vtkd_im.VTK_SCALE_BY_VECTOR_get();
  return ret;
}

int VTK_SCALE_BY_VECTORCOMPONENTS() @property {
  auto ret = vtkd_im.VTK_SCALE_BY_VECTORCOMPONENTS_get();
  return ret;
}

int VTK_DATA_SCALING_OFF() @property {
  auto ret = vtkd_im.VTK_DATA_SCALING_OFF_get();
  return ret;
}

int VTK_COLOR_BY_SCALE() @property {
  auto ret = vtkd_im.VTK_COLOR_BY_SCALE_get();
  return ret;
}

int VTK_COLOR_BY_SCALAR() @property {
  auto ret = vtkd_im.VTK_COLOR_BY_SCALAR_get();
  return ret;
}

int VTK_COLOR_BY_VECTOR() @property {
  auto ret = vtkd_im.VTK_COLOR_BY_VECTOR_get();
  return ret;
}

int VTK_USE_VECTOR() @property {
  auto ret = vtkd_im.VTK_USE_VECTOR_get();
  return ret;
}

int VTK_USE_NORMAL() @property {
  auto ret = vtkd_im.VTK_USE_NORMAL_get();
  return ret;
}

int VTK_VECTOR_ROTATION_OFF() @property {
  auto ret = vtkd_im.VTK_VECTOR_ROTATION_OFF_get();
  return ret;
}

int VTK_INDEXING_OFF() @property {
  auto ret = vtkd_im.VTK_INDEXING_OFF_get();
  return ret;
}

int VTK_INDEXING_BY_SCALAR() @property {
  auto ret = vtkd_im.VTK_INDEXING_BY_SCALAR_get();
  return ret;
}

int VTK_INDEXING_BY_VECTOR() @property {
  auto ret = vtkd_im.VTK_INDEXING_BY_VECTOR_get();
  return ret;
}

int MAX_VARS() @property {
  auto ret = vtkd_im.MAX_VARS_get();
  return ret;
}

int MAX_VAR_NAME() @property {
  auto ret = vtkd_im.MAX_VAR_NAME_get();
  return ret;
}

int VTKKW_FP_SHIFT() @property {
  auto ret = vtkd_im.VTKKW_FP_SHIFT_get();
  return ret;
}

int VTKKW_FPMM_SHIFT() @property {
  auto ret = vtkd_im.VTKKW_FPMM_SHIFT_get();
  return ret;
}

int VTKKW_FP_MASK() @property {
  auto ret = vtkd_im.VTKKW_FP_MASK_get();
  return ret;
}

double VTKKW_FP_SCALE() @property {
  auto ret = vtkd_im.VTKKW_FP_SCALE_get();
  return ret;
}

void* FixedPointVolumeRayCastMapper_CastRays(void* arg) {
  auto ret = cast(void*)vtkd_im.FixedPointVolumeRayCastMapper_CastRays(cast(void*)arg);
  return ret;
}

void* vtkFPVRCMSwitchOnDataType(void* arg) {
  auto ret = cast(void*)vtkd_im.vtkFPVRCMSwitchOnDataType(cast(void*)arg);
  return ret;
}

int VTKIS_JOYSTICK() @property {
  auto ret = vtkd_im.VTKIS_JOYSTICK_get();
  return ret;
}

int VTKIS_TRACKBALL() @property {
  auto ret = vtkd_im.VTKIS_TRACKBALL_get();
  return ret;
}

int VTKIS_CAMERA() @property {
  auto ret = vtkd_im.VTKIS_CAMERA_get();
  return ret;
}

int VTKIS_ACTOR() @property {
  auto ret = vtkd_im.VTKIS_ACTOR_get();
  return ret;
}

int VTK_SUBDIVIDE_SPECIFIED() @property {
  auto ret = vtkd_im.VTK_SUBDIVIDE_SPECIFIED_get();
  return ret;
}

int VTK_SUBDIVIDE_LENGTH() @property {
  auto ret = vtkd_im.VTK_SUBDIVIDE_LENGTH_get();
  return ret;
}

int VTK_TCOORDS_OFF() @property {
  auto ret = vtkd_im.VTK_TCOORDS_OFF_get();
  return ret;
}

int VTK_TCOORDS_FROM_NORMALIZED_LENGTH() @property {
  auto ret = vtkd_im.VTK_TCOORDS_FROM_NORMALIZED_LENGTH_get();
  return ret;
}

int VTK_TCOORDS_FROM_LENGTH() @property {
  auto ret = vtkd_im.VTK_TCOORDS_FROM_LENGTH_get();
  return ret;
}

int VTK_TCOORDS_FROM_SCALARS() @property {
  auto ret = vtkd_im.VTK_TCOORDS_FROM_SCALARS_get();
  return ret;
}

double VTK_DBL_MIN() @property {
  auto ret = vtkd_im.VTK_DBL_MIN_get();
  return ret;
}

double VTK_DBL_EPSILON() @property {
  auto ret = vtkd_im.VTK_DBL_EPSILON_get();
  return ret;
}

int VTK_BSPLINE_EDGE() @property {
  auto ret = vtkd_im.VTK_BSPLINE_EDGE_get();
  return ret;
}

int VTK_BSPLINE_ZERO() @property {
  auto ret = vtkd_im.VTK_BSPLINE_ZERO_get();
  return ret;
}

int VTK_BSPLINE_ZERO_AT_BORDER() @property {
  auto ret = vtkd_im.VTK_BSPLINE_ZERO_AT_BORDER_get();
  return ret;
}

int VTK_DELAUNAY_XY_PLANE() @property {
  auto ret = vtkd_im.VTK_DELAUNAY_XY_PLANE_get();
  return ret;
}

int VTK_SET_TRANSFORM_PLANE() @property {
  auto ret = vtkd_im.VTK_SET_TRANSFORM_PLANE_get();
  return ret;
}

int VTK_BEST_FITTING_PLANE() @property {
  auto ret = vtkd_im.VTK_BEST_FITTING_PLANE_get();
  return ret;
}

int VTK_ERROR_NUMBER_OF_TRIANGLES() @property {
  auto ret = vtkd_im.VTK_ERROR_NUMBER_OF_TRIANGLES_get();
  return ret;
}

int VTK_ERROR_SPECIFIED_REDUCTION() @property {
  auto ret = vtkd_im.VTK_ERROR_SPECIFIED_REDUCTION_get();
  return ret;
}

int VTK_ERROR_ABSOLUTE() @property {
  auto ret = vtkd_im.VTK_ERROR_ABSOLUTE_get();
  return ret;
}

int VTK_ERROR_RELATIVE() @property {
  auto ret = vtkd_im.VTK_ERROR_RELATIVE_get();
  return ret;
}

int VTK_SCALAR_MODE_INDEX() @property {
  auto ret = vtkd_im.VTK_SCALAR_MODE_INDEX_get();
  return ret;
}

int VTK_SCALAR_MODE_VALUE() @property {
  auto ret = vtkd_im.VTK_SCALAR_MODE_VALUE_get();
  return ret;
}

int VTK_AND() @property {
  auto ret = vtkd_im.VTK_AND_get();
  return ret;
}

int VTK_OR() @property {
  auto ret = vtkd_im.VTK_OR_get();
  return ret;
}

int VTK_XOR() @property {
  auto ret = vtkd_im.VTK_XOR_get();
  return ret;
}

int VTK_NAND() @property {
  auto ret = vtkd_im.VTK_NAND_get();
  return ret;
}

int VTK_NOR() @property {
  auto ret = vtkd_im.VTK_NOR_get();
  return ret;
}

int VTK_NOT() @property {
  auto ret = vtkd_im.VTK_NOT_get();
  return ret;
}

int VTK_NOP() @property {
  auto ret = vtkd_im.VTK_NOP_get();
  return ret;
}

int VTK_IMAGE_BLEND_MODE_NORMAL() @property {
  auto ret = vtkd_im.VTK_IMAGE_BLEND_MODE_NORMAL_get();
  return ret;
}

int VTK_IMAGE_BLEND_MODE_COMPOUND() @property {
  auto ret = vtkd_im.VTK_IMAGE_BLEND_MODE_COMPOUND_get();
  return ret;
}

SWIGTYPE_p_int.SWIGTYPE_p_int vtkPythagoreanQuadruples() @property {
  void* cPtr = vtkd_im.vtkPythagoreanQuadruples_get();
  SWIGTYPE_p_int.SWIGTYPE_p_int ret = (cPtr is null) ? null : new SWIGTYPE_p_int.SWIGTYPE_p_int(cPtr, false);
  return ret;
}

int vtkMaxPythagoreanQuadrupleId() @property {
  auto ret = vtkd_im.vtkMaxPythagoreanQuadrupleId_get();
  return ret;
}

SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s vtkXMLWriterC_New() {
  void* cPtr = vtkd_im.vtkXMLWriterC_New();
  SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s ret = (cPtr is null) ? null : new SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s(cPtr, false);
  return ret;
}

void vtkXMLWriterC_Delete(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s self) {
  vtkd_im.vtkXMLWriterC_Delete(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s.swigGetCPtr(self));
}

void vtkXMLWriterC_SetDataObjectType(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s self, int objType) {
  vtkd_im.vtkXMLWriterC_SetDataObjectType(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s.swigGetCPtr(self), objType);
}

void vtkXMLWriterC_SetDataModeType(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s self, int datamodetype) {
  vtkd_im.vtkXMLWriterC_SetDataModeType(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s.swigGetCPtr(self), datamodetype);
}

void vtkXMLWriterC_SetExtent(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s self, SWIGTYPE_p_int.SWIGTYPE_p_int extent) {
  vtkd_im.vtkXMLWriterC_SetExtent(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s.swigGetCPtr(self), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(extent));
}

void vtkXMLWriterC_SetPoints(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s self, int dataType, void* data, long numPoints) {
  vtkd_im.vtkXMLWriterC_SetPoints(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s.swigGetCPtr(self), dataType, cast(void*)data, numPoints);
}

void vtkXMLWriterC_SetOrigin(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s self, SWIGTYPE_p_double.SWIGTYPE_p_double origin) {
  vtkd_im.vtkXMLWriterC_SetOrigin(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s.swigGetCPtr(self), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(origin));
}

void vtkXMLWriterC_SetSpacing(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s self, SWIGTYPE_p_double.SWIGTYPE_p_double spacing) {
  vtkd_im.vtkXMLWriterC_SetSpacing(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s.swigGetCPtr(self), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(spacing));
}

void vtkXMLWriterC_SetCoordinates(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s self, int axis, int dataType, void* data, long numCoordinates) {
  vtkd_im.vtkXMLWriterC_SetCoordinates(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s.swigGetCPtr(self), axis, dataType, cast(void*)data, numCoordinates);
}

void vtkXMLWriterC_SetCellsWithType(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s self, int cellType, long ncells, long* cells, long cellsSize) {
  vtkd_im.vtkXMLWriterC_SetCellsWithType(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s.swigGetCPtr(self), cellType, ncells, cast(void*)cells, cellsSize);
}

void vtkXMLWriterC_SetCellsWithTypes(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s self, int* cellTypes, long ncells, long* cells, long cellsSize) {
  vtkd_im.vtkXMLWriterC_SetCellsWithTypes(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s.swigGetCPtr(self), cast(void*)cellTypes, ncells, cast(void*)cells, cellsSize);
}

void vtkXMLWriterC_SetPointData(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s self, string name, int dataType, void* data, long numTuples, int numComponents, string role) {
  vtkd_im.vtkXMLWriterC_SetPointData(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s.swigGetCPtr(self), (name ? std.string.toStringz(name) : null), dataType, cast(void*)data, numTuples, numComponents, (role ? std.string.toStringz(role) : null));
}

void vtkXMLWriterC_SetCellData(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s self, string name, int dataType, void* data, long numTuples, int numComponents, string role) {
  vtkd_im.vtkXMLWriterC_SetCellData(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s.swigGetCPtr(self), (name ? std.string.toStringz(name) : null), dataType, cast(void*)data, numTuples, numComponents, (role ? std.string.toStringz(role) : null));
}

void vtkXMLWriterC_SetFileName(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s self, string fileName) {
  vtkd_im.vtkXMLWriterC_SetFileName(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s.swigGetCPtr(self), (fileName ? std.string.toStringz(fileName) : null));
}

int vtkXMLWriterC_Write(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s self) {
  auto ret = vtkd_im.vtkXMLWriterC_Write(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s.swigGetCPtr(self));
  return ret;
}

void vtkXMLWriterC_SetNumberOfTimeSteps(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s self, int numTimeSteps) {
  vtkd_im.vtkXMLWriterC_SetNumberOfTimeSteps(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s.swigGetCPtr(self), numTimeSteps);
}

void vtkXMLWriterC_Start(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s self) {
  vtkd_im.vtkXMLWriterC_Start(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s.swigGetCPtr(self));
}

void vtkXMLWriterC_WriteNextTimeStep(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s self, double timeValue) {
  vtkd_im.vtkXMLWriterC_WriteNextTimeStep(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s.swigGetCPtr(self), timeValue);
}

void vtkXMLWriterC_Stop(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s self) {
  vtkd_im.vtkXMLWriterC_Stop(SWIGTYPE_p_vtkXMLWriterC_s.SWIGTYPE_p_vtkXMLWriterC_s.swigGetCPtr(self));
}

int VTK_COLOR_BY_INPUT() @property {
  auto ret = vtkd_im.VTK_COLOR_BY_INPUT_get();
  return ret;
}

int VTK_COLOR_BY_SOURCE() @property {
  auto ret = vtkd_im.VTK_COLOR_BY_SOURCE_get();
  return ret;
}

enum {
  VTK_CCS_SCALAR_MODE_NONE = 0,
  VTK_CCS_SCALAR_MODE_COLORS = 1,
  VTK_CCS_SCALAR_MODE_LABELS = 2
}

enum {
  VTK_OCTREE_CHILD_ZMIN_YMIN_XMIN = 0,
  VTK_OCTREE_CHILD_ZMIN_YMIN_XMAX,
  VTK_OCTREE_CHILD_ZMIN_YMAX_XMIN,
  VTK_OCTREE_CHILD_ZMIN_YMAX_XMAX,
  VTK_OCTREE_CHILD_ZMAX_YMIN_XMIN,
  VTK_OCTREE_CHILD_ZMAX_YMIN_XMAX,
  VTK_OCTREE_CHILD_ZMAX_YMAX_XMIN,
  VTK_OCTREE_CHILD_ZMAX_YMAX_XMAX
}

int VTK_QUADTREE_CHILD_SW() @property {
  auto ret = vtkd_im.VTK_QUADTREE_CHILD_SW_get();
  return ret;
}

int VTK_QUADTREE_CHILD_SE() @property {
  auto ret = vtkd_im.VTK_QUADTREE_CHILD_SE_get();
  return ret;
}

int VTK_QUADTREE_CHILD_NW() @property {
  auto ret = vtkd_im.VTK_QUADTREE_CHILD_NW_get();
  return ret;
}

int VTK_QUADTREE_CHILD_NE() @property {
  auto ret = vtkd_im.VTK_QUADTREE_CHILD_NE_get();
  return ret;
}

int VTK_BINARY_TREE_CHILD_LEFT() @property {
  auto ret = vtkd_im.VTK_BINARY_TREE_CHILD_LEFT_get();
  return ret;
}

int VTK_BINARY_TREE_CHILD_RIGHT() @property {
  auto ret = vtkd_im.VTK_BINARY_TREE_CHILD_RIGHT_get();
  return ret;
}

int VTK_DICE_MODE_NUMBER_OF_POINTS() @property {
  auto ret = vtkd_im.VTK_DICE_MODE_NUMBER_OF_POINTS_get();
  return ret;
}

int VTK_DICE_MODE_SPECIFIED_NUMBER() @property {
  auto ret = vtkd_im.VTK_DICE_MODE_SPECIFIED_NUMBER_get();
  return ret;
}

int VTK_DICE_MODE_MEMORY_LIMIT() @property {
  auto ret = vtkd_im.VTK_DICE_MODE_MEMORY_LIMIT_get();
  return ret;
}

int VTK_LIGHT_TYPE_HEADLIGHT() @property {
  auto ret = vtkd_im.VTK_LIGHT_TYPE_HEADLIGHT_get();
  return ret;
}

int VTK_LIGHT_TYPE_CAMERA_LIGHT() @property {
  auto ret = vtkd_im.VTK_LIGHT_TYPE_CAMERA_LIGHT_get();
  return ret;
}

int VTK_LIGHT_TYPE_SCENE_LIGHT() @property {
  auto ret = vtkd_im.VTK_LIGHT_TYPE_SCENE_LIGHT_get();
  return ret;
}

enum {
  vtkPointCentered,
  vtkCellCentered,
  vtkBoundaryCentered
}

int VTK_IMAGESLAB_BLEND_MIN() @property {
  auto ret = vtkd_im.VTK_IMAGESLAB_BLEND_MIN_get();
  return ret;
}

int VTK_IMAGESLAB_BLEND_MAX() @property {
  auto ret = vtkd_im.VTK_IMAGESLAB_BLEND_MAX_get();
  return ret;
}

int VTK_IMAGESLAB_BLEND_MEAN() @property {
  auto ret = vtkd_im.VTK_IMAGESLAB_BLEND_MEAN_get();
  return ret;
}

int VTK_XYPLOT_INDEX() @property {
  auto ret = vtkd_im.VTK_XYPLOT_INDEX_get();
  return ret;
}

int VTK_XYPLOT_ARC_LENGTH() @property {
  auto ret = vtkd_im.VTK_XYPLOT_ARC_LENGTH_get();
  return ret;
}

int VTK_XYPLOT_NORMALIZED_ARC_LENGTH() @property {
  auto ret = vtkd_im.VTK_XYPLOT_NORMALIZED_ARC_LENGTH_get();
  return ret;
}

int VTK_XYPLOT_VALUE() @property {
  auto ret = vtkd_im.VTK_XYPLOT_VALUE_get();
  return ret;
}

int VTK_XYPLOT_ROW() @property {
  auto ret = vtkd_im.VTK_XYPLOT_ROW_get();
  return ret;
}

int VTK_XYPLOT_COLUMN() @property {
  auto ret = vtkd_im.VTK_XYPLOT_COLUMN_get();
  return ret;
}

int VTK_XYPLOT_Y_AXIS_TOP() @property {
  auto ret = vtkd_im.VTK_XYPLOT_Y_AXIS_TOP_get();
  return ret;
}

int VTK_XYPLOT_Y_AXIS_HCENTER() @property {
  auto ret = vtkd_im.VTK_XYPLOT_Y_AXIS_HCENTER_get();
  return ret;
}

int VTK_XYPLOT_Y_AXIS_VCENTER() @property {
  auto ret = vtkd_im.VTK_XYPLOT_Y_AXIS_VCENTER_get();
  return ret;
}

int VTKI_TIMER_FIRST() @property {
  auto ret = vtkd_im.VTKI_TIMER_FIRST_get();
  return ret;
}

int VTKI_TIMER_UPDATE() @property {
  auto ret = vtkd_im.VTKI_TIMER_UPDATE_get();
  return ret;
}

void vtkXRenderWindowInteractorCallback(SWIGTYPE_p_Widget.SWIGTYPE_p_Widget arg0, SWIGTYPE_p_XtPointer.SWIGTYPE_p_XtPointer arg1, SWIGTYPE_p_XEvent.SWIGTYPE_p_XEvent arg2, SWIGTYPE_p_Boolean.SWIGTYPE_p_Boolean arg3) {
  vtkd_im.vtkXRenderWindowInteractorCallback(SWIGTYPE_p_Widget.SWIGTYPE_p_Widget.swigGetCPtr(arg0), SWIGTYPE_p_XtPointer.SWIGTYPE_p_XtPointer.swigGetCPtr(arg1), SWIGTYPE_p_XEvent.SWIGTYPE_p_XEvent.swigGetCPtr(arg2), SWIGTYPE_p_Boolean.SWIGTYPE_p_Boolean.swigGetCPtr(arg3));
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
}

void vtkXRenderWindowInteractorTimer(SWIGTYPE_p_XtPointer.SWIGTYPE_p_XtPointer arg0, SWIGTYPE_p_XtIntervalId.SWIGTYPE_p_XtIntervalId arg1) {
  vtkd_im.vtkXRenderWindowInteractorTimer(SWIGTYPE_p_XtPointer.SWIGTYPE_p_XtPointer.swigGetCPtr(arg0), SWIGTYPE_p_XtIntervalId.SWIGTYPE_p_XtIntervalId.swigGetCPtr(arg1));
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
}

core.stdc.config.c_ulong file_noise200x200_vtk_length() @property {
  auto ret = vtkd_im.file_noise200x200_vtk_length_get();
  return ret;
}

core.stdc.config.c_ulong file_noise200x200_vtk_decoded_length() @property {
  auto ret = vtkd_im.file_noise200x200_vtk_decoded_length_get();
  return ret;
}

SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char file_noise200x200_vtk_section_1() @property {
  void* cPtr = vtkd_im.file_noise200x200_vtk_section_1_get();
  SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char ret = (cPtr is null) ? null : new SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char(cPtr, false);
  return ret;
}

SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char file_noise200x200_vtk_section_2() @property {
  void* cPtr = vtkd_im.file_noise200x200_vtk_section_2_get();
  SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char ret = (cPtr is null) ? null : new SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char(cPtr, false);
  return ret;
}

SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char file_noise200x200_vtk_section_3() @property {
  void* cPtr = vtkd_im.file_noise200x200_vtk_section_3_get();
  SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char ret = (cPtr is null) ? null : new SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char(cPtr, false);
  return ret;
}

SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char file_noise200x200_vtk_section_4() @property {
  void* cPtr = vtkd_im.file_noise200x200_vtk_section_4_get();
  SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char ret = (cPtr is null) ? null : new SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char(cPtr, false);
  return ret;
}

void file_noise200x200_vtk_sections(SWIGTYPE_p_p_unsigned_char.SWIGTYPE_p_p_unsigned_char value) @property {
  vtkd_im.file_noise200x200_vtk_sections_set(SWIGTYPE_p_p_unsigned_char.SWIGTYPE_p_p_unsigned_char.swigGetCPtr(value));
}

SWIGTYPE_p_p_unsigned_char.SWIGTYPE_p_p_unsigned_char file_noise200x200_vtk_sections() @property {
  void* cPtr = vtkd_im.file_noise200x200_vtk_sections_get();
  SWIGTYPE_p_p_unsigned_char.SWIGTYPE_p_p_unsigned_char ret = (cPtr is null) ? null : new SWIGTYPE_p_p_unsigned_char.SWIGTYPE_p_p_unsigned_char(cPtr, false);
  return ret;
}

uint file_noise200x200_vtk_nb_sections() @property {
  auto ret = vtkd_im.file_noise200x200_vtk_nb_sections_get();
  return ret;
}

int VTK_ATTRIBUTE_MODE_USE_VERTEX_DATA() @property {
  auto ret = vtkd_im.VTK_ATTRIBUTE_MODE_USE_VERTEX_DATA_get();
  return ret;
}

int VTK_ATTRIBUTE_MODE_USE_EDGE_DATA() @property {
  auto ret = vtkd_im.VTK_ATTRIBUTE_MODE_USE_EDGE_DATA_get();
  return ret;
}

int VTK_EXTRACT_POINT_SEEDED_REGIONS() @property {
  auto ret = vtkd_im.VTK_EXTRACT_POINT_SEEDED_REGIONS_get();
  return ret;
}

int VTK_EXTRACT_CELL_SEEDED_REGIONS() @property {
  auto ret = vtkd_im.VTK_EXTRACT_CELL_SEEDED_REGIONS_get();
  return ret;
}

int VTK_EXTRACT_SPECIFIED_REGIONS() @property {
  auto ret = vtkd_im.VTK_EXTRACT_SPECIFIED_REGIONS_get();
  return ret;
}

int VTK_EXTRACT_LARGEST_REGION() @property {
  auto ret = vtkd_im.VTK_EXTRACT_LARGEST_REGION_get();
  return ret;
}

int VTK_EXTRACT_ALL_REGIONS() @property {
  auto ret = vtkd_im.VTK_EXTRACT_ALL_REGIONS_get();
  return ret;
}

int VTK_EXTRACT_CLOSEST_POINT_REGION() @property {
  auto ret = vtkd_im.VTK_EXTRACT_CLOSEST_POINT_REGION_get();
  return ret;
}

int VTK_IMAGE_BSPLINE_DEGREE_MAX() @property {
  auto ret = vtkd_im.VTK_IMAGE_BSPLINE_DEGREE_MAX_get();
  return ret;
}

int VTK_UNICAM_NONE() @property {
  auto ret = vtkd_im.VTK_UNICAM_NONE_get();
  return ret;
}

int VTK_UNICAM_BUTTON_LEFT() @property {
  auto ret = vtkd_im.VTK_UNICAM_BUTTON_LEFT_get();
  return ret;
}

int VTK_UNICAM_BUTTON_MIDDLE() @property {
  auto ret = vtkd_im.VTK_UNICAM_BUTTON_MIDDLE_get();
  return ret;
}

int VTK_UNICAM_BUTTON_RIGHT() @property {
  auto ret = vtkd_im.VTK_UNICAM_BUTTON_RIGHT_get();
  return ret;
}

int VTK_UNICAM_CAM_INT_ROT() @property {
  auto ret = vtkd_im.VTK_UNICAM_CAM_INT_ROT_get();
  return ret;
}

int VTK_UNICAM_CAM_INT_CHOOSE() @property {
  auto ret = vtkd_im.VTK_UNICAM_CAM_INT_CHOOSE_get();
  return ret;
}

int VTK_UNICAM_CAM_INT_PAN() @property {
  auto ret = vtkd_im.VTK_UNICAM_CAM_INT_PAN_get();
  return ret;
}

int VTK_UNICAM_CAM_INT_DOLLY() @property {
  auto ret = vtkd_im.VTK_UNICAM_CAM_INT_DOLLY_get();
  return ret;
}

void vtkExecutionSchedulerManagerInstance(vtkExecutionSchedulerManager.vtkExecutionSchedulerManager value) @property {
  vtkd_im.vtkExecutionSchedulerManagerInstance_set(vtkExecutionSchedulerManager.vtkExecutionSchedulerManager.swigGetCPtr(value));
}

vtkExecutionSchedulerManager.vtkExecutionSchedulerManager vtkExecutionSchedulerManagerInstance() @property {
  void* cPtr = vtkd_im.vtkExecutionSchedulerManagerInstance_get();
  vtkExecutionSchedulerManager.vtkExecutionSchedulerManager ret = (cPtr is null) ? null : new vtkExecutionSchedulerManager.vtkExecutionSchedulerManager(cPtr, false);
  return ret;
}

int VTK_FTFC_CACHE_CAPACITY() @property {
  auto ret = vtkd_im.VTK_FTFC_CACHE_CAPACITY_get();
  return ret;
}

int VTK_MAX_SHADING_TABLES() @property {
  auto ret = vtkd_im.VTK_MAX_SHADING_TABLES_get();
  return ret;
}

int VTK_ICON_GRAVITY_TOP_RIGHT() @property {
  auto ret = vtkd_im.VTK_ICON_GRAVITY_TOP_RIGHT_get();
  return ret;
}

int VTK_ICON_GRAVITY_TOP_CENTER() @property {
  auto ret = vtkd_im.VTK_ICON_GRAVITY_TOP_CENTER_get();
  return ret;
}

int VTK_ICON_GRAVITY_TOP_LEFT() @property {
  auto ret = vtkd_im.VTK_ICON_GRAVITY_TOP_LEFT_get();
  return ret;
}

int VTK_ICON_GRAVITY_CENTER_RIGHT() @property {
  auto ret = vtkd_im.VTK_ICON_GRAVITY_CENTER_RIGHT_get();
  return ret;
}

int VTK_ICON_GRAVITY_CENTER_CENTER() @property {
  auto ret = vtkd_im.VTK_ICON_GRAVITY_CENTER_CENTER_get();
  return ret;
}

int VTK_ICON_GRAVITY_CENTER_LEFT() @property {
  auto ret = vtkd_im.VTK_ICON_GRAVITY_CENTER_LEFT_get();
  return ret;
}

int VTK_ICON_GRAVITY_BOTTOM_RIGHT() @property {
  auto ret = vtkd_im.VTK_ICON_GRAVITY_BOTTOM_RIGHT_get();
  return ret;
}

int VTK_ICON_GRAVITY_BOTTOM_CENTER() @property {
  auto ret = vtkd_im.VTK_ICON_GRAVITY_BOTTOM_CENTER_get();
  return ret;
}

int VTK_ICON_GRAVITY_BOTTOM_LEFT() @property {
  auto ret = vtkd_im.VTK_ICON_GRAVITY_BOTTOM_LEFT_get();
  return ret;
}

int VTK_ICON_SCALING_OFF() @property {
  auto ret = vtkd_im.VTK_ICON_SCALING_OFF_get();
  return ret;
}

int VTK_ICON_SCALING_USE_SCALING_ARRAY() @property {
  auto ret = vtkd_im.VTK_ICON_SCALING_USE_SCALING_ARRAY_get();
  return ret;
}

string VTK_SQL_ALLBACKENDS() @property {
  string ret = std.conv.to!string(vtkd_im.VTK_SQL_ALLBACKENDS_get());
  return ret;
}

string VTK_SQL_MYSQL() @property {
  string ret = std.conv.to!string(vtkd_im.VTK_SQL_MYSQL_get());
  return ret;
}

string VTK_SQL_POSTGRESQL() @property {
  string ret = std.conv.to!string(vtkd_im.VTK_SQL_POSTGRESQL_get());
  return ret;
}

string VTK_SQL_SQLITE() @property {
  string ret = std.conv.to!string(vtkd_im.VTK_SQL_SQLITE_get());
  return ret;
}

void vtkFilteringInformationKeyManagerInstance(vtkFilteringInformationKeyManager.vtkFilteringInformationKeyManager value) @property {
  vtkd_im.vtkFilteringInformationKeyManagerInstance_set(vtkFilteringInformationKeyManager.vtkFilteringInformationKeyManager.swigGetCPtr(value));
}

vtkFilteringInformationKeyManager.vtkFilteringInformationKeyManager vtkFilteringInformationKeyManagerInstance() @property {
  void* cPtr = vtkd_im.vtkFilteringInformationKeyManagerInstance_get();
  vtkFilteringInformationKeyManager.vtkFilteringInformationKeyManager ret = (cPtr is null) ? null : new vtkFilteringInformationKeyManager.vtkFilteringInformationKeyManager(cPtr, false);
  return ret;
}

int VTK_EXTRACT_COMPONENT() @property {
  auto ret = vtkd_im.VTK_EXTRACT_COMPONENT_get();
  return ret;
}

int VTK_EXTRACT_EFFECTIVE_STRESS() @property {
  auto ret = vtkd_im.VTK_EXTRACT_EFFECTIVE_STRESS_get();
  return ret;
}

int VTK_EXTRACT_DETERMINANT() @property {
  auto ret = vtkd_im.VTK_EXTRACT_DETERMINANT_get();
  return ret;
}

int VTK_CTF_RGB() @property {
  auto ret = vtkd_im.VTK_CTF_RGB_get();
  return ret;
}

int VTK_CTF_HSV() @property {
  auto ret = vtkd_im.VTK_CTF_HSV_get();
  return ret;
}

int VTK_CTF_LAB() @property {
  auto ret = vtkd_im.VTK_CTF_LAB_get();
  return ret;
}

int VTK_CTF_DIVERGING() @property {
  auto ret = vtkd_im.VTK_CTF_DIVERGING_get();
  return ret;
}

int VTK_CTF_LINEAR() @property {
  auto ret = vtkd_im.VTK_CTF_LINEAR_get();
  return ret;
}

int VTK_CTF_LOG10() @property {
  auto ret = vtkd_im.VTK_CTF_LOG10_get();
  return ret;
}

int VTK_LABEL_IDS() @property {
  auto ret = vtkd_im.VTK_LABEL_IDS_get();
  return ret;
}

int VTK_LABEL_SCALARS() @property {
  auto ret = vtkd_im.VTK_LABEL_SCALARS_get();
  return ret;
}

int VTK_LABEL_VECTORS() @property {
  auto ret = vtkd_im.VTK_LABEL_VECTORS_get();
  return ret;
}

int VTK_LABEL_NORMALS() @property {
  auto ret = vtkd_im.VTK_LABEL_NORMALS_get();
  return ret;
}

int VTK_LABEL_TCOORDS() @property {
  auto ret = vtkd_im.VTK_LABEL_TCOORDS_get();
  return ret;
}

int VTK_LABEL_TENSORS() @property {
  auto ret = vtkd_im.VTK_LABEL_TENSORS_get();
  return ret;
}

int VTK_LABEL_FIELD_DATA() @property {
  auto ret = vtkd_im.VTK_LABEL_FIELD_DATA_get();
  return ret;
}

int VTK_SOLID_TETRAHEDRON() @property {
  auto ret = vtkd_im.VTK_SOLID_TETRAHEDRON_get();
  return ret;
}

int VTK_SOLID_CUBE() @property {
  auto ret = vtkd_im.VTK_SOLID_CUBE_get();
  return ret;
}

int VTK_SOLID_OCTAHEDRON() @property {
  auto ret = vtkd_im.VTK_SOLID_OCTAHEDRON_get();
  return ret;
}

int VTK_SOLID_ICOSAHEDRON() @property {
  auto ret = vtkd_im.VTK_SOLID_ICOSAHEDRON_get();
  return ret;
}

int VTK_SOLID_DODECAHEDRON() @property {
  auto ret = vtkd_im.VTK_SOLID_DODECAHEDRON_get();
  return ret;
}

int VTKIS_WINDOW_LEVEL() @property {
  auto ret = vtkd_im.VTKIS_WINDOW_LEVEL_get();
  return ret;
}

int VTKIS_PICK() @property {
  auto ret = vtkd_im.VTKIS_PICK_get();
  return ret;
}

int VTKIS_SLICE() @property {
  auto ret = vtkd_im.VTKIS_SLICE_get();
  return ret;
}

int VTKIS_IMAGE2D() @property {
  auto ret = vtkd_im.VTKIS_IMAGE2D_get();
  return ret;
}

int VTKIS_IMAGE3D() @property {
  auto ret = vtkd_im.VTKIS_IMAGE3D_get();
  return ret;
}

int VTKIS_IMAGE_SLICING() @property {
  auto ret = vtkd_im.VTKIS_IMAGE_SLICING_get();
  return ret;
}

int VTK_INTEGRATE_FORWARD() @property {
  auto ret = vtkd_im.VTK_INTEGRATE_FORWARD_get();
  return ret;
}

int VTK_INTEGRATE_BACKWARD() @property {
  auto ret = vtkd_im.VTK_INTEGRATE_BACKWARD_get();
  return ret;
}

int VTK_INTEGRATE_BOTH_DIRECTIONS() @property {
  auto ret = vtkd_im.VTK_INTEGRATE_BOTH_DIRECTIONS_get();
  return ret;
}

int VTK_TEXTURE_QUALITY_DEFAULT() @property {
  auto ret = vtkd_im.VTK_TEXTURE_QUALITY_DEFAULT_get();
  return ret;
}

int VTK_TEXTURE_QUALITY_16BIT() @property {
  auto ret = vtkd_im.VTK_TEXTURE_QUALITY_16BIT_get();
  return ret;
}

int VTK_TEXTURE_QUALITY_32BIT() @property {
  auto ret = vtkd_im.VTK_TEXTURE_QUALITY_32BIT_get();
  return ret;
}

vtkVector2i.vtkVector2i Plus(vtkVector2i.vtkVector2i v1, vtkVector2i.vtkVector2i v2) {
  vtkVector2i.vtkVector2i ret = new vtkVector2i.vtkVector2i(vtkd_im.Plus__SWIG_1(vtkVector2i.vtkVector2i.swigGetCPtr(v1), vtkVector2i.vtkVector2i.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

vtkVector2i.vtkVector2i Minus(vtkVector2i.vtkVector2i v1, vtkVector2i.vtkVector2i v2) {
  vtkVector2i.vtkVector2i ret = new vtkVector2i.vtkVector2i(vtkd_im.Minus__SWIG_1(vtkVector2i.vtkVector2i.swigGetCPtr(v1), vtkVector2i.vtkVector2i.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

vtkVector2i.vtkVector2i Multiply(vtkVector2i.vtkVector2i v1, vtkVector2i.vtkVector2i v2) {
  vtkVector2i.vtkVector2i ret = new vtkVector2i.vtkVector2i(vtkd_im.Multiply__SWIG_2(vtkVector2i.vtkVector2i.swigGetCPtr(v1), vtkVector2i.vtkVector2i.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

vtkVector2i.vtkVector2i Divide(vtkVector2i.vtkVector2i v1, vtkVector2i.vtkVector2i v2) {
  vtkVector2i.vtkVector2i ret = new vtkVector2i.vtkVector2i(vtkd_im.Divide__SWIG_1(vtkVector2i.vtkVector2i.swigGetCPtr(v1), vtkVector2i.vtkVector2i.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

vtkVector2f.vtkVector2f Plus(vtkVector2f.vtkVector2f v1, vtkVector2f.vtkVector2f v2) {
  vtkVector2f.vtkVector2f ret = new vtkVector2f.vtkVector2f(vtkd_im.Plus__SWIG_2(vtkVector2f.vtkVector2f.swigGetCPtr(v1), vtkVector2f.vtkVector2f.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

vtkVector2f.vtkVector2f Minus(vtkVector2f.vtkVector2f v1, vtkVector2f.vtkVector2f v2) {
  vtkVector2f.vtkVector2f ret = new vtkVector2f.vtkVector2f(vtkd_im.Minus__SWIG_2(vtkVector2f.vtkVector2f.swigGetCPtr(v1), vtkVector2f.vtkVector2f.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

vtkVector2f.vtkVector2f Multiply(vtkVector2f.vtkVector2f v1, vtkVector2f.vtkVector2f v2) {
  vtkVector2f.vtkVector2f ret = new vtkVector2f.vtkVector2f(vtkd_im.Multiply__SWIG_5(vtkVector2f.vtkVector2f.swigGetCPtr(v1), vtkVector2f.vtkVector2f.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

vtkVector2f.vtkVector2f Divide(vtkVector2f.vtkVector2f v1, vtkVector2f.vtkVector2f v2) {
  vtkVector2f.vtkVector2f ret = new vtkVector2f.vtkVector2f(vtkd_im.Divide__SWIG_2(vtkVector2f.vtkVector2f.swigGetCPtr(v1), vtkVector2f.vtkVector2f.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

vtkVector2d.vtkVector2d Plus(vtkVector2d.vtkVector2d v1, vtkVector2d.vtkVector2d v2) {
  vtkVector2d.vtkVector2d ret = new vtkVector2d.vtkVector2d(vtkd_im.Plus__SWIG_3(vtkVector2d.vtkVector2d.swigGetCPtr(v1), vtkVector2d.vtkVector2d.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

vtkVector2d.vtkVector2d Minus(vtkVector2d.vtkVector2d v1, vtkVector2d.vtkVector2d v2) {
  vtkVector2d.vtkVector2d ret = new vtkVector2d.vtkVector2d(vtkd_im.Minus__SWIG_3(vtkVector2d.vtkVector2d.swigGetCPtr(v1), vtkVector2d.vtkVector2d.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

vtkVector2d.vtkVector2d Multiply(vtkVector2d.vtkVector2d v1, vtkVector2d.vtkVector2d v2) {
  vtkVector2d.vtkVector2d ret = new vtkVector2d.vtkVector2d(vtkd_im.Multiply__SWIG_8(vtkVector2d.vtkVector2d.swigGetCPtr(v1), vtkVector2d.vtkVector2d.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

vtkVector2d.vtkVector2d Divide(vtkVector2d.vtkVector2d v1, vtkVector2d.vtkVector2d v2) {
  vtkVector2d.vtkVector2d ret = new vtkVector2d.vtkVector2d(vtkd_im.Divide__SWIG_3(vtkVector2d.vtkVector2d.swigGetCPtr(v1), vtkVector2d.vtkVector2d.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

vtkVector3i.vtkVector3i Plus(vtkVector3i.vtkVector3i v1, vtkVector3i.vtkVector3i v2) {
  vtkVector3i.vtkVector3i ret = new vtkVector3i.vtkVector3i(vtkd_im.Plus__SWIG_4(vtkVector3i.vtkVector3i.swigGetCPtr(v1), vtkVector3i.vtkVector3i.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

vtkVector3i.vtkVector3i Minus(vtkVector3i.vtkVector3i v1, vtkVector3i.vtkVector3i v2) {
  vtkVector3i.vtkVector3i ret = new vtkVector3i.vtkVector3i(vtkd_im.Minus__SWIG_4(vtkVector3i.vtkVector3i.swigGetCPtr(v1), vtkVector3i.vtkVector3i.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

vtkVector3i.vtkVector3i Multiply(vtkVector3i.vtkVector3i v1, vtkVector3i.vtkVector3i v2) {
  vtkVector3i.vtkVector3i ret = new vtkVector3i.vtkVector3i(vtkd_im.Multiply__SWIG_11(vtkVector3i.vtkVector3i.swigGetCPtr(v1), vtkVector3i.vtkVector3i.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

vtkVector3i.vtkVector3i Divide(vtkVector3i.vtkVector3i v1, vtkVector3i.vtkVector3i v2) {
  vtkVector3i.vtkVector3i ret = new vtkVector3i.vtkVector3i(vtkd_im.Divide__SWIG_4(vtkVector3i.vtkVector3i.swigGetCPtr(v1), vtkVector3i.vtkVector3i.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

vtkVector3f.vtkVector3f Plus(vtkVector3f.vtkVector3f v1, vtkVector3f.vtkVector3f v2) {
  vtkVector3f.vtkVector3f ret = new vtkVector3f.vtkVector3f(vtkd_im.Plus__SWIG_5(vtkVector3f.vtkVector3f.swigGetCPtr(v1), vtkVector3f.vtkVector3f.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

vtkVector3f.vtkVector3f Minus(vtkVector3f.vtkVector3f v1, vtkVector3f.vtkVector3f v2) {
  vtkVector3f.vtkVector3f ret = new vtkVector3f.vtkVector3f(vtkd_im.Minus__SWIG_5(vtkVector3f.vtkVector3f.swigGetCPtr(v1), vtkVector3f.vtkVector3f.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

vtkVector3f.vtkVector3f Multiply(vtkVector3f.vtkVector3f v1, vtkVector3f.vtkVector3f v2) {
  vtkVector3f.vtkVector3f ret = new vtkVector3f.vtkVector3f(vtkd_im.Multiply__SWIG_14(vtkVector3f.vtkVector3f.swigGetCPtr(v1), vtkVector3f.vtkVector3f.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

vtkVector3f.vtkVector3f Divide(vtkVector3f.vtkVector3f v1, vtkVector3f.vtkVector3f v2) {
  vtkVector3f.vtkVector3f ret = new vtkVector3f.vtkVector3f(vtkd_im.Divide__SWIG_5(vtkVector3f.vtkVector3f.swigGetCPtr(v1), vtkVector3f.vtkVector3f.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

vtkVector3d.vtkVector3d Plus(vtkVector3d.vtkVector3d v1, vtkVector3d.vtkVector3d v2) {
  vtkVector3d.vtkVector3d ret = new vtkVector3d.vtkVector3d(vtkd_im.Plus__SWIG_6(vtkVector3d.vtkVector3d.swigGetCPtr(v1), vtkVector3d.vtkVector3d.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

vtkVector3d.vtkVector3d Minus(vtkVector3d.vtkVector3d v1, vtkVector3d.vtkVector3d v2) {
  vtkVector3d.vtkVector3d ret = new vtkVector3d.vtkVector3d(vtkd_im.Minus__SWIG_6(vtkVector3d.vtkVector3d.swigGetCPtr(v1), vtkVector3d.vtkVector3d.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

vtkVector3d.vtkVector3d Multiply(vtkVector3d.vtkVector3d v1, vtkVector3d.vtkVector3d v2) {
  vtkVector3d.vtkVector3d ret = new vtkVector3d.vtkVector3d(vtkd_im.Multiply__SWIG_17(vtkVector3d.vtkVector3d.swigGetCPtr(v1), vtkVector3d.vtkVector3d.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

vtkVector3d.vtkVector3d Divide(vtkVector3d.vtkVector3d v1, vtkVector3d.vtkVector3d v2) {
  vtkVector3d.vtkVector3d ret = new vtkVector3d.vtkVector3d(vtkd_im.Divide__SWIG_6(vtkVector3d.vtkVector3d.swigGetCPtr(v1), vtkVector3d.vtkVector3d.swigGetCPtr(v2)), true);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  return ret;
}

void vtkGarbageCollectorManagerInstance(vtkGarbageCollectorManager.vtkGarbageCollectorManager value) @property {
  vtkd_im.vtkGarbageCollectorManagerInstance_set(vtkGarbageCollectorManager.vtkGarbageCollectorManager.swigGetCPtr(value));
}

vtkGarbageCollectorManager.vtkGarbageCollectorManager vtkGarbageCollectorManagerInstance() @property {
  void* cPtr = vtkd_im.vtkGarbageCollectorManagerInstance_get();
  vtkGarbageCollectorManager.vtkGarbageCollectorManager ret = (cPtr is null) ? null : new vtkGarbageCollectorManager.vtkGarbageCollectorManager(cPtr, false);
  return ret;
}

void vtkGarbageCollectorReportInternal(vtkGarbageCollector.vtkGarbageCollector arg0, vtkObjectBase.vtkObjectBase arg1, void* arg2, string arg3) {
  vtkd_im.vtkGarbageCollectorReportInternal(vtkGarbageCollector.vtkGarbageCollector.swigGetCPtr(arg0), vtkObjectBase.vtkObjectBase.swigGetCPtr(arg1), cast(void*)arg2, (arg3 ? std.string.toStringz(arg3) : null));
}

void vtkgluPickMatrix(SWIGTYPE_p_GLdouble.SWIGTYPE_p_GLdouble x, SWIGTYPE_p_GLdouble.SWIGTYPE_p_GLdouble y, SWIGTYPE_p_GLdouble.SWIGTYPE_p_GLdouble width, SWIGTYPE_p_GLdouble.SWIGTYPE_p_GLdouble height, int* origin, int* size) {
  vtkd_im.vtkgluPickMatrix(SWIGTYPE_p_GLdouble.SWIGTYPE_p_GLdouble.swigGetCPtr(x), SWIGTYPE_p_GLdouble.SWIGTYPE_p_GLdouble.swigGetCPtr(y), SWIGTYPE_p_GLdouble.SWIGTYPE_p_GLdouble.swigGetCPtr(width), SWIGTYPE_p_GLdouble.SWIGTYPE_p_GLdouble.swigGetCPtr(height), cast(void*)origin, cast(void*)size);
  if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
}

int VTK_LANDMARK_RIGIDBODY() @property {
  auto ret = vtkd_im.VTK_LANDMARK_RIGIDBODY_get();
  return ret;
}

int VTK_LANDMARK_SIMILARITY() @property {
  auto ret = vtkd_im.VTK_LANDMARK_SIMILARITY_get();
  return ret;
}

int VTK_LANDMARK_AFFINE() @property {
  auto ret = vtkd_im.VTK_LANDMARK_AFFINE_get();
  return ret;
}

int VTK_VECTOR_EXTRUSION() @property {
  auto ret = vtkd_im.VTK_VECTOR_EXTRUSION_get();
  return ret;
}

int VTK_NORMAL_EXTRUSION() @property {
  auto ret = vtkd_im.VTK_NORMAL_EXTRUSION_get();
  return ret;
}

int VTK_POINT_EXTRUSION() @property {
  auto ret = vtkd_im.VTK_POINT_EXTRUSION_get();
  return ret;
}

int VTK_VARY_RADIUS_OFF() @property {
  auto ret = vtkd_im.VTK_VARY_RADIUS_OFF_get();
  return ret;
}

int VTK_VARY_RADIUS_BY_SCALAR() @property {
  auto ret = vtkd_im.VTK_VARY_RADIUS_BY_SCALAR_get();
  return ret;
}

int VTK_VARY_RADIUS_BY_VECTOR() @property {
  auto ret = vtkd_im.VTK_VARY_RADIUS_BY_VECTOR_get();
  return ret;
}

int VTK_VARY_RADIUS_BY_ABSOLUTE_SCALAR() @property {
  auto ret = vtkd_im.VTK_VARY_RADIUS_BY_ABSOLUTE_SCALAR_get();
  return ret;
}

int VTK_KBUFFER_SIZE_2() @property {
  auto ret = vtkd_im.VTK_KBUFFER_SIZE_2_get();
  return ret;
}

int VTK_KBUFFER_SIZE_6() @property {
  auto ret = vtkd_im.VTK_KBUFFER_SIZE_6_get();
  return ret;
}

int VTK_FIELD_LEVEL_OF_DETAIL() @property {
  auto ret = vtkd_im.VTK_FIELD_LEVEL_OF_DETAIL_get();
  return ret;
}

int VTK_AREA_LEVEL_OF_DETAIL() @property {
  auto ret = vtkd_im.VTK_AREA_LEVEL_OF_DETAIL_get();
  return ret;
}

enum {
  VTK_3TREE_CHILD_ZMIN_YMIN_XMIN = 0,
  VTK_3TREE_CHILD_ZMIN_YMIN_XMAX,
  VTK_3TREE_CHILD_ZMIN_YMAX_XMIN,
  VTK_3TREE_CHILD_ZMIN_YMAX_XMAX,
  VTK_3TREE_CHILD_ZMAX_YMIN_XMIN,
  VTK_3TREE_CHILD_ZMAX_YMIN_XMAX,
  VTK_3TREE_CHILD_ZMAX_YMAX_XMIN,
  VTK_3TREE_CHILD_ZMAX_YMAX_XMAX
}

int VTK_2TREE_CHILD_SW() @property {
  auto ret = vtkd_im.VTK_2TREE_CHILD_SW_get();
  return ret;
}

int VTK_2TREE_CHILD_SE() @property {
  auto ret = vtkd_im.VTK_2TREE_CHILD_SE_get();
  return ret;
}

int VTK_2TREE_CHILD_NW() @property {
  auto ret = vtkd_im.VTK_2TREE_CHILD_NW_get();
  return ret;
}

int VTK_2TREE_CHILD_NE() @property {
  auto ret = vtkd_im.VTK_2TREE_CHILD_NE_get();
  return ret;
}

int VTK_1TREE_TREE_CHILD_LEFT() @property {
  auto ret = vtkd_im.VTK_1TREE_TREE_CHILD_LEFT_get();
  return ret;
}

int VTK_1TREE_TREE_CHILD_RIGHT() @property {
  auto ret = vtkd_im.VTK_1TREE_TREE_CHILD_RIGHT_get();
  return ret;
}

string VTK_TYPE_LONG_LONG_FORMAT() @property {
  string ret = std.conv.to!string(vtkd_im.VTK_TYPE_LONG_LONG_FORMAT_get());
  return ret;
}

int VTK_USE_INT8() @property {
  auto ret = vtkd_im.VTK_USE_INT8_get();
  return ret;
}

int VTK_USE_UINT8() @property {
  auto ret = vtkd_im.VTK_USE_UINT8_get();
  return ret;
}

int VTK_USE_INT16() @property {
  auto ret = vtkd_im.VTK_USE_INT16_get();
  return ret;
}

int VTK_USE_UINT16() @property {
  auto ret = vtkd_im.VTK_USE_UINT16_get();
  return ret;
}

int VTK_USE_INT32() @property {
  auto ret = vtkd_im.VTK_USE_INT32_get();
  return ret;
}

int VTK_USE_UINT32() @property {
  auto ret = vtkd_im.VTK_USE_UINT32_get();
  return ret;
}

int VTK_USE_INT64() @property {
  auto ret = vtkd_im.VTK_USE_INT64_get();
  return ret;
}

int VTK_USE_UINT64() @property {
  auto ret = vtkd_im.VTK_USE_UINT64_get();
  return ret;
}

int VTK_USE_FLOAT32() @property {
  auto ret = vtkd_im.VTK_USE_FLOAT32_get();
  return ret;
}

int VTK_USE_FLOAT64() @property {
  auto ret = vtkd_im.VTK_USE_FLOAT64_get();
  return ret;
}

int VTK_WIPE_QUAD() @property {
  auto ret = vtkd_im.VTK_WIPE_QUAD_get();
  return ret;
}

int VTK_WIPE_HORIZONTAL() @property {
  auto ret = vtkd_im.VTK_WIPE_HORIZONTAL_get();
  return ret;
}

int VTK_WIPE_VERTICAL() @property {
  auto ret = vtkd_im.VTK_WIPE_VERTICAL_get();
  return ret;
}

int VTK_WIPE_LOWER_LEFT() @property {
  auto ret = vtkd_im.VTK_WIPE_LOWER_LEFT_get();
  return ret;
}

int VTK_WIPE_LOWER_RIGHT() @property {
  auto ret = vtkd_im.VTK_WIPE_LOWER_RIGHT_get();
  return ret;
}

int VTK_WIPE_UPPER_LEFT() @property {
  auto ret = vtkd_im.VTK_WIPE_UPPER_LEFT_get();
  return ret;
}

int VTK_WIPE_UPPER_RIGHT() @property {
  auto ret = vtkd_im.VTK_WIPE_UPPER_RIGHT_get();
  return ret;
}

int VTK_COMPOSITE_CLASSIFY_FIRST() @property {
  auto ret = vtkd_im.VTK_COMPOSITE_CLASSIFY_FIRST_get();
  return ret;
}

int VTK_COMPOSITE_INTERPOLATE_FIRST() @property {
  auto ret = vtkd_im.VTK_COMPOSITE_INTERPOLATE_FIRST_get();
  return ret;
}

int VTK_ORIENT_HORIZONTAL() @property {
  auto ret = vtkd_im.VTK_ORIENT_HORIZONTAL_get();
  return ret;
}

int VTK_ORIENT_VERTICAL() @property {
  auto ret = vtkd_im.VTK_ORIENT_VERTICAL_get();
  return ret;
}

int VTK_EDT_SAITO_CACHED() @property {
  auto ret = vtkd_im.VTK_EDT_SAITO_CACHED_get();
  return ret;
}

int VTK_EDT_SAITO() @property {
  auto ret = vtkd_im.VTK_EDT_SAITO_get();
  return ret;
}

int VTK_ADD() @property {
  auto ret = vtkd_im.VTK_ADD_get();
  return ret;
}

int VTK_SUBTRACT() @property {
  auto ret = vtkd_im.VTK_SUBTRACT_get();
  return ret;
}

int VTK_MULTIPLY() @property {
  auto ret = vtkd_im.VTK_MULTIPLY_get();
  return ret;
}

int VTK_DIVIDE() @property {
  auto ret = vtkd_im.VTK_DIVIDE_get();
  return ret;
}

int VTK_INVERT() @property {
  auto ret = vtkd_im.VTK_INVERT_get();
  return ret;
}

int VTK_SIN() @property {
  auto ret = vtkd_im.VTK_SIN_get();
  return ret;
}

int VTK_COS() @property {
  auto ret = vtkd_im.VTK_COS_get();
  return ret;
}

int VTK_EXP() @property {
  auto ret = vtkd_im.VTK_EXP_get();
  return ret;
}

int VTK_LOG() @property {
  auto ret = vtkd_im.VTK_LOG_get();
  return ret;
}

int VTK_ABS() @property {
  auto ret = vtkd_im.VTK_ABS_get();
  return ret;
}

int VTK_SQR() @property {
  auto ret = vtkd_im.VTK_SQR_get();
  return ret;
}

int VTK_SQRT() @property {
  auto ret = vtkd_im.VTK_SQRT_get();
  return ret;
}

int VTK_MIN() @property {
  auto ret = vtkd_im.VTK_MIN_get();
  return ret;
}

int VTK_MAX() @property {
  auto ret = vtkd_im.VTK_MAX_get();
  return ret;
}

int VTK_ATAN() @property {
  auto ret = vtkd_im.VTK_ATAN_get();
  return ret;
}

int VTK_ATAN2() @property {
  auto ret = vtkd_im.VTK_ATAN2_get();
  return ret;
}

int VTK_MULTIPLYBYK() @property {
  auto ret = vtkd_im.VTK_MULTIPLYBYK_get();
  return ret;
}

int VTK_ADDC() @property {
  auto ret = vtkd_im.VTK_ADDC_get();
  return ret;
}

int VTK_CONJUGATE() @property {
  auto ret = vtkd_im.VTK_CONJUGATE_get();
  return ret;
}

int VTK_COMPLEX_MULTIPLY() @property {
  auto ret = vtkd_im.VTK_COMPLEX_MULTIPLY_get();
  return ret;
}

int VTK_REPLACECBYK() @property {
  auto ret = vtkd_im.VTK_REPLACECBYK_get();
  return ret;
}

int VTK_RBF_CUSTOM() @property {
  auto ret = vtkd_im.VTK_RBF_CUSTOM_get();
  return ret;
}

int VTK_RBF_R() @property {
  auto ret = vtkd_im.VTK_RBF_R_get();
  return ret;
}

int VTK_RBF_R2LOGR() @property {
  auto ret = vtkd_im.VTK_RBF_R2LOGR_get();
  return ret;
}

int VTK_RULED_MODE_RESAMPLE() @property {
  auto ret = vtkd_im.VTK_RULED_MODE_RESAMPLE_get();
  return ret;
}

int VTK_RULED_MODE_POINT_WALK() @property {
  auto ret = vtkd_im.VTK_RULED_MODE_POINT_WALK_get();
  return ret;
}

string MIident() @property {
  string ret = std.conv.to!string(vtkd_im.MIident_get());
  return ret;
}

string MI_GRPNAME() @property {
  string ret = std.conv.to!string(vtkd_im.MI_GRPNAME_get());
  return ret;
}

string MI_GRP_SEP() @property {
  string ret = std.conv.to!string(vtkd_im.MI_GRP_SEP_get());
  return ret;
}

string MI_ATT_SEP() @property {
  string ret = std.conv.to!string(vtkd_im.MI_ATT_SEP_get());
  return ret;
}

string MI_EMPTY_STRING() @property {
  string ret = std.conv.to!string(vtkd_im.MI_EMPTY_STRING_get());
  return ret;
}

int MI_ERROR() @property {
  auto ret = vtkd_im.MI_ERROR_get();
  return ret;
}

int MI_NOERROR() @property {
  auto ret = vtkd_im.MI_NOERROR_get();
  return ret;
}

int MI_MAX_ATTSTR_LEN() @property {
  auto ret = vtkd_im.MI_MAX_ATTSTR_LEN_get();
  return ret;
}

int MI_NUM_SPACE_DIMS() @property {
  auto ret = vtkd_im.MI_NUM_SPACE_DIMS_get();
  return ret;
}

int MI_MAX_IMGDIMS() @property {
  auto ret = vtkd_im.MI_MAX_IMGDIMS_get();
  return ret;
}

string MIunits() @property {
  string ret = std.conv.to!string(vtkd_im.MIunits_get());
  return ret;
}

string MIlong_name() @property {
  string ret = std.conv.to!string(vtkd_im.MIlong_name_get());
  return ret;
}

string MIvalid_range() @property {
  string ret = std.conv.to!string(vtkd_im.MIvalid_range_get());
  return ret;
}

string MIvalid_max() @property {
  string ret = std.conv.to!string(vtkd_im.MIvalid_max_get());
  return ret;
}

string MIvalid_min() @property {
  string ret = std.conv.to!string(vtkd_im.MIvalid_min_get());
  return ret;
}

string MI_FillValue() @property {
  string ret = std.conv.to!string(vtkd_im.MI_FillValue_get());
  return ret;
}

string MItitle() @property {
  string ret = std.conv.to!string(vtkd_im.MItitle_get());
  return ret;
}

string MIhistory() @property {
  string ret = std.conv.to!string(vtkd_im.MIhistory_get());
  return ret;
}

string MIvartype() @property {
  string ret = std.conv.to!string(vtkd_im.MIvartype_get());
  return ret;
}

string MIvarid() @property {
  string ret = std.conv.to!string(vtkd_im.MIvarid_get());
  return ret;
}

string MIsigntype() @property {
  string ret = std.conv.to!string(vtkd_im.MIsigntype_get());
  return ret;
}

string MIparent() @property {
  string ret = std.conv.to!string(vtkd_im.MIparent_get());
  return ret;
}

string MIchildren() @property {
  string ret = std.conv.to!string(vtkd_im.MIchildren_get());
  return ret;
}

string MIcomments() @property {
  string ret = std.conv.to!string(vtkd_im.MIcomments_get());
  return ret;
}

string MIversion() @property {
  string ret = std.conv.to!string(vtkd_im.MIversion_get());
  return ret;
}

string MI_VARATT_POINTER_PREFIX() @property {
  string ret = std.conv.to!string(vtkd_im.MI_VARATT_POINTER_PREFIX_get());
  return ret;
}

string MI_CHILD_SEPARATOR() @property {
  string ret = std.conv.to!string(vtkd_im.MI_CHILD_SEPARATOR_get());
  return ret;
}

string MI_GROUP() @property {
  string ret = std.conv.to!string(vtkd_im.MI_GROUP_get());
  return ret;
}

string MI_DIMENSION() @property {
  string ret = std.conv.to!string(vtkd_im.MI_DIMENSION_get());
  return ret;
}

string MI_DIM_WIDTH() @property {
  string ret = std.conv.to!string(vtkd_im.MI_DIM_WIDTH_get());
  return ret;
}

string MI_VARATT() @property {
  string ret = std.conv.to!string(vtkd_im.MI_VARATT_get());
  return ret;
}

string MI_STDVAR() @property {
  string ret = std.conv.to!string(vtkd_im.MI_STDVAR_get());
  return ret;
}

string MI_SIGNED() @property {
  string ret = std.conv.to!string(vtkd_im.MI_SIGNED_get());
  return ret;
}

string MI_UNSIGNED() @property {
  string ret = std.conv.to!string(vtkd_im.MI_UNSIGNED_get());
  return ret;
}

string MI_VERSION_1_0() @property {
  string ret = std.conv.to!string(vtkd_im.MI_VERSION_1_0_get());
  return ret;
}

string MI_CURRENT_VERSION() @property {
  string ret = std.conv.to!string(vtkd_im.MI_CURRENT_VERSION_get());
  return ret;
}

string MI_TRUE() @property {
  string ret = std.conv.to!string(vtkd_im.MI_TRUE_get());
  return ret;
}

string MI_FALSE() @property {
  string ret = std.conv.to!string(vtkd_im.MI_FALSE_get());
  return ret;
}

string MIxspace() @property {
  string ret = std.conv.to!string(vtkd_im.MIxspace_get());
  return ret;
}

string MIyspace() @property {
  string ret = std.conv.to!string(vtkd_im.MIyspace_get());
  return ret;
}

string MIzspace() @property {
  string ret = std.conv.to!string(vtkd_im.MIzspace_get());
  return ret;
}

string MItime() @property {
  string ret = std.conv.to!string(vtkd_im.MItime_get());
  return ret;
}

string MItfrequency() @property {
  string ret = std.conv.to!string(vtkd_im.MItfrequency_get());
  return ret;
}

string MIxfrequency() @property {
  string ret = std.conv.to!string(vtkd_im.MIxfrequency_get());
  return ret;
}

string MIyfrequency() @property {
  string ret = std.conv.to!string(vtkd_im.MIyfrequency_get());
  return ret;
}

string MIzfrequency() @property {
  string ret = std.conv.to!string(vtkd_im.MIzfrequency_get());
  return ret;
}

string MIvector_dimension() @property {
  string ret = std.conv.to!string(vtkd_im.MIvector_dimension_get());
  return ret;
}

string MIxspace_width() @property {
  string ret = std.conv.to!string(vtkd_im.MIxspace_width_get());
  return ret;
}

string MIyspace_width() @property {
  string ret = std.conv.to!string(vtkd_im.MIyspace_width_get());
  return ret;
}

string MIzspace_width() @property {
  string ret = std.conv.to!string(vtkd_im.MIzspace_width_get());
  return ret;
}

string MItime_width() @property {
  string ret = std.conv.to!string(vtkd_im.MItime_width_get());
  return ret;
}

string MItfrequency_width() @property {
  string ret = std.conv.to!string(vtkd_im.MItfrequency_width_get());
  return ret;
}

string MIxfrequency_width() @property {
  string ret = std.conv.to!string(vtkd_im.MIxfrequency_width_get());
  return ret;
}

string MIyfrequency_width() @property {
  string ret = std.conv.to!string(vtkd_im.MIyfrequency_width_get());
  return ret;
}

string MIzfrequency_width() @property {
  string ret = std.conv.to!string(vtkd_im.MIzfrequency_width_get());
  return ret;
}

string MIspacing() @property {
  string ret = std.conv.to!string(vtkd_im.MIspacing_get());
  return ret;
}

string MIstep() @property {
  string ret = std.conv.to!string(vtkd_im.MIstep_get());
  return ret;
}

string MIstart() @property {
  string ret = std.conv.to!string(vtkd_im.MIstart_get());
  return ret;
}

string MIspacetype() @property {
  string ret = std.conv.to!string(vtkd_im.MIspacetype_get());
  return ret;
}

string MIalignment() @property {
  string ret = std.conv.to!string(vtkd_im.MIalignment_get());
  return ret;
}

string MIdirection_cosines() @property {
  string ret = std.conv.to!string(vtkd_im.MIdirection_cosines_get());
  return ret;
}

string MIwidth() @property {
  string ret = std.conv.to!string(vtkd_im.MIwidth_get());
  return ret;
}

string MIfiltertype() @property {
  string ret = std.conv.to!string(vtkd_im.MIfiltertype_get());
  return ret;
}

string MI_REGULAR() @property {
  string ret = std.conv.to!string(vtkd_im.MI_REGULAR_get());
  return ret;
}

string MI_IRREGULAR() @property {
  string ret = std.conv.to!string(vtkd_im.MI_IRREGULAR_get());
  return ret;
}

string MI_NATIVE() @property {
  string ret = std.conv.to!string(vtkd_im.MI_NATIVE_get());
  return ret;
}

string MI_TALAIRACH() @property {
  string ret = std.conv.to!string(vtkd_im.MI_TALAIRACH_get());
  return ret;
}

string MI_CALLOSAL() @property {
  string ret = std.conv.to!string(vtkd_im.MI_CALLOSAL_get());
  return ret;
}

string MI_START() @property {
  string ret = std.conv.to!string(vtkd_im.MI_START_get());
  return ret;
}

string MI_CENTRE() @property {
  string ret = std.conv.to!string(vtkd_im.MI_CENTRE_get());
  return ret;
}

string MI_END() @property {
  string ret = std.conv.to!string(vtkd_im.MI_END_get());
  return ret;
}

string MI_CENTER() @property {
  string ret = std.conv.to!string(vtkd_im.MI_CENTER_get());
  return ret;
}

string MI_SQUARE() @property {
  string ret = std.conv.to!string(vtkd_im.MI_SQUARE_get());
  return ret;
}

string MI_GAUSSIAN() @property {
  string ret = std.conv.to!string(vtkd_im.MI_GAUSSIAN_get());
  return ret;
}

string MI_TRIANGULAR() @property {
  string ret = std.conv.to!string(vtkd_im.MI_TRIANGULAR_get());
  return ret;
}

string MIrootvariable() @property {
  string ret = std.conv.to!string(vtkd_im.MIrootvariable_get());
  return ret;
}

string MIimage() @property {
  string ret = std.conv.to!string(vtkd_im.MIimage_get());
  return ret;
}

string MIimagemax() @property {
  string ret = std.conv.to!string(vtkd_im.MIimagemax_get());
  return ret;
}

string MIimagemin() @property {
  string ret = std.conv.to!string(vtkd_im.MIimagemin_get());
  return ret;
}

string MIcomplete() @property {
  string ret = std.conv.to!string(vtkd_im.MIcomplete_get());
  return ret;
}

string MIpatient() @property {
  string ret = std.conv.to!string(vtkd_im.MIpatient_get());
  return ret;
}

string MIfull_name() @property {
  string ret = std.conv.to!string(vtkd_im.MIfull_name_get());
  return ret;
}

string MIother_names() @property {
  string ret = std.conv.to!string(vtkd_im.MIother_names_get());
  return ret;
}

string MIidentification() @property {
  string ret = std.conv.to!string(vtkd_im.MIidentification_get());
  return ret;
}

string MIother_ids() @property {
  string ret = std.conv.to!string(vtkd_im.MIother_ids_get());
  return ret;
}

string MIbirthdate() @property {
  string ret = std.conv.to!string(vtkd_im.MIbirthdate_get());
  return ret;
}

string MIsex() @property {
  string ret = std.conv.to!string(vtkd_im.MIsex_get());
  return ret;
}

string MIage() @property {
  string ret = std.conv.to!string(vtkd_im.MIage_get());
  return ret;
}

string MIweight() @property {
  string ret = std.conv.to!string(vtkd_im.MIweight_get());
  return ret;
}

string MIsize() @property {
  string ret = std.conv.to!string(vtkd_im.MIsize_get());
  return ret;
}

string MIaddress() @property {
  string ret = std.conv.to!string(vtkd_im.MIaddress_get());
  return ret;
}

string MIinsurance_id() @property {
  string ret = std.conv.to!string(vtkd_im.MIinsurance_id_get());
  return ret;
}

string MI_MALE() @property {
  string ret = std.conv.to!string(vtkd_im.MI_MALE_get());
  return ret;
}

string MI_FEMALE() @property {
  string ret = std.conv.to!string(vtkd_im.MI_FEMALE_get());
  return ret;
}

string MI_OTHER() @property {
  string ret = std.conv.to!string(vtkd_im.MI_OTHER_get());
  return ret;
}

string MIstudy() @property {
  string ret = std.conv.to!string(vtkd_im.MIstudy_get());
  return ret;
}

string MIstart_time() @property {
  string ret = std.conv.to!string(vtkd_im.MIstart_time_get());
  return ret;
}

string MIstart_year() @property {
  string ret = std.conv.to!string(vtkd_im.MIstart_year_get());
  return ret;
}

string MIstart_month() @property {
  string ret = std.conv.to!string(vtkd_im.MIstart_month_get());
  return ret;
}

string MIstart_day() @property {
  string ret = std.conv.to!string(vtkd_im.MIstart_day_get());
  return ret;
}

string MIstart_hour() @property {
  string ret = std.conv.to!string(vtkd_im.MIstart_hour_get());
  return ret;
}

string MIstart_minute() @property {
  string ret = std.conv.to!string(vtkd_im.MIstart_minute_get());
  return ret;
}

string MIstart_seconds() @property {
  string ret = std.conv.to!string(vtkd_im.MIstart_seconds_get());
  return ret;
}

string MImodality() @property {
  string ret = std.conv.to!string(vtkd_im.MImodality_get());
  return ret;
}

string MImanufacturer() @property {
  string ret = std.conv.to!string(vtkd_im.MImanufacturer_get());
  return ret;
}

string MIdevice_model() @property {
  string ret = std.conv.to!string(vtkd_im.MIdevice_model_get());
  return ret;
}

string MIinstitution() @property {
  string ret = std.conv.to!string(vtkd_im.MIinstitution_get());
  return ret;
}

string MIdepartment() @property {
  string ret = std.conv.to!string(vtkd_im.MIdepartment_get());
  return ret;
}

string MIstation_id() @property {
  string ret = std.conv.to!string(vtkd_im.MIstation_id_get());
  return ret;
}

string MIreferring_physician() @property {
  string ret = std.conv.to!string(vtkd_im.MIreferring_physician_get());
  return ret;
}

string MIattending_physician() @property {
  string ret = std.conv.to!string(vtkd_im.MIattending_physician_get());
  return ret;
}

string MIradiologist() @property {
  string ret = std.conv.to!string(vtkd_im.MIradiologist_get());
  return ret;
}

string MIoperator() @property {
  string ret = std.conv.to!string(vtkd_im.MIoperator_get());
  return ret;
}

string MIadmitting_diagnosis() @property {
  string ret = std.conv.to!string(vtkd_im.MIadmitting_diagnosis_get());
  return ret;
}

string MIprocedure() @property {
  string ret = std.conv.to!string(vtkd_im.MIprocedure_get());
  return ret;
}

string MIstudy_id() @property {
  string ret = std.conv.to!string(vtkd_im.MIstudy_id_get());
  return ret;
}

string MI_PET() @property {
  string ret = std.conv.to!string(vtkd_im.MI_PET_get());
  return ret;
}

string MI_SPECT() @property {
  string ret = std.conv.to!string(vtkd_im.MI_SPECT_get());
  return ret;
}

string MI_GAMMA() @property {
  string ret = std.conv.to!string(vtkd_im.MI_GAMMA_get());
  return ret;
}

string MI_MRI() @property {
  string ret = std.conv.to!string(vtkd_im.MI_MRI_get());
  return ret;
}

string MI_MRS() @property {
  string ret = std.conv.to!string(vtkd_im.MI_MRS_get());
  return ret;
}

string MI_MRA() @property {
  string ret = std.conv.to!string(vtkd_im.MI_MRA_get());
  return ret;
}

string MI_CT() @property {
  string ret = std.conv.to!string(vtkd_im.MI_CT_get());
  return ret;
}

string MI_DSA() @property {
  string ret = std.conv.to!string(vtkd_im.MI_DSA_get());
  return ret;
}

string MI_DR() @property {
  string ret = std.conv.to!string(vtkd_im.MI_DR_get());
  return ret;
}

string MI_LABEL() @property {
  string ret = std.conv.to!string(vtkd_im.MI_LABEL_get());
  return ret;
}

string MIacquisition() @property {
  string ret = std.conv.to!string(vtkd_im.MIacquisition_get());
  return ret;
}

string MIprotocol() @property {
  string ret = std.conv.to!string(vtkd_im.MIprotocol_get());
  return ret;
}

string MIscanning_sequence() @property {
  string ret = std.conv.to!string(vtkd_im.MIscanning_sequence_get());
  return ret;
}

string MIrepetition_time() @property {
  string ret = std.conv.to!string(vtkd_im.MIrepetition_time_get());
  return ret;
}

string MIecho_time() @property {
  string ret = std.conv.to!string(vtkd_im.MIecho_time_get());
  return ret;
}

string MIinversion_time() @property {
  string ret = std.conv.to!string(vtkd_im.MIinversion_time_get());
  return ret;
}

string MInum_averages() @property {
  string ret = std.conv.to!string(vtkd_im.MInum_averages_get());
  return ret;
}

string MIimaging_frequency() @property {
  string ret = std.conv.to!string(vtkd_im.MIimaging_frequency_get());
  return ret;
}

string MIimaged_nucleus() @property {
  string ret = std.conv.to!string(vtkd_im.MIimaged_nucleus_get());
  return ret;
}

string MIradionuclide() @property {
  string ret = std.conv.to!string(vtkd_im.MIradionuclide_get());
  return ret;
}

string MIcontrast_agent() @property {
  string ret = std.conv.to!string(vtkd_im.MIcontrast_agent_get());
  return ret;
}

string MIradionuclide_halflife() @property {
  string ret = std.conv.to!string(vtkd_im.MIradionuclide_halflife_get());
  return ret;
}

string MItracer() @property {
  string ret = std.conv.to!string(vtkd_im.MItracer_get());
  return ret;
}

string MIinjection_time() @property {
  string ret = std.conv.to!string(vtkd_im.MIinjection_time_get());
  return ret;
}

string MIinjection_year() @property {
  string ret = std.conv.to!string(vtkd_im.MIinjection_year_get());
  return ret;
}

string MIinjection_month() @property {
  string ret = std.conv.to!string(vtkd_im.MIinjection_month_get());
  return ret;
}

string MIinjection_day() @property {
  string ret = std.conv.to!string(vtkd_im.MIinjection_day_get());
  return ret;
}

string MIinjection_hour() @property {
  string ret = std.conv.to!string(vtkd_im.MIinjection_hour_get());
  return ret;
}

string MIinjection_minute() @property {
  string ret = std.conv.to!string(vtkd_im.MIinjection_minute_get());
  return ret;
}

string MIinjection_seconds() @property {
  string ret = std.conv.to!string(vtkd_im.MIinjection_seconds_get());
  return ret;
}

string MIinjection_length() @property {
  string ret = std.conv.to!string(vtkd_im.MIinjection_length_get());
  return ret;
}

string MIinjection_dose() @property {
  string ret = std.conv.to!string(vtkd_im.MIinjection_dose_get());
  return ret;
}

string MIdose_units() @property {
  string ret = std.conv.to!string(vtkd_im.MIdose_units_get());
  return ret;
}

string MIinjection_volume() @property {
  string ret = std.conv.to!string(vtkd_im.MIinjection_volume_get());
  return ret;
}

string MIinjection_route() @property {
  string ret = std.conv.to!string(vtkd_im.MIinjection_route_get());
  return ret;
}

int VTK_IV_COLUMN() @property {
  auto ret = vtkd_im.VTK_IV_COLUMN_get();
  return ret;
}

int VTK_IV_ROW() @property {
  auto ret = vtkd_im.VTK_IV_ROW_get();
  return ret;
}

int VTK_BUNYKRCF_MAX_ARRAYS() @property {
  auto ret = vtkd_im.VTK_BUNYKRCF_MAX_ARRAYS_get();
  return ret;
}

int VTK_BUNYKRCF_ARRAY_SIZE() @property {
  auto ret = vtkd_im.VTK_BUNYKRCF_ARRAY_SIZE_get();
  return ret;
}

int VTKIS_USERINTERACTION() @property {
  auto ret = vtkd_im.VTKIS_USERINTERACTION_get();
  return ret;
}

int VTK_INSIDE_SMALLEST_REGION() @property {
  auto ret = vtkd_im.VTK_INSIDE_SMALLEST_REGION_get();
  return ret;
}

int VTK_INSIDE_LARGEST_REGION() @property {
  auto ret = vtkd_im.VTK_INSIDE_LARGEST_REGION_get();
  return ret;
}

int VTK_INSIDE_CLOSEST_POINT_REGION() @property {
  auto ret = vtkd_im.VTK_INSIDE_CLOSEST_POINT_REGION_get();
  return ret;
}

int VTK_BACKGROUND_LOCATION() @property {
  auto ret = vtkd_im.VTK_BACKGROUND_LOCATION_get();
  return ret;
}

int VTK_FOREGROUND_LOCATION() @property {
  auto ret = vtkd_im.VTK_FOREGROUND_LOCATION_get();
  return ret;
}

int VTK_PLOT_SCALARS() @property {
  auto ret = vtkd_im.VTK_PLOT_SCALARS_get();
  return ret;
}

int VTK_PLOT_VECTORS() @property {
  auto ret = vtkd_im.VTK_PLOT_VECTORS_get();
  return ret;
}

int VTK_PLOT_NORMALS() @property {
  auto ret = vtkd_im.VTK_PLOT_NORMALS_get();
  return ret;
}

int VTK_PLOT_TCOORDS() @property {
  auto ret = vtkd_im.VTK_PLOT_TCOORDS_get();
  return ret;
}

int VTK_PLOT_TENSORS() @property {
  auto ret = vtkd_im.VTK_PLOT_TENSORS_get();
  return ret;
}

int VTK_PLOT_FIELD_DATA() @property {
  auto ret = vtkd_im.VTK_PLOT_FIELD_DATA_get();
  return ret;
}

int VTK_DIRECTION_SPECIFIED_VECTOR() @property {
  auto ret = vtkd_im.VTK_DIRECTION_SPECIFIED_VECTOR_get();
  return ret;
}

int VTK_DIRECTION_SPECIFIED_ORIGIN() @property {
  auto ret = vtkd_im.VTK_DIRECTION_SPECIFIED_ORIGIN_get();
  return ret;
}

int VTK_DIRECTION_CAMERA_ORIGIN() @property {
  auto ret = vtkd_im.VTK_DIRECTION_CAMERA_ORIGIN_get();
  return ret;
}

int VTK_DIRECTION_CAMERA_VECTOR() @property {
  auto ret = vtkd_im.VTK_DIRECTION_CAMERA_VECTOR_get();
  return ret;
}

int VTK_INTEGRATE_MAJOR_EIGENVECTOR() @property {
  auto ret = vtkd_im.VTK_INTEGRATE_MAJOR_EIGENVECTOR_get();
  return ret;
}

int VTK_INTEGRATE_MEDIUM_EIGENVECTOR() @property {
  auto ret = vtkd_im.VTK_INTEGRATE_MEDIUM_EIGENVECTOR_get();
  return ret;
}

int VTK_INTEGRATE_MINOR_EIGENVECTOR() @property {
  auto ret = vtkd_im.VTK_INTEGRATE_MINOR_EIGENVECTOR_get();
  return ret;
}

int VTK_ICP_MODE_RMS() @property {
  auto ret = vtkd_im.VTK_ICP_MODE_RMS_get();
  return ret;
}

int VTK_ICP_MODE_AV() @property {
  auto ret = vtkd_im.VTK_ICP_MODE_AV_get();
  return ret;
}

void* VolumeRayCastMapper_CastRays(void* arg) {
  auto ret = cast(void*)vtkd_im.VolumeRayCastMapper_CastRays(cast(void*)arg);
  return ret;
}

int VTK_FLY_OUTER_EDGES() @property {
  auto ret = vtkd_im.VTK_FLY_OUTER_EDGES_get();
  return ret;
}

int VTK_FLY_CLOSEST_TRIAD() @property {
  auto ret = vtkd_im.VTK_FLY_CLOSEST_TRIAD_get();
  return ret;
}

int VTK_FLY_NONE() @property {
  auto ret = vtkd_im.VTK_FLY_NONE_get();
  return ret;
}

int VTK_MAX_LABELS() @property {
  auto ret = vtkd_im.VTK_MAX_LABELS_get();
  return ret;
}

int VTK_MAX_TICKS() @property {
  auto ret = vtkd_im.VTK_MAX_TICKS_get();
  return ret;
}

int VTK_AXIS_TYPE_X() @property {
  auto ret = vtkd_im.VTK_AXIS_TYPE_X_get();
  return ret;
}

int VTK_AXIS_TYPE_Y() @property {
  auto ret = vtkd_im.VTK_AXIS_TYPE_Y_get();
  return ret;
}

int VTK_AXIS_TYPE_Z() @property {
  auto ret = vtkd_im.VTK_AXIS_TYPE_Z_get();
  return ret;
}

int VTK_TICKS_INSIDE() @property {
  auto ret = vtkd_im.VTK_TICKS_INSIDE_get();
  return ret;
}

int VTK_TICKS_OUTSIDE() @property {
  auto ret = vtkd_im.VTK_TICKS_OUTSIDE_get();
  return ret;
}

int VTK_TICKS_BOTH() @property {
  auto ret = vtkd_im.VTK_TICKS_BOTH_get();
  return ret;
}

int VTK_AXIS_POS_MINMIN() @property {
  auto ret = vtkd_im.VTK_AXIS_POS_MINMIN_get();
  return ret;
}

int VTK_AXIS_POS_MINMAX() @property {
  auto ret = vtkd_im.VTK_AXIS_POS_MINMAX_get();
  return ret;
}

int VTK_AXIS_POS_MAXMAX() @property {
  auto ret = vtkd_im.VTK_AXIS_POS_MAXMAX_get();
  return ret;
}

int VTK_AXIS_POS_MAXMIN() @property {
  auto ret = vtkd_im.VTK_AXIS_POS_MAXMIN_get();
  return ret;
}

int VTK_MAX_SUPERQUADRIC_RESOLUTION() @property {
  auto ret = vtkd_im.VTK_MAX_SUPERQUADRIC_RESOLUTION_get();
  return ret;
}

double VTK_MIN_SUPERQUADRIC_ROUNDNESS() @property {
  auto ret = vtkd_im.VTK_MIN_SUPERQUADRIC_ROUNDNESS_get();
  return ret;
}

int VTK_NEAREST_RESLICE() @property {
  auto ret = vtkd_im.VTK_NEAREST_RESLICE_get();
  return ret;
}

int VTK_LINEAR_RESLICE() @property {
  auto ret = vtkd_im.VTK_LINEAR_RESLICE_get();
  return ret;
}

int VTK_CUBIC_RESLICE() @property {
  auto ret = vtkd_im.VTK_CUBIC_RESLICE_get();
  return ret;
}

int VTK_VOXEL_TO_12_TET() @property {
  auto ret = vtkd_im.VTK_VOXEL_TO_12_TET_get();
  return ret;
}

int VTK_VOXEL_TO_5_TET() @property {
  auto ret = vtkd_im.VTK_VOXEL_TO_5_TET_get();
  return ret;
}

int VTK_VOXEL_TO_6_TET() @property {
  auto ret = vtkd_im.VTK_VOXEL_TO_6_TET_get();
  return ret;
}

int VTK_VOXEL_TO_5_AND_12_TET() @property {
  auto ret = vtkd_im.VTK_VOXEL_TO_5_AND_12_TET_get();
  return ret;
}

int VTK_PLANE_OFF() @property {
  auto ret = vtkd_im.VTK_PLANE_OFF_get();
  return ret;
}

int VTK_PLANE_OUTLINE() @property {
  auto ret = vtkd_im.VTK_PLANE_OUTLINE_get();
  return ret;
}

int VTK_PLANE_WIREFRAME() @property {
  auto ret = vtkd_im.VTK_PLANE_WIREFRAME_get();
  return ret;
}

int VTK_PLANE_SURFACE() @property {
  auto ret = vtkd_im.VTK_PLANE_SURFACE_get();
  return ret;
}

int VTK_DATA_OBJECT_FIELD() @property {
  auto ret = vtkd_im.VTK_DATA_OBJECT_FIELD_get();
  return ret;
}

int VTK_POINT_DATA_FIELD() @property {
  auto ret = vtkd_im.VTK_POINT_DATA_FIELD_get();
  return ret;
}

int VTK_CELL_DATA_FIELD() @property {
  auto ret = vtkd_im.VTK_CELL_DATA_FIELD_get();
  return ret;
}

int VTK_CELL_DATA() @property {
  auto ret = vtkd_im.VTK_CELL_DATA_get();
  return ret;
}

int VTK_POINT_DATA() @property {
  auto ret = vtkd_im.VTK_POINT_DATA_get();
  return ret;
}

int VTK_DIRECTION_BACK_TO_FRONT() @property {
  auto ret = vtkd_im.VTK_DIRECTION_BACK_TO_FRONT_get();
  return ret;
}

int VTK_DIRECTION_FRONT_TO_BACK() @property {
  auto ret = vtkd_im.VTK_DIRECTION_FRONT_TO_BACK_get();
  return ret;
}

int VTK_SORT_FIRST_POINT() @property {
  auto ret = vtkd_im.VTK_SORT_FIRST_POINT_get();
  return ret;
}

int VTK_SORT_BOUNDS_CENTER() @property {
  auto ret = vtkd_im.VTK_SORT_BOUNDS_CENTER_get();
  return ret;
}

int VTK_SORT_PARAMETRIC_CENTER() @property {
  auto ret = vtkd_im.VTK_SORT_PARAMETRIC_CENTER_get();
  return ret;
}

int VTK_LITTLE_ENDIAN() @property {
  auto ret = vtkd_im.VTK_LITTLE_ENDIAN_get();
  return ret;
}

int VTK_BIG_ENDIAN() @property {
  auto ret = vtkd_im.VTK_BIG_ENDIAN_get();
  return ret;
}

int VTK_COLOR_MODE_UNIFORM_CELL_COLOR() @property {
  auto ret = vtkd_im.VTK_COLOR_MODE_UNIFORM_CELL_COLOR_get();
  return ret;
}

int VTK_COLOR_MODE_UNIFORM_POINT_COLOR() @property {
  auto ret = vtkd_im.VTK_COLOR_MODE_UNIFORM_POINT_COLOR_get();
  return ret;
}

int VTK_COLOR_MODE_UNIFORM_COLOR() @property {
  auto ret = vtkd_im.VTK_COLOR_MODE_UNIFORM_COLOR_get();
  return ret;
}

int VTK_COLOR_MODE_OFF() @property {
  auto ret = vtkd_im.VTK_COLOR_MODE_OFF_get();
  return ret;
}

int VTK_FLY_FURTHEST_TRIAD() @property {
  auto ret = vtkd_im.VTK_FLY_FURTHEST_TRIAD_get();
  return ret;
}

int VTK_FLY_STATIC_TRIAD() @property {
  auto ret = vtkd_im.VTK_FLY_STATIC_TRIAD_get();
  return ret;
}

int VTK_FLY_STATIC_EDGES() @property {
  auto ret = vtkd_im.VTK_FLY_STATIC_EDGES_get();
  return ret;
}

int VTK_GRID_LINES_ALL() @property {
  auto ret = vtkd_im.VTK_GRID_LINES_ALL_get();
  return ret;
}

int VTK_GRID_LINES_CLOSEST() @property {
  auto ret = vtkd_im.VTK_GRID_LINES_CLOSEST_get();
  return ret;
}

int VTK_GRID_LINES_FURTHEST() @property {
  auto ret = vtkd_im.VTK_GRID_LINES_FURTHEST_get();
  return ret;
}

int NUMBER_OF_ALIGNED_AXIS() @property {
  auto ret = vtkd_im.NUMBER_OF_ALIGNED_AXIS_get();
  return ret;
}

int VTK_VOXEL_MODE() @property {
  auto ret = vtkd_im.VTK_VOXEL_MODE_get();
  return ret;
}

int VTK_CELL_MODE() @property {
  auto ret = vtkd_im.VTK_CELL_MODE_get();
  return ret;
}

int VTK_CURVATURE_GAUSS() @property {
  auto ret = vtkd_im.VTK_CURVATURE_GAUSS_get();
  return ret;
}

int VTK_CURVATURE_MEAN() @property {
  auto ret = vtkd_im.VTK_CURVATURE_MEAN_get();
  return ret;
}

int VTK_CURVATURE_MAXIMUM() @property {
  auto ret = vtkd_im.VTK_CURVATURE_MAXIMUM_get();
  return ret;
}

int VTK_CURVATURE_MINIMUM() @property {
  auto ret = vtkd_im.VTK_CURVATURE_MINIMUM_get();
  return ret;
}

int VTK_MAXIMIZE_SCALAR_VALUE() @property {
  auto ret = vtkd_im.VTK_MAXIMIZE_SCALAR_VALUE_get();
  return ret;
}

int VTK_MAXIMIZE_OPACITY() @property {
  auto ret = vtkd_im.VTK_MAXIMIZE_OPACITY_get();
  return ret;
}

int VTK_NO_GLYPH() @property {
  auto ret = vtkd_im.VTK_NO_GLYPH_get();
  return ret;
}

int VTK_VERTEX_GLYPH() @property {
  auto ret = vtkd_im.VTK_VERTEX_GLYPH_get();
  return ret;
}

int VTK_DASH_GLYPH() @property {
  auto ret = vtkd_im.VTK_DASH_GLYPH_get();
  return ret;
}

int VTK_CROSS_GLYPH() @property {
  auto ret = vtkd_im.VTK_CROSS_GLYPH_get();
  return ret;
}

int VTK_THICKCROSS_GLYPH() @property {
  auto ret = vtkd_im.VTK_THICKCROSS_GLYPH_get();
  return ret;
}

int VTK_TRIANGLE_GLYPH() @property {
  auto ret = vtkd_im.VTK_TRIANGLE_GLYPH_get();
  return ret;
}

int VTK_SQUARE_GLYPH() @property {
  auto ret = vtkd_im.VTK_SQUARE_GLYPH_get();
  return ret;
}

int VTK_CIRCLE_GLYPH() @property {
  auto ret = vtkd_im.VTK_CIRCLE_GLYPH_get();
  return ret;
}

int VTK_DIAMOND_GLYPH() @property {
  auto ret = vtkd_im.VTK_DIAMOND_GLYPH_get();
  return ret;
}

int VTK_ARROW_GLYPH() @property {
  auto ret = vtkd_im.VTK_ARROW_GLYPH_get();
  return ret;
}

int VTK_THICKARROW_GLYPH() @property {
  auto ret = vtkd_im.VTK_THICKARROW_GLYPH_get();
  return ret;
}

int VTK_HOOKEDARROW_GLYPH() @property {
  auto ret = vtkd_im.VTK_HOOKEDARROW_GLYPH_get();
  return ret;
}

int VTK_EDGEARROW_GLYPH() @property {
  auto ret = vtkd_im.VTK_EDGEARROW_GLYPH_get();
  return ret;
}

int VTK_PROJECTED_TEXTURE_USE_PINHOLE() @property {
  auto ret = vtkd_im.VTK_PROJECTED_TEXTURE_USE_PINHOLE_get();
  return ret;
}

int VTK_PROJECTED_TEXTURE_USE_TWO_MIRRORS() @property {
  auto ret = vtkd_im.VTK_PROJECTED_TEXTURE_USE_TWO_MIRRORS_get();
  return ret;
}

int VTK_MAXIMUM_NUMBER_OF_RADIAL_AXES() @property {
  auto ret = vtkd_im.VTK_MAXIMUM_NUMBER_OF_RADIAL_AXES_get();
  return ret;
}

int VTK_DEFAULT_NUMBER_OF_RADIAL_AXES() @property {
  auto ret = vtkd_im.VTK_DEFAULT_NUMBER_OF_RADIAL_AXES_get();
  return ret;
}

int VTK_MAXIMUM_NUMBER_OF_POLAR_AXIS_TICKS() @property {
  auto ret = vtkd_im.VTK_MAXIMUM_NUMBER_OF_POLAR_AXIS_TICKS_get();
  return ret;
}

double VTK_POLAR_ARC_RESOLUTION_PER_DEG() @property {
  auto ret = vtkd_im.VTK_POLAR_ARC_RESOLUTION_PER_DEG_get();
  return ret;
}

int VTK_CULLER_SORT_NONE() @property {
  auto ret = vtkd_im.VTK_CULLER_SORT_NONE_get();
  return ret;
}

int VTK_CULLER_SORT_FRONT_TO_BACK() @property {
  auto ret = vtkd_im.VTK_CULLER_SORT_FRONT_TO_BACK_get();
  return ret;
}

int VTK_CULLER_SORT_BACK_TO_FRONT() @property {
  auto ret = vtkd_im.VTK_CULLER_SORT_BACK_TO_FRONT_get();
  return ret;
}

int VTK_NO_OVERLAP() @property {
  auto ret = vtkd_im.VTK_NO_OVERLAP_get();
  return ret;
}

int VTK_NODE_OVERLAP() @property {
  auto ret = vtkd_im.VTK_NODE_OVERLAP_get();
  return ret;
}

int VTK_EDGE_OVERLAP() @property {
  auto ret = vtkd_im.VTK_EDGE_OVERLAP_get();
  return ret;
}

int VTK_PARTIAL_OVERLAP() @property {
  auto ret = vtkd_im.VTK_PARTIAL_OVERLAP_get();
  return ret;
}

int VTK_ACCUMULATION_MODE_MIN() @property {
  auto ret = vtkd_im.VTK_ACCUMULATION_MODE_MIN_get();
  return ret;
}

int VTK_ACCUMULATION_MODE_MAX() @property {
  auto ret = vtkd_im.VTK_ACCUMULATION_MODE_MAX_get();
  return ret;
}

int VTK_ACCUMULATION_MODE_SUM() @property {
  auto ret = vtkd_im.VTK_ACCUMULATION_MODE_SUM_get();
  return ret;
}
