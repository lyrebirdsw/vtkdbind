/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkBase64Utilities;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkObject;

class vtkBase64Utilities : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkBase64Utilities_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkBase64Utilities obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkBase64Utilities New() {
    void* cPtr = vtkd_im.vtkBase64Utilities_New();
    vtkBase64Utilities ret = (cPtr is null) ? null : new vtkBase64Utilities(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkBase64Utilities_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkBase64Utilities SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkBase64Utilities_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkBase64Utilities ret = (cPtr is null) ? null : new vtkBase64Utilities(cPtr, false);
    return ret;
  }

  public vtkBase64Utilities NewInstance() const {
    void* cPtr = vtkd_im.vtkBase64Utilities_NewInstance(cast(void*)swigCPtr);
    vtkBase64Utilities ret = (cPtr is null) ? null : new vtkBase64Utilities(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public static void EncodeTriplet(ubyte i0, ubyte i1, ubyte i2, ubyte* o0, ubyte* o1, ubyte* o2, ubyte* o3) {
    vtkd_im.vtkBase64Utilities_EncodeTriplet(i0, i1, i2, cast(void*)o0, cast(void*)o1, cast(void*)o2, cast(void*)o3);
  }

  public static void EncodePair(ubyte i0, ubyte i1, ubyte* o0, ubyte* o1, ubyte* o2, ubyte* o3) {
    vtkd_im.vtkBase64Utilities_EncodePair(i0, i1, cast(void*)o0, cast(void*)o1, cast(void*)o2, cast(void*)o3);
  }

  public static void EncodeSingle(ubyte i0, ubyte* o0, ubyte* o1, ubyte* o2, ubyte* o3) {
    vtkd_im.vtkBase64Utilities_EncodeSingle(i0, cast(void*)o0, cast(void*)o1, cast(void*)o2, cast(void*)o3);
  }

  public static core.stdc.config.c_ulong Encode(ubyte* input, core.stdc.config.c_ulong length, ubyte* output, int mark_end) {
    auto ret = vtkd_im.vtkBase64Utilities_Encode__SWIG_0(cast(void*)input, length, cast(void*)output, mark_end);
    return ret;
  }

  public static core.stdc.config.c_ulong Encode(ubyte* input, core.stdc.config.c_ulong length, ubyte* output) {
    auto ret = vtkd_im.vtkBase64Utilities_Encode__SWIG_1(cast(void*)input, length, cast(void*)output);
    return ret;
  }

  public static int DecodeTriplet(ubyte i0, ubyte i1, ubyte i2, ubyte i3, ubyte* o0, ubyte* o1, ubyte* o2) {
    auto ret = vtkd_im.vtkBase64Utilities_DecodeTriplet(i0, i1, i2, i3, cast(void*)o0, cast(void*)o1, cast(void*)o2);
    return ret;
  }

  public static core.stdc.config.c_ulong Decode(ubyte* input, core.stdc.config.c_ulong length, ubyte* output, core.stdc.config.c_ulong max_input_length) {
    auto ret = vtkd_im.vtkBase64Utilities_Decode__SWIG_0(cast(void*)input, length, cast(void*)output, max_input_length);
    return ret;
  }

  public static core.stdc.config.c_ulong Decode(ubyte* input, core.stdc.config.c_ulong length, ubyte* output) {
    auto ret = vtkd_im.vtkBase64Utilities_Decode__SWIG_1(cast(void*)input, length, cast(void*)output);
    return ret;
  }
}
