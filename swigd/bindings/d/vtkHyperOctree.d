/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkHyperOctree;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkInformationIntegerKey;
static import vtkInformationDoubleVectorKey;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkHyperOctreeCursor;
static import vtkCell;
static import vtkGenericCell;
static import vtkIdList;
static import vtkHyperOctreePointsGrabber;
static import SWIGTYPE_p_int;
static import vtkDataSetAttributes;
static import vtkDataSet;

class vtkHyperOctree : vtkDataSet.vtkDataSet {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkHyperOctree_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkHyperOctree obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkInformationIntegerKey.vtkInformationIntegerKey LEVELS() {
    void* cPtr = vtkd_im.vtkHyperOctree_LEVELS();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public static vtkInformationIntegerKey.vtkInformationIntegerKey DIMENSION() {
    void* cPtr = vtkd_im.vtkHyperOctree_DIMENSION();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public static vtkInformationDoubleVectorKey.vtkInformationDoubleVectorKey SIZES() {
    void* cPtr = vtkd_im.vtkHyperOctree_SIZES();
    vtkInformationDoubleVectorKey.vtkInformationDoubleVectorKey ret = (cPtr is null) ? null : new vtkInformationDoubleVectorKey.vtkInformationDoubleVectorKey(cPtr, false);
    return ret;
  }

  public static vtkHyperOctree New() {
    void* cPtr = vtkd_im.vtkHyperOctree_New();
    vtkHyperOctree ret = (cPtr is null) ? null : new vtkHyperOctree(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkHyperOctree_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkHyperOctree SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkHyperOctree_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkHyperOctree ret = (cPtr is null) ? null : new vtkHyperOctree(cPtr, false);
    return ret;
  }

  public vtkHyperOctree NewInstance() const {
    void* cPtr = vtkd_im.vtkHyperOctree_NewInstance(cast(void*)swigCPtr);
    vtkHyperOctree ret = (cPtr is null) ? null : new vtkHyperOctree(cPtr, false);
    return ret;
  }

  alias vtkDataSet.vtkDataSet.NewInstance NewInstance;

  public int GetDimension() {
    auto ret = vtkd_im.vtkHyperOctree_GetDimension(cast(void*)swigCPtr);
    return ret;
  }

  public void SetDimension(int dim) {
    vtkd_im.vtkHyperOctree_SetDimension(cast(void*)swigCPtr, dim);
  }

  public long GetNumberOfLeaves() {
    auto ret = vtkd_im.vtkHyperOctree_GetNumberOfLeaves(cast(void*)swigCPtr);
    return ret;
  }

  public long GetMaxNumberOfPoints(int level) {
    auto ret = vtkd_im.vtkHyperOctree_GetMaxNumberOfPoints(cast(void*)swigCPtr, level);
    return ret;
  }

  public long GetMaxNumberOfPointsOnBoundary(int level) {
    auto ret = vtkd_im.vtkHyperOctree_GetMaxNumberOfPointsOnBoundary(cast(void*)swigCPtr, level);
    return ret;
  }

  public long GetMaxNumberOfCellsOnBoundary(int level) {
    auto ret = vtkd_im.vtkHyperOctree_GetMaxNumberOfCellsOnBoundary(cast(void*)swigCPtr, level);
    return ret;
  }

  public long GetNumberOfLevels() {
    auto ret = vtkd_im.vtkHyperOctree_GetNumberOfLevels(cast(void*)swigCPtr);
    return ret;
  }

  public void SetSize(double _arg1, double _arg2, double _arg3) {
    vtkd_im.vtkHyperOctree_SetSize__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetSize(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkHyperOctree_SetSize__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetSize() {
    auto ret = cast(double*)vtkd_im.vtkHyperOctree_GetSize__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetSize(double* _arg1, double* _arg2, double* _arg3) {
    vtkd_im.vtkHyperOctree_GetSize__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetSize(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkHyperOctree_GetSize__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public void SetOrigin(double _arg1, double _arg2, double _arg3) {
    vtkd_im.vtkHyperOctree_SetOrigin__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetOrigin(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkHyperOctree_SetOrigin__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetOrigin() {
    auto ret = cast(double*)vtkd_im.vtkHyperOctree_GetOrigin__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetOrigin(double* _arg1, double* _arg2, double* _arg3) {
    vtkd_im.vtkHyperOctree_GetOrigin__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetOrigin(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkHyperOctree_GetOrigin__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public vtkHyperOctreeCursor.vtkHyperOctreeCursor NewCellCursor() {
    void* cPtr = vtkd_im.vtkHyperOctree_NewCellCursor(cast(void*)swigCPtr);
    vtkHyperOctreeCursor.vtkHyperOctreeCursor ret = (cPtr is null) ? null : new vtkHyperOctreeCursor.vtkHyperOctreeCursor(cPtr, false);
    return ret;
  }

  public void SubdivideLeaf(vtkHyperOctreeCursor.vtkHyperOctreeCursor leaf) {
    vtkd_im.vtkHyperOctree_SubdivideLeaf(cast(void*)swigCPtr, vtkHyperOctreeCursor.vtkHyperOctreeCursor.swigGetCPtr(leaf));
  }

  public void CollapseTerminalNode(vtkHyperOctreeCursor.vtkHyperOctreeCursor node) {
    vtkd_im.vtkHyperOctree_CollapseTerminalNode(cast(void*)swigCPtr, vtkHyperOctreeCursor.vtkHyperOctreeCursor.swigGetCPtr(node));
  }

  public override double* GetPoint(long ptId) {
    auto ret = cast(double*)vtkd_im.vtkHyperOctree_GetPoint__SWIG_0(cast(void*)swigCPtr, ptId);
    return ret;
  }

  public override void GetPoint(long id, SWIGTYPE_p_double.SWIGTYPE_p_double x) {
    vtkd_im.vtkHyperOctree_GetPoint__SWIG_1(cast(void*)swigCPtr, id, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x));
  }

  public override vtkCell.vtkCell GetCell(long cellId) {
    void* cPtr = vtkd_im.vtkHyperOctree_GetCell__SWIG_0(cast(void*)swigCPtr, cellId);
    vtkCell.vtkCell ret = (cPtr is null) ? null : new vtkCell.vtkCell(cPtr, false);
    return ret;
  }

  public override void GetCell(long cellId, vtkGenericCell.vtkGenericCell cell) {
    vtkd_im.vtkHyperOctree_GetCell__SWIG_1(cast(void*)swigCPtr, cellId, vtkGenericCell.vtkGenericCell.swigGetCPtr(cell));
  }

  public override void GetCellPoints(long cellId, vtkIdList.vtkIdList ptIds) {
    vtkd_im.vtkHyperOctree_GetCellPoints__SWIG_0(cast(void*)swigCPtr, cellId, vtkIdList.vtkIdList.swigGetCPtr(ptIds));
  }

  public void GetCellPoints(long cellId, long* npts, long** pts) {
    vtkd_im.vtkHyperOctree_GetCellPoints__SWIG_1(cast(void*)swigCPtr, cellId, cast(void*)npts, cast(void*)pts);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  alias vtkDataSet.vtkDataSet.GetCellPoints GetCellPoints;

  public override long FindCell(SWIGTYPE_p_double.SWIGTYPE_p_double x, vtkCell.vtkCell cell, long cellId, double tol2, int* subId, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, double* weights) {
    auto ret = vtkd_im.vtkHyperOctree_FindCell__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), vtkCell.vtkCell.swigGetCPtr(cell), cellId, tol2, cast(void*)subId, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), cast(void*)weights);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public override long FindCell(SWIGTYPE_p_double.SWIGTYPE_p_double x, vtkCell.vtkCell cell, vtkGenericCell.vtkGenericCell gencell, long cellId, double tol2, int* subId, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, double* weights) {
    auto ret = vtkd_im.vtkHyperOctree_FindCell__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), vtkCell.vtkCell.swigGetCPtr(cell), vtkGenericCell.vtkGenericCell.swigGetCPtr(gencell), cellId, tol2, cast(void*)subId, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), cast(void*)weights);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void GetPointsOnFace(vtkHyperOctreeCursor.vtkHyperOctreeCursor sibling, int face, int level, vtkHyperOctreePointsGrabber.vtkHyperOctreePointsGrabber grabber) {
    vtkd_im.vtkHyperOctree_GetPointsOnFace(cast(void*)swigCPtr, vtkHyperOctreeCursor.vtkHyperOctreeCursor.swigGetCPtr(sibling), face, level, vtkHyperOctreePointsGrabber.vtkHyperOctreePointsGrabber.swigGetCPtr(grabber));
  }

  public void GetPointsOnParentFaces(SWIGTYPE_p_int.SWIGTYPE_p_int faces, int level, vtkHyperOctreeCursor.vtkHyperOctreeCursor cursor, vtkHyperOctreePointsGrabber.vtkHyperOctreePointsGrabber grabber) {
    vtkd_im.vtkHyperOctree_GetPointsOnParentFaces(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(faces), level, vtkHyperOctreeCursor.vtkHyperOctreeCursor.swigGetCPtr(cursor), vtkHyperOctreePointsGrabber.vtkHyperOctreePointsGrabber.swigGetCPtr(grabber));
  }

  public void GetPointsOnEdge(vtkHyperOctreeCursor.vtkHyperOctreeCursor sibling, int level, int axis, int k, int j, vtkHyperOctreePointsGrabber.vtkHyperOctreePointsGrabber grabber) {
    vtkd_im.vtkHyperOctree_GetPointsOnEdge(cast(void*)swigCPtr, vtkHyperOctreeCursor.vtkHyperOctreeCursor.swigGetCPtr(sibling), level, axis, k, j, vtkHyperOctreePointsGrabber.vtkHyperOctreePointsGrabber.swigGetCPtr(grabber));
  }

  public void GetPointsOnParentEdge(vtkHyperOctreeCursor.vtkHyperOctreeCursor cursor, int level, int axis, int k, int j, vtkHyperOctreePointsGrabber.vtkHyperOctreePointsGrabber grabber) {
    vtkd_im.vtkHyperOctree_GetPointsOnParentEdge(cast(void*)swigCPtr, vtkHyperOctreeCursor.vtkHyperOctreeCursor.swigGetCPtr(cursor), level, axis, k, j, vtkHyperOctreePointsGrabber.vtkHyperOctreePointsGrabber.swigGetCPtr(grabber));
  }

  public void GetPointsOnEdge2D(vtkHyperOctreeCursor.vtkHyperOctreeCursor sibling, int edge, int level, vtkHyperOctreePointsGrabber.vtkHyperOctreePointsGrabber grabber) {
    vtkd_im.vtkHyperOctree_GetPointsOnEdge2D(cast(void*)swigCPtr, vtkHyperOctreeCursor.vtkHyperOctreeCursor.swigGetCPtr(sibling), edge, level, vtkHyperOctreePointsGrabber.vtkHyperOctreePointsGrabber.swigGetCPtr(grabber));
  }

  public void GetPointsOnParentEdge2D(vtkHyperOctreeCursor.vtkHyperOctreeCursor cursor, int edge, int level, vtkHyperOctreePointsGrabber.vtkHyperOctreePointsGrabber grabber) {
    vtkd_im.vtkHyperOctree_GetPointsOnParentEdge2D(cast(void*)swigCPtr, vtkHyperOctreeCursor.vtkHyperOctreeCursor.swigGetCPtr(cursor), edge, level, vtkHyperOctreePointsGrabber.vtkHyperOctreePointsGrabber.swigGetCPtr(grabber));
  }

  public vtkDataSetAttributes.vtkDataSetAttributes GetLeafData() {
    void* cPtr = vtkd_im.vtkHyperOctree_GetLeafData(cast(void*)swigCPtr);
    vtkDataSetAttributes.vtkDataSetAttributes ret = (cPtr is null) ? null : new vtkDataSetAttributes.vtkDataSetAttributes(cPtr, false);
    return ret;
  }

  public void SetDualGridFlag(int flag) {
    vtkd_im.vtkHyperOctree_SetDualGridFlag(cast(void*)swigCPtr, flag);
  }

  public int GetDualGridFlag() {
    auto ret = vtkd_im.vtkHyperOctree_GetDualGridFlag(cast(void*)swigCPtr);
    return ret;
  }
}
