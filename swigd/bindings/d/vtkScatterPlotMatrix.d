/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkScatterPlotMatrix;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkVector2i;
static import vtkAnnotationLink;
static import vtkTable;
static import vtkStdString;
static import vtkStringArray;
static import vtkColor4ub;
static import vtkContextMouseEvent;
static import vtkTextProperty;
static import vtkTooltipItem;
static import vtkRenderWindowInteractor;
static import vtkChart;
static import vtkChartMatrix;

class vtkScatterPlotMatrix : vtkChartMatrix.vtkChartMatrix {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkScatterPlotMatrix_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkScatterPlotMatrix obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  enum {
    SCATTERPLOT,
    HISTOGRAM,
    ACTIVEPLOT,
    NOPLOT
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkScatterPlotMatrix_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkScatterPlotMatrix SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkScatterPlotMatrix_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkScatterPlotMatrix ret = (cPtr is null) ? null : new vtkScatterPlotMatrix(cPtr, false);
    return ret;
  }

  public vtkScatterPlotMatrix NewInstance() const {
    void* cPtr = vtkd_im.vtkScatterPlotMatrix_NewInstance(cast(void*)swigCPtr);
    vtkScatterPlotMatrix ret = (cPtr is null) ? null : new vtkScatterPlotMatrix(cPtr, false);
    return ret;
  }

  alias vtkChartMatrix.vtkChartMatrix.NewInstance NewInstance;

  public static vtkScatterPlotMatrix New() {
    void* cPtr = vtkd_im.vtkScatterPlotMatrix_New();
    vtkScatterPlotMatrix ret = (cPtr is null) ? null : new vtkScatterPlotMatrix(cPtr, false);
    return ret;
  }

  public bool SetActivePlot(vtkVector2i.vtkVector2i position) {
    bool ret = vtkd_im.vtkScatterPlotMatrix_SetActivePlot(cast(void*)swigCPtr, vtkVector2i.vtkVector2i.swigGetCPtr(position)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public vtkVector2i.vtkVector2i GetActivePlot() {
    vtkVector2i.vtkVector2i ret = new vtkVector2i.vtkVector2i(vtkd_im.vtkScatterPlotMatrix_GetActivePlot(cast(void*)swigCPtr), true);
    return ret;
  }

  public vtkAnnotationLink.vtkAnnotationLink GetActiveAnnotationLink() {
    void* cPtr = vtkd_im.vtkScatterPlotMatrix_GetActiveAnnotationLink(cast(void*)swigCPtr);
    vtkAnnotationLink.vtkAnnotationLink ret = (cPtr is null) ? null : new vtkAnnotationLink.vtkAnnotationLink(cPtr, false);
    return ret;
  }

  public vtkAnnotationLink.vtkAnnotationLink GetAnnotationLink() {
    void* cPtr = vtkd_im.vtkScatterPlotMatrix_GetAnnotationLink(cast(void*)swigCPtr);
    vtkAnnotationLink.vtkAnnotationLink ret = (cPtr is null) ? null : new vtkAnnotationLink.vtkAnnotationLink(cPtr, false);
    return ret;
  }

  public void SetInput(vtkTable.vtkTable table) {
    vtkd_im.vtkScatterPlotMatrix_SetInput(cast(void*)swigCPtr, vtkTable.vtkTable.swigGetCPtr(table));
  }

  public void SetColumnVisibility(vtkStdString.vtkStdString name, bool visible) {
    vtkd_im.vtkScatterPlotMatrix_SetColumnVisibility(cast(void*)swigCPtr, vtkStdString.vtkStdString.swigGetCPtr(name), visible);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void InsertVisibleColumn(vtkStdString.vtkStdString name, int index) {
    vtkd_im.vtkScatterPlotMatrix_InsertVisibleColumn(cast(void*)swigCPtr, vtkStdString.vtkStdString.swigGetCPtr(name), index);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public bool GetColumnVisibility(vtkStdString.vtkStdString name) {
    bool ret = vtkd_im.vtkScatterPlotMatrix_GetColumnVisibility(cast(void*)swigCPtr, vtkStdString.vtkStdString.swigGetCPtr(name)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void SetColumnVisibilityAll(bool visible) {
    vtkd_im.vtkScatterPlotMatrix_SetColumnVisibilityAll(cast(void*)swigCPtr, visible);
  }

  public vtkStringArray.vtkStringArray GetVisibleColumns() {
    void* cPtr = vtkd_im.vtkScatterPlotMatrix_GetVisibleColumns(cast(void*)swigCPtr);
    vtkStringArray.vtkStringArray ret = (cPtr is null) ? null : new vtkStringArray.vtkStringArray(cPtr, false);
    return ret;
  }

  public void SetVisibleColumns(vtkStringArray.vtkStringArray visColumns) {
    vtkd_im.vtkScatterPlotMatrix_SetVisibleColumns(cast(void*)swigCPtr, vtkStringArray.vtkStringArray.swigGetCPtr(visColumns));
  }

  public void SetNumberOfBins(int numberOfBins) {
    vtkd_im.vtkScatterPlotMatrix_SetNumberOfBins(cast(void*)swigCPtr, numberOfBins);
  }

  public int GetNumberOfBins() const {
    auto ret = vtkd_im.vtkScatterPlotMatrix_GetNumberOfBins(cast(void*)swigCPtr);
    return ret;
  }

  public void SetPlotColor(int plotType, vtkColor4ub.vtkColor4ub color) {
    vtkd_im.vtkScatterPlotMatrix_SetPlotColor(cast(void*)swigCPtr, plotType, vtkColor4ub.vtkColor4ub.swigGetCPtr(color));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void SetPlotMarkerStyle(int plotType, int style) {
    vtkd_im.vtkScatterPlotMatrix_SetPlotMarkerStyle(cast(void*)swigCPtr, plotType, style);
  }

  public void SetPlotMarkerSize(int plotType, float size) {
    vtkd_im.vtkScatterPlotMatrix_SetPlotMarkerSize(cast(void*)swigCPtr, plotType, size);
  }

  public bool Hit(vtkContextMouseEvent.vtkContextMouseEvent mouse) {
    bool ret = vtkd_im.vtkScatterPlotMatrix_Hit(cast(void*)swigCPtr, vtkContextMouseEvent.vtkContextMouseEvent.swigGetCPtr(mouse)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool MouseMoveEvent(vtkContextMouseEvent.vtkContextMouseEvent mouse) {
    bool ret = vtkd_im.vtkScatterPlotMatrix_MouseMoveEvent(cast(void*)swigCPtr, vtkContextMouseEvent.vtkContextMouseEvent.swigGetCPtr(mouse)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool MouseButtonPressEvent(vtkContextMouseEvent.vtkContextMouseEvent mouse) {
    bool ret = vtkd_im.vtkScatterPlotMatrix_MouseButtonPressEvent(cast(void*)swigCPtr, vtkContextMouseEvent.vtkContextMouseEvent.swigGetCPtr(mouse)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool MouseButtonReleaseEvent(vtkContextMouseEvent.vtkContextMouseEvent mouse) {
    bool ret = vtkd_im.vtkScatterPlotMatrix_MouseButtonReleaseEvent(cast(void*)swigCPtr, vtkContextMouseEvent.vtkContextMouseEvent.swigGetCPtr(mouse)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public int GetPlotType(vtkVector2i.vtkVector2i pos) {
    auto ret = vtkd_im.vtkScatterPlotMatrix_GetPlotType__SWIG_0(cast(void*)swigCPtr, vtkVector2i.vtkVector2i.swigGetCPtr(pos));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public int GetPlotType(int row, int column) {
    auto ret = vtkd_im.vtkScatterPlotMatrix_GetPlotType__SWIG_1(cast(void*)swigCPtr, row, column);
    return ret;
  }

  public void SetTitle(vtkStdString.vtkStdString title) {
    vtkd_im.vtkScatterPlotMatrix_SetTitle(cast(void*)swigCPtr, vtkStdString.vtkStdString.swigGetCPtr(title));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public vtkStdString.vtkStdString GetTitle() {
    vtkStdString.vtkStdString ret = new vtkStdString.vtkStdString(vtkd_im.vtkScatterPlotMatrix_GetTitle(cast(void*)swigCPtr), true);
    return ret;
  }

  public void SetTitleProperties(vtkTextProperty.vtkTextProperty prop) {
    vtkd_im.vtkScatterPlotMatrix_SetTitleProperties(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(prop));
  }

  public vtkTextProperty.vtkTextProperty GetTitleProperties() {
    void* cPtr = vtkd_im.vtkScatterPlotMatrix_GetTitleProperties(cast(void*)swigCPtr);
    vtkTextProperty.vtkTextProperty ret = (cPtr is null) ? null : new vtkTextProperty.vtkTextProperty(cPtr, false);
    return ret;
  }

  public void SetGridVisibility(int plotType, bool visible) {
    vtkd_im.vtkScatterPlotMatrix_SetGridVisibility(cast(void*)swigCPtr, plotType, visible);
  }

  public bool GetGridVisibility(int plotType) {
    bool ret = vtkd_im.vtkScatterPlotMatrix_GetGridVisibility(cast(void*)swigCPtr, plotType) ? true : false;
    return ret;
  }

  public void SetBackgroundColor(int plotType, vtkColor4ub.vtkColor4ub color) {
    vtkd_im.vtkScatterPlotMatrix_SetBackgroundColor(cast(void*)swigCPtr, plotType, vtkColor4ub.vtkColor4ub.swigGetCPtr(color));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public vtkColor4ub.vtkColor4ub GetBackgroundColor(int plotType) {
    vtkColor4ub.vtkColor4ub ret = new vtkColor4ub.vtkColor4ub(vtkd_im.vtkScatterPlotMatrix_GetBackgroundColor(cast(void*)swigCPtr, plotType), true);
    return ret;
  }

  public void SetAxisColor(int plotType, vtkColor4ub.vtkColor4ub color) {
    vtkd_im.vtkScatterPlotMatrix_SetAxisColor(cast(void*)swigCPtr, plotType, vtkColor4ub.vtkColor4ub.swigGetCPtr(color));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public vtkColor4ub.vtkColor4ub GetAxisColor(int plotType) {
    vtkColor4ub.vtkColor4ub ret = new vtkColor4ub.vtkColor4ub(vtkd_im.vtkScatterPlotMatrix_GetAxisColor(cast(void*)swigCPtr, plotType), true);
    return ret;
  }

  public void SetGridColor(int plotType, vtkColor4ub.vtkColor4ub color) {
    vtkd_im.vtkScatterPlotMatrix_SetGridColor(cast(void*)swigCPtr, plotType, vtkColor4ub.vtkColor4ub.swigGetCPtr(color));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public vtkColor4ub.vtkColor4ub GetGridColor(int plotType) {
    vtkColor4ub.vtkColor4ub ret = new vtkColor4ub.vtkColor4ub(vtkd_im.vtkScatterPlotMatrix_GetGridColor(cast(void*)swigCPtr, plotType), true);
    return ret;
  }

  public void SetAxisLabelVisibility(int plotType, bool visible) {
    vtkd_im.vtkScatterPlotMatrix_SetAxisLabelVisibility(cast(void*)swigCPtr, plotType, visible);
  }

  public bool GetAxisLabelVisibility(int plotType) {
    bool ret = vtkd_im.vtkScatterPlotMatrix_GetAxisLabelVisibility(cast(void*)swigCPtr, plotType) ? true : false;
    return ret;
  }

  public void SetAxisLabelProperties(int plotType, vtkTextProperty.vtkTextProperty prop) {
    vtkd_im.vtkScatterPlotMatrix_SetAxisLabelProperties(cast(void*)swigCPtr, plotType, vtkTextProperty.vtkTextProperty.swigGetCPtr(prop));
  }

  public vtkTextProperty.vtkTextProperty GetAxisLabelProperties(int plotType) {
    void* cPtr = vtkd_im.vtkScatterPlotMatrix_GetAxisLabelProperties(cast(void*)swigCPtr, plotType);
    vtkTextProperty.vtkTextProperty ret = (cPtr is null) ? null : new vtkTextProperty.vtkTextProperty(cPtr, false);
    return ret;
  }

  public void SetAxisLabelNotation(int plotType, int notation) {
    vtkd_im.vtkScatterPlotMatrix_SetAxisLabelNotation(cast(void*)swigCPtr, plotType, notation);
  }

  public int GetAxisLabelNotation(int plotType) {
    auto ret = vtkd_im.vtkScatterPlotMatrix_GetAxisLabelNotation(cast(void*)swigCPtr, plotType);
    return ret;
  }

  public void SetAxisLabelPrecision(int plotType, int precision) {
    vtkd_im.vtkScatterPlotMatrix_SetAxisLabelPrecision(cast(void*)swigCPtr, plotType, precision);
  }

  public int GetAxisLabelPrecision(int plotType) {
    auto ret = vtkd_im.vtkScatterPlotMatrix_GetAxisLabelPrecision(cast(void*)swigCPtr, plotType);
    return ret;
  }

  public void SetTooltipNotation(int plotType, int notation) {
    vtkd_im.vtkScatterPlotMatrix_SetTooltipNotation(cast(void*)swigCPtr, plotType, notation);
  }

  public void SetTooltipPrecision(int plotType, int precision) {
    vtkd_im.vtkScatterPlotMatrix_SetTooltipPrecision(cast(void*)swigCPtr, plotType, precision);
  }

  public int GetTooltipNotation(int plotType) {
    auto ret = vtkd_im.vtkScatterPlotMatrix_GetTooltipNotation(cast(void*)swigCPtr, plotType);
    return ret;
  }

  public int GetTooltipPrecision(int plotType) {
    auto ret = vtkd_im.vtkScatterPlotMatrix_GetTooltipPrecision(cast(void*)swigCPtr, plotType);
    return ret;
  }

  public void SetTooltip(vtkTooltipItem.vtkTooltipItem tooltip) {
    vtkd_im.vtkScatterPlotMatrix_SetTooltip(cast(void*)swigCPtr, vtkTooltipItem.vtkTooltipItem.swigGetCPtr(tooltip));
  }

  public vtkTooltipItem.vtkTooltipItem GetTooltip() const {
    void* cPtr = vtkd_im.vtkScatterPlotMatrix_GetTooltip(cast(void*)swigCPtr);
    vtkTooltipItem.vtkTooltipItem ret = (cPtr is null) ? null : new vtkTooltipItem.vtkTooltipItem(cPtr, false);
    return ret;
  }

  public void SetIndexedLabels(vtkStringArray.vtkStringArray labels) {
    vtkd_im.vtkScatterPlotMatrix_SetIndexedLabels(cast(void*)swigCPtr, vtkStringArray.vtkStringArray.swigGetCPtr(labels));
  }

  public vtkStringArray.vtkStringArray GetIndexedLabels() const {
    void* cPtr = vtkd_im.vtkScatterPlotMatrix_GetIndexedLabels(cast(void*)swigCPtr);
    vtkStringArray.vtkStringArray ret = (cPtr is null) ? null : new vtkStringArray.vtkStringArray(cPtr, false);
    return ret;
  }

  public void SetScatterPlotSelectedRowColumnColor(vtkColor4ub.vtkColor4ub color) {
    vtkd_im.vtkScatterPlotMatrix_SetScatterPlotSelectedRowColumnColor(cast(void*)swigCPtr, vtkColor4ub.vtkColor4ub.swigGetCPtr(color));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public vtkColor4ub.vtkColor4ub GetScatterPlotSelectedRowColumnColor() {
    vtkColor4ub.vtkColor4ub ret = new vtkColor4ub.vtkColor4ub(vtkd_im.vtkScatterPlotMatrix_GetScatterPlotSelectedRowColumnColor(cast(void*)swigCPtr), true);
    return ret;
  }

  public void SetScatterPlotSelectedActiveColor(vtkColor4ub.vtkColor4ub color) {
    vtkd_im.vtkScatterPlotMatrix_SetScatterPlotSelectedActiveColor(cast(void*)swigCPtr, vtkColor4ub.vtkColor4ub.swigGetCPtr(color));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public vtkColor4ub.vtkColor4ub GetScatterPlotSelectedActiveColor() {
    vtkColor4ub.vtkColor4ub ret = new vtkColor4ub.vtkColor4ub(vtkd_im.vtkScatterPlotMatrix_GetScatterPlotSelectedActiveColor(cast(void*)swigCPtr), true);
    return ret;
  }

  public void UpdateSettings() {
    vtkd_im.vtkScatterPlotMatrix_UpdateSettings(cast(void*)swigCPtr);
  }

  public void UpdateChartSettings(int plotType) {
    vtkd_im.vtkScatterPlotMatrix_UpdateChartSettings(cast(void*)swigCPtr, plotType);
  }

  public void SetSelectionMode(int arg0) {
    vtkd_im.vtkScatterPlotMatrix_SetSelectionMode(cast(void*)swigCPtr, arg0);
  }

  public int GetSelectionMode() {
    auto ret = vtkd_im.vtkScatterPlotMatrix_GetSelectionMode(cast(void*)swigCPtr);
    return ret;
  }

  public vtkStdString.vtkStdString GetColumnName(int column) {
    vtkStdString.vtkStdString ret = new vtkStdString.vtkStdString(vtkd_im.vtkScatterPlotMatrix_GetColumnName(cast(void*)swigCPtr, column), true);
    return ret;
  }

  public vtkStdString.vtkStdString GetRowName(int row) {
    vtkStdString.vtkStdString ret = new vtkStdString.vtkStdString(vtkd_im.vtkScatterPlotMatrix_GetRowName(cast(void*)swigCPtr, row), true);
    return ret;
  }

  public void SetNumberOfFrames(int frames) {
    vtkd_im.vtkScatterPlotMatrix_SetNumberOfFrames(cast(void*)swigCPtr, frames);
  }

  public int GetNumberOfFrames() {
    auto ret = vtkd_im.vtkScatterPlotMatrix_GetNumberOfFrames(cast(void*)swigCPtr);
    return ret;
  }

  public void ClearAnimationPath() {
    vtkd_im.vtkScatterPlotMatrix_ClearAnimationPath(cast(void*)swigCPtr);
  }

  public bool AddAnimationPath(vtkVector2i.vtkVector2i move) {
    bool ret = vtkd_im.vtkScatterPlotMatrix_AddAnimationPath(cast(void*)swigCPtr, vtkVector2i.vtkVector2i.swigGetCPtr(move)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public long GetNumberOfAnimationPathElements() {
    auto ret = vtkd_im.vtkScatterPlotMatrix_GetNumberOfAnimationPathElements(cast(void*)swigCPtr);
    return ret;
  }

  public vtkVector2i.vtkVector2i GetAnimationPathElement(long i) {
    vtkVector2i.vtkVector2i ret = new vtkVector2i.vtkVector2i(vtkd_im.vtkScatterPlotMatrix_GetAnimationPathElement(cast(void*)swigCPtr, i), true);
    return ret;
  }

  public bool BeginAnimationPath(vtkRenderWindowInteractor.vtkRenderWindowInteractor interactor) {
    bool ret = vtkd_im.vtkScatterPlotMatrix_BeginAnimationPath(cast(void*)swigCPtr, vtkRenderWindowInteractor.vtkRenderWindowInteractor.swigGetCPtr(interactor)) ? true : false;
    return ret;
  }

  public void AdvanceAnimation() {
    vtkd_im.vtkScatterPlotMatrix_AdvanceAnimation(cast(void*)swigCPtr);
  }

  public vtkChart.vtkChart GetMainChart() {
    void* cPtr = vtkd_im.vtkScatterPlotMatrix_GetMainChart(cast(void*)swigCPtr);
    vtkChart.vtkChart ret = (cPtr is null) ? null : new vtkChart.vtkChart(cPtr, false);
    return ret;
  }
}
