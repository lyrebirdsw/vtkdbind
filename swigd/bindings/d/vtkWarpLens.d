/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkWarpLens;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkInformation;
static import vtkPointSetAlgorithm;

class vtkWarpLens : vtkPointSetAlgorithm.vtkPointSetAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkWarpLens_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkWarpLens obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkWarpLens New() {
    void* cPtr = vtkd_im.vtkWarpLens_New();
    vtkWarpLens ret = (cPtr is null) ? null : new vtkWarpLens(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkWarpLens_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkWarpLens SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkWarpLens_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkWarpLens ret = (cPtr is null) ? null : new vtkWarpLens(cPtr, false);
    return ret;
  }

  public vtkWarpLens NewInstance() const {
    void* cPtr = vtkd_im.vtkWarpLens_NewInstance(cast(void*)swigCPtr);
    vtkWarpLens ret = (cPtr is null) ? null : new vtkWarpLens(cPtr, false);
    return ret;
  }

  alias vtkPointSetAlgorithm.vtkPointSetAlgorithm.NewInstance NewInstance;

  public void SetKappa(double kappa) {
    vtkd_im.vtkWarpLens_SetKappa(cast(void*)swigCPtr, kappa);
  }

  public double GetKappa() {
    auto ret = vtkd_im.vtkWarpLens_GetKappa(cast(void*)swigCPtr);
    return ret;
  }

  public void SetCenter(double centerX, double centerY) {
    vtkd_im.vtkWarpLens_SetCenter(cast(void*)swigCPtr, centerX, centerY);
  }

  public double* GetCenter() {
    auto ret = cast(double*)vtkd_im.vtkWarpLens_GetCenter(cast(void*)swigCPtr);
    return ret;
  }

  public void SetPrincipalPoint(double _arg1, double _arg2) {
    vtkd_im.vtkWarpLens_SetPrincipalPoint__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2);
  }

  public void SetPrincipalPoint(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkWarpLens_SetPrincipalPoint__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetPrincipalPoint() {
    auto ret = cast(double*)vtkd_im.vtkWarpLens_GetPrincipalPoint__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetPrincipalPoint(SWIGTYPE_p_double.SWIGTYPE_p_double data) {
    vtkd_im.vtkWarpLens_GetPrincipalPoint__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(data));
  }

  public void SetK1(double _arg) {
    vtkd_im.vtkWarpLens_SetK1(cast(void*)swigCPtr, _arg);
  }

  public double GetK1() {
    auto ret = vtkd_im.vtkWarpLens_GetK1(cast(void*)swigCPtr);
    return ret;
  }

  public void SetK2(double _arg) {
    vtkd_im.vtkWarpLens_SetK2(cast(void*)swigCPtr, _arg);
  }

  public double GetK2() {
    auto ret = vtkd_im.vtkWarpLens_GetK2(cast(void*)swigCPtr);
    return ret;
  }

  public void SetP1(double _arg) {
    vtkd_im.vtkWarpLens_SetP1(cast(void*)swigCPtr, _arg);
  }

  public double GetP1() {
    auto ret = vtkd_im.vtkWarpLens_GetP1(cast(void*)swigCPtr);
    return ret;
  }

  public void SetP2(double _arg) {
    vtkd_im.vtkWarpLens_SetP2(cast(void*)swigCPtr, _arg);
  }

  public double GetP2() {
    auto ret = vtkd_im.vtkWarpLens_GetP2(cast(void*)swigCPtr);
    return ret;
  }

  public void SetFormatWidth(double _arg) {
    vtkd_im.vtkWarpLens_SetFormatWidth(cast(void*)swigCPtr, _arg);
  }

  public double GetFormatWidth() {
    auto ret = vtkd_im.vtkWarpLens_GetFormatWidth(cast(void*)swigCPtr);
    return ret;
  }

  public void SetFormatHeight(double _arg) {
    vtkd_im.vtkWarpLens_SetFormatHeight(cast(void*)swigCPtr, _arg);
  }

  public double GetFormatHeight() {
    auto ret = vtkd_im.vtkWarpLens_GetFormatHeight(cast(void*)swigCPtr);
    return ret;
  }

  public void SetImageWidth(int _arg) {
    vtkd_im.vtkWarpLens_SetImageWidth(cast(void*)swigCPtr, _arg);
  }

  public int GetImageWidth() {
    auto ret = vtkd_im.vtkWarpLens_GetImageWidth(cast(void*)swigCPtr);
    return ret;
  }

  public void SetImageHeight(int _arg) {
    vtkd_im.vtkWarpLens_SetImageHeight(cast(void*)swigCPtr, _arg);
  }

  public int GetImageHeight() {
    auto ret = vtkd_im.vtkWarpLens_GetImageHeight(cast(void*)swigCPtr);
    return ret;
  }

  public int FillInputPortInformation(int port, vtkInformation.vtkInformation info) {
    auto ret = vtkd_im.vtkWarpLens_FillInputPortInformation(cast(void*)swigCPtr, port, vtkInformation.vtkInformation.swigGetCPtr(info));
    return ret;
  }
}
