/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkIdFilter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkDataSetAlgorithm;

class vtkIdFilter : vtkDataSetAlgorithm.vtkDataSetAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkIdFilter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkIdFilter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkIdFilter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkIdFilter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkIdFilter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkIdFilter ret = (cPtr is null) ? null : new vtkIdFilter(cPtr, false);
    return ret;
  }

  public vtkIdFilter NewInstance() const {
    void* cPtr = vtkd_im.vtkIdFilter_NewInstance(cast(void*)swigCPtr);
    vtkIdFilter ret = (cPtr is null) ? null : new vtkIdFilter(cPtr, false);
    return ret;
  }

  alias vtkDataSetAlgorithm.vtkDataSetAlgorithm.NewInstance NewInstance;

  public static vtkIdFilter New() {
    void* cPtr = vtkd_im.vtkIdFilter_New();
    vtkIdFilter ret = (cPtr is null) ? null : new vtkIdFilter(cPtr, false);
    return ret;
  }

  public void SetPointIds(int _arg) {
    vtkd_im.vtkIdFilter_SetPointIds(cast(void*)swigCPtr, _arg);
  }

  public int GetPointIds() {
    auto ret = vtkd_im.vtkIdFilter_GetPointIds(cast(void*)swigCPtr);
    return ret;
  }

  public void PointIdsOn() {
    vtkd_im.vtkIdFilter_PointIdsOn(cast(void*)swigCPtr);
  }

  public void PointIdsOff() {
    vtkd_im.vtkIdFilter_PointIdsOff(cast(void*)swigCPtr);
  }

  public void SetCellIds(int _arg) {
    vtkd_im.vtkIdFilter_SetCellIds(cast(void*)swigCPtr, _arg);
  }

  public int GetCellIds() {
    auto ret = vtkd_im.vtkIdFilter_GetCellIds(cast(void*)swigCPtr);
    return ret;
  }

  public void CellIdsOn() {
    vtkd_im.vtkIdFilter_CellIdsOn(cast(void*)swigCPtr);
  }

  public void CellIdsOff() {
    vtkd_im.vtkIdFilter_CellIdsOff(cast(void*)swigCPtr);
  }

  public void SetFieldData(int _arg) {
    vtkd_im.vtkIdFilter_SetFieldData(cast(void*)swigCPtr, _arg);
  }

  public int GetFieldData() {
    auto ret = vtkd_im.vtkIdFilter_GetFieldData(cast(void*)swigCPtr);
    return ret;
  }

  public void FieldDataOn() {
    vtkd_im.vtkIdFilter_FieldDataOn(cast(void*)swigCPtr);
  }

  public void FieldDataOff() {
    vtkd_im.vtkIdFilter_FieldDataOff(cast(void*)swigCPtr);
  }

  public void SetIdsArrayName(string _arg) {
    vtkd_im.vtkIdFilter_SetIdsArrayName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetIdsArrayName() {
    string ret = std.conv.to!string(vtkd_im.vtkIdFilter_GetIdsArrayName(cast(void*)swigCPtr));
    return ret;
  }
}
