/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkOpenGLState;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkOpenGLRenderWindow;
static import SWIGTYPE_p_ostream;
static import vtkIndent;
static import vtkOpenGLFixePipelineState;
static import SWIGTYPE_p_GLfloat;
static import SWIGTYPE_p_GLboolean;
static import SWIGTYPE_p_GLint;
static import SWIGTYPE_p_GLvoid;
static import SWIGTYPE_p_GLenum;
static import SWIGTYPE_p_std__vectorT_vtkOpenGLTextureCoordinateProcessingUnit_t;
static import SWIGTYPE_p_std__vectorT_vtkOpenGLTextureImageUnit_t;
static import SWIGTYPE_p_std__vectorT_vtkOpenGLClipPlaneState_t;
static import vtkOpenGLMaterialState;
static import SWIGTYPE_p_std__vectorT_vtkOpenGLLightState_t;
static import SWIGTYPE_p_std__vectorT_GLint_t;
static import SWIGTYPE_p_GLuint;
static import vtkOpenGLPixelControl;
static import vtkOpenGLComponentTransform;
static import vtkOpenGLIndexPixelMapState;
static import vtkOpenGLRGBAPixelMapState;
static import vtkOpenGLBufferObjectState;
static import vtkOpenGLProgramState;
static import SWIGTYPE_p_a_4__GLfloat;
static import SWIGTYPE_p_GLubyte;

class vtkOpenGLState {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(vtkOpenGLState obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkOpenGLState(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(vtkOpenGLRenderWindow.vtkOpenGLRenderWindow context) {
    this(vtkd_im.new_vtkOpenGLState(vtkOpenGLRenderWindow.vtkOpenGLRenderWindow.swigGetCPtr(context)), true);
  }

  public void Update() {
    vtkd_im.vtkOpenGLState_Update(cast(void*)swigCPtr);
  }

  public void PrintSelf(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream os, vtkIndent.vtkIndent indent) {
    vtkd_im.vtkOpenGLState_PrintSelf(cast(void*)swigCPtr, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(os), vtkIndent.vtkIndent.swigGetCPtr(indent));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void FixedPipeline(vtkOpenGLFixePipelineState.vtkOpenGLFixePipelineState value) @property {
    vtkd_im.vtkOpenGLState_FixedPipeline_set(cast(void*)swigCPtr, vtkOpenGLFixePipelineState.vtkOpenGLFixePipelineState.swigGetCPtr(value));
  }

  public vtkOpenGLFixePipelineState.vtkOpenGLFixePipelineState FixedPipeline() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_FixedPipeline_get(cast(void*)swigCPtr);
    vtkOpenGLFixePipelineState.vtkOpenGLFixePipelineState ret = (cPtr is null) ? null : new vtkOpenGLFixePipelineState.vtkOpenGLFixePipelineState(cPtr, false);
    return ret;
  }

  public void CurrentColor(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_CurrentColor_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat CurrentColor() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_CurrentColor_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void CurrentIndex(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_CurrentIndex_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat CurrentIndex() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_CurrentIndex_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void CurrentNormal(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_CurrentNormal_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat CurrentNormal() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_CurrentNormal_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void CurrentRasterPosition(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_CurrentRasterPosition_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat CurrentRasterPosition() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_CurrentRasterPosition_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void CurrentRasterDistance(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_CurrentRasterDistance_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat CurrentRasterDistance() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_CurrentRasterDistance_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void CurrentRasterColor(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_CurrentRasterColor_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat CurrentRasterColor() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_CurrentRasterColor_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void CurrentRasterIndex(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_CurrentRasterIndex_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat CurrentRasterIndex() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_CurrentRasterIndex_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void CurrentRasterPositionValid(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_CurrentRasterPositionValid_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean CurrentRasterPositionValid() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_CurrentRasterPositionValid_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void EdgeFlag(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_EdgeFlag_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean EdgeFlag() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_EdgeFlag_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void CurrentSecondaryColor(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_CurrentSecondaryColor_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat CurrentSecondaryColor() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_CurrentSecondaryColor_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void CurrentFogCoordinate(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_CurrentFogCoordinate_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat CurrentFogCoordinate() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_CurrentFogCoordinate_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void CurrentRasterSecondaryColor(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_CurrentRasterSecondaryColor_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat CurrentRasterSecondaryColor() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_CurrentRasterSecondaryColor_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void VertexArrayEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_VertexArrayEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean VertexArrayEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_VertexArrayEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void VertexArraySize(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_VertexArraySize_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint VertexArraySize() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_VertexArraySize_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void VertexArrayType(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_VertexArrayType_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint VertexArrayType() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_VertexArrayType_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void VertexArrayStride(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_VertexArrayStride_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint VertexArrayStride() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_VertexArrayStride_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void VertexArrayPointer(SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid value) @property {
    vtkd_im.vtkOpenGLState_VertexArrayPointer_set(cast(void*)swigCPtr, SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid VertexArrayPointer() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_VertexArrayPointer_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid ret = (cPtr is null) ? null : new SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid(cPtr, false);
    return ret;
  }

  public void NormalArrayEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_NormalArrayEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean NormalArrayEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_NormalArrayEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void NormalArrayType(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_NormalArrayType_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint NormalArrayType() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_NormalArrayType_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void NormalArrayStride(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_NormalArrayStride_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint NormalArrayStride() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_NormalArrayStride_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void NormalArrayPointer(SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid value) @property {
    vtkd_im.vtkOpenGLState_NormalArrayPointer_set(cast(void*)swigCPtr, SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid NormalArrayPointer() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_NormalArrayPointer_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid ret = (cPtr is null) ? null : new SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid(cPtr, false);
    return ret;
  }

  public void ColorArrayEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_ColorArrayEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ColorArrayEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_ColorArrayEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ColorArraySize(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_ColorArraySize_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ColorArraySize() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_ColorArraySize_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ColorArrayType(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_ColorArrayType_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ColorArrayType() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_ColorArrayType_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ColorArrayStride(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_ColorArrayStride_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ColorArrayStride() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_ColorArrayStride_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ColorArrayPointer(SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid value) @property {
    vtkd_im.vtkOpenGLState_ColorArrayPointer_set(cast(void*)swigCPtr, SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid ColorArrayPointer() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_ColorArrayPointer_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid ret = (cPtr is null) ? null : new SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid(cPtr, false);
    return ret;
  }

  public void IndexArrayEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_IndexArrayEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean IndexArrayEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_IndexArrayEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void IndexArrayType(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_IndexArrayType_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint IndexArrayType() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_IndexArrayType_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void IndexArrayStride(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_IndexArrayStride_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint IndexArrayStride() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_IndexArrayStride_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void IndexArrayPointer(SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid value) @property {
    vtkd_im.vtkOpenGLState_IndexArrayPointer_set(cast(void*)swigCPtr, SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid IndexArrayPointer() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_IndexArrayPointer_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid ret = (cPtr is null) ? null : new SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid(cPtr, false);
    return ret;
  }

  public void TextureCoordArrayEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_TextureCoordArrayEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean TextureCoordArrayEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_TextureCoordArrayEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void TextureCoordArraySize(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_TextureCoordArraySize_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint TextureCoordArraySize() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_TextureCoordArraySize_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void TextureCoordArrayType(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_TextureCoordArrayType_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint TextureCoordArrayType() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_TextureCoordArrayType_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void TextureCoordArrayStride(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_TextureCoordArrayStride_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint TextureCoordArrayStride() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_TextureCoordArrayStride_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void TextureCoordArrayPointer(SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid value) @property {
    vtkd_im.vtkOpenGLState_TextureCoordArrayPointer_set(cast(void*)swigCPtr, SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid TextureCoordArrayPointer() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_TextureCoordArrayPointer_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid ret = (cPtr is null) ? null : new SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid(cPtr, false);
    return ret;
  }

  public void EdgeFlagArray(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_EdgeFlagArray_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean EdgeFlagArray() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_EdgeFlagArray_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void EdgeFlagArrayStride(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_EdgeFlagArrayStride_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint EdgeFlagArrayStride() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_EdgeFlagArrayStride_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void EdgeFlagArrayPointer(SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid value) @property {
    vtkd_im.vtkOpenGLState_EdgeFlagArrayPointer_set(cast(void*)swigCPtr, SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid EdgeFlagArrayPointer() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_EdgeFlagArrayPointer_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid ret = (cPtr is null) ? null : new SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid(cPtr, false);
    return ret;
  }

  public void ClientActiveTexture(SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum value) @property {
    vtkd_im.vtkOpenGLState_ClientActiveTexture_set(cast(void*)swigCPtr, SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum ClientActiveTexture() @property const {
    SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum ret = new SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum(vtkd_im.vtkOpenGLState_ClientActiveTexture_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void FogCoordinateArrayEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_FogCoordinateArrayEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean FogCoordinateArrayEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_FogCoordinateArrayEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void FogCoordinateArrayType(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_FogCoordinateArrayType_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint FogCoordinateArrayType() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_FogCoordinateArrayType_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void FogCoordinateArrayStride(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_FogCoordinateArrayStride_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint FogCoordinateArrayStride() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_FogCoordinateArrayStride_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void FogCoordinateArrayPointer(SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid value) @property {
    vtkd_im.vtkOpenGLState_FogCoordinateArrayPointer_set(cast(void*)swigCPtr, SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid FogCoordinateArrayPointer() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_FogCoordinateArrayPointer_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid ret = (cPtr is null) ? null : new SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid(cPtr, false);
    return ret;
  }

  public void SecondaryColorArrayEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_SecondaryColorArrayEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean SecondaryColorArrayEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_SecondaryColorArrayEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void SecondaryColorArraySize(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_SecondaryColorArraySize_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint SecondaryColorArraySize() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_SecondaryColorArraySize_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void SecondaryColorArrayType(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_SecondaryColorArrayType_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint SecondaryColorArrayType() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_SecondaryColorArrayType_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void SecondaryColorArrayStride(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_SecondaryColorArrayStride_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint SecondaryColorArrayStride() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_SecondaryColorArrayStride_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void SecondaryColorArrayPointer(SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid value) @property {
    vtkd_im.vtkOpenGLState_SecondaryColorArrayPointer_set(cast(void*)swigCPtr, SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid SecondaryColorArrayPointer() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_SecondaryColorArrayPointer_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid ret = (cPtr is null) ? null : new SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid(cPtr, false);
    return ret;
  }

  public void ArrayBufferBinding(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_ArrayBufferBinding_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ArrayBufferBinding() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_ArrayBufferBinding_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void VertexArrayBufferBinding(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_VertexArrayBufferBinding_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint VertexArrayBufferBinding() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_VertexArrayBufferBinding_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void NormalArrayBufferBinding(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_NormalArrayBufferBinding_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint NormalArrayBufferBinding() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_NormalArrayBufferBinding_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ColorArrayBufferBinding(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_ColorArrayBufferBinding_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ColorArrayBufferBinding() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_ColorArrayBufferBinding_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void IndexArrayBufferBinding(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_IndexArrayBufferBinding_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint IndexArrayBufferBinding() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_IndexArrayBufferBinding_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void TextureCoordArrayBufferBinding(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_TextureCoordArrayBufferBinding_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint TextureCoordArrayBufferBinding() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_TextureCoordArrayBufferBinding_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void EdgeFlagArrayBufferBinding(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_EdgeFlagArrayBufferBinding_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint EdgeFlagArrayBufferBinding() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_EdgeFlagArrayBufferBinding_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void SecondaryColorArrayBufferBinding(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_SecondaryColorArrayBufferBinding_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint SecondaryColorArrayBufferBinding() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_SecondaryColorArrayBufferBinding_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void FogCoordArrayBufferBinding(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_FogCoordArrayBufferBinding_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint FogCoordArrayBufferBinding() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_FogCoordArrayBufferBinding_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ElementArrayBufferBinding(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_ElementArrayBufferBinding_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ElementArrayBufferBinding() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_ElementArrayBufferBinding_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void VertexAttribArrayEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_VertexAttribArrayEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean VertexAttribArrayEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_VertexAttribArrayEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void VertexAttribArraySize(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_VertexAttribArraySize_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint VertexAttribArraySize() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_VertexAttribArraySize_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void VertexAttribArrayStride(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_VertexAttribArrayStride_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint VertexAttribArrayStride() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_VertexAttribArrayStride_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void VertexAttribArrayType(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_VertexAttribArrayType_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint VertexAttribArrayType() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_VertexAttribArrayType_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void VertexAttribArrayNormalized(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_VertexAttribArrayNormalized_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean VertexAttribArrayNormalized() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_VertexAttribArrayNormalized_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void VertexAttribArrayPointer(SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid value) @property {
    vtkd_im.vtkOpenGLState_VertexAttribArrayPointer_set(cast(void*)swigCPtr, SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid VertexAttribArrayPointer() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_VertexAttribArrayPointer_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid ret = (cPtr is null) ? null : new SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid(cPtr, false);
    return ret;
  }

  public void VertexAttribArrayBufferBinding(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_VertexAttribArrayBufferBinding_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint VertexAttribArrayBufferBinding() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_VertexAttribArrayBufferBinding_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void BufferSize(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_BufferSize_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint BufferSize() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_BufferSize_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void BufferUsage(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_BufferUsage_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint BufferUsage() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_BufferUsage_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void BufferAccess(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_BufferAccess_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint BufferAccess() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_BufferAccess_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void BufferMapped(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_BufferMapped_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean BufferMapped() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_BufferMapped_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void BufferMapPointer(SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid value) @property {
    vtkd_im.vtkOpenGLState_BufferMapPointer_set(cast(void*)swigCPtr, SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid BufferMapPointer() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_BufferMapPointer_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid ret = (cPtr is null) ? null : new SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid(cPtr, false);
    return ret;
  }

  public void ModelViewMatrix(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_ModelViewMatrix_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ModelViewMatrix() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_ModelViewMatrix_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void ModelViewStackDepth(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_ModelViewStackDepth_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ModelViewStackDepth() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_ModelViewStackDepth_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ProjectionMatrix(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_ProjectionMatrix_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ProjectionMatrix() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_ProjectionMatrix_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void ProjectionStackDepth(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_ProjectionStackDepth_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ProjectionStackDepth() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_ProjectionStackDepth_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxTextureCoords(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxTextureCoords_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxTextureCoords() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxTextureCoords_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void TCPU(SWIGTYPE_p_std__vectorT_vtkOpenGLTextureCoordinateProcessingUnit_t.SWIGTYPE_p_std__vectorT_vtkOpenGLTextureCoordinateProcessingUnit_t value) @property {
    vtkd_im.vtkOpenGLState_TCPU_set(cast(void*)swigCPtr, SWIGTYPE_p_std__vectorT_vtkOpenGLTextureCoordinateProcessingUnit_t.SWIGTYPE_p_std__vectorT_vtkOpenGLTextureCoordinateProcessingUnit_t.swigGetCPtr(value));
  }

  public SWIGTYPE_p_std__vectorT_vtkOpenGLTextureCoordinateProcessingUnit_t.SWIGTYPE_p_std__vectorT_vtkOpenGLTextureCoordinateProcessingUnit_t TCPU() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_TCPU_get(cast(void*)swigCPtr);
    SWIGTYPE_p_std__vectorT_vtkOpenGLTextureCoordinateProcessingUnit_t.SWIGTYPE_p_std__vectorT_vtkOpenGLTextureCoordinateProcessingUnit_t ret = (cPtr is null) ? null : new SWIGTYPE_p_std__vectorT_vtkOpenGLTextureCoordinateProcessingUnit_t.SWIGTYPE_p_std__vectorT_vtkOpenGLTextureCoordinateProcessingUnit_t(cPtr, false);
    return ret;
  }

  public void MaxCombinedTextureImageUnits(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxCombinedTextureImageUnits_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxCombinedTextureImageUnits() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxCombinedTextureImageUnits_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void TIU(SWIGTYPE_p_std__vectorT_vtkOpenGLTextureImageUnit_t.SWIGTYPE_p_std__vectorT_vtkOpenGLTextureImageUnit_t value) @property {
    vtkd_im.vtkOpenGLState_TIU_set(cast(void*)swigCPtr, SWIGTYPE_p_std__vectorT_vtkOpenGLTextureImageUnit_t.SWIGTYPE_p_std__vectorT_vtkOpenGLTextureImageUnit_t.swigGetCPtr(value));
  }

  public SWIGTYPE_p_std__vectorT_vtkOpenGLTextureImageUnit_t.SWIGTYPE_p_std__vectorT_vtkOpenGLTextureImageUnit_t TIU() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_TIU_get(cast(void*)swigCPtr);
    SWIGTYPE_p_std__vectorT_vtkOpenGLTextureImageUnit_t.SWIGTYPE_p_std__vectorT_vtkOpenGLTextureImageUnit_t ret = (cPtr is null) ? null : new SWIGTYPE_p_std__vectorT_vtkOpenGLTextureImageUnit_t.SWIGTYPE_p_std__vectorT_vtkOpenGLTextureImageUnit_t(cPtr, false);
    return ret;
  }

  public void Viewport(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_Viewport_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint Viewport() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_Viewport_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = (cPtr is null) ? null : new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(cPtr, false);
    return ret;
  }

  public void DepthRange(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_DepthRange_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat DepthRange() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_DepthRange_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void MatrixMode(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MatrixMode_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MatrixMode() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MatrixMode_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void Normalize(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_Normalize_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean Normalize() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_Normalize_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ClipPlanes(SWIGTYPE_p_std__vectorT_vtkOpenGLClipPlaneState_t.SWIGTYPE_p_std__vectorT_vtkOpenGLClipPlaneState_t value) @property {
    vtkd_im.vtkOpenGLState_ClipPlanes_set(cast(void*)swigCPtr, SWIGTYPE_p_std__vectorT_vtkOpenGLClipPlaneState_t.SWIGTYPE_p_std__vectorT_vtkOpenGLClipPlaneState_t.swigGetCPtr(value));
  }

  public SWIGTYPE_p_std__vectorT_vtkOpenGLClipPlaneState_t.SWIGTYPE_p_std__vectorT_vtkOpenGLClipPlaneState_t ClipPlanes() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_ClipPlanes_get(cast(void*)swigCPtr);
    SWIGTYPE_p_std__vectorT_vtkOpenGLClipPlaneState_t.SWIGTYPE_p_std__vectorT_vtkOpenGLClipPlaneState_t ret = (cPtr is null) ? null : new SWIGTYPE_p_std__vectorT_vtkOpenGLClipPlaneState_t.SWIGTYPE_p_std__vectorT_vtkOpenGLClipPlaneState_t(cPtr, false);
    return ret;
  }

  public void ColorMatrix(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_ColorMatrix_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ColorMatrix() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_ColorMatrix_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void ColorMatrixStackDepth(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_ColorMatrixStackDepth_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ColorMatrixStackDepth() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_ColorMatrixStackDepth_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void FogColor(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_FogColor_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat FogColor() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_FogColor_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void FogIndex(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_FogIndex_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat FogIndex() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_FogIndex_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void FogDensity(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_FogDensity_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat FogDensity() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_FogDensity_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void FogStart(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_FogStart_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat FogStart() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_FogStart_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void FogEnd(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_FogEnd_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat FogEnd() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_FogEnd_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void FogMode(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_FogMode_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint FogMode() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_FogMode_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ShadeModel(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_ShadeModel_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ShadeModel() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_ShadeModel_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void FogCoordinateSource(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_FogCoordinateSource_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint FogCoordinateSource() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_FogCoordinateSource_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ColorMaterialEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_ColorMaterialEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ColorMaterialEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_ColorMaterialEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ColorMaterialParameter(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_ColorMaterialParameter_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ColorMaterialParameter() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_ColorMaterialParameter_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ColorMaterialFace(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_ColorMaterialFace_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ColorMaterialFace() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_ColorMaterialFace_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void FrontMaterial(vtkOpenGLMaterialState.vtkOpenGLMaterialState value) @property {
    vtkd_im.vtkOpenGLState_FrontMaterial_set(cast(void*)swigCPtr, vtkOpenGLMaterialState.vtkOpenGLMaterialState.swigGetCPtr(value));
  }

  public vtkOpenGLMaterialState.vtkOpenGLMaterialState FrontMaterial() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_FrontMaterial_get(cast(void*)swigCPtr);
    vtkOpenGLMaterialState.vtkOpenGLMaterialState ret = (cPtr is null) ? null : new vtkOpenGLMaterialState.vtkOpenGLMaterialState(cPtr, false);
    return ret;
  }

  public void BackMaterial(vtkOpenGLMaterialState.vtkOpenGLMaterialState value) @property {
    vtkd_im.vtkOpenGLState_BackMaterial_set(cast(void*)swigCPtr, vtkOpenGLMaterialState.vtkOpenGLMaterialState.swigGetCPtr(value));
  }

  public vtkOpenGLMaterialState.vtkOpenGLMaterialState BackMaterial() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_BackMaterial_get(cast(void*)swigCPtr);
    vtkOpenGLMaterialState.vtkOpenGLMaterialState ret = (cPtr is null) ? null : new vtkOpenGLMaterialState.vtkOpenGLMaterialState(cPtr, false);
    return ret;
  }

  public void LightModelAmbient(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_LightModelAmbient_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat LightModelAmbient() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_LightModelAmbient_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void LightModelLocalViewer(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_LightModelLocalViewer_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean LightModelLocalViewer() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_LightModelLocalViewer_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void LightModelTwoSide(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_LightModelTwoSide_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean LightModelTwoSide() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_LightModelTwoSide_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void Lights(SWIGTYPE_p_std__vectorT_vtkOpenGLLightState_t.SWIGTYPE_p_std__vectorT_vtkOpenGLLightState_t value) @property {
    vtkd_im.vtkOpenGLState_Lights_set(cast(void*)swigCPtr, SWIGTYPE_p_std__vectorT_vtkOpenGLLightState_t.SWIGTYPE_p_std__vectorT_vtkOpenGLLightState_t.swigGetCPtr(value));
  }

  public SWIGTYPE_p_std__vectorT_vtkOpenGLLightState_t.SWIGTYPE_p_std__vectorT_vtkOpenGLLightState_t Lights() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_Lights_get(cast(void*)swigCPtr);
    SWIGTYPE_p_std__vectorT_vtkOpenGLLightState_t.SWIGTYPE_p_std__vectorT_vtkOpenGLLightState_t ret = (cPtr is null) ? null : new SWIGTYPE_p_std__vectorT_vtkOpenGLLightState_t.SWIGTYPE_p_std__vectorT_vtkOpenGLLightState_t(cPtr, false);
    return ret;
  }

  public void lightModelColorControl(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_lightModelColorControl_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint lightModelColorControl() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_lightModelColorControl_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PointSize(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_PointSize_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat PointSize() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_PointSize_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PointSmoothEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_PointSmoothEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean PointSmoothEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_PointSmoothEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void LineWidth(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_LineWidth_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat LineWidth() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_LineWidth_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void LineSmoothEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_LineSmoothEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean LineSmoothEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_LineSmoothEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void LineStipplePattern(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_LineStipplePattern_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint LineStipplePattern() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_LineStipplePattern_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void LineStippleRepeat(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_LineStippleRepeat_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint LineStippleRepeat() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_LineStippleRepeat_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void LineStippleEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_LineStippleEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean LineStippleEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_LineStippleEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void CullFaceEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_CullFaceEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean CullFaceEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_CullFaceEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void CullFaceMode(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_CullFaceMode_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint CullFaceMode() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_CullFaceMode_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void FrontFace(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_FrontFace_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint FrontFace() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_FrontFace_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PolygonSmoothEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_PolygonSmoothEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean PolygonSmoothEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_PolygonSmoothEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PolygonMode(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_PolygonMode_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint PolygonMode() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_PolygonMode_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = (cPtr is null) ? null : new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(cPtr, false);
    return ret;
  }

  public void PolygonOffsetFactor(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_PolygonOffsetFactor_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat PolygonOffsetFactor() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_PolygonOffsetFactor_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PolygonOffsetUnits(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_PolygonOffsetUnits_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat PolygonOffsetUnits() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_PolygonOffsetUnits_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PolygonOffsetPointEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_PolygonOffsetPointEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean PolygonOffsetPointEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_PolygonOffsetPointEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PolygonOffsetLineEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_PolygonOffsetLineEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean PolygonOffsetLineEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_PolygonOffsetLineEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PolygonOffsetFillEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_PolygonOffsetFillEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean PolygonOffsetFillEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_PolygonOffsetFillEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PolygonStipple(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_PolygonStipple_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint PolygonStipple() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_PolygonStipple_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PolygonStippleEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_PolygonStippleEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean PolygonStippleEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_PolygonStippleEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PointSizeMin(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_PointSizeMin_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat PointSizeMin() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_PointSizeMin_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PointSizeMax(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_PointSizeMax_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat PointSizeMax() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_PointSizeMax_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PointFadeThresholdSize(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_PointFadeThresholdSize_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat PointFadeThresholdSize() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_PointFadeThresholdSize_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PointDistanceAttenuation(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_PointDistanceAttenuation_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat PointDistanceAttenuation() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_PointDistanceAttenuation_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PointSpriteEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_PointSpriteEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean PointSpriteEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_PointSpriteEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PointSpriteCoordOrigin(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_PointSpriteCoordOrigin_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint PointSpriteCoordOrigin() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_PointSpriteCoordOrigin_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MultiSampleEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_MultiSampleEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean MultiSampleEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_MultiSampleEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void SampleAlphaToCoverageEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_SampleAlphaToCoverageEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean SampleAlphaToCoverageEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_SampleAlphaToCoverageEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void SampleAlphaToOneEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_SampleAlphaToOneEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean SampleAlphaToOneEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_SampleAlphaToOneEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void SampleCoverageEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_SampleCoverageEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean SampleCoverageEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_SampleCoverageEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void SampleCoverageValue(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_SampleCoverageValue_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat SampleCoverageValue() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_SampleCoverageValue_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void SampleCoverageInvert(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_SampleCoverageInvert_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean SampleCoverageInvert() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_SampleCoverageInvert_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void TextureEnvMode(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_TextureEnvMode_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint TextureEnvMode() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_TextureEnvMode_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void TextureEnvColor(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_TextureEnvColor_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat TextureEnvColor() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_TextureEnvColor_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ActiveTexture(SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum value) @property {
    vtkd_im.vtkOpenGLState_ActiveTexture_set(cast(void*)swigCPtr, SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum ActiveTexture() @property const {
    SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum ret = new SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum(vtkd_im.vtkOpenGLState_ActiveTexture_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void TextureLODBias(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_TextureLODBias_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat TextureLODBias() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_TextureLODBias_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ScissorTestEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_ScissorTestEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ScissorTestEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_ScissorTestEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ScissorBox(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_ScissorBox_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ScissorBox() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_ScissorBox_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = (cPtr is null) ? null : new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(cPtr, false);
    return ret;
  }

  public void AlphaTestEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_AlphaTestEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean AlphaTestEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_AlphaTestEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void AlphaTestFunc(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_AlphaTestFunc_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint AlphaTestFunc() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_AlphaTestFunc_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void AlphaTestRef(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_AlphaTestRef_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat AlphaTestRef() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_AlphaTestRef_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void StencilTestEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_StencilTestEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean StencilTestEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_StencilTestEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void StencilFunc(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_StencilFunc_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint StencilFunc() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_StencilFunc_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void StencilValueMask(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_StencilValueMask_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint StencilValueMask() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_StencilValueMask_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void StencilRef(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_StencilRef_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint StencilRef() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_StencilRef_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void StencilFail(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_StencilFail_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint StencilFail() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_StencilFail_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void StencilPassDepthFail(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_StencilPassDepthFail_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint StencilPassDepthFail() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_StencilPassDepthFail_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void StencilPassDepthPass(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_StencilPassDepthPass_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint StencilPassDepthPass() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_StencilPassDepthPass_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void StencilBackFunc(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_StencilBackFunc_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint StencilBackFunc() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_StencilBackFunc_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void StencilBackValueMask(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_StencilBackValueMask_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint StencilBackValueMask() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_StencilBackValueMask_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void StencilBackRef(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_StencilBackRef_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint StencilBackRef() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_StencilBackRef_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void StencilBackFail(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_StencilBackFail_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint StencilBackFail() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_StencilBackFail_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void StencilBackPassDepthFail(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_StencilBackPassDepthFail_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint StencilBackPassDepthFail() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_StencilBackPassDepthFail_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void StencilBackPassDepthPass(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_StencilBackPassDepthPass_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint StencilBackPassDepthPass() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_StencilBackPassDepthPass_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void DepthTestEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_DepthTestEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean DepthTestEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_DepthTestEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void DepthFunc(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_DepthFunc_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint DepthFunc() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_DepthFunc_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void BlendEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_BlendEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean BlendEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_BlendEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void BlendSrc(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_BlendSrc_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint BlendSrc() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_BlendSrc_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void BlendDst(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_BlendDst_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint BlendDst() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_BlendDst_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void BlendEquation(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_BlendEquation_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint BlendEquation() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_BlendEquation_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void BlendColor(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_BlendColor_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat BlendColor() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_BlendColor_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void BlendSrcRGB(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_BlendSrcRGB_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint BlendSrcRGB() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_BlendSrcRGB_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void BlendSrcAlpha(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_BlendSrcAlpha_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint BlendSrcAlpha() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_BlendSrcAlpha_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void BlendDstRGB(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_BlendDstRGB_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint BlendDstRGB() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_BlendDstRGB_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void BlendDstAlpha(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_BlendDstAlpha_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint BlendDstAlpha() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_BlendDstAlpha_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void BlendEquationRGB(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_BlendEquationRGB_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint BlendEquationRGB() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_BlendEquationRGB_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void BlendEquationAlpha(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_BlendEquationAlpha_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint BlendEquationAlpha() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_BlendEquationAlpha_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void DitherEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_DitherEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean DitherEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_DitherEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void IndexLogicOpEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_IndexLogicOpEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean IndexLogicOpEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_IndexLogicOpEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ColorLogicOpEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_ColorLogicOpEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ColorLogicOpEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_ColorLogicOpEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void LogicOpMode(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_LogicOpMode_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint LogicOpMode() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_LogicOpMode_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxDrawBuffers(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxDrawBuffers_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxDrawBuffers() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxDrawBuffers_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void DrawBuffers(SWIGTYPE_p_std__vectorT_GLint_t.SWIGTYPE_p_std__vectorT_GLint_t value) @property {
    vtkd_im.vtkOpenGLState_DrawBuffers_set(cast(void*)swigCPtr, SWIGTYPE_p_std__vectorT_GLint_t.SWIGTYPE_p_std__vectorT_GLint_t.swigGetCPtr(value));
  }

  public SWIGTYPE_p_std__vectorT_GLint_t.SWIGTYPE_p_std__vectorT_GLint_t DrawBuffers() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_DrawBuffers_get(cast(void*)swigCPtr);
    SWIGTYPE_p_std__vectorT_GLint_t.SWIGTYPE_p_std__vectorT_GLint_t ret = (cPtr is null) ? null : new SWIGTYPE_p_std__vectorT_GLint_t.SWIGTYPE_p_std__vectorT_GLint_t(cPtr, false);
    return ret;
  }

  public void IndexWriteMask(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_IndexWriteMask_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint IndexWriteMask() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_IndexWriteMask_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ColorWriteMask(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_ColorWriteMask_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ColorWriteMask() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_ColorWriteMask_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = (cPtr is null) ? null : new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(cPtr, false);
    return ret;
  }

  public void DepthWriteMask(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_DepthWriteMask_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean DepthWriteMask() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_DepthWriteMask_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void StencilWriteMask(SWIGTYPE_p_GLuint.SWIGTYPE_p_GLuint value) @property {
    vtkd_im.vtkOpenGLState_StencilWriteMask_set(cast(void*)swigCPtr, SWIGTYPE_p_GLuint.SWIGTYPE_p_GLuint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLuint.SWIGTYPE_p_GLuint StencilWriteMask() @property const {
    SWIGTYPE_p_GLuint.SWIGTYPE_p_GLuint ret = new SWIGTYPE_p_GLuint.SWIGTYPE_p_GLuint(vtkd_im.vtkOpenGLState_StencilWriteMask_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ColorClearValue(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_ColorClearValue_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ColorClearValue() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_ColorClearValue_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void IndexClearValue(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_IndexClearValue_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat IndexClearValue() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_IndexClearValue_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void DepthClearValue(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_DepthClearValue_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat DepthClearValue() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_DepthClearValue_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void StencilClearValue(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_StencilClearValue_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint StencilClearValue() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_StencilClearValue_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void AccumClearValue(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_AccumClearValue_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat AccumClearValue() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_AccumClearValue_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void StencilBackWriteMask(SWIGTYPE_p_GLuint.SWIGTYPE_p_GLuint value) @property {
    vtkd_im.vtkOpenGLState_StencilBackWriteMask_set(cast(void*)swigCPtr, SWIGTYPE_p_GLuint.SWIGTYPE_p_GLuint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLuint.SWIGTYPE_p_GLuint StencilBackWriteMask() @property const {
    SWIGTYPE_p_GLuint.SWIGTYPE_p_GLuint ret = new SWIGTYPE_p_GLuint.SWIGTYPE_p_GLuint(vtkd_im.vtkOpenGLState_StencilBackWriteMask_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void DrawBuffer0(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_DrawBuffer0_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint DrawBuffer0() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_DrawBuffer0_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void DrawBuffer1(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_DrawBuffer1_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint DrawBuffer1() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_DrawBuffer1_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void DrawBuffer3(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_DrawBuffer3_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint DrawBuffer3() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_DrawBuffer3_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void Unpack(vtkOpenGLPixelControl.vtkOpenGLPixelControl value) @property {
    vtkd_im.vtkOpenGLState_Unpack_set(cast(void*)swigCPtr, vtkOpenGLPixelControl.vtkOpenGLPixelControl.swigGetCPtr(value));
  }

  public vtkOpenGLPixelControl.vtkOpenGLPixelControl Unpack() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_Unpack_get(cast(void*)swigCPtr);
    vtkOpenGLPixelControl.vtkOpenGLPixelControl ret = (cPtr is null) ? null : new vtkOpenGLPixelControl.vtkOpenGLPixelControl(cPtr, false);
    return ret;
  }

  public void Pack(vtkOpenGLPixelControl.vtkOpenGLPixelControl value) @property {
    vtkd_im.vtkOpenGLState_Pack_set(cast(void*)swigCPtr, vtkOpenGLPixelControl.vtkOpenGLPixelControl.swigGetCPtr(value));
  }

  public vtkOpenGLPixelControl.vtkOpenGLPixelControl Pack() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_Pack_get(cast(void*)swigCPtr);
    vtkOpenGLPixelControl.vtkOpenGLPixelControl ret = (cPtr is null) ? null : new vtkOpenGLPixelControl.vtkOpenGLPixelControl(cPtr, false);
    return ret;
  }

  public void MapColor(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_MapColor_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean MapColor() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_MapColor_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MapStencil(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_MapStencil_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean MapStencil() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_MapStencil_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void IndexShift(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_IndexShift_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint IndexShift() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_IndexShift_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void IndexOffset(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_IndexOffset_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint IndexOffset() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_IndexOffset_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void RedTransform(vtkOpenGLComponentTransform.vtkOpenGLComponentTransform value) @property {
    vtkd_im.vtkOpenGLState_RedTransform_set(cast(void*)swigCPtr, vtkOpenGLComponentTransform.vtkOpenGLComponentTransform.swigGetCPtr(value));
  }

  public vtkOpenGLComponentTransform.vtkOpenGLComponentTransform RedTransform() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_RedTransform_get(cast(void*)swigCPtr);
    vtkOpenGLComponentTransform.vtkOpenGLComponentTransform ret = (cPtr is null) ? null : new vtkOpenGLComponentTransform.vtkOpenGLComponentTransform(cPtr, false);
    return ret;
  }

  public void GreenTransform(vtkOpenGLComponentTransform.vtkOpenGLComponentTransform value) @property {
    vtkd_im.vtkOpenGLState_GreenTransform_set(cast(void*)swigCPtr, vtkOpenGLComponentTransform.vtkOpenGLComponentTransform.swigGetCPtr(value));
  }

  public vtkOpenGLComponentTransform.vtkOpenGLComponentTransform GreenTransform() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_GreenTransform_get(cast(void*)swigCPtr);
    vtkOpenGLComponentTransform.vtkOpenGLComponentTransform ret = (cPtr is null) ? null : new vtkOpenGLComponentTransform.vtkOpenGLComponentTransform(cPtr, false);
    return ret;
  }

  public void BlueTransform(vtkOpenGLComponentTransform.vtkOpenGLComponentTransform value) @property {
    vtkd_im.vtkOpenGLState_BlueTransform_set(cast(void*)swigCPtr, vtkOpenGLComponentTransform.vtkOpenGLComponentTransform.swigGetCPtr(value));
  }

  public vtkOpenGLComponentTransform.vtkOpenGLComponentTransform BlueTransform() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_BlueTransform_get(cast(void*)swigCPtr);
    vtkOpenGLComponentTransform.vtkOpenGLComponentTransform ret = (cPtr is null) ? null : new vtkOpenGLComponentTransform.vtkOpenGLComponentTransform(cPtr, false);
    return ret;
  }

  public void AlphaTransform(vtkOpenGLComponentTransform.vtkOpenGLComponentTransform value) @property {
    vtkd_im.vtkOpenGLState_AlphaTransform_set(cast(void*)swigCPtr, vtkOpenGLComponentTransform.vtkOpenGLComponentTransform.swigGetCPtr(value));
  }

  public vtkOpenGLComponentTransform.vtkOpenGLComponentTransform AlphaTransform() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_AlphaTransform_get(cast(void*)swigCPtr);
    vtkOpenGLComponentTransform.vtkOpenGLComponentTransform ret = (cPtr is null) ? null : new vtkOpenGLComponentTransform.vtkOpenGLComponentTransform(cPtr, false);
    return ret;
  }

  public void DepthTransform(vtkOpenGLComponentTransform.vtkOpenGLComponentTransform value) @property {
    vtkd_im.vtkOpenGLState_DepthTransform_set(cast(void*)swigCPtr, vtkOpenGLComponentTransform.vtkOpenGLComponentTransform.swigGetCPtr(value));
  }

  public vtkOpenGLComponentTransform.vtkOpenGLComponentTransform DepthTransform() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_DepthTransform_get(cast(void*)swigCPtr);
    vtkOpenGLComponentTransform.vtkOpenGLComponentTransform ret = (cPtr is null) ? null : new vtkOpenGLComponentTransform.vtkOpenGLComponentTransform(cPtr, false);
    return ret;
  }

  public void ZoomX(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_ZoomX_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ZoomX() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_ZoomX_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ZoomY(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_ZoomY_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ZoomY() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_ZoomY_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PixelMapColorIndexToColorIndex(vtkOpenGLIndexPixelMapState.vtkOpenGLIndexPixelMapState value) @property {
    vtkd_im.vtkOpenGLState_PixelMapColorIndexToColorIndex_set(cast(void*)swigCPtr, vtkOpenGLIndexPixelMapState.vtkOpenGLIndexPixelMapState.swigGetCPtr(value));
  }

  public vtkOpenGLIndexPixelMapState.vtkOpenGLIndexPixelMapState PixelMapColorIndexToColorIndex() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_PixelMapColorIndexToColorIndex_get(cast(void*)swigCPtr);
    vtkOpenGLIndexPixelMapState.vtkOpenGLIndexPixelMapState ret = (cPtr is null) ? null : new vtkOpenGLIndexPixelMapState.vtkOpenGLIndexPixelMapState(cPtr, false);
    return ret;
  }

  public void PixelMapStencilIndexToStencilIndex(vtkOpenGLIndexPixelMapState.vtkOpenGLIndexPixelMapState value) @property {
    vtkd_im.vtkOpenGLState_PixelMapStencilIndexToStencilIndex_set(cast(void*)swigCPtr, vtkOpenGLIndexPixelMapState.vtkOpenGLIndexPixelMapState.swigGetCPtr(value));
  }

  public vtkOpenGLIndexPixelMapState.vtkOpenGLIndexPixelMapState PixelMapStencilIndexToStencilIndex() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_PixelMapStencilIndexToStencilIndex_get(cast(void*)swigCPtr);
    vtkOpenGLIndexPixelMapState.vtkOpenGLIndexPixelMapState ret = (cPtr is null) ? null : new vtkOpenGLIndexPixelMapState.vtkOpenGLIndexPixelMapState(cPtr, false);
    return ret;
  }

  public void PixelMapColorIndexToRed(vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState value) @property {
    vtkd_im.vtkOpenGLState_PixelMapColorIndexToRed_set(cast(void*)swigCPtr, vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState.swigGetCPtr(value));
  }

  public vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState PixelMapColorIndexToRed() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_PixelMapColorIndexToRed_get(cast(void*)swigCPtr);
    vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState ret = (cPtr is null) ? null : new vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState(cPtr, false);
    return ret;
  }

  public void PixelMapColorIndexToGreen(vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState value) @property {
    vtkd_im.vtkOpenGLState_PixelMapColorIndexToGreen_set(cast(void*)swigCPtr, vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState.swigGetCPtr(value));
  }

  public vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState PixelMapColorIndexToGreen() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_PixelMapColorIndexToGreen_get(cast(void*)swigCPtr);
    vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState ret = (cPtr is null) ? null : new vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState(cPtr, false);
    return ret;
  }

  public void PixelMapColorIndexToBlue(vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState value) @property {
    vtkd_im.vtkOpenGLState_PixelMapColorIndexToBlue_set(cast(void*)swigCPtr, vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState.swigGetCPtr(value));
  }

  public vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState PixelMapColorIndexToBlue() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_PixelMapColorIndexToBlue_get(cast(void*)swigCPtr);
    vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState ret = (cPtr is null) ? null : new vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState(cPtr, false);
    return ret;
  }

  public void PixelMapColorIndexToAlpha(vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState value) @property {
    vtkd_im.vtkOpenGLState_PixelMapColorIndexToAlpha_set(cast(void*)swigCPtr, vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState.swigGetCPtr(value));
  }

  public vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState PixelMapColorIndexToAlpha() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_PixelMapColorIndexToAlpha_get(cast(void*)swigCPtr);
    vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState ret = (cPtr is null) ? null : new vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState(cPtr, false);
    return ret;
  }

  public void PixelMapRedToRed(vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState value) @property {
    vtkd_im.vtkOpenGLState_PixelMapRedToRed_set(cast(void*)swigCPtr, vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState.swigGetCPtr(value));
  }

  public vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState PixelMapRedToRed() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_PixelMapRedToRed_get(cast(void*)swigCPtr);
    vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState ret = (cPtr is null) ? null : new vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState(cPtr, false);
    return ret;
  }

  public void PixelMapGreenToGreen(vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState value) @property {
    vtkd_im.vtkOpenGLState_PixelMapGreenToGreen_set(cast(void*)swigCPtr, vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState.swigGetCPtr(value));
  }

  public vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState PixelMapGreenToGreen() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_PixelMapGreenToGreen_get(cast(void*)swigCPtr);
    vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState ret = (cPtr is null) ? null : new vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState(cPtr, false);
    return ret;
  }

  public void PixelMapBlueToBlue(vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState value) @property {
    vtkd_im.vtkOpenGLState_PixelMapBlueToBlue_set(cast(void*)swigCPtr, vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState.swigGetCPtr(value));
  }

  public vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState PixelMapBlueToBlue() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_PixelMapBlueToBlue_get(cast(void*)swigCPtr);
    vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState ret = (cPtr is null) ? null : new vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState(cPtr, false);
    return ret;
  }

  public void PixelMapAlphaToAlpha(vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState value) @property {
    vtkd_im.vtkOpenGLState_PixelMapAlphaToAlpha_set(cast(void*)swigCPtr, vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState.swigGetCPtr(value));
  }

  public vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState PixelMapAlphaToAlpha() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_PixelMapAlphaToAlpha_get(cast(void*)swigCPtr);
    vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState ret = (cPtr is null) ? null : new vtkOpenGLRGBAPixelMapState.vtkOpenGLRGBAPixelMapState(cPtr, false);
    return ret;
  }

  public void PixelPackBufferBinding(SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum value) @property {
    vtkd_im.vtkOpenGLState_PixelPackBufferBinding_set(cast(void*)swigCPtr, SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum PixelPackBufferBinding() @property const {
    SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum ret = new SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum(vtkd_im.vtkOpenGLState_PixelPackBufferBinding_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PixelUnpackBufferBinding(SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum value) @property {
    vtkd_im.vtkOpenGLState_PixelUnpackBufferBinding_set(cast(void*)swigCPtr, SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum PixelUnpackBufferBinding() @property const {
    SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum ret = new SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum(vtkd_im.vtkOpenGLState_PixelUnpackBufferBinding_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PixelPackBufferObject(vtkOpenGLBufferObjectState.vtkOpenGLBufferObjectState value) @property {
    vtkd_im.vtkOpenGLState_PixelPackBufferObject_set(cast(void*)swigCPtr, vtkOpenGLBufferObjectState.vtkOpenGLBufferObjectState.swigGetCPtr(value));
  }

  public vtkOpenGLBufferObjectState.vtkOpenGLBufferObjectState PixelPackBufferObject() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_PixelPackBufferObject_get(cast(void*)swigCPtr);
    vtkOpenGLBufferObjectState.vtkOpenGLBufferObjectState ret = (cPtr is null) ? null : new vtkOpenGLBufferObjectState.vtkOpenGLBufferObjectState(cPtr, false);
    return ret;
  }

  public void PixelUnpackBufferObject(vtkOpenGLBufferObjectState.vtkOpenGLBufferObjectState value) @property {
    vtkd_im.vtkOpenGLState_PixelUnpackBufferObject_set(cast(void*)swigCPtr, vtkOpenGLBufferObjectState.vtkOpenGLBufferObjectState.swigGetCPtr(value));
  }

  public vtkOpenGLBufferObjectState.vtkOpenGLBufferObjectState PixelUnpackBufferObject() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_PixelUnpackBufferObject_get(cast(void*)swigCPtr);
    vtkOpenGLBufferObjectState.vtkOpenGLBufferObjectState ret = (cPtr is null) ? null : new vtkOpenGLBufferObjectState.vtkOpenGLBufferObjectState(cPtr, false);
    return ret;
  }

  public void ColorTableEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_ColorTableEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ColorTableEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_ColorTableEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PostConvolutionColorTableEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_PostConvolutionColorTableEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean PostConvolutionColorTableEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_PostConvolutionColorTableEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PostColorMatricColorTableEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_PostColorMatricColorTableEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean PostColorMatricColorTableEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_PostColorMatricColorTableEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ReadBuffer(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_ReadBuffer_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ReadBuffer() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_ReadBuffer_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void CurrentProgramState(vtkOpenGLProgramState.vtkOpenGLProgramState value) @property {
    vtkd_im.vtkOpenGLState_CurrentProgramState_set(cast(void*)swigCPtr, vtkOpenGLProgramState.vtkOpenGLProgramState.swigGetCPtr(value));
  }

  public vtkOpenGLProgramState.vtkOpenGLProgramState CurrentProgramState() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_CurrentProgramState_get(cast(void*)swigCPtr);
    vtkOpenGLProgramState.vtkOpenGLProgramState ret = (cPtr is null) ? null : new vtkOpenGLProgramState.vtkOpenGLProgramState(cPtr, false);
    return ret;
  }

  public void CurrentProgram(SWIGTYPE_p_GLuint.SWIGTYPE_p_GLuint value) @property {
    vtkd_im.vtkOpenGLState_CurrentProgram_set(cast(void*)swigCPtr, SWIGTYPE_p_GLuint.SWIGTYPE_p_GLuint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLuint.SWIGTYPE_p_GLuint CurrentProgram() @property const {
    SWIGTYPE_p_GLuint.SWIGTYPE_p_GLuint ret = new SWIGTYPE_p_GLuint.SWIGTYPE_p_GLuint(vtkd_im.vtkOpenGLState_CurrentProgram_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void VertexProgramTwoSideEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_VertexProgramTwoSideEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean VertexProgramTwoSideEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_VertexProgramTwoSideEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void CurrentVertexAttrib(SWIGTYPE_p_a_4__GLfloat.SWIGTYPE_p_a_4__GLfloat value) @property {
    vtkd_im.vtkOpenGLState_CurrentVertexAttrib_set(cast(void*)swigCPtr, SWIGTYPE_p_a_4__GLfloat.SWIGTYPE_p_a_4__GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_a_4__GLfloat.SWIGTYPE_p_a_4__GLfloat CurrentVertexAttrib() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_CurrentVertexAttrib_get(cast(void*)swigCPtr);
    SWIGTYPE_p_a_4__GLfloat.SWIGTYPE_p_a_4__GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_a_4__GLfloat.SWIGTYPE_p_a_4__GLfloat(cPtr, false);
    return ret;
  }

  public void VertexProgramPointSizeEnabled(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_VertexProgramPointSizeEnabled_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean VertexProgramPointSizeEnabled() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_VertexProgramPointSizeEnabled_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PerpectiveCorrectionHint(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_PerpectiveCorrectionHint_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint PerpectiveCorrectionHint() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_PerpectiveCorrectionHint_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PointSmoothHint(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_PointSmoothHint_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint PointSmoothHint() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_PointSmoothHint_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void LineSmoothHint(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_LineSmoothHint_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint LineSmoothHint() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_LineSmoothHint_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PolygonSmoothHint(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_PolygonSmoothHint_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint PolygonSmoothHint() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_PolygonSmoothHint_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void FogHint(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_FogHint_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint FogHint() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_FogHint_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void TextureCompressionHint(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_TextureCompressionHint_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint TextureCompressionHint() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_TextureCompressionHint_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void GenerateMipMapHint(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_GenerateMipMapHint_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint GenerateMipMapHint() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_GenerateMipMapHint_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void FragmentShaderDerivativeHint(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_FragmentShaderDerivativeHint_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint FragmentShaderDerivativeHint() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_FragmentShaderDerivativeHint_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxLights(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxLights_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxLights() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxLights_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxClipPlanes(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxClipPlanes_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxClipPlanes() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxClipPlanes_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxModelViewStackDepth(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxModelViewStackDepth_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxModelViewStackDepth() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxModelViewStackDepth_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxProjectionStackDepth(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxProjectionStackDepth_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxProjectionStackDepth() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxProjectionStackDepth_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxTextureStackDepth(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxTextureStackDepth_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxTextureStackDepth() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxTextureStackDepth_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void SubpixelBits(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_SubpixelBits_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint SubpixelBits() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_SubpixelBits_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxTextureSize(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxTextureSize_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxTextureSize() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxTextureSize_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxPixelMapTable(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxPixelMapTable_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxPixelMapTable() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxPixelMapTable_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxNameStackDepth(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxNameStackDepth_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxNameStackDepth() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxNameStackDepth_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxListNesting(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxListNesting_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxListNesting() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxListNesting_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxEvalOrder(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxEvalOrder_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxEvalOrder() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxEvalOrder_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxViewportDims(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxViewportDims_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxViewportDims() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxViewportDims_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxAttribStackDepth(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxAttribStackDepth_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxAttribStackDepth() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxAttribStackDepth_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxClientAttribStackDepth(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxClientAttribStackDepth_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxClientAttribStackDepth() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxClientAttribStackDepth_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void AuxBuffers(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_AuxBuffers_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint AuxBuffers() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_AuxBuffers_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void RGBAMode(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_RGBAMode_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean RGBAMode() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_RGBAMode_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void IndexMode(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_IndexMode_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean IndexMode() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_IndexMode_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void DoubleBuffer(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_DoubleBuffer_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean DoubleBuffer() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_DoubleBuffer_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void Stereo(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLState_Stereo_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean Stereo() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLState_Stereo_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxColorAttachments(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxColorAttachments_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxColorAttachments() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxColorAttachments_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PointSizeRange(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_PointSizeRange_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat PointSizeRange() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_PointSizeRange_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void PointSizeGranularity(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_PointSizeGranularity_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat PointSizeGranularity() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_PointSizeGranularity_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void LineWidthRange(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_LineWidthRange_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat LineWidthRange() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_LineWidthRange_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void LineWidthGranularity(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_LineWidthGranularity_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat LineWidthGranularity() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_LineWidthGranularity_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void RedBits(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_RedBits_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint RedBits() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_RedBits_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void GreenBits(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_GreenBits_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint GreenBits() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_GreenBits_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void BlueBits(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_BlueBits_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint BlueBits() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_BlueBits_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void AlphaBits(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_AlphaBits_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint AlphaBits() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_AlphaBits_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void IndexBits(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_IndexBits_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint IndexBits() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_IndexBits_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void DepthBits(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_DepthBits_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint DepthBits() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_DepthBits_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void StencilBits(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_StencilBits_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint StencilBits() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_StencilBits_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void AccumRedBits(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_AccumRedBits_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint AccumRedBits() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_AccumRedBits_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void AccumGreenBits(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_AccumGreenBits_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint AccumGreenBits() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_AccumGreenBits_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void AccumBlueBits(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_AccumBlueBits_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint AccumBlueBits() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_AccumBlueBits_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void AccumAlphaBits(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_AccumAlphaBits_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint AccumAlphaBits() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_AccumAlphaBits_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void Max3DTextureSize(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_Max3DTextureSize_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint Max3DTextureSize() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_Max3DTextureSize_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void AliasedPointSizeRange(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_AliasedPointSizeRange_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat AliasedPointSizeRange() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_AliasedPointSizeRange_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void AliasedLineWidthRange(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_AliasedLineWidthRange_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat AliasedLineWidthRange() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_AliasedLineWidthRange_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void MaxElementsIndices(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxElementsIndices_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxElementsIndices() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxElementsIndices_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxElementsVertices(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxElementsVertices_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxElementsVertices() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxElementsVertices_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxColorMatrixStackDepth(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxColorMatrixStackDepth_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxColorMatrixStackDepth() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxColorMatrixStackDepth_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxConvolutionWidth(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxConvolutionWidth_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxConvolutionWidth() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_MaxConvolutionWidth_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = (cPtr is null) ? null : new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(cPtr, false);
    return ret;
  }

  public void MaxConvolutionHeight(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxConvolutionHeight_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxConvolutionHeight() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_MaxConvolutionHeight_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = (cPtr is null) ? null : new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(cPtr, false);
    return ret;
  }

  public void MaxCubeMapTextureSize(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxCubeMapTextureSize_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxCubeMapTextureSize() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxCubeMapTextureSize_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxTextureUnits(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxTextureUnits_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxTextureUnits() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxTextureUnits_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void CompressedTextureFormats(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_CompressedTextureFormats_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint CompressedTextureFormats() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_CompressedTextureFormats_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void NumCompressedTextureFormats(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_NumCompressedTextureFormats_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint NumCompressedTextureFormats() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_NumCompressedTextureFormats_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void SampleBuffers(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_SampleBuffers_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint SampleBuffers() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_SampleBuffers_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void Samples(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_Samples_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint Samples() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_Samples_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxTextureLODBias(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLState_MaxTextureLODBias_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat MaxTextureLODBias() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLState_MaxTextureLODBias_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void QueryCounterBits(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_QueryCounterBits_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint QueryCounterBits() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_QueryCounterBits_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void Extensions(SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte value) @property {
    vtkd_im.vtkOpenGLState_Extensions_set(cast(void*)swigCPtr, SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte Extensions() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_Extensions_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte ret = (cPtr is null) ? null : new SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte(cPtr, false);
    return ret;
  }

  public void Renderer(SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte value) @property {
    vtkd_im.vtkOpenGLState_Renderer_set(cast(void*)swigCPtr, SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte Renderer() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_Renderer_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte ret = (cPtr is null) ? null : new SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte(cPtr, false);
    return ret;
  }

  public void ShadingLanguageVersion(SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte value) @property {
    vtkd_im.vtkOpenGLState_ShadingLanguageVersion_set(cast(void*)swigCPtr, SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte ShadingLanguageVersion() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_ShadingLanguageVersion_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte ret = (cPtr is null) ? null : new SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte(cPtr, false);
    return ret;
  }

  public void Vendor(SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte value) @property {
    vtkd_im.vtkOpenGLState_Vendor_set(cast(void*)swigCPtr, SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte Vendor() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_Vendor_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte ret = (cPtr is null) ? null : new SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte(cPtr, false);
    return ret;
  }

  public void Version(SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte value) @property {
    vtkd_im.vtkOpenGLState_Version_set(cast(void*)swigCPtr, SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte Version() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_Version_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte ret = (cPtr is null) ? null : new SWIGTYPE_p_GLubyte.SWIGTYPE_p_GLubyte(cPtr, false);
    return ret;
  }

  public void MaxVertexAttribs(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxVertexAttribs_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxVertexAttribs() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxVertexAttribs_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxVertexUniformComponents(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxVertexUniformComponents_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxVertexUniformComponents() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxVertexUniformComponents_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxVaryingFloats(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxVaryingFloats_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxVaryingFloats() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxVaryingFloats_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxVertexTextureImageUnits(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxVertexTextureImageUnits_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxVertexTextureImageUnits() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxVertexTextureImageUnits_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxTextureImageUnits(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxTextureImageUnits_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxTextureImageUnits() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxTextureImageUnits_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxFragmentUniformComponents(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_MaxFragmentUniformComponents_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MaxFragmentUniformComponents() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_MaxFragmentUniformComponents_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ListBase(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_ListBase_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ListBase() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_ListBase_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ListIndex(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_ListIndex_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ListIndex() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_ListIndex_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ListMode(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_ListMode_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ListMode() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_ListMode_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void AttribStackDepth(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_AttribStackDepth_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint AttribStackDepth() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_AttribStackDepth_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ClientAtribStackDepth(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_ClientAtribStackDepth_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ClientAtribStackDepth() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_ClientAtribStackDepth_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void NameStackDepth(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_NameStackDepth_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint NameStackDepth() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_NameStackDepth_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void RenderMode(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_RenderMode_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint RenderMode() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_RenderMode_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void SelectionBufferPointer(SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid value) @property {
    vtkd_im.vtkOpenGLState_SelectionBufferPointer_set(cast(void*)swigCPtr, SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid SelectionBufferPointer() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_SelectionBufferPointer_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid ret = (cPtr is null) ? null : new SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid(cPtr, false);
    return ret;
  }

  public void SelectionBufferSize(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_SelectionBufferSize_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint SelectionBufferSize() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_SelectionBufferSize_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void FeedbackBufferPointer(SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid value) @property {
    vtkd_im.vtkOpenGLState_FeedbackBufferPointer_set(cast(void*)swigCPtr, SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid FeedbackBufferPointer() @property const {
    void* cPtr = vtkd_im.vtkOpenGLState_FeedbackBufferPointer_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid ret = (cPtr is null) ? null : new SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid(cPtr, false);
    return ret;
  }

  public void FeedbackBufferSize(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_FeedbackBufferSize_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint FeedbackBufferSize() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_FeedbackBufferSize_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void FeedbackBufferType(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_FeedbackBufferType_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint FeedbackBufferType() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_FeedbackBufferType_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ErrorCode(SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum value) @property {
    vtkd_im.vtkOpenGLState_ErrorCode_set(cast(void*)swigCPtr, SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum ErrorCode() @property const {
    SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum ret = new SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum(vtkd_im.vtkOpenGLState_ErrorCode_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void CurrentQuery(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_CurrentQuery_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint CurrentQuery() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_CurrentQuery_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void FrameBufferBinding(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_FrameBufferBinding_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint FrameBufferBinding() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_FrameBufferBinding_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void Read(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLState_Read_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint Read() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLState_Read_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }
}
