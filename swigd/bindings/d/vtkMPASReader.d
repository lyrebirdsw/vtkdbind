/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkMPASReader;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkUnstructuredGrid;
static import SWIGTYPE_p_int;
static import vtkUnstructuredGridAlgorithm;

class vtkMPASReader : vtkUnstructuredGridAlgorithm.vtkUnstructuredGridAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkMPASReader_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkMPASReader obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkMPASReader New() {
    void* cPtr = vtkd_im.vtkMPASReader_New();
    vtkMPASReader ret = (cPtr is null) ? null : new vtkMPASReader(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkMPASReader_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkMPASReader SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkMPASReader_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkMPASReader ret = (cPtr is null) ? null : new vtkMPASReader(cPtr, false);
    return ret;
  }

  public vtkMPASReader NewInstance() const {
    void* cPtr = vtkd_im.vtkMPASReader_NewInstance(cast(void*)swigCPtr);
    vtkMPASReader ret = (cPtr is null) ? null : new vtkMPASReader(cPtr, false);
    return ret;
  }

  alias vtkUnstructuredGridAlgorithm.vtkUnstructuredGridAlgorithm.NewInstance NewInstance;

  public void SetFileName(string _arg) {
    vtkd_im.vtkMPASReader_SetFileName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetFileName() {
    string ret = std.conv.to!string(vtkd_im.vtkMPASReader_GetFileName(cast(void*)swigCPtr));
    return ret;
  }

  public int GetMaximumCells() {
    auto ret = vtkd_im.vtkMPASReader_GetMaximumCells(cast(void*)swigCPtr);
    return ret;
  }

  public int GetMaximumPoints() {
    auto ret = vtkd_im.vtkMPASReader_GetMaximumPoints(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfCellVars() {
    auto ret = vtkd_im.vtkMPASReader_GetNumberOfCellVars(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfPointVars() {
    auto ret = vtkd_im.vtkMPASReader_GetNumberOfPointVars(cast(void*)swigCPtr);
    return ret;
  }

  public vtkUnstructuredGrid.vtkUnstructuredGrid GetOutput() {
    void* cPtr = vtkd_im.vtkMPASReader_GetOutput__SWIG_0(cast(void*)swigCPtr);
    vtkUnstructuredGrid.vtkUnstructuredGrid ret = (cPtr is null) ? null : new vtkUnstructuredGrid.vtkUnstructuredGrid(cPtr, false);
    return ret;
  }

  public vtkUnstructuredGrid.vtkUnstructuredGrid GetOutput(int index) {
    void* cPtr = vtkd_im.vtkMPASReader_GetOutput__SWIG_1(cast(void*)swigCPtr, index);
    vtkUnstructuredGrid.vtkUnstructuredGrid ret = (cPtr is null) ? null : new vtkUnstructuredGrid.vtkUnstructuredGrid(cPtr, false);
    return ret;
  }

  alias vtkUnstructuredGridAlgorithm.vtkUnstructuredGridAlgorithm.GetOutput GetOutput;

  public int GetNumberOfPointArrays() {
    auto ret = vtkd_im.vtkMPASReader_GetNumberOfPointArrays(cast(void*)swigCPtr);
    return ret;
  }

  public string GetPointArrayName(int index) {
    string ret = std.conv.to!string(vtkd_im.vtkMPASReader_GetPointArrayName(cast(void*)swigCPtr, index));
    return ret;
  }

  public int GetPointArrayStatus(string name) {
    auto ret = vtkd_im.vtkMPASReader_GetPointArrayStatus(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
    return ret;
  }

  public void SetPointArrayStatus(string name, int status) {
    vtkd_im.vtkMPASReader_SetPointArrayStatus(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), status);
  }

  public void DisableAllPointArrays() {
    vtkd_im.vtkMPASReader_DisableAllPointArrays(cast(void*)swigCPtr);
  }

  public void EnableAllPointArrays() {
    vtkd_im.vtkMPASReader_EnableAllPointArrays(cast(void*)swigCPtr);
  }

  public int GetNumberOfCellArrays() {
    auto ret = vtkd_im.vtkMPASReader_GetNumberOfCellArrays(cast(void*)swigCPtr);
    return ret;
  }

  public string GetCellArrayName(int index) {
    string ret = std.conv.to!string(vtkd_im.vtkMPASReader_GetCellArrayName(cast(void*)swigCPtr, index));
    return ret;
  }

  public int GetCellArrayStatus(string name) {
    auto ret = vtkd_im.vtkMPASReader_GetCellArrayStatus(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
    return ret;
  }

  public void SetCellArrayStatus(string name, int status) {
    vtkd_im.vtkMPASReader_SetCellArrayStatus(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), status);
  }

  public void DisableAllCellArrays() {
    vtkd_im.vtkMPASReader_DisableAllCellArrays(cast(void*)swigCPtr);
  }

  public void EnableAllCellArrays() {
    vtkd_im.vtkMPASReader_EnableAllCellArrays(cast(void*)swigCPtr);
  }

  public void SetVerticalLevel(int level) {
    vtkd_im.vtkMPASReader_SetVerticalLevel(cast(void*)swigCPtr, level);
  }

  public int* GetVerticalLevelRange() {
    auto ret = cast(int*)vtkd_im.vtkMPASReader_GetVerticalLevelRange__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetVerticalLevelRange(int* _arg1, int* _arg2) {
    vtkd_im.vtkMPASReader_GetVerticalLevelRange__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetVerticalLevelRange(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkMPASReader_GetVerticalLevelRange__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public void SetLayerThickness(int val) {
    vtkd_im.vtkMPASReader_SetLayerThickness(cast(void*)swigCPtr, val);
  }

  public int* GetLayerThicknessRange() {
    auto ret = cast(int*)vtkd_im.vtkMPASReader_GetLayerThicknessRange__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetLayerThicknessRange(int* _arg1, int* _arg2) {
    vtkd_im.vtkMPASReader_GetLayerThicknessRange__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetLayerThicknessRange(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkMPASReader_GetLayerThicknessRange__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public void SetCenterLon(int val) {
    vtkd_im.vtkMPASReader_SetCenterLon(cast(void*)swigCPtr, val);
  }

  public int* GetCenterLonRange() {
    auto ret = cast(int*)vtkd_im.vtkMPASReader_GetCenterLonRange__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetCenterLonRange(int* _arg1, int* _arg2) {
    vtkd_im.vtkMPASReader_GetCenterLonRange__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetCenterLonRange(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkMPASReader_GetCenterLonRange__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public void SetProjectLatLon(bool val) {
    vtkd_im.vtkMPASReader_SetProjectLatLon(cast(void*)swigCPtr, val);
  }

  public bool GetProjectLatLon() {
    bool ret = vtkd_im.vtkMPASReader_GetProjectLatLon(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetIsAtmosphere(bool val) {
    vtkd_im.vtkMPASReader_SetIsAtmosphere(cast(void*)swigCPtr, val);
  }

  public bool GetIsAtmosphere() {
    bool ret = vtkd_im.vtkMPASReader_GetIsAtmosphere(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetIsZeroCentered(bool val) {
    vtkd_im.vtkMPASReader_SetIsZeroCentered(cast(void*)swigCPtr, val);
  }

  public bool GetIsZeroCentered() {
    bool ret = vtkd_im.vtkMPASReader_GetIsZeroCentered(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetShowMultilayerView(bool val) {
    vtkd_im.vtkMPASReader_SetShowMultilayerView(cast(void*)swigCPtr, val);
  }

  public bool GetShowMultilayerView() {
    bool ret = vtkd_im.vtkMPASReader_GetShowMultilayerView(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public static int CanReadFile(string filename) {
    auto ret = vtkd_im.vtkMPASReader_CanReadFile((filename ? std.string.toStringz(filename) : null));
    return ret;
  }
}
