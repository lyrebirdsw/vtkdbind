/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkImageLogic;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkDataObject;
static import vtkThreadedImageAlgorithm;

class vtkImageLogic : vtkThreadedImageAlgorithm.vtkThreadedImageAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkImageLogic_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkImageLogic obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkImageLogic New() {
    void* cPtr = vtkd_im.vtkImageLogic_New();
    vtkImageLogic ret = (cPtr is null) ? null : new vtkImageLogic(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkImageLogic_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkImageLogic SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkImageLogic_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkImageLogic ret = (cPtr is null) ? null : new vtkImageLogic(cPtr, false);
    return ret;
  }

  public vtkImageLogic NewInstance() const {
    void* cPtr = vtkd_im.vtkImageLogic_NewInstance(cast(void*)swigCPtr);
    vtkImageLogic ret = (cPtr is null) ? null : new vtkImageLogic(cPtr, false);
    return ret;
  }

  alias vtkThreadedImageAlgorithm.vtkThreadedImageAlgorithm.NewInstance NewInstance;

  public void SetOperation(int _arg) {
    vtkd_im.vtkImageLogic_SetOperation(cast(void*)swigCPtr, _arg);
  }

  public int GetOperation() {
    auto ret = vtkd_im.vtkImageLogic_GetOperation(cast(void*)swigCPtr);
    return ret;
  }

  public void SetOperationToAnd() {
    vtkd_im.vtkImageLogic_SetOperationToAnd(cast(void*)swigCPtr);
  }

  public void SetOperationToOr() {
    vtkd_im.vtkImageLogic_SetOperationToOr(cast(void*)swigCPtr);
  }

  public void SetOperationToXor() {
    vtkd_im.vtkImageLogic_SetOperationToXor(cast(void*)swigCPtr);
  }

  public void SetOperationToNand() {
    vtkd_im.vtkImageLogic_SetOperationToNand(cast(void*)swigCPtr);
  }

  public void SetOperationToNor() {
    vtkd_im.vtkImageLogic_SetOperationToNor(cast(void*)swigCPtr);
  }

  public void SetOperationToNot() {
    vtkd_im.vtkImageLogic_SetOperationToNot(cast(void*)swigCPtr);
  }

  public void SetOutputTrueValue(double _arg) {
    vtkd_im.vtkImageLogic_SetOutputTrueValue(cast(void*)swigCPtr, _arg);
  }

  public double GetOutputTrueValue() {
    auto ret = vtkd_im.vtkImageLogic_GetOutputTrueValue(cast(void*)swigCPtr);
    return ret;
  }

  public void SetInput1Data(vtkDataObject.vtkDataObject input) {
    vtkd_im.vtkImageLogic_SetInput1Data(cast(void*)swigCPtr, vtkDataObject.vtkDataObject.swigGetCPtr(input));
  }

  public void SetInput2Data(vtkDataObject.vtkDataObject input) {
    vtkd_im.vtkImageLogic_SetInput2Data(cast(void*)swigCPtr, vtkDataObject.vtkDataObject.swigGetCPtr(input));
  }
}
