/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkGenericAdaptorCell;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkGenericAttribute;
static import vtkGenericAttributeCollection;
static import vtkGenericPointIterator;
static import vtkGenericCellIterator;
static import SWIGTYPE_p_double;
static import SWIGTYPE_p_p_vtkGenericCellIterator;
static import vtkContourValues;
static import vtkImplicitFunction;
static import vtkGenericCellTessellator;
static import vtkIncrementalPointLocator;
static import vtkCellArray;
static import vtkPointData;
static import vtkCellData;
static import vtkPoints;
static import vtkUnsignedCharArray;
static import vtkObject;

class vtkGenericAdaptorCell : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkGenericAdaptorCell_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkGenericAdaptorCell obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkGenericAdaptorCell_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkGenericAdaptorCell SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkGenericAdaptorCell_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkGenericAdaptorCell ret = (cPtr is null) ? null : new vtkGenericAdaptorCell(cPtr, false);
    return ret;
  }

  public vtkGenericAdaptorCell NewInstance() const {
    void* cPtr = vtkd_im.vtkGenericAdaptorCell_NewInstance(cast(void*)swigCPtr);
    vtkGenericAdaptorCell ret = (cPtr is null) ? null : new vtkGenericAdaptorCell(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public long GetId() {
    auto ret = vtkd_im.vtkGenericAdaptorCell_GetId(cast(void*)swigCPtr);
    return ret;
  }

  public int IsInDataSet() {
    auto ret = vtkd_im.vtkGenericAdaptorCell_IsInDataSet(cast(void*)swigCPtr);
    return ret;
  }

  public int GetType() {
    auto ret = vtkd_im.vtkGenericAdaptorCell_GetType(cast(void*)swigCPtr);
    return ret;
  }

  public int GetDimension() {
    auto ret = vtkd_im.vtkGenericAdaptorCell_GetDimension(cast(void*)swigCPtr);
    return ret;
  }

  public int GetGeometryOrder() {
    auto ret = vtkd_im.vtkGenericAdaptorCell_GetGeometryOrder(cast(void*)swigCPtr);
    return ret;
  }

  public int IsGeometryLinear() {
    auto ret = vtkd_im.vtkGenericAdaptorCell_IsGeometryLinear(cast(void*)swigCPtr);
    return ret;
  }

  public int GetAttributeOrder(vtkGenericAttribute.vtkGenericAttribute a) {
    auto ret = vtkd_im.vtkGenericAdaptorCell_GetAttributeOrder(cast(void*)swigCPtr, vtkGenericAttribute.vtkGenericAttribute.swigGetCPtr(a));
    return ret;
  }

  public int GetHighestOrderAttribute(vtkGenericAttributeCollection.vtkGenericAttributeCollection ac) {
    auto ret = vtkd_im.vtkGenericAdaptorCell_GetHighestOrderAttribute(cast(void*)swigCPtr, vtkGenericAttributeCollection.vtkGenericAttributeCollection.swigGetCPtr(ac));
    return ret;
  }

  public int IsAttributeLinear(vtkGenericAttribute.vtkGenericAttribute a) {
    auto ret = vtkd_im.vtkGenericAdaptorCell_IsAttributeLinear(cast(void*)swigCPtr, vtkGenericAttribute.vtkGenericAttribute.swigGetCPtr(a));
    return ret;
  }

  public int IsPrimary() {
    auto ret = vtkd_im.vtkGenericAdaptorCell_IsPrimary(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfPoints() {
    auto ret = vtkd_im.vtkGenericAdaptorCell_GetNumberOfPoints(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfBoundaries(int dim) {
    auto ret = vtkd_im.vtkGenericAdaptorCell_GetNumberOfBoundaries__SWIG_0(cast(void*)swigCPtr, dim);
    return ret;
  }

  public int GetNumberOfBoundaries() {
    auto ret = vtkd_im.vtkGenericAdaptorCell_GetNumberOfBoundaries__SWIG_1(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfDOFNodes() {
    auto ret = vtkd_im.vtkGenericAdaptorCell_GetNumberOfDOFNodes(cast(void*)swigCPtr);
    return ret;
  }

  public void GetPointIterator(vtkGenericPointIterator.vtkGenericPointIterator it) {
    vtkd_im.vtkGenericAdaptorCell_GetPointIterator(cast(void*)swigCPtr, vtkGenericPointIterator.vtkGenericPointIterator.swigGetCPtr(it));
  }

  public vtkGenericCellIterator.vtkGenericCellIterator NewCellIterator() {
    void* cPtr = vtkd_im.vtkGenericAdaptorCell_NewCellIterator(cast(void*)swigCPtr);
    vtkGenericCellIterator.vtkGenericCellIterator ret = (cPtr is null) ? null : new vtkGenericCellIterator.vtkGenericCellIterator(cPtr, false);
    return ret;
  }

  public void GetBoundaryIterator(vtkGenericCellIterator.vtkGenericCellIterator boundaries, int dim) {
    vtkd_im.vtkGenericAdaptorCell_GetBoundaryIterator__SWIG_0(cast(void*)swigCPtr, vtkGenericCellIterator.vtkGenericCellIterator.swigGetCPtr(boundaries), dim);
  }

  public void GetBoundaryIterator(vtkGenericCellIterator.vtkGenericCellIterator boundaries) {
    vtkd_im.vtkGenericAdaptorCell_GetBoundaryIterator__SWIG_1(cast(void*)swigCPtr, vtkGenericCellIterator.vtkGenericCellIterator.swigGetCPtr(boundaries));
  }

  public int CountNeighbors(vtkGenericAdaptorCell boundary) {
    auto ret = vtkd_im.vtkGenericAdaptorCell_CountNeighbors(cast(void*)swigCPtr, vtkGenericAdaptorCell.swigGetCPtr(boundary));
    return ret;
  }

  public void CountEdgeNeighbors(int* sharing) {
    vtkd_im.vtkGenericAdaptorCell_CountEdgeNeighbors(cast(void*)swigCPtr, cast(void*)sharing);
  }

  public void GetNeighbors(vtkGenericAdaptorCell boundary, vtkGenericCellIterator.vtkGenericCellIterator neighbors) {
    vtkd_im.vtkGenericAdaptorCell_GetNeighbors(cast(void*)swigCPtr, vtkGenericAdaptorCell.swigGetCPtr(boundary), vtkGenericCellIterator.vtkGenericCellIterator.swigGetCPtr(neighbors));
  }

  public int FindClosestBoundary(int subId, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, SWIGTYPE_p_p_vtkGenericCellIterator.SWIGTYPE_p_p_vtkGenericCellIterator boundary) {
    auto ret = vtkd_im.vtkGenericAdaptorCell_FindClosestBoundary(cast(void*)swigCPtr, subId, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), SWIGTYPE_p_p_vtkGenericCellIterator.SWIGTYPE_p_p_vtkGenericCellIterator.swigGetCPtr(boundary));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public int EvaluatePosition(SWIGTYPE_p_double.SWIGTYPE_p_double x, double* closestPoint, int* subId, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, double* dist2) {
    auto ret = vtkd_im.vtkGenericAdaptorCell_EvaluatePosition(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), cast(void*)closestPoint, cast(void*)subId, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), cast(void*)dist2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void EvaluateLocation(int subId, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, SWIGTYPE_p_double.SWIGTYPE_p_double x) {
    vtkd_im.vtkGenericAdaptorCell_EvaluateLocation(cast(void*)swigCPtr, subId, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x));
  }

  public void InterpolateTuple(vtkGenericAttribute.vtkGenericAttribute a, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, double* val) {
    vtkd_im.vtkGenericAdaptorCell_InterpolateTuple__SWIG_0(cast(void*)swigCPtr, vtkGenericAttribute.vtkGenericAttribute.swigGetCPtr(a), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), cast(void*)val);
  }

  public void InterpolateTuple(vtkGenericAttributeCollection.vtkGenericAttributeCollection c, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, double* val) {
    vtkd_im.vtkGenericAdaptorCell_InterpolateTuple__SWIG_1(cast(void*)swigCPtr, vtkGenericAttributeCollection.vtkGenericAttributeCollection.swigGetCPtr(c), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), cast(void*)val);
  }

  public void Contour(vtkContourValues.vtkContourValues values, vtkImplicitFunction.vtkImplicitFunction f, vtkGenericAttributeCollection.vtkGenericAttributeCollection attributes, vtkGenericCellTessellator.vtkGenericCellTessellator tess, vtkIncrementalPointLocator.vtkIncrementalPointLocator locator, vtkCellArray.vtkCellArray verts, vtkCellArray.vtkCellArray lines, vtkCellArray.vtkCellArray polys, vtkPointData.vtkPointData outPd, vtkCellData.vtkCellData outCd, vtkPointData.vtkPointData internalPd, vtkPointData.vtkPointData secondaryPd, vtkCellData.vtkCellData secondaryCd) {
    vtkd_im.vtkGenericAdaptorCell_Contour(cast(void*)swigCPtr, vtkContourValues.vtkContourValues.swigGetCPtr(values), vtkImplicitFunction.vtkImplicitFunction.swigGetCPtr(f), vtkGenericAttributeCollection.vtkGenericAttributeCollection.swigGetCPtr(attributes), vtkGenericCellTessellator.vtkGenericCellTessellator.swigGetCPtr(tess), vtkIncrementalPointLocator.vtkIncrementalPointLocator.swigGetCPtr(locator), vtkCellArray.vtkCellArray.swigGetCPtr(verts), vtkCellArray.vtkCellArray.swigGetCPtr(lines), vtkCellArray.vtkCellArray.swigGetCPtr(polys), vtkPointData.vtkPointData.swigGetCPtr(outPd), vtkCellData.vtkCellData.swigGetCPtr(outCd), vtkPointData.vtkPointData.swigGetCPtr(internalPd), vtkPointData.vtkPointData.swigGetCPtr(secondaryPd), vtkCellData.vtkCellData.swigGetCPtr(secondaryCd));
  }

  public void Clip(double value, vtkImplicitFunction.vtkImplicitFunction f, vtkGenericAttributeCollection.vtkGenericAttributeCollection attributes, vtkGenericCellTessellator.vtkGenericCellTessellator tess, int insideOut, vtkIncrementalPointLocator.vtkIncrementalPointLocator locator, vtkCellArray.vtkCellArray connectivity, vtkPointData.vtkPointData outPd, vtkCellData.vtkCellData outCd, vtkPointData.vtkPointData internalPd, vtkPointData.vtkPointData secondaryPd, vtkCellData.vtkCellData secondaryCd) {
    vtkd_im.vtkGenericAdaptorCell_Clip(cast(void*)swigCPtr, value, vtkImplicitFunction.vtkImplicitFunction.swigGetCPtr(f), vtkGenericAttributeCollection.vtkGenericAttributeCollection.swigGetCPtr(attributes), vtkGenericCellTessellator.vtkGenericCellTessellator.swigGetCPtr(tess), insideOut, vtkIncrementalPointLocator.vtkIncrementalPointLocator.swigGetCPtr(locator), vtkCellArray.vtkCellArray.swigGetCPtr(connectivity), vtkPointData.vtkPointData.swigGetCPtr(outPd), vtkCellData.vtkCellData.swigGetCPtr(outCd), vtkPointData.vtkPointData.swigGetCPtr(internalPd), vtkPointData.vtkPointData.swigGetCPtr(secondaryPd), vtkCellData.vtkCellData.swigGetCPtr(secondaryCd));
  }

  public int IntersectWithLine(SWIGTYPE_p_double.SWIGTYPE_p_double p1, SWIGTYPE_p_double.SWIGTYPE_p_double p2, double tol, double* t, SWIGTYPE_p_double.SWIGTYPE_p_double x, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, int* subId) {
    auto ret = vtkd_im.vtkGenericAdaptorCell_IntersectWithLine(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p1), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p2), tol, cast(void*)t, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), cast(void*)subId);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void Derivatives(int subId, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, vtkGenericAttribute.vtkGenericAttribute attribute, double* derivs) {
    vtkd_im.vtkGenericAdaptorCell_Derivatives(cast(void*)swigCPtr, subId, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), vtkGenericAttribute.vtkGenericAttribute.swigGetCPtr(attribute), cast(void*)derivs);
  }

  public void GetBounds(SWIGTYPE_p_double.SWIGTYPE_p_double bounds) {
    vtkd_im.vtkGenericAdaptorCell_GetBounds__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
  }

  public double* GetBounds() {
    auto ret = cast(double*)vtkd_im.vtkGenericAdaptorCell_GetBounds__SWIG_1(cast(void*)swigCPtr);
    return ret;
  }

  public double GetLength2() {
    auto ret = vtkd_im.vtkGenericAdaptorCell_GetLength2(cast(void*)swigCPtr);
    return ret;
  }

  public int GetParametricCenter(SWIGTYPE_p_double.SWIGTYPE_p_double pcoords) {
    auto ret = vtkd_im.vtkGenericAdaptorCell_GetParametricCenter(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords));
    return ret;
  }

  public double GetParametricDistance(SWIGTYPE_p_double.SWIGTYPE_p_double pcoords) {
    auto ret = vtkd_im.vtkGenericAdaptorCell_GetParametricDistance(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords));
    return ret;
  }

  public double* GetParametricCoords() {
    auto ret = cast(double*)vtkd_im.vtkGenericAdaptorCell_GetParametricCoords(cast(void*)swigCPtr);
    return ret;
  }

  public void Tessellate(vtkGenericAttributeCollection.vtkGenericAttributeCollection attributes, vtkGenericCellTessellator.vtkGenericCellTessellator tess, vtkPoints.vtkPoints points, vtkIncrementalPointLocator.vtkIncrementalPointLocator locator, vtkCellArray.vtkCellArray cellArray, vtkPointData.vtkPointData internalPd, vtkPointData.vtkPointData pd, vtkCellData.vtkCellData cd, vtkUnsignedCharArray.vtkUnsignedCharArray types) {
    vtkd_im.vtkGenericAdaptorCell_Tessellate(cast(void*)swigCPtr, vtkGenericAttributeCollection.vtkGenericAttributeCollection.swigGetCPtr(attributes), vtkGenericCellTessellator.vtkGenericCellTessellator.swigGetCPtr(tess), vtkPoints.vtkPoints.swigGetCPtr(points), vtkIncrementalPointLocator.vtkIncrementalPointLocator.swigGetCPtr(locator), vtkCellArray.vtkCellArray.swigGetCPtr(cellArray), vtkPointData.vtkPointData.swigGetCPtr(internalPd), vtkPointData.vtkPointData.swigGetCPtr(pd), vtkCellData.vtkCellData.swigGetCPtr(cd), vtkUnsignedCharArray.vtkUnsignedCharArray.swigGetCPtr(types));
  }

  public int IsFaceOnBoundary(long faceId) {
    auto ret = vtkd_im.vtkGenericAdaptorCell_IsFaceOnBoundary(cast(void*)swigCPtr, faceId);
    return ret;
  }

  public int IsOnBoundary() {
    auto ret = vtkd_im.vtkGenericAdaptorCell_IsOnBoundary(cast(void*)swigCPtr);
    return ret;
  }

  public void GetPointIds(long* id) {
    vtkd_im.vtkGenericAdaptorCell_GetPointIds(cast(void*)swigCPtr, cast(void*)id);
  }

  public void TriangulateFace(vtkGenericAttributeCollection.vtkGenericAttributeCollection attributes, vtkGenericCellTessellator.vtkGenericCellTessellator tess, int index, vtkPoints.vtkPoints points, vtkIncrementalPointLocator.vtkIncrementalPointLocator locator, vtkCellArray.vtkCellArray cellArray, vtkPointData.vtkPointData internalPd, vtkPointData.vtkPointData pd, vtkCellData.vtkCellData cd) {
    vtkd_im.vtkGenericAdaptorCell_TriangulateFace(cast(void*)swigCPtr, vtkGenericAttributeCollection.vtkGenericAttributeCollection.swigGetCPtr(attributes), vtkGenericCellTessellator.vtkGenericCellTessellator.swigGetCPtr(tess), index, vtkPoints.vtkPoints.swigGetCPtr(points), vtkIncrementalPointLocator.vtkIncrementalPointLocator.swigGetCPtr(locator), vtkCellArray.vtkCellArray.swigGetCPtr(cellArray), vtkPointData.vtkPointData.swigGetCPtr(internalPd), vtkPointData.vtkPointData.swigGetCPtr(pd), vtkCellData.vtkCellData.swigGetCPtr(cd));
  }

  public int* GetFaceArray(int faceId) {
    auto ret = cast(int*)vtkd_im.vtkGenericAdaptorCell_GetFaceArray(cast(void*)swigCPtr, faceId);
    return ret;
  }

  public int GetNumberOfVerticesOnFace(int faceId) {
    auto ret = vtkd_im.vtkGenericAdaptorCell_GetNumberOfVerticesOnFace(cast(void*)swigCPtr, faceId);
    return ret;
  }

  public int* GetEdgeArray(int edgeId) {
    auto ret = cast(int*)vtkd_im.vtkGenericAdaptorCell_GetEdgeArray(cast(void*)swigCPtr, edgeId);
    return ret;
  }
}
