/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkFreeTypeUtilities;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_FT_Library;
static import vtkTextProperty;
static import SWIGTYPE_p_FT_Size;
static import SWIGTYPE_p_FT_Face;
static import SWIGTYPE_p_FT_UInt32;
static import SWIGTYPE_p_FT_UInt;
static import SWIGTYPE_p_FT_Glyph;
static import SWIGTYPE_p_int;
static import vtkImageData;
static import SWIGTYPE_p_vtkFreeTypeUtilities__Entry;
static import SWIGTYPE_p_double;
static import vtkObject;

class vtkFreeTypeUtilities : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkFreeTypeUtilities_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkFreeTypeUtilities obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkFreeTypeUtilities_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkFreeTypeUtilities SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkFreeTypeUtilities_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkFreeTypeUtilities ret = (cPtr is null) ? null : new vtkFreeTypeUtilities(cPtr, false);
    return ret;
  }

  public vtkFreeTypeUtilities NewInstance() const {
    void* cPtr = vtkd_im.vtkFreeTypeUtilities_NewInstance(cast(void*)swigCPtr);
    vtkFreeTypeUtilities ret = (cPtr is null) ? null : new vtkFreeTypeUtilities(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public static vtkFreeTypeUtilities New() {
    void* cPtr = vtkd_im.vtkFreeTypeUtilities_New();
    vtkFreeTypeUtilities ret = (cPtr is null) ? null : new vtkFreeTypeUtilities(cPtr, false);
    return ret;
  }

  public static vtkFreeTypeUtilities GetInstance() {
    void* cPtr = vtkd_im.vtkFreeTypeUtilities_GetInstance();
    vtkFreeTypeUtilities ret = (cPtr is null) ? null : new vtkFreeTypeUtilities(cPtr, false);
    return ret;
  }

  public static void SetInstance(vtkFreeTypeUtilities instance) {
    vtkd_im.vtkFreeTypeUtilities_SetInstance(vtkFreeTypeUtilities.swigGetCPtr(instance));
  }

  public SWIGTYPE_p_FT_Library.SWIGTYPE_p_FT_Library GetLibrary() {
    void* cPtr = vtkd_im.vtkFreeTypeUtilities_GetLibrary(cast(void*)swigCPtr);
    SWIGTYPE_p_FT_Library.SWIGTYPE_p_FT_Library ret = (cPtr is null) ? null : new SWIGTYPE_p_FT_Library.SWIGTYPE_p_FT_Library(cPtr, false);
    return ret;
  }

  public void SetMaximumNumberOfFaces(uint _arg) {
    vtkd_im.vtkFreeTypeUtilities_SetMaximumNumberOfFaces(cast(void*)swigCPtr, _arg);
  }

  public uint GetMaximumNumberOfFacesMinValue() {
    auto ret = vtkd_im.vtkFreeTypeUtilities_GetMaximumNumberOfFacesMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public uint GetMaximumNumberOfFacesMaxValue() {
    auto ret = vtkd_im.vtkFreeTypeUtilities_GetMaximumNumberOfFacesMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public uint GetMaximumNumberOfFaces() {
    auto ret = vtkd_im.vtkFreeTypeUtilities_GetMaximumNumberOfFaces(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMaximumNumberOfSizes(uint _arg) {
    vtkd_im.vtkFreeTypeUtilities_SetMaximumNumberOfSizes(cast(void*)swigCPtr, _arg);
  }

  public uint GetMaximumNumberOfSizesMinValue() {
    auto ret = vtkd_im.vtkFreeTypeUtilities_GetMaximumNumberOfSizesMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public uint GetMaximumNumberOfSizesMaxValue() {
    auto ret = vtkd_im.vtkFreeTypeUtilities_GetMaximumNumberOfSizesMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public uint GetMaximumNumberOfSizes() {
    auto ret = vtkd_im.vtkFreeTypeUtilities_GetMaximumNumberOfSizes(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMaximumNumberOfBytes(core.stdc.config.c_ulong _arg) {
    vtkd_im.vtkFreeTypeUtilities_SetMaximumNumberOfBytes(cast(void*)swigCPtr, _arg);
  }

  public core.stdc.config.c_ulong GetMaximumNumberOfBytesMinValue() {
    auto ret = vtkd_im.vtkFreeTypeUtilities_GetMaximumNumberOfBytesMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public core.stdc.config.c_ulong GetMaximumNumberOfBytesMaxValue() {
    auto ret = vtkd_im.vtkFreeTypeUtilities_GetMaximumNumberOfBytesMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public core.stdc.config.c_ulong GetMaximumNumberOfBytes() {
    auto ret = vtkd_im.vtkFreeTypeUtilities_GetMaximumNumberOfBytes(cast(void*)swigCPtr);
    return ret;
  }

  public int GetSize(vtkTextProperty.vtkTextProperty tprop, SWIGTYPE_p_FT_Size.SWIGTYPE_p_FT_Size size) {
    auto ret = vtkd_im.vtkFreeTypeUtilities_GetSize__SWIG_0(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), SWIGTYPE_p_FT_Size.SWIGTYPE_p_FT_Size.swigGetCPtr(size));
    return ret;
  }

  public int GetFace(vtkTextProperty.vtkTextProperty tprop, SWIGTYPE_p_FT_Face.SWIGTYPE_p_FT_Face face) {
    auto ret = vtkd_im.vtkFreeTypeUtilities_GetFace__SWIG_0(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), SWIGTYPE_p_FT_Face.SWIGTYPE_p_FT_Face.swigGetCPtr(face));
    return ret;
  }

  public int GetGlyphIndex(vtkTextProperty.vtkTextProperty tprop, SWIGTYPE_p_FT_UInt32.SWIGTYPE_p_FT_UInt32 c, SWIGTYPE_p_FT_UInt.SWIGTYPE_p_FT_UInt gindex) {
    auto ret = vtkd_im.vtkFreeTypeUtilities_GetGlyphIndex__SWIG_0(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), SWIGTYPE_p_FT_UInt32.SWIGTYPE_p_FT_UInt32.swigGetCPtr(c), SWIGTYPE_p_FT_UInt.SWIGTYPE_p_FT_UInt.swigGetCPtr(gindex));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public int GetGlyph(vtkTextProperty.vtkTextProperty tprop, SWIGTYPE_p_FT_UInt32.SWIGTYPE_p_FT_UInt32 c, SWIGTYPE_p_FT_Glyph.SWIGTYPE_p_FT_Glyph glyph, int request) {
    auto ret = vtkd_im.vtkFreeTypeUtilities_GetGlyph__SWIG_0(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), SWIGTYPE_p_FT_UInt32.SWIGTYPE_p_FT_UInt32.swigGetCPtr(c), SWIGTYPE_p_FT_Glyph.SWIGTYPE_p_FT_Glyph.swigGetCPtr(glyph), request);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public int GetGlyph(vtkTextProperty.vtkTextProperty tprop, SWIGTYPE_p_FT_UInt32.SWIGTYPE_p_FT_UInt32 c, SWIGTYPE_p_FT_Glyph.SWIGTYPE_p_FT_Glyph glyph) {
    auto ret = vtkd_im.vtkFreeTypeUtilities_GetGlyph__SWIG_1(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), SWIGTYPE_p_FT_UInt32.SWIGTYPE_p_FT_UInt32.swigGetCPtr(c), SWIGTYPE_p_FT_Glyph.SWIGTYPE_p_FT_Glyph.swigGetCPtr(glyph));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public int GetBoundingBox(vtkTextProperty.vtkTextProperty tprop, string str, SWIGTYPE_p_int.SWIGTYPE_p_int bbox) {
    auto ret = vtkd_im.vtkFreeTypeUtilities_GetBoundingBox(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), (str ? std.string.toStringz(str) : null), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(bbox));
    return ret;
  }

  public int IsBoundingBoxValid(SWIGTYPE_p_int.SWIGTYPE_p_int bbox) {
    auto ret = vtkd_im.vtkFreeTypeUtilities_IsBoundingBoxValid(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(bbox));
    return ret;
  }

  public int RenderString(vtkTextProperty.vtkTextProperty tprop, string str, vtkImageData.vtkImageData data) {
    auto ret = vtkd_im.vtkFreeTypeUtilities_RenderString__SWIG_0(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), (str ? std.string.toStringz(str) : null), vtkImageData.vtkImageData.swigGetCPtr(data));
    return ret;
  }

  public int RenderString(vtkTextProperty.vtkTextProperty tprop, string str, int x, int y, vtkImageData.vtkImageData data) {
    auto ret = vtkd_im.vtkFreeTypeUtilities_RenderString__SWIG_1(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), (str ? std.string.toStringz(str) : null), x, y, vtkImageData.vtkImageData.swigGetCPtr(data));
    return ret;
  }

  public void MapTextPropertyToId(vtkTextProperty.vtkTextProperty tprop, core.stdc.config.c_ulong* tprop_cache_id) {
    vtkd_im.vtkFreeTypeUtilities_MapTextPropertyToId(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), cast(void*)tprop_cache_id);
  }

  public void MapIdToTextProperty(core.stdc.config.c_ulong tprop_cache_id, vtkTextProperty.vtkTextProperty tprop) {
    vtkd_im.vtkFreeTypeUtilities_MapIdToTextProperty(cast(void*)swigCPtr, tprop_cache_id, vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop));
  }

  public int GetSize(core.stdc.config.c_ulong tprop_cache_id, int font_size, SWIGTYPE_p_FT_Size.SWIGTYPE_p_FT_Size size) {
    auto ret = vtkd_im.vtkFreeTypeUtilities_GetSize__SWIG_1(cast(void*)swigCPtr, tprop_cache_id, font_size, SWIGTYPE_p_FT_Size.SWIGTYPE_p_FT_Size.swigGetCPtr(size));
    return ret;
  }

  public int GetFace(core.stdc.config.c_ulong tprop_cache_id, SWIGTYPE_p_FT_Face.SWIGTYPE_p_FT_Face face) {
    auto ret = vtkd_im.vtkFreeTypeUtilities_GetFace__SWIG_1(cast(void*)swigCPtr, tprop_cache_id, SWIGTYPE_p_FT_Face.SWIGTYPE_p_FT_Face.swigGetCPtr(face));
    return ret;
  }

  public int GetGlyphIndex(core.stdc.config.c_ulong tprop_cache_id, SWIGTYPE_p_FT_UInt32.SWIGTYPE_p_FT_UInt32 c, SWIGTYPE_p_FT_UInt.SWIGTYPE_p_FT_UInt gindex) {
    auto ret = vtkd_im.vtkFreeTypeUtilities_GetGlyphIndex__SWIG_1(cast(void*)swigCPtr, tprop_cache_id, SWIGTYPE_p_FT_UInt32.SWIGTYPE_p_FT_UInt32.swigGetCPtr(c), SWIGTYPE_p_FT_UInt.SWIGTYPE_p_FT_UInt.swigGetCPtr(gindex));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public int GetGlyph(core.stdc.config.c_ulong tprop_cache_id, int font_size, SWIGTYPE_p_FT_UInt.SWIGTYPE_p_FT_UInt gindex, SWIGTYPE_p_FT_Glyph.SWIGTYPE_p_FT_Glyph glyph, int request) {
    auto ret = vtkd_im.vtkFreeTypeUtilities_GetGlyph__SWIG_2(cast(void*)swigCPtr, tprop_cache_id, font_size, SWIGTYPE_p_FT_UInt.SWIGTYPE_p_FT_UInt.swigGetCPtr(gindex), SWIGTYPE_p_FT_Glyph.SWIGTYPE_p_FT_Glyph.swigGetCPtr(glyph), request);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public int GetGlyph(core.stdc.config.c_ulong tprop_cache_id, int font_size, SWIGTYPE_p_FT_UInt.SWIGTYPE_p_FT_UInt gindex, SWIGTYPE_p_FT_Glyph.SWIGTYPE_p_FT_Glyph glyph) {
    auto ret = vtkd_im.vtkFreeTypeUtilities_GetGlyph__SWIG_3(cast(void*)swigCPtr, tprop_cache_id, font_size, SWIGTYPE_p_FT_UInt.SWIGTYPE_p_FT_UInt.swigGetCPtr(gindex), SWIGTYPE_p_FT_Glyph.SWIGTYPE_p_FT_Glyph.swigGetCPtr(glyph));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void GetWidthHeightDescender(string str, vtkTextProperty.vtkTextProperty tprop, int* width, int* height, float* descender) {
    vtkd_im.vtkFreeTypeUtilities_GetWidthHeightDescender(cast(void*)swigCPtr, (str ? std.string.toStringz(str) : null), vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), cast(void*)width, cast(void*)height, cast(void*)descender);
  }

  public void PrepareImageData(vtkImageData.vtkImageData data, vtkTextProperty.vtkTextProperty tprop, string str, int* x, int* y) {
    vtkd_im.vtkFreeTypeUtilities_PrepareImageData(cast(void*)swigCPtr, vtkImageData.vtkImageData.swigGetCPtr(data), vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), (str ? std.string.toStringz(str) : null), cast(void*)x, cast(void*)y);
  }

  public int GetConstrainedFontSize(string str, vtkTextProperty.vtkTextProperty tprop, double orientation, int targetWidth, int targetHeight) {
    auto ret = vtkd_im.vtkFreeTypeUtilities_GetConstrainedFontSize(cast(void*)swigCPtr, (str ? std.string.toStringz(str) : null), vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), orientation, targetWidth, targetHeight);
    return ret;
  }

  public void JustifyLine(string str, vtkTextProperty.vtkTextProperty tprop, int totalWidth, int* x, int* y) {
    vtkd_im.vtkFreeTypeUtilities_JustifyLine(cast(void*)swigCPtr, (str ? std.string.toStringz(str) : null), vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), totalWidth, cast(void*)x, cast(void*)y);
  }

  public SWIGTYPE_p_vtkFreeTypeUtilities__Entry.SWIGTYPE_p_vtkFreeTypeUtilities__Entry GetFont(vtkTextProperty.vtkTextProperty tprop, SWIGTYPE_p_double.SWIGTYPE_p_double override_color) {
    void* cPtr = vtkd_im.vtkFreeTypeUtilities_GetFont__SWIG_0(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(override_color));
    SWIGTYPE_p_vtkFreeTypeUtilities__Entry.SWIGTYPE_p_vtkFreeTypeUtilities__Entry ret = (cPtr is null) ? null : new SWIGTYPE_p_vtkFreeTypeUtilities__Entry.SWIGTYPE_p_vtkFreeTypeUtilities__Entry(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_vtkFreeTypeUtilities__Entry.SWIGTYPE_p_vtkFreeTypeUtilities__Entry GetFont(vtkTextProperty.vtkTextProperty tprop) {
    void* cPtr = vtkd_im.vtkFreeTypeUtilities_GetFont__SWIG_1(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop));
    SWIGTYPE_p_vtkFreeTypeUtilities__Entry.SWIGTYPE_p_vtkFreeTypeUtilities__Entry ret = (cPtr is null) ? null : new SWIGTYPE_p_vtkFreeTypeUtilities__Entry.SWIGTYPE_p_vtkFreeTypeUtilities__Entry(cPtr, false);
    return ret;
  }
}
