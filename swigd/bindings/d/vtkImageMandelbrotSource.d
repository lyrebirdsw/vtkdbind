/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkImageMandelbrotSource;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_int;
static import SWIGTYPE_p_double;
static import vtkImageAlgorithm;

class vtkImageMandelbrotSource : vtkImageAlgorithm.vtkImageAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkImageMandelbrotSource_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkImageMandelbrotSource obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkImageMandelbrotSource New() {
    void* cPtr = vtkd_im.vtkImageMandelbrotSource_New();
    vtkImageMandelbrotSource ret = (cPtr is null) ? null : new vtkImageMandelbrotSource(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkImageMandelbrotSource_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkImageMandelbrotSource SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkImageMandelbrotSource_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkImageMandelbrotSource ret = (cPtr is null) ? null : new vtkImageMandelbrotSource(cPtr, false);
    return ret;
  }

  public vtkImageMandelbrotSource NewInstance() const {
    void* cPtr = vtkd_im.vtkImageMandelbrotSource_NewInstance(cast(void*)swigCPtr);
    vtkImageMandelbrotSource ret = (cPtr is null) ? null : new vtkImageMandelbrotSource(cPtr, false);
    return ret;
  }

  alias vtkImageAlgorithm.vtkImageAlgorithm.NewInstance NewInstance;

  public void SetWholeExtent(SWIGTYPE_p_int.SWIGTYPE_p_int extent) {
    vtkd_im.vtkImageMandelbrotSource_SetWholeExtent__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(extent));
  }

  public void SetWholeExtent(int minX, int maxX, int minY, int maxY, int minZ, int maxZ) {
    vtkd_im.vtkImageMandelbrotSource_SetWholeExtent__SWIG_1(cast(void*)swigCPtr, minX, maxX, minY, maxY, minZ, maxZ);
  }

  public int* GetWholeExtent() {
    auto ret = cast(int*)vtkd_im.vtkImageMandelbrotSource_GetWholeExtent__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetWholeExtent(int* _arg1, int* _arg2, int* _arg3, int* _arg4, int* _arg5, int* _arg6) {
    vtkd_im.vtkImageMandelbrotSource_GetWholeExtent__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3, cast(void*)_arg4, cast(void*)_arg5, cast(void*)_arg6);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetWholeExtent(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkImageMandelbrotSource_GetWholeExtent__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public void SetConstantSize(int _arg) {
    vtkd_im.vtkImageMandelbrotSource_SetConstantSize(cast(void*)swigCPtr, _arg);
  }

  public int GetConstantSize() {
    auto ret = vtkd_im.vtkImageMandelbrotSource_GetConstantSize(cast(void*)swigCPtr);
    return ret;
  }

  public void ConstantSizeOn() {
    vtkd_im.vtkImageMandelbrotSource_ConstantSizeOn(cast(void*)swigCPtr);
  }

  public void ConstantSizeOff() {
    vtkd_im.vtkImageMandelbrotSource_ConstantSizeOff(cast(void*)swigCPtr);
  }

  public void SetProjectionAxes(int x, int y, int z) {
    vtkd_im.vtkImageMandelbrotSource_SetProjectionAxes__SWIG_0(cast(void*)swigCPtr, x, y, z);
  }

  public void SetProjectionAxes(SWIGTYPE_p_int.SWIGTYPE_p_int a) {
    vtkd_im.vtkImageMandelbrotSource_SetProjectionAxes__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(a));
  }

  public int* GetProjectionAxes() {
    auto ret = cast(int*)vtkd_im.vtkImageMandelbrotSource_GetProjectionAxes__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetProjectionAxes(int* _arg1, int* _arg2, int* _arg3) {
    vtkd_im.vtkImageMandelbrotSource_GetProjectionAxes__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetProjectionAxes(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkImageMandelbrotSource_GetProjectionAxes__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public void SetOriginCX(double _arg1, double _arg2, double _arg3, double _arg4) {
    vtkd_im.vtkImageMandelbrotSource_SetOriginCX__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3, _arg4);
  }

  public void SetOriginCX(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkImageMandelbrotSource_SetOriginCX__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetOriginCX() {
    auto ret = cast(double*)vtkd_im.vtkImageMandelbrotSource_GetOriginCX__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetOriginCX(double* _arg1, double* _arg2, double* _arg3, double* _arg4) {
    vtkd_im.vtkImageMandelbrotSource_GetOriginCX__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3, cast(void*)_arg4);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetOriginCX(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkImageMandelbrotSource_GetOriginCX__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public void SetSampleCX(double _arg1, double _arg2, double _arg3, double _arg4) {
    vtkd_im.vtkImageMandelbrotSource_SetSampleCX__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3, _arg4);
  }

  public void SetSampleCX(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkImageMandelbrotSource_SetSampleCX__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetSampleCX() {
    auto ret = cast(double*)vtkd_im.vtkImageMandelbrotSource_GetSampleCX__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetSampleCX(double* _arg1, double* _arg2, double* _arg3, double* _arg4) {
    vtkd_im.vtkImageMandelbrotSource_GetSampleCX__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3, cast(void*)_arg4);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetSampleCX(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkImageMandelbrotSource_GetSampleCX__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public void SetSizeCX(double cReal, double cImag, double xReal, double xImag) {
    vtkd_im.vtkImageMandelbrotSource_SetSizeCX(cast(void*)swigCPtr, cReal, cImag, xReal, xImag);
  }

  public double* GetSizeCX() {
    auto ret = cast(double*)vtkd_im.vtkImageMandelbrotSource_GetSizeCX__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetSizeCX(SWIGTYPE_p_double.SWIGTYPE_p_double s) {
    vtkd_im.vtkImageMandelbrotSource_GetSizeCX__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(s));
  }

  public void SetMaximumNumberOfIterations(ushort _arg) {
    vtkd_im.vtkImageMandelbrotSource_SetMaximumNumberOfIterations(cast(void*)swigCPtr, _arg);
  }

  public ushort GetMaximumNumberOfIterationsMinValue() {
    auto ret = vtkd_im.vtkImageMandelbrotSource_GetMaximumNumberOfIterationsMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public ushort GetMaximumNumberOfIterationsMaxValue() {
    auto ret = vtkd_im.vtkImageMandelbrotSource_GetMaximumNumberOfIterationsMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public ushort GetMaximumNumberOfIterations() {
    auto ret = vtkd_im.vtkImageMandelbrotSource_GetMaximumNumberOfIterations(cast(void*)swigCPtr);
    return ret;
  }

  public void Zoom(double factor) {
    vtkd_im.vtkImageMandelbrotSource_Zoom(cast(void*)swigCPtr, factor);
  }

  public void Pan(double x, double y, double z) {
    vtkd_im.vtkImageMandelbrotSource_Pan(cast(void*)swigCPtr, x, y, z);
  }

  public void CopyOriginAndSample(vtkImageMandelbrotSource source) {
    vtkd_im.vtkImageMandelbrotSource_CopyOriginAndSample(cast(void*)swigCPtr, vtkImageMandelbrotSource.swigGetCPtr(source));
  }

  public void SetSubsampleRate(int _arg) {
    vtkd_im.vtkImageMandelbrotSource_SetSubsampleRate(cast(void*)swigCPtr, _arg);
  }

  public int GetSubsampleRateMinValue() {
    auto ret = vtkd_im.vtkImageMandelbrotSource_GetSubsampleRateMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetSubsampleRateMaxValue() {
    auto ret = vtkd_im.vtkImageMandelbrotSource_GetSubsampleRateMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetSubsampleRate() {
    auto ret = vtkd_im.vtkImageMandelbrotSource_GetSubsampleRate(cast(void*)swigCPtr);
    return ret;
  }
}
