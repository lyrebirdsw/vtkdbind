/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkOpenGLComponentTransform;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import SWIGTYPE_p_ostream;
static import vtkIndent;
static import SWIGTYPE_p_GLfloat;

class vtkOpenGLComponentTransform {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(vtkOpenGLComponentTransform obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkOpenGLComponentTransform(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void Update() {
    vtkd_im.vtkOpenGLComponentTransform_Update(cast(void*)swigCPtr);
  }

  public void PrintSelf(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream os, vtkIndent.vtkIndent indent) {
    vtkd_im.vtkOpenGLComponentTransform_PrintSelf(cast(void*)swigCPtr, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(os), vtkIndent.vtkIndent.swigGetCPtr(indent));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void Scale(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLComponentTransform_Scale_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat Scale() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLComponentTransform_Scale_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void Bias(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLComponentTransform_Bias_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat Bias() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLComponentTransform_Bias_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public this() {
    this(vtkd_im.new_vtkOpenGLComponentTransform(), true);
  }
}
