/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkScalarsToColorsItem;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkPen;
static import vtkPlot;

class vtkScalarsToColorsItem : vtkPlot.vtkPlot {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkScalarsToColorsItem_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkScalarsToColorsItem obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkScalarsToColorsItem_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkScalarsToColorsItem SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkScalarsToColorsItem_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkScalarsToColorsItem ret = (cPtr is null) ? null : new vtkScalarsToColorsItem(cPtr, false);
    return ret;
  }

  public vtkScalarsToColorsItem NewInstance() const {
    void* cPtr = vtkd_im.vtkScalarsToColorsItem_NewInstance(cast(void*)swigCPtr);
    vtkScalarsToColorsItem ret = (cPtr is null) ? null : new vtkScalarsToColorsItem(cPtr, false);
    return ret;
  }

  alias vtkPlot.vtkPlot.NewInstance NewInstance;

  public void SetUserBounds(double _arg1, double _arg2, double _arg3, double _arg4) {
    vtkd_im.vtkScalarsToColorsItem_SetUserBounds__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3, _arg4);
  }

  public void SetUserBounds(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkScalarsToColorsItem_SetUserBounds__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetUserBounds() {
    auto ret = cast(double*)vtkd_im.vtkScalarsToColorsItem_GetUserBounds__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetUserBounds(double* _arg1, double* _arg2, double* _arg3, double* _arg4) {
    vtkd_im.vtkScalarsToColorsItem_GetUserBounds__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3, cast(void*)_arg4);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetUserBounds(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkScalarsToColorsItem_GetUserBounds__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public vtkPen.vtkPen GetPolyLinePen() {
    void* cPtr = vtkd_im.vtkScalarsToColorsItem_GetPolyLinePen(cast(void*)swigCPtr);
    vtkPen.vtkPen ret = (cPtr is null) ? null : new vtkPen.vtkPen(cPtr, false);
    return ret;
  }

  public void SetMaskAboveCurve(bool _arg) {
    vtkd_im.vtkScalarsToColorsItem_SetMaskAboveCurve(cast(void*)swigCPtr, _arg);
  }

  public bool GetMaskAboveCurve() {
    bool ret = vtkd_im.vtkScalarsToColorsItem_GetMaskAboveCurve(cast(void*)swigCPtr) ? true : false;
    return ret;
  }
}
