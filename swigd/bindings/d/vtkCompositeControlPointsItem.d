/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkCompositeControlPointsItem;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkColorTransferFunction;
static import vtkPiecewiseFunction;
static import vtkColorTransferControlPointsItem;

class vtkCompositeControlPointsItem : vtkColorTransferControlPointsItem.vtkColorTransferControlPointsItem {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkCompositeControlPointsItem_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkCompositeControlPointsItem obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  enum PointsFunctionType {
    ColorPointsFunction = 1,
    OpacityPointsFunction = 2,
    ColorAndOpacityPointsFunction = 3
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkCompositeControlPointsItem_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkCompositeControlPointsItem SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkCompositeControlPointsItem_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkCompositeControlPointsItem ret = (cPtr is null) ? null : new vtkCompositeControlPointsItem(cPtr, false);
    return ret;
  }

  public vtkCompositeControlPointsItem NewInstance() const {
    void* cPtr = vtkd_im.vtkCompositeControlPointsItem_NewInstance(cast(void*)swigCPtr);
    vtkCompositeControlPointsItem ret = (cPtr is null) ? null : new vtkCompositeControlPointsItem(cPtr, false);
    return ret;
  }

  alias vtkColorTransferControlPointsItem.vtkColorTransferControlPointsItem.NewInstance NewInstance;

  public static vtkCompositeControlPointsItem New() {
    void* cPtr = vtkd_im.vtkCompositeControlPointsItem_New();
    vtkCompositeControlPointsItem ret = (cPtr is null) ? null : new vtkCompositeControlPointsItem(cPtr, false);
    return ret;
  }

  public void SetColorTransferFunction(vtkColorTransferFunction.vtkColorTransferFunction arg0) {
    vtkd_im.vtkCompositeControlPointsItem_SetColorTransferFunction(cast(void*)swigCPtr, vtkColorTransferFunction.vtkColorTransferFunction.swigGetCPtr(arg0));
  }

  alias vtkColorTransferControlPointsItem.vtkColorTransferControlPointsItem.SetColorTransferFunction SetColorTransferFunction;

  public void SetOpacityFunction(vtkPiecewiseFunction.vtkPiecewiseFunction opacity) {
    vtkd_im.vtkCompositeControlPointsItem_SetOpacityFunction(cast(void*)swigCPtr, vtkPiecewiseFunction.vtkPiecewiseFunction.swigGetCPtr(opacity));
  }

  public vtkPiecewiseFunction.vtkPiecewiseFunction GetOpacityFunction() {
    void* cPtr = vtkd_im.vtkCompositeControlPointsItem_GetOpacityFunction(cast(void*)swigCPtr);
    vtkPiecewiseFunction.vtkPiecewiseFunction ret = (cPtr is null) ? null : new vtkPiecewiseFunction.vtkPiecewiseFunction(cPtr, false);
    return ret;
  }

  public void SetPointsFunction(int _arg) {
    vtkd_im.vtkCompositeControlPointsItem_SetPointsFunction(cast(void*)swigCPtr, _arg);
  }

  public int GetPointsFunction() {
    auto ret = vtkd_im.vtkCompositeControlPointsItem_GetPointsFunction(cast(void*)swigCPtr);
    return ret;
  }

  public void SetUseOpacityPointHandles(bool _arg) {
    vtkd_im.vtkCompositeControlPointsItem_SetUseOpacityPointHandles(cast(void*)swigCPtr, _arg);
  }

  public bool GetUseOpacityPointHandles() {
    bool ret = vtkd_im.vtkCompositeControlPointsItem_GetUseOpacityPointHandles(cast(void*)swigCPtr) ? true : false;
    return ret;
  }
}
