/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPainterPolyDataMapper;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkPainter;
static import vtkPolyDataMapper;

class vtkPainterPolyDataMapper : vtkPolyDataMapper.vtkPolyDataMapper {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPainterPolyDataMapper_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPainterPolyDataMapper obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkPainterPolyDataMapper New() {
    void* cPtr = vtkd_im.vtkPainterPolyDataMapper_New();
    vtkPainterPolyDataMapper ret = (cPtr is null) ? null : new vtkPainterPolyDataMapper(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPainterPolyDataMapper_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPainterPolyDataMapper SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPainterPolyDataMapper_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPainterPolyDataMapper ret = (cPtr is null) ? null : new vtkPainterPolyDataMapper(cPtr, false);
    return ret;
  }

  public vtkPainterPolyDataMapper NewInstance() const {
    void* cPtr = vtkd_im.vtkPainterPolyDataMapper_NewInstance(cast(void*)swigCPtr);
    vtkPainterPolyDataMapper ret = (cPtr is null) ? null : new vtkPainterPolyDataMapper(cPtr, false);
    return ret;
  }

  alias vtkPolyDataMapper.vtkPolyDataMapper.NewInstance NewInstance;

  public vtkPainter.vtkPainter GetPainter() {
    void* cPtr = vtkd_im.vtkPainterPolyDataMapper_GetPainter(cast(void*)swigCPtr);
    vtkPainter.vtkPainter ret = (cPtr is null) ? null : new vtkPainter.vtkPainter(cPtr, false);
    return ret;
  }

  public void SetPainter(vtkPainter.vtkPainter arg0) {
    vtkd_im.vtkPainterPolyDataMapper_SetPainter(cast(void*)swigCPtr, vtkPainter.vtkPainter.swigGetCPtr(arg0));
  }

  public override void MapDataArrayToVertexAttribute(string vertexAttributeName, string dataArrayName, int fieldAssociation, int componentno) {
    vtkd_im.vtkPainterPolyDataMapper_MapDataArrayToVertexAttribute__SWIG_0(cast(void*)swigCPtr, (vertexAttributeName ? std.string.toStringz(vertexAttributeName) : null), (dataArrayName ? std.string.toStringz(dataArrayName) : null), fieldAssociation, componentno);
  }

  public override void MapDataArrayToVertexAttribute(string vertexAttributeName, string dataArrayName, int fieldAssociation) {
    vtkd_im.vtkPainterPolyDataMapper_MapDataArrayToVertexAttribute__SWIG_1(cast(void*)swigCPtr, (vertexAttributeName ? std.string.toStringz(vertexAttributeName) : null), (dataArrayName ? std.string.toStringz(dataArrayName) : null), fieldAssociation);
  }

  public override void MapDataArrayToMultiTextureAttribute(int unit, string dataArrayName, int fieldAssociation, int componentno) {
    vtkd_im.vtkPainterPolyDataMapper_MapDataArrayToMultiTextureAttribute__SWIG_0(cast(void*)swigCPtr, unit, (dataArrayName ? std.string.toStringz(dataArrayName) : null), fieldAssociation, componentno);
  }

  public override void MapDataArrayToMultiTextureAttribute(int unit, string dataArrayName, int fieldAssociation) {
    vtkd_im.vtkPainterPolyDataMapper_MapDataArrayToMultiTextureAttribute__SWIG_1(cast(void*)swigCPtr, unit, (dataArrayName ? std.string.toStringz(dataArrayName) : null), fieldAssociation);
  }

  public vtkPainter.vtkPainter GetSelectionPainter() {
    void* cPtr = vtkd_im.vtkPainterPolyDataMapper_GetSelectionPainter(cast(void*)swigCPtr);
    vtkPainter.vtkPainter ret = (cPtr is null) ? null : new vtkPainter.vtkPainter(cPtr, false);
    return ret;
  }

  public void SetSelectionPainter(vtkPainter.vtkPainter arg0) {
    vtkd_im.vtkPainterPolyDataMapper_SetSelectionPainter(cast(void*)swigCPtr, vtkPainter.vtkPainter.swigGetCPtr(arg0));
  }
}
