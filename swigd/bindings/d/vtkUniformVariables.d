/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkUniformVariables;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkObject;

class vtkUniformVariables : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkUniformVariables_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkUniformVariables obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkUniformVariables New() {
    void* cPtr = vtkd_im.vtkUniformVariables_New();
    vtkUniformVariables ret = (cPtr is null) ? null : new vtkUniformVariables(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkUniformVariables_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkUniformVariables SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkUniformVariables_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkUniformVariables ret = (cPtr is null) ? null : new vtkUniformVariables(cPtr, false);
    return ret;
  }

  public vtkUniformVariables NewInstance() const {
    void* cPtr = vtkd_im.vtkUniformVariables_NewInstance(cast(void*)swigCPtr);
    vtkUniformVariables ret = (cPtr is null) ? null : new vtkUniformVariables(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public void SetUniformi(string name, int numberOfComponents, int* value) {
    vtkd_im.vtkUniformVariables_SetUniformi(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), numberOfComponents, cast(void*)value);
  }

  public void SetUniformf(string name, int numberOfComponents, float* value) {
    vtkd_im.vtkUniformVariables_SetUniformf(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), numberOfComponents, cast(void*)value);
  }

  public void SetUniformiv(string name, int numberOfComponents, int numberOfElements, int* value) {
    vtkd_im.vtkUniformVariables_SetUniformiv(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), numberOfComponents, numberOfElements, cast(void*)value);
  }

  public void SetUniformfv(string name, int numberOfComponents, int numberOfElements, float* value) {
    vtkd_im.vtkUniformVariables_SetUniformfv(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), numberOfComponents, numberOfElements, cast(void*)value);
  }

  public void SetUniformMatrix(string name, int rows, int columns, float* value) {
    vtkd_im.vtkUniformVariables_SetUniformMatrix(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), rows, columns, cast(void*)value);
  }

  public void RemoveUniform(string name) {
    vtkd_im.vtkUniformVariables_RemoveUniform(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
  }

  public void RemoveAllUniforms() {
    vtkd_im.vtkUniformVariables_RemoveAllUniforms(cast(void*)swigCPtr);
  }

  public void Send(string name, int uniformIndex) {
    vtkd_im.vtkUniformVariables_Send(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), uniformIndex);
  }

  public void Start() {
    vtkd_im.vtkUniformVariables_Start(cast(void*)swigCPtr);
  }

  public bool IsAtEnd() {
    bool ret = vtkd_im.vtkUniformVariables_IsAtEnd(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public string GetCurrentName() {
    string ret = std.conv.to!string(vtkd_im.vtkUniformVariables_GetCurrentName(cast(void*)swigCPtr));
    return ret;
  }

  public void SendCurrentUniform(int uniformIndex) {
    vtkd_im.vtkUniformVariables_SendCurrentUniform(cast(void*)swigCPtr, uniformIndex);
  }

  public void Next() {
    vtkd_im.vtkUniformVariables_Next(cast(void*)swigCPtr);
  }

  public void DeepCopy(vtkUniformVariables other) {
    vtkd_im.vtkUniformVariables_DeepCopy(cast(void*)swigCPtr, vtkUniformVariables.swigGetCPtr(other));
  }

  public void Merge(vtkUniformVariables other) {
    vtkd_im.vtkUniformVariables_Merge(cast(void*)swigCPtr, vtkUniformVariables.swigGetCPtr(other));
  }
}
