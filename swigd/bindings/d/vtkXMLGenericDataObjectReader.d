/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkXMLGenericDataObjectReader;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkDataObject;
static import vtkHierarchicalBoxDataSet;
static import vtkHyperOctree;
static import vtkImageData;
static import vtkMultiBlockDataSet;
static import vtkPolyData;
static import vtkRectilinearGrid;
static import vtkStructuredGrid;
static import vtkUnstructuredGrid;
static import vtkXMLDataReader;

class vtkXMLGenericDataObjectReader : vtkXMLDataReader.vtkXMLDataReader {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkXMLGenericDataObjectReader_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkXMLGenericDataObjectReader obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkXMLGenericDataObjectReader_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkXMLGenericDataObjectReader SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkXMLGenericDataObjectReader_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkXMLGenericDataObjectReader ret = (cPtr is null) ? null : new vtkXMLGenericDataObjectReader(cPtr, false);
    return ret;
  }

  public vtkXMLGenericDataObjectReader NewInstance() const {
    void* cPtr = vtkd_im.vtkXMLGenericDataObjectReader_NewInstance(cast(void*)swigCPtr);
    vtkXMLGenericDataObjectReader ret = (cPtr is null) ? null : new vtkXMLGenericDataObjectReader(cPtr, false);
    return ret;
  }

  alias vtkXMLDataReader.vtkXMLDataReader.NewInstance NewInstance;

  public static vtkXMLGenericDataObjectReader New() {
    void* cPtr = vtkd_im.vtkXMLGenericDataObjectReader_New();
    vtkXMLGenericDataObjectReader ret = (cPtr is null) ? null : new vtkXMLGenericDataObjectReader(cPtr, false);
    return ret;
  }

  public vtkDataObject.vtkDataObject GetOutput() {
    void* cPtr = vtkd_im.vtkXMLGenericDataObjectReader_GetOutput__SWIG_0(cast(void*)swigCPtr);
    vtkDataObject.vtkDataObject ret = (cPtr is null) ? null : new vtkDataObject.vtkDataObject(cPtr, false);
    return ret;
  }

  public vtkDataObject.vtkDataObject GetOutput(int idx) {
    void* cPtr = vtkd_im.vtkXMLGenericDataObjectReader_GetOutput__SWIG_1(cast(void*)swigCPtr, idx);
    vtkDataObject.vtkDataObject ret = (cPtr is null) ? null : new vtkDataObject.vtkDataObject(cPtr, false);
    return ret;
  }

  public vtkHierarchicalBoxDataSet.vtkHierarchicalBoxDataSet GetHierarchicalBoxDataSetOutput() {
    void* cPtr = vtkd_im.vtkXMLGenericDataObjectReader_GetHierarchicalBoxDataSetOutput(cast(void*)swigCPtr);
    vtkHierarchicalBoxDataSet.vtkHierarchicalBoxDataSet ret = (cPtr is null) ? null : new vtkHierarchicalBoxDataSet.vtkHierarchicalBoxDataSet(cPtr, false);
    return ret;
  }

  public vtkHyperOctree.vtkHyperOctree GetHyperOctreeOutput() {
    void* cPtr = vtkd_im.vtkXMLGenericDataObjectReader_GetHyperOctreeOutput(cast(void*)swigCPtr);
    vtkHyperOctree.vtkHyperOctree ret = (cPtr is null) ? null : new vtkHyperOctree.vtkHyperOctree(cPtr, false);
    return ret;
  }

  public vtkImageData.vtkImageData GetImageDataOutput() {
    void* cPtr = vtkd_im.vtkXMLGenericDataObjectReader_GetImageDataOutput(cast(void*)swigCPtr);
    vtkImageData.vtkImageData ret = (cPtr is null) ? null : new vtkImageData.vtkImageData(cPtr, false);
    return ret;
  }

  public vtkMultiBlockDataSet.vtkMultiBlockDataSet GetMultiBlockDataSetOutput() {
    void* cPtr = vtkd_im.vtkXMLGenericDataObjectReader_GetMultiBlockDataSetOutput(cast(void*)swigCPtr);
    vtkMultiBlockDataSet.vtkMultiBlockDataSet ret = (cPtr is null) ? null : new vtkMultiBlockDataSet.vtkMultiBlockDataSet(cPtr, false);
    return ret;
  }

  public vtkPolyData.vtkPolyData GetPolyDataOutput() {
    void* cPtr = vtkd_im.vtkXMLGenericDataObjectReader_GetPolyDataOutput(cast(void*)swigCPtr);
    vtkPolyData.vtkPolyData ret = (cPtr is null) ? null : new vtkPolyData.vtkPolyData(cPtr, false);
    return ret;
  }

  public vtkRectilinearGrid.vtkRectilinearGrid GetRectilinearGridOutput() {
    void* cPtr = vtkd_im.vtkXMLGenericDataObjectReader_GetRectilinearGridOutput(cast(void*)swigCPtr);
    vtkRectilinearGrid.vtkRectilinearGrid ret = (cPtr is null) ? null : new vtkRectilinearGrid.vtkRectilinearGrid(cPtr, false);
    return ret;
  }

  public vtkStructuredGrid.vtkStructuredGrid GetStructuredGridOutput() {
    void* cPtr = vtkd_im.vtkXMLGenericDataObjectReader_GetStructuredGridOutput(cast(void*)swigCPtr);
    vtkStructuredGrid.vtkStructuredGrid ret = (cPtr is null) ? null : new vtkStructuredGrid.vtkStructuredGrid(cPtr, false);
    return ret;
  }

  public vtkUnstructuredGrid.vtkUnstructuredGrid GetUnstructuredGridOutput() {
    void* cPtr = vtkd_im.vtkXMLGenericDataObjectReader_GetUnstructuredGridOutput(cast(void*)swigCPtr);
    vtkUnstructuredGrid.vtkUnstructuredGrid ret = (cPtr is null) ? null : new vtkUnstructuredGrid.vtkUnstructuredGrid(cPtr, false);
    return ret;
  }

  public void SetupEmptyOutput() {
    vtkd_im.vtkXMLGenericDataObjectReader_SetupEmptyOutput(cast(void*)swigCPtr);
  }

  public int ReadOutputType(string name, bool* parallel) {
    auto ret = vtkd_im.vtkXMLGenericDataObjectReader_ReadOutputType(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), cast(void*)parallel);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }
}
