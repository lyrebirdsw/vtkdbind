/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtk3DWidget;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkProp3D;
static import vtkDataSet;
static import vtkAlgorithmOutput;
static import vtkInteractorObserver;

class vtk3DWidget : vtkInteractorObserver.vtkInteractorObserver {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtk3DWidget_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtk3DWidget obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtk3DWidget_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtk3DWidget SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtk3DWidget_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtk3DWidget ret = (cPtr is null) ? null : new vtk3DWidget(cPtr, false);
    return ret;
  }

  public vtk3DWidget NewInstance() const {
    void* cPtr = vtkd_im.vtk3DWidget_NewInstance(cast(void*)swigCPtr);
    vtk3DWidget ret = (cPtr is null) ? null : new vtk3DWidget(cPtr, false);
    return ret;
  }

  alias vtkInteractorObserver.vtkInteractorObserver.NewInstance NewInstance;

  public void PlaceWidget(SWIGTYPE_p_double.SWIGTYPE_p_double bounds) {
    vtkd_im.vtk3DWidget_PlaceWidget__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
  }

  public void PlaceWidget() {
    vtkd_im.vtk3DWidget_PlaceWidget__SWIG_1(cast(void*)swigCPtr);
  }

  public void PlaceWidget(double xmin, double xmax, double ymin, double ymax, double zmin, double zmax) {
    vtkd_im.vtk3DWidget_PlaceWidget__SWIG_2(cast(void*)swigCPtr, xmin, xmax, ymin, ymax, zmin, zmax);
  }

  public void SetProp3D(vtkProp3D.vtkProp3D arg0) {
    vtkd_im.vtk3DWidget_SetProp3D(cast(void*)swigCPtr, vtkProp3D.vtkProp3D.swigGetCPtr(arg0));
  }

  public vtkProp3D.vtkProp3D GetProp3D() {
    void* cPtr = vtkd_im.vtk3DWidget_GetProp3D(cast(void*)swigCPtr);
    vtkProp3D.vtkProp3D ret = (cPtr is null) ? null : new vtkProp3D.vtkProp3D(cPtr, false);
    return ret;
  }

  public void SetInputData(vtkDataSet.vtkDataSet arg0) {
    vtkd_im.vtk3DWidget_SetInputData(cast(void*)swigCPtr, vtkDataSet.vtkDataSet.swigGetCPtr(arg0));
  }

  public void SetInputConnection(vtkAlgorithmOutput.vtkAlgorithmOutput arg0) {
    vtkd_im.vtk3DWidget_SetInputConnection(cast(void*)swigCPtr, vtkAlgorithmOutput.vtkAlgorithmOutput.swigGetCPtr(arg0));
  }

  public vtkDataSet.vtkDataSet GetInput() {
    void* cPtr = vtkd_im.vtk3DWidget_GetInput(cast(void*)swigCPtr);
    vtkDataSet.vtkDataSet ret = (cPtr is null) ? null : new vtkDataSet.vtkDataSet(cPtr, false);
    return ret;
  }

  public void SetPlaceFactor(double _arg) {
    vtkd_im.vtk3DWidget_SetPlaceFactor(cast(void*)swigCPtr, _arg);
  }

  public double GetPlaceFactorMinValue() {
    auto ret = vtkd_im.vtk3DWidget_GetPlaceFactorMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetPlaceFactorMaxValue() {
    auto ret = vtkd_im.vtk3DWidget_GetPlaceFactorMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetPlaceFactor() {
    auto ret = vtkd_im.vtk3DWidget_GetPlaceFactor(cast(void*)swigCPtr);
    return ret;
  }

  public void SetHandleSize(double _arg) {
    vtkd_im.vtk3DWidget_SetHandleSize(cast(void*)swigCPtr, _arg);
  }

  public double GetHandleSizeMinValue() {
    auto ret = vtkd_im.vtk3DWidget_GetHandleSizeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetHandleSizeMaxValue() {
    auto ret = vtkd_im.vtk3DWidget_GetHandleSizeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetHandleSize() {
    auto ret = vtkd_im.vtk3DWidget_GetHandleSize(cast(void*)swigCPtr);
    return ret;
  }
}
