/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkShader2;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkOpenGLRenderWindow;
static import vtkUniformVariables;
static import vtkObject;

class vtkShader2 : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkShader2_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkShader2 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkShader2 New() {
    void* cPtr = vtkd_im.vtkShader2_New();
    vtkShader2 ret = (cPtr is null) ? null : new vtkShader2(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkShader2_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkShader2 SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkShader2_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkShader2 ret = (cPtr is null) ? null : new vtkShader2(cPtr, false);
    return ret;
  }

  public vtkShader2 NewInstance() const {
    void* cPtr = vtkd_im.vtkShader2_NewInstance(cast(void*)swigCPtr);
    vtkShader2 ret = (cPtr is null) ? null : new vtkShader2(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public static bool IsSupported(vtkOpenGLRenderWindow.vtkOpenGLRenderWindow context) {
    bool ret = vtkd_im.vtkShader2_IsSupported(vtkOpenGLRenderWindow.vtkOpenGLRenderWindow.swigGetCPtr(context)) ? true : false;
    return ret;
  }

  public static bool LoadExtensions(vtkOpenGLRenderWindow.vtkOpenGLRenderWindow context) {
    bool ret = vtkd_im.vtkShader2_LoadExtensions(vtkOpenGLRenderWindow.vtkOpenGLRenderWindow.swigGetCPtr(context)) ? true : false;
    return ret;
  }

  public string GetSourceCode() {
    string ret = std.conv.to!string(vtkd_im.vtkShader2_GetSourceCode(cast(void*)swigCPtr));
    return ret;
  }

  public void SetSourceCode(string _arg) {
    vtkd_im.vtkShader2_SetSourceCode(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public int GetType() {
    auto ret = vtkd_im.vtkShader2_GetType(cast(void*)swigCPtr);
    return ret;
  }

  public void SetType(int _arg) {
    vtkd_im.vtkShader2_SetType(cast(void*)swigCPtr, _arg);
  }

  public string GetTypeAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkShader2_GetTypeAsString(cast(void*)swigCPtr));
    return ret;
  }

  public void Compile() {
    vtkd_im.vtkShader2_Compile(cast(void*)swigCPtr);
  }

  public bool GetLastCompileStatus() {
    bool ret = vtkd_im.vtkShader2_GetLastCompileStatus(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public string GetLastCompileLog() {
    string ret = std.conv.to!string(vtkd_im.vtkShader2_GetLastCompileLog(cast(void*)swigCPtr));
    return ret;
  }

  public void SetContext(vtkOpenGLRenderWindow.vtkOpenGLRenderWindow context) {
    vtkd_im.vtkShader2_SetContext(cast(void*)swigCPtr, vtkOpenGLRenderWindow.vtkOpenGLRenderWindow.swigGetCPtr(context));
  }

  public vtkOpenGLRenderWindow.vtkOpenGLRenderWindow GetContext() {
    void* cPtr = vtkd_im.vtkShader2_GetContext(cast(void*)swigCPtr);
    vtkOpenGLRenderWindow.vtkOpenGLRenderWindow ret = (cPtr is null) ? null : new vtkOpenGLRenderWindow.vtkOpenGLRenderWindow(cPtr, false);
    return ret;
  }

  public void ReleaseGraphicsResources() {
    vtkd_im.vtkShader2_ReleaseGraphicsResources(cast(void*)swigCPtr);
  }

  public uint GetId() {
    auto ret = vtkd_im.vtkShader2_GetId(cast(void*)swigCPtr);
    return ret;
  }

  public vtkUniformVariables.vtkUniformVariables GetUniformVariables() {
    void* cPtr = vtkd_im.vtkShader2_GetUniformVariables(cast(void*)swigCPtr);
    vtkUniformVariables.vtkUniformVariables ret = (cPtr is null) ? null : new vtkUniformVariables.vtkUniformVariables(cPtr, false);
    return ret;
  }

  public void SetUniformVariables(vtkUniformVariables.vtkUniformVariables variables) {
    vtkd_im.vtkShader2_SetUniformVariables(cast(void*)swigCPtr, vtkUniformVariables.vtkUniformVariables.swigGetCPtr(variables));
  }
}
