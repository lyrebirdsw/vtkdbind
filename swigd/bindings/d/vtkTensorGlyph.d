/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkTensorGlyph;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkPolyData;
static import vtkAlgorithmOutput;
static import vtkPolyDataAlgorithm;

class vtkTensorGlyph : vtkPolyDataAlgorithm.vtkPolyDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkTensorGlyph_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkTensorGlyph obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkTensorGlyph_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkTensorGlyph SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkTensorGlyph_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkTensorGlyph ret = (cPtr is null) ? null : new vtkTensorGlyph(cPtr, false);
    return ret;
  }

  public vtkTensorGlyph NewInstance() const {
    void* cPtr = vtkd_im.vtkTensorGlyph_NewInstance(cast(void*)swigCPtr);
    vtkTensorGlyph ret = (cPtr is null) ? null : new vtkTensorGlyph(cPtr, false);
    return ret;
  }

  alias vtkPolyDataAlgorithm.vtkPolyDataAlgorithm.NewInstance NewInstance;

  public static vtkTensorGlyph New() {
    void* cPtr = vtkd_im.vtkTensorGlyph_New();
    vtkTensorGlyph ret = (cPtr is null) ? null : new vtkTensorGlyph(cPtr, false);
    return ret;
  }

  public void SetSourceData(vtkPolyData.vtkPolyData source) {
    vtkd_im.vtkTensorGlyph_SetSourceData(cast(void*)swigCPtr, vtkPolyData.vtkPolyData.swigGetCPtr(source));
  }

  public vtkPolyData.vtkPolyData GetSource() {
    void* cPtr = vtkd_im.vtkTensorGlyph_GetSource(cast(void*)swigCPtr);
    vtkPolyData.vtkPolyData ret = (cPtr is null) ? null : new vtkPolyData.vtkPolyData(cPtr, false);
    return ret;
  }

  public void SetSourceConnection(int id, vtkAlgorithmOutput.vtkAlgorithmOutput algOutput) {
    vtkd_im.vtkTensorGlyph_SetSourceConnection__SWIG_0(cast(void*)swigCPtr, id, vtkAlgorithmOutput.vtkAlgorithmOutput.swigGetCPtr(algOutput));
  }

  public void SetSourceConnection(vtkAlgorithmOutput.vtkAlgorithmOutput algOutput) {
    vtkd_im.vtkTensorGlyph_SetSourceConnection__SWIG_1(cast(void*)swigCPtr, vtkAlgorithmOutput.vtkAlgorithmOutput.swigGetCPtr(algOutput));
  }

  public void SetScaling(int _arg) {
    vtkd_im.vtkTensorGlyph_SetScaling(cast(void*)swigCPtr, _arg);
  }

  public int GetScaling() {
    auto ret = vtkd_im.vtkTensorGlyph_GetScaling(cast(void*)swigCPtr);
    return ret;
  }

  public void ScalingOn() {
    vtkd_im.vtkTensorGlyph_ScalingOn(cast(void*)swigCPtr);
  }

  public void ScalingOff() {
    vtkd_im.vtkTensorGlyph_ScalingOff(cast(void*)swigCPtr);
  }

  public void SetScaleFactor(double _arg) {
    vtkd_im.vtkTensorGlyph_SetScaleFactor(cast(void*)swigCPtr, _arg);
  }

  public double GetScaleFactor() {
    auto ret = vtkd_im.vtkTensorGlyph_GetScaleFactor(cast(void*)swigCPtr);
    return ret;
  }

  public void SetThreeGlyphs(int _arg) {
    vtkd_im.vtkTensorGlyph_SetThreeGlyphs(cast(void*)swigCPtr, _arg);
  }

  public int GetThreeGlyphs() {
    auto ret = vtkd_im.vtkTensorGlyph_GetThreeGlyphs(cast(void*)swigCPtr);
    return ret;
  }

  public void ThreeGlyphsOn() {
    vtkd_im.vtkTensorGlyph_ThreeGlyphsOn(cast(void*)swigCPtr);
  }

  public void ThreeGlyphsOff() {
    vtkd_im.vtkTensorGlyph_ThreeGlyphsOff(cast(void*)swigCPtr);
  }

  public void SetSymmetric(int _arg) {
    vtkd_im.vtkTensorGlyph_SetSymmetric(cast(void*)swigCPtr, _arg);
  }

  public int GetSymmetric() {
    auto ret = vtkd_im.vtkTensorGlyph_GetSymmetric(cast(void*)swigCPtr);
    return ret;
  }

  public void SymmetricOn() {
    vtkd_im.vtkTensorGlyph_SymmetricOn(cast(void*)swigCPtr);
  }

  public void SymmetricOff() {
    vtkd_im.vtkTensorGlyph_SymmetricOff(cast(void*)swigCPtr);
  }

  public void SetLength(double _arg) {
    vtkd_im.vtkTensorGlyph_SetLength(cast(void*)swigCPtr, _arg);
  }

  public double GetLength() {
    auto ret = vtkd_im.vtkTensorGlyph_GetLength(cast(void*)swigCPtr);
    return ret;
  }

  public void SetExtractEigenvalues(int _arg) {
    vtkd_im.vtkTensorGlyph_SetExtractEigenvalues(cast(void*)swigCPtr, _arg);
  }

  public void ExtractEigenvaluesOn() {
    vtkd_im.vtkTensorGlyph_ExtractEigenvaluesOn(cast(void*)swigCPtr);
  }

  public void ExtractEigenvaluesOff() {
    vtkd_im.vtkTensorGlyph_ExtractEigenvaluesOff(cast(void*)swigCPtr);
  }

  public int GetExtractEigenvalues() {
    auto ret = vtkd_im.vtkTensorGlyph_GetExtractEigenvalues(cast(void*)swigCPtr);
    return ret;
  }

  public void SetColorGlyphs(int _arg) {
    vtkd_im.vtkTensorGlyph_SetColorGlyphs(cast(void*)swigCPtr, _arg);
  }

  public int GetColorGlyphs() {
    auto ret = vtkd_im.vtkTensorGlyph_GetColorGlyphs(cast(void*)swigCPtr);
    return ret;
  }

  public void ColorGlyphsOn() {
    vtkd_im.vtkTensorGlyph_ColorGlyphsOn(cast(void*)swigCPtr);
  }

  public void ColorGlyphsOff() {
    vtkd_im.vtkTensorGlyph_ColorGlyphsOff(cast(void*)swigCPtr);
  }

  public void SetColorMode(int _arg) {
    vtkd_im.vtkTensorGlyph_SetColorMode(cast(void*)swigCPtr, _arg);
  }

  public int GetColorModeMinValue() {
    auto ret = vtkd_im.vtkTensorGlyph_GetColorModeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetColorModeMaxValue() {
    auto ret = vtkd_im.vtkTensorGlyph_GetColorModeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetColorMode() {
    auto ret = vtkd_im.vtkTensorGlyph_GetColorMode(cast(void*)swigCPtr);
    return ret;
  }

  public void SetColorModeToScalars() {
    vtkd_im.vtkTensorGlyph_SetColorModeToScalars(cast(void*)swigCPtr);
  }

  public void SetColorModeToEigenvalues() {
    vtkd_im.vtkTensorGlyph_SetColorModeToEigenvalues(cast(void*)swigCPtr);
  }

  public void SetClampScaling(int _arg) {
    vtkd_im.vtkTensorGlyph_SetClampScaling(cast(void*)swigCPtr, _arg);
  }

  public int GetClampScaling() {
    auto ret = vtkd_im.vtkTensorGlyph_GetClampScaling(cast(void*)swigCPtr);
    return ret;
  }

  public void ClampScalingOn() {
    vtkd_im.vtkTensorGlyph_ClampScalingOn(cast(void*)swigCPtr);
  }

  public void ClampScalingOff() {
    vtkd_im.vtkTensorGlyph_ClampScalingOff(cast(void*)swigCPtr);
  }

  public void SetMaxScaleFactor(double _arg) {
    vtkd_im.vtkTensorGlyph_SetMaxScaleFactor(cast(void*)swigCPtr, _arg);
  }

  public double GetMaxScaleFactor() {
    auto ret = vtkd_im.vtkTensorGlyph_GetMaxScaleFactor(cast(void*)swigCPtr);
    return ret;
  }
}
