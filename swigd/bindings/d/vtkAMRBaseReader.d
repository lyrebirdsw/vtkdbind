/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkAMRBaseReader;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkMultiProcessController;
static import vtkDataArraySelection;
static import vtkOverlappingAMRAlgorithm;

class vtkAMRBaseReader : vtkOverlappingAMRAlgorithm.vtkOverlappingAMRAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkAMRBaseReader_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkAMRBaseReader obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkAMRBaseReader_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkAMRBaseReader SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkAMRBaseReader_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkAMRBaseReader ret = (cPtr is null) ? null : new vtkAMRBaseReader(cPtr, false);
    return ret;
  }

  public vtkAMRBaseReader NewInstance() const {
    void* cPtr = vtkd_im.vtkAMRBaseReader_NewInstance(cast(void*)swigCPtr);
    vtkAMRBaseReader ret = (cPtr is null) ? null : new vtkAMRBaseReader(cPtr, false);
    return ret;
  }

  alias vtkOverlappingAMRAlgorithm.vtkOverlappingAMRAlgorithm.NewInstance NewInstance;

  public void Initialize() {
    vtkd_im.vtkAMRBaseReader_Initialize(cast(void*)swigCPtr);
  }

  public void SetEnableCaching(int _arg) {
    vtkd_im.vtkAMRBaseReader_SetEnableCaching(cast(void*)swigCPtr, _arg);
  }

  public int GetEnableCaching() {
    auto ret = vtkd_im.vtkAMRBaseReader_GetEnableCaching(cast(void*)swigCPtr);
    return ret;
  }

  public void EnableCachingOn() {
    vtkd_im.vtkAMRBaseReader_EnableCachingOn(cast(void*)swigCPtr);
  }

  public void EnableCachingOff() {
    vtkd_im.vtkAMRBaseReader_EnableCachingOff(cast(void*)swigCPtr);
  }

  public bool IsCachingEnabled() const {
    bool ret = vtkd_im.vtkAMRBaseReader_IsCachingEnabled(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetController(vtkMultiProcessController.vtkMultiProcessController _arg) {
    vtkd_im.vtkAMRBaseReader_SetController(cast(void*)swigCPtr, vtkMultiProcessController.vtkMultiProcessController.swigGetCPtr(_arg));
  }

  public vtkMultiProcessController.vtkMultiProcessController GetController() {
    void* cPtr = vtkd_im.vtkAMRBaseReader_GetController(cast(void*)swigCPtr);
    vtkMultiProcessController.vtkMultiProcessController ret = (cPtr is null) ? null : new vtkMultiProcessController.vtkMultiProcessController(cPtr, false);
    return ret;
  }

  public void SetMaxLevel(int _arg) {
    vtkd_im.vtkAMRBaseReader_SetMaxLevel(cast(void*)swigCPtr, _arg);
  }

  public vtkDataArraySelection.vtkDataArraySelection GetCellDataArraySelection() {
    void* cPtr = vtkd_im.vtkAMRBaseReader_GetCellDataArraySelection(cast(void*)swigCPtr);
    vtkDataArraySelection.vtkDataArraySelection ret = (cPtr is null) ? null : new vtkDataArraySelection.vtkDataArraySelection(cPtr, false);
    return ret;
  }

  public vtkDataArraySelection.vtkDataArraySelection GetPointDataArraySelection() {
    void* cPtr = vtkd_im.vtkAMRBaseReader_GetPointDataArraySelection(cast(void*)swigCPtr);
    vtkDataArraySelection.vtkDataArraySelection ret = (cPtr is null) ? null : new vtkDataArraySelection.vtkDataArraySelection(cPtr, false);
    return ret;
  }

  public int GetNumberOfPointArrays() {
    auto ret = vtkd_im.vtkAMRBaseReader_GetNumberOfPointArrays(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfCellArrays() {
    auto ret = vtkd_im.vtkAMRBaseReader_GetNumberOfCellArrays(cast(void*)swigCPtr);
    return ret;
  }

  public string GetPointArrayName(int index) {
    string ret = std.conv.to!string(vtkd_im.vtkAMRBaseReader_GetPointArrayName(cast(void*)swigCPtr, index));
    return ret;
  }

  public string GetCellArrayName(int index) {
    string ret = std.conv.to!string(vtkd_im.vtkAMRBaseReader_GetCellArrayName(cast(void*)swigCPtr, index));
    return ret;
  }

  public int GetPointArrayStatus(string name) {
    auto ret = vtkd_im.vtkAMRBaseReader_GetPointArrayStatus(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
    return ret;
  }

  public int GetCellArrayStatus(string name) {
    auto ret = vtkd_im.vtkAMRBaseReader_GetCellArrayStatus(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
    return ret;
  }

  public void SetPointArrayStatus(string name, int status) {
    vtkd_im.vtkAMRBaseReader_SetPointArrayStatus(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), status);
  }

  public void SetCellArrayStatus(string name, int status) {
    vtkd_im.vtkAMRBaseReader_SetCellArrayStatus(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), status);
  }

  public string GetFileName() {
    string ret = std.conv.to!string(vtkd_im.vtkAMRBaseReader_GetFileName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetFileName(string fileName) {
    vtkd_im.vtkAMRBaseReader_SetFileName(cast(void*)swigCPtr, (fileName ? std.string.toStringz(fileName) : null));
  }

  public int GetNumberOfBlocks() {
    auto ret = vtkd_im.vtkAMRBaseReader_GetNumberOfBlocks(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfLevels() {
    auto ret = vtkd_im.vtkAMRBaseReader_GetNumberOfLevels(cast(void*)swigCPtr);
    return ret;
  }
}
