/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkIterativeClosestPointTransform;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkDataSet;
static import vtkCellLocator;
static import vtkLandmarkTransform;
static import vtkLinearTransform;

class vtkIterativeClosestPointTransform : vtkLinearTransform.vtkLinearTransform {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkIterativeClosestPointTransform_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkIterativeClosestPointTransform obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkIterativeClosestPointTransform New() {
    void* cPtr = vtkd_im.vtkIterativeClosestPointTransform_New();
    vtkIterativeClosestPointTransform ret = (cPtr is null) ? null : new vtkIterativeClosestPointTransform(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkIterativeClosestPointTransform_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkIterativeClosestPointTransform SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkIterativeClosestPointTransform_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkIterativeClosestPointTransform ret = (cPtr is null) ? null : new vtkIterativeClosestPointTransform(cPtr, false);
    return ret;
  }

  public vtkIterativeClosestPointTransform NewInstance() const {
    void* cPtr = vtkd_im.vtkIterativeClosestPointTransform_NewInstance(cast(void*)swigCPtr);
    vtkIterativeClosestPointTransform ret = (cPtr is null) ? null : new vtkIterativeClosestPointTransform(cPtr, false);
    return ret;
  }

  alias vtkLinearTransform.vtkLinearTransform.NewInstance NewInstance;

  public void SetSource(vtkDataSet.vtkDataSet source) {
    vtkd_im.vtkIterativeClosestPointTransform_SetSource(cast(void*)swigCPtr, vtkDataSet.vtkDataSet.swigGetCPtr(source));
  }

  public void SetTarget(vtkDataSet.vtkDataSet target) {
    vtkd_im.vtkIterativeClosestPointTransform_SetTarget(cast(void*)swigCPtr, vtkDataSet.vtkDataSet.swigGetCPtr(target));
  }

  public vtkDataSet.vtkDataSet GetSource() {
    void* cPtr = vtkd_im.vtkIterativeClosestPointTransform_GetSource(cast(void*)swigCPtr);
    vtkDataSet.vtkDataSet ret = (cPtr is null) ? null : new vtkDataSet.vtkDataSet(cPtr, false);
    return ret;
  }

  public vtkDataSet.vtkDataSet GetTarget() {
    void* cPtr = vtkd_im.vtkIterativeClosestPointTransform_GetTarget(cast(void*)swigCPtr);
    vtkDataSet.vtkDataSet ret = (cPtr is null) ? null : new vtkDataSet.vtkDataSet(cPtr, false);
    return ret;
  }

  public void SetLocator(vtkCellLocator.vtkCellLocator locator) {
    vtkd_im.vtkIterativeClosestPointTransform_SetLocator(cast(void*)swigCPtr, vtkCellLocator.vtkCellLocator.swigGetCPtr(locator));
  }

  public vtkCellLocator.vtkCellLocator GetLocator() {
    void* cPtr = vtkd_im.vtkIterativeClosestPointTransform_GetLocator(cast(void*)swigCPtr);
    vtkCellLocator.vtkCellLocator ret = (cPtr is null) ? null : new vtkCellLocator.vtkCellLocator(cPtr, false);
    return ret;
  }

  public void SetMaximumNumberOfIterations(int _arg) {
    vtkd_im.vtkIterativeClosestPointTransform_SetMaximumNumberOfIterations(cast(void*)swigCPtr, _arg);
  }

  public int GetMaximumNumberOfIterations() {
    auto ret = vtkd_im.vtkIterativeClosestPointTransform_GetMaximumNumberOfIterations(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfIterations() {
    auto ret = vtkd_im.vtkIterativeClosestPointTransform_GetNumberOfIterations(cast(void*)swigCPtr);
    return ret;
  }

  public void SetCheckMeanDistance(int _arg) {
    vtkd_im.vtkIterativeClosestPointTransform_SetCheckMeanDistance(cast(void*)swigCPtr, _arg);
  }

  public int GetCheckMeanDistance() {
    auto ret = vtkd_im.vtkIterativeClosestPointTransform_GetCheckMeanDistance(cast(void*)swigCPtr);
    return ret;
  }

  public void CheckMeanDistanceOn() {
    vtkd_im.vtkIterativeClosestPointTransform_CheckMeanDistanceOn(cast(void*)swigCPtr);
  }

  public void CheckMeanDistanceOff() {
    vtkd_im.vtkIterativeClosestPointTransform_CheckMeanDistanceOff(cast(void*)swigCPtr);
  }

  public void SetMeanDistanceMode(int _arg) {
    vtkd_im.vtkIterativeClosestPointTransform_SetMeanDistanceMode(cast(void*)swigCPtr, _arg);
  }

  public int GetMeanDistanceModeMinValue() {
    auto ret = vtkd_im.vtkIterativeClosestPointTransform_GetMeanDistanceModeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetMeanDistanceModeMaxValue() {
    auto ret = vtkd_im.vtkIterativeClosestPointTransform_GetMeanDistanceModeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetMeanDistanceMode() {
    auto ret = vtkd_im.vtkIterativeClosestPointTransform_GetMeanDistanceMode(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMeanDistanceModeToRMS() {
    vtkd_im.vtkIterativeClosestPointTransform_SetMeanDistanceModeToRMS(cast(void*)swigCPtr);
  }

  public void SetMeanDistanceModeToAbsoluteValue() {
    vtkd_im.vtkIterativeClosestPointTransform_SetMeanDistanceModeToAbsoluteValue(cast(void*)swigCPtr);
  }

  public string GetMeanDistanceModeAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkIterativeClosestPointTransform_GetMeanDistanceModeAsString(cast(void*)swigCPtr));
    return ret;
  }

  public void SetMaximumMeanDistance(double _arg) {
    vtkd_im.vtkIterativeClosestPointTransform_SetMaximumMeanDistance(cast(void*)swigCPtr, _arg);
  }

  public double GetMaximumMeanDistance() {
    auto ret = vtkd_im.vtkIterativeClosestPointTransform_GetMaximumMeanDistance(cast(void*)swigCPtr);
    return ret;
  }

  public double GetMeanDistance() {
    auto ret = vtkd_im.vtkIterativeClosestPointTransform_GetMeanDistance(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMaximumNumberOfLandmarks(int _arg) {
    vtkd_im.vtkIterativeClosestPointTransform_SetMaximumNumberOfLandmarks(cast(void*)swigCPtr, _arg);
  }

  public int GetMaximumNumberOfLandmarks() {
    auto ret = vtkd_im.vtkIterativeClosestPointTransform_GetMaximumNumberOfLandmarks(cast(void*)swigCPtr);
    return ret;
  }

  public void SetStartByMatchingCentroids(int _arg) {
    vtkd_im.vtkIterativeClosestPointTransform_SetStartByMatchingCentroids(cast(void*)swigCPtr, _arg);
  }

  public int GetStartByMatchingCentroids() {
    auto ret = vtkd_im.vtkIterativeClosestPointTransform_GetStartByMatchingCentroids(cast(void*)swigCPtr);
    return ret;
  }

  public void StartByMatchingCentroidsOn() {
    vtkd_im.vtkIterativeClosestPointTransform_StartByMatchingCentroidsOn(cast(void*)swigCPtr);
  }

  public void StartByMatchingCentroidsOff() {
    vtkd_im.vtkIterativeClosestPointTransform_StartByMatchingCentroidsOff(cast(void*)swigCPtr);
  }

  public vtkLandmarkTransform.vtkLandmarkTransform GetLandmarkTransform() {
    void* cPtr = vtkd_im.vtkIterativeClosestPointTransform_GetLandmarkTransform(cast(void*)swigCPtr);
    vtkLandmarkTransform.vtkLandmarkTransform ret = (cPtr is null) ? null : new vtkLandmarkTransform.vtkLandmarkTransform(cPtr, false);
    return ret;
  }
}
