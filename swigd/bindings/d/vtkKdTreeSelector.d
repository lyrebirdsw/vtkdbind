/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkKdTreeSelector;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkKdTree;
static import SWIGTYPE_p_double;
static import vtkSelectionAlgorithm;

class vtkKdTreeSelector : vtkSelectionAlgorithm.vtkSelectionAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkKdTreeSelector_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkKdTreeSelector obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkKdTreeSelector New() {
    void* cPtr = vtkd_im.vtkKdTreeSelector_New();
    vtkKdTreeSelector ret = (cPtr is null) ? null : new vtkKdTreeSelector(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkKdTreeSelector_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkKdTreeSelector SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkKdTreeSelector_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkKdTreeSelector ret = (cPtr is null) ? null : new vtkKdTreeSelector(cPtr, false);
    return ret;
  }

  public vtkKdTreeSelector NewInstance() const {
    void* cPtr = vtkd_im.vtkKdTreeSelector_NewInstance(cast(void*)swigCPtr);
    vtkKdTreeSelector ret = (cPtr is null) ? null : new vtkKdTreeSelector(cPtr, false);
    return ret;
  }

  alias vtkSelectionAlgorithm.vtkSelectionAlgorithm.NewInstance NewInstance;

  public void SetKdTree(vtkKdTree.vtkKdTree tree) {
    vtkd_im.vtkKdTreeSelector_SetKdTree(cast(void*)swigCPtr, vtkKdTree.vtkKdTree.swigGetCPtr(tree));
  }

  public vtkKdTree.vtkKdTree GetKdTree() {
    void* cPtr = vtkd_im.vtkKdTreeSelector_GetKdTree(cast(void*)swigCPtr);
    vtkKdTree.vtkKdTree ret = (cPtr is null) ? null : new vtkKdTree.vtkKdTree(cPtr, false);
    return ret;
  }

  public void SetSelectionBounds(double _arg1, double _arg2, double _arg3, double _arg4, double _arg5, double _arg6) {
    vtkd_im.vtkKdTreeSelector_SetSelectionBounds__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
  }

  public void SetSelectionBounds(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkKdTreeSelector_SetSelectionBounds__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetSelectionBounds() {
    auto ret = cast(double*)vtkd_im.vtkKdTreeSelector_GetSelectionBounds__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetSelectionBounds(double* _arg1, double* _arg2, double* _arg3, double* _arg4, double* _arg5, double* _arg6) {
    vtkd_im.vtkKdTreeSelector_GetSelectionBounds__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3, cast(void*)_arg4, cast(void*)_arg5, cast(void*)_arg6);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetSelectionBounds(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkKdTreeSelector_GetSelectionBounds__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public void SetSelectionFieldName(string _arg) {
    vtkd_im.vtkKdTreeSelector_SetSelectionFieldName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetSelectionFieldName() {
    string ret = std.conv.to!string(vtkd_im.vtkKdTreeSelector_GetSelectionFieldName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetSelectionAttribute(int _arg) {
    vtkd_im.vtkKdTreeSelector_SetSelectionAttribute(cast(void*)swigCPtr, _arg);
  }

  public int GetSelectionAttribute() {
    auto ret = vtkd_im.vtkKdTreeSelector_GetSelectionAttribute(cast(void*)swigCPtr);
    return ret;
  }

  public void SetSingleSelection(bool _arg) {
    vtkd_im.vtkKdTreeSelector_SetSingleSelection(cast(void*)swigCPtr, _arg);
  }

  public bool GetSingleSelection() {
    bool ret = vtkd_im.vtkKdTreeSelector_GetSingleSelection(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SingleSelectionOn() {
    vtkd_im.vtkKdTreeSelector_SingleSelectionOn(cast(void*)swigCPtr);
  }

  public void SingleSelectionOff() {
    vtkd_im.vtkKdTreeSelector_SingleSelectionOff(cast(void*)swigCPtr);
  }

  public void SetSingleSelectionThreshold(double _arg) {
    vtkd_im.vtkKdTreeSelector_SetSingleSelectionThreshold(cast(void*)swigCPtr, _arg);
  }

  public double GetSingleSelectionThreshold() {
    auto ret = vtkd_im.vtkKdTreeSelector_GetSingleSelectionThreshold(cast(void*)swigCPtr);
    return ret;
  }
}
