/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkCursor2D;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkPolyDataAlgorithm;

class vtkCursor2D : vtkPolyDataAlgorithm.vtkPolyDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkCursor2D_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkCursor2D obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkCursor2D_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkCursor2D SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkCursor2D_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkCursor2D ret = (cPtr is null) ? null : new vtkCursor2D(cPtr, false);
    return ret;
  }

  public vtkCursor2D NewInstance() const {
    void* cPtr = vtkd_im.vtkCursor2D_NewInstance(cast(void*)swigCPtr);
    vtkCursor2D ret = (cPtr is null) ? null : new vtkCursor2D(cPtr, false);
    return ret;
  }

  alias vtkPolyDataAlgorithm.vtkPolyDataAlgorithm.NewInstance NewInstance;

  public static vtkCursor2D New() {
    void* cPtr = vtkd_im.vtkCursor2D_New();
    vtkCursor2D ret = (cPtr is null) ? null : new vtkCursor2D(cPtr, false);
    return ret;
  }

  public void SetModelBounds(double xmin, double xmax, double ymin, double ymax, double zmin, double zmax) {
    vtkd_im.vtkCursor2D_SetModelBounds__SWIG_0(cast(void*)swigCPtr, xmin, xmax, ymin, ymax, zmin, zmax);
  }

  public void SetModelBounds(SWIGTYPE_p_double.SWIGTYPE_p_double bounds) {
    vtkd_im.vtkCursor2D_SetModelBounds__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
  }

  public double* GetModelBounds() {
    auto ret = cast(double*)vtkd_im.vtkCursor2D_GetModelBounds__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetModelBounds(SWIGTYPE_p_double.SWIGTYPE_p_double data) {
    vtkd_im.vtkCursor2D_GetModelBounds__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(data));
  }

  public void SetFocalPoint(SWIGTYPE_p_double.SWIGTYPE_p_double x) {
    vtkd_im.vtkCursor2D_SetFocalPoint__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x));
  }

  public void SetFocalPoint(double x, double y, double z) {
    vtkd_im.vtkCursor2D_SetFocalPoint__SWIG_1(cast(void*)swigCPtr, x, y, z);
  }

  public double* GetFocalPoint() {
    auto ret = cast(double*)vtkd_im.vtkCursor2D_GetFocalPoint__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetFocalPoint(SWIGTYPE_p_double.SWIGTYPE_p_double data) {
    vtkd_im.vtkCursor2D_GetFocalPoint__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(data));
  }

  public void SetOutline(int _arg) {
    vtkd_im.vtkCursor2D_SetOutline(cast(void*)swigCPtr, _arg);
  }

  public int GetOutline() {
    auto ret = vtkd_im.vtkCursor2D_GetOutline(cast(void*)swigCPtr);
    return ret;
  }

  public void OutlineOn() {
    vtkd_im.vtkCursor2D_OutlineOn(cast(void*)swigCPtr);
  }

  public void OutlineOff() {
    vtkd_im.vtkCursor2D_OutlineOff(cast(void*)swigCPtr);
  }

  public void SetAxes(int _arg) {
    vtkd_im.vtkCursor2D_SetAxes(cast(void*)swigCPtr, _arg);
  }

  public int GetAxes() {
    auto ret = vtkd_im.vtkCursor2D_GetAxes(cast(void*)swigCPtr);
    return ret;
  }

  public void AxesOn() {
    vtkd_im.vtkCursor2D_AxesOn(cast(void*)swigCPtr);
  }

  public void AxesOff() {
    vtkd_im.vtkCursor2D_AxesOff(cast(void*)swigCPtr);
  }

  public void SetRadius(double _arg) {
    vtkd_im.vtkCursor2D_SetRadius(cast(void*)swigCPtr, _arg);
  }

  public double GetRadiusMinValue() {
    auto ret = vtkd_im.vtkCursor2D_GetRadiusMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetRadiusMaxValue() {
    auto ret = vtkd_im.vtkCursor2D_GetRadiusMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetRadius() {
    auto ret = vtkd_im.vtkCursor2D_GetRadius(cast(void*)swigCPtr);
    return ret;
  }

  public void SetPoint(int _arg) {
    vtkd_im.vtkCursor2D_SetPoint(cast(void*)swigCPtr, _arg);
  }

  public int GetPoint() {
    auto ret = vtkd_im.vtkCursor2D_GetPoint(cast(void*)swigCPtr);
    return ret;
  }

  public void PointOn() {
    vtkd_im.vtkCursor2D_PointOn(cast(void*)swigCPtr);
  }

  public void PointOff() {
    vtkd_im.vtkCursor2D_PointOff(cast(void*)swigCPtr);
  }

  public void SetTranslationMode(int _arg) {
    vtkd_im.vtkCursor2D_SetTranslationMode(cast(void*)swigCPtr, _arg);
  }

  public int GetTranslationMode() {
    auto ret = vtkd_im.vtkCursor2D_GetTranslationMode(cast(void*)swigCPtr);
    return ret;
  }

  public void TranslationModeOn() {
    vtkd_im.vtkCursor2D_TranslationModeOn(cast(void*)swigCPtr);
  }

  public void TranslationModeOff() {
    vtkd_im.vtkCursor2D_TranslationModeOff(cast(void*)swigCPtr);
  }

  public void SetWrap(int _arg) {
    vtkd_im.vtkCursor2D_SetWrap(cast(void*)swigCPtr, _arg);
  }

  public int GetWrap() {
    auto ret = vtkd_im.vtkCursor2D_GetWrap(cast(void*)swigCPtr);
    return ret;
  }

  public void WrapOn() {
    vtkd_im.vtkCursor2D_WrapOn(cast(void*)swigCPtr);
  }

  public void WrapOff() {
    vtkd_im.vtkCursor2D_WrapOff(cast(void*)swigCPtr);
  }

  public void AllOn() {
    vtkd_im.vtkCursor2D_AllOn(cast(void*)swigCPtr);
  }

  public void AllOff() {
    vtkd_im.vtkCursor2D_AllOff(cast(void*)swigCPtr);
  }
}
