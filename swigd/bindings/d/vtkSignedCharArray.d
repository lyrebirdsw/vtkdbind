/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkSignedCharArray;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_ostream;
static import vtkIndent;

class vtkSignedCharArray {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(vtkSignedCharArray obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
      }
    }
  }

  public static vtkSignedCharArray New() {
    void* cPtr = vtkd_im.vtkSignedCharArray_New();
    vtkSignedCharArray ret = (cPtr is null) ? null : new vtkSignedCharArray(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkSignedCharArray_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public int IsA(string type) {
    auto ret = vtkd_im.vtkSignedCharArray_IsA(cast(void*)swigCPtr, (type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkSignedCharArray SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkSignedCharArray_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkSignedCharArray ret = (cPtr is null) ? null : new vtkSignedCharArray(cPtr, false);
    return ret;
  }

  public vtkSignedCharArray NewInstance() const {
    void* cPtr = vtkd_im.vtkSignedCharArray_NewInstance(cast(void*)swigCPtr);
    vtkSignedCharArray ret = (cPtr is null) ? null : new vtkSignedCharArray(cPtr, false);
    return ret;
  }

  public void PrintSelf(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream os, vtkIndent.vtkIndent indent) {
    vtkd_im.vtkSignedCharArray_PrintSelf(cast(void*)swigCPtr, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(os), vtkIndent.vtkIndent.swigGetCPtr(indent));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public int GetDataType() {
    auto ret = vtkd_im.vtkSignedCharArray_GetDataType(cast(void*)swigCPtr);
    return ret;
  }

  public void GetTupleValue(long i, byte* tuple) {
    vtkd_im.vtkSignedCharArray_GetTupleValue(cast(void*)swigCPtr, i, cast(void*)tuple);
  }

  public void SetTupleValue(long i, byte* tuple) {
    vtkd_im.vtkSignedCharArray_SetTupleValue(cast(void*)swigCPtr, i, cast(void*)tuple);
  }

  public void InsertTupleValue(long i, byte* tuple) {
    vtkd_im.vtkSignedCharArray_InsertTupleValue(cast(void*)swigCPtr, i, cast(void*)tuple);
  }

  public long InsertNextTupleValue(byte* tuple) {
    auto ret = vtkd_im.vtkSignedCharArray_InsertNextTupleValue(cast(void*)swigCPtr, cast(void*)tuple);
    return ret;
  }

  public byte GetValue(long id) {
    auto ret = vtkd_im.vtkSignedCharArray_GetValue(cast(void*)swigCPtr, id);
    return ret;
  }

  public void SetValue(long id, byte value) {
    vtkd_im.vtkSignedCharArray_SetValue(cast(void*)swigCPtr, id, value);
  }

  public void SetNumberOfValues(long number) {
    vtkd_im.vtkSignedCharArray_SetNumberOfValues(cast(void*)swigCPtr, number);
  }

  public void InsertValue(long id, byte f) {
    vtkd_im.vtkSignedCharArray_InsertValue(cast(void*)swigCPtr, id, f);
  }

  public long InsertNextValue(byte f) {
    auto ret = vtkd_im.vtkSignedCharArray_InsertNextValue(cast(void*)swigCPtr, f);
    return ret;
  }

  public byte* GetValueRange(int comp) {
    auto ret = cast(byte*)vtkd_im.vtkSignedCharArray_GetValueRange__SWIG_0(cast(void*)swigCPtr, comp);
    return ret;
  }

  public byte* GetValueRange() {
    auto ret = cast(byte*)vtkd_im.vtkSignedCharArray_GetValueRange__SWIG_1(cast(void*)swigCPtr);
    return ret;
  }

  public static byte GetDataTypeValueMin() {
    auto ret = vtkd_im.vtkSignedCharArray_GetDataTypeValueMin();
    return ret;
  }

  public static byte GetDataTypeValueMax() {
    auto ret = vtkd_im.vtkSignedCharArray_GetDataTypeValueMax();
    return ret;
  }

  public byte* WritePointer(long id, long number) {
    auto ret = cast(byte*)vtkd_im.vtkSignedCharArray_WritePointer(cast(void*)swigCPtr, id, number);
    return ret;
  }

  public byte* GetPointer(long id) {
    auto ret = cast(byte*)vtkd_im.vtkSignedCharArray_GetPointer(cast(void*)swigCPtr, id);
    return ret;
  }

  public void SetArray(byte* array, long size, int save) {
    vtkd_im.vtkSignedCharArray_SetArray__SWIG_0(cast(void*)swigCPtr, cast(void*)array, size, save);
  }

  public void SetArray(byte* array, long size, int save, int deleteMethod) {
    vtkd_im.vtkSignedCharArray_SetArray__SWIG_1(cast(void*)swigCPtr, cast(void*)array, size, save, deleteMethod);
  }
}
