/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkCellPicker;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkAbstractCellLocator;
static import SWIGTYPE_p_double;
static import SWIGTYPE_p_int;
static import vtkTexture;
static import vtkPicker;

class vtkCellPicker : vtkPicker.vtkPicker {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkCellPicker_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkCellPicker obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkCellPicker New() {
    void* cPtr = vtkd_im.vtkCellPicker_New();
    vtkCellPicker ret = (cPtr is null) ? null : new vtkCellPicker(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkCellPicker_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkCellPicker SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkCellPicker_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkCellPicker ret = (cPtr is null) ? null : new vtkCellPicker(cPtr, false);
    return ret;
  }

  public vtkCellPicker NewInstance() const {
    void* cPtr = vtkd_im.vtkCellPicker_NewInstance(cast(void*)swigCPtr);
    vtkCellPicker ret = (cPtr is null) ? null : new vtkCellPicker(cPtr, false);
    return ret;
  }

  alias vtkPicker.vtkPicker.NewInstance NewInstance;

  public void AddLocator(vtkAbstractCellLocator.vtkAbstractCellLocator locator) {
    vtkd_im.vtkCellPicker_AddLocator(cast(void*)swigCPtr, vtkAbstractCellLocator.vtkAbstractCellLocator.swigGetCPtr(locator));
  }

  public void RemoveLocator(vtkAbstractCellLocator.vtkAbstractCellLocator locator) {
    vtkd_im.vtkCellPicker_RemoveLocator(cast(void*)swigCPtr, vtkAbstractCellLocator.vtkAbstractCellLocator.swigGetCPtr(locator));
  }

  public void RemoveAllLocators() {
    vtkd_im.vtkCellPicker_RemoveAllLocators(cast(void*)swigCPtr);
  }

  public void SetVolumeOpacityIsovalue(double _arg) {
    vtkd_im.vtkCellPicker_SetVolumeOpacityIsovalue(cast(void*)swigCPtr, _arg);
  }

  public double GetVolumeOpacityIsovalue() {
    auto ret = vtkd_im.vtkCellPicker_GetVolumeOpacityIsovalue(cast(void*)swigCPtr);
    return ret;
  }

  public void SetUseVolumeGradientOpacity(int _arg) {
    vtkd_im.vtkCellPicker_SetUseVolumeGradientOpacity(cast(void*)swigCPtr, _arg);
  }

  public void UseVolumeGradientOpacityOn() {
    vtkd_im.vtkCellPicker_UseVolumeGradientOpacityOn(cast(void*)swigCPtr);
  }

  public void UseVolumeGradientOpacityOff() {
    vtkd_im.vtkCellPicker_UseVolumeGradientOpacityOff(cast(void*)swigCPtr);
  }

  public int GetUseVolumeGradientOpacity() {
    auto ret = vtkd_im.vtkCellPicker_GetUseVolumeGradientOpacity(cast(void*)swigCPtr);
    return ret;
  }

  public void SetPickClippingPlanes(int _arg) {
    vtkd_im.vtkCellPicker_SetPickClippingPlanes(cast(void*)swigCPtr, _arg);
  }

  public void PickClippingPlanesOn() {
    vtkd_im.vtkCellPicker_PickClippingPlanesOn(cast(void*)swigCPtr);
  }

  public void PickClippingPlanesOff() {
    vtkd_im.vtkCellPicker_PickClippingPlanesOff(cast(void*)swigCPtr);
  }

  public int GetPickClippingPlanes() {
    auto ret = vtkd_im.vtkCellPicker_GetPickClippingPlanes(cast(void*)swigCPtr);
    return ret;
  }

  public int GetClippingPlaneId() {
    auto ret = vtkd_im.vtkCellPicker_GetClippingPlaneId(cast(void*)swigCPtr);
    return ret;
  }

  public double* GetPickNormal() {
    auto ret = cast(double*)vtkd_im.vtkCellPicker_GetPickNormal__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetPickNormal(SWIGTYPE_p_double.SWIGTYPE_p_double data) {
    vtkd_im.vtkCellPicker_GetPickNormal__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(data));
  }

  public double* GetMapperNormal() {
    auto ret = cast(double*)vtkd_im.vtkCellPicker_GetMapperNormal__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetMapperNormal(double* _arg1, double* _arg2, double* _arg3) {
    vtkd_im.vtkCellPicker_GetMapperNormal__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetMapperNormal(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkCellPicker_GetMapperNormal__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public int* GetPointIJK() {
    auto ret = cast(int*)vtkd_im.vtkCellPicker_GetPointIJK__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetPointIJK(int* _arg1, int* _arg2, int* _arg3) {
    vtkd_im.vtkCellPicker_GetPointIJK__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetPointIJK(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkCellPicker_GetPointIJK__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public int* GetCellIJK() {
    auto ret = cast(int*)vtkd_im.vtkCellPicker_GetCellIJK__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetCellIJK(int* _arg1, int* _arg2, int* _arg3) {
    vtkd_im.vtkCellPicker_GetCellIJK__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetCellIJK(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkCellPicker_GetCellIJK__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public long GetPointId() {
    auto ret = vtkd_im.vtkCellPicker_GetPointId(cast(void*)swigCPtr);
    return ret;
  }

  public long GetCellId() {
    auto ret = vtkd_im.vtkCellPicker_GetCellId(cast(void*)swigCPtr);
    return ret;
  }

  public int GetSubId() {
    auto ret = vtkd_im.vtkCellPicker_GetSubId(cast(void*)swigCPtr);
    return ret;
  }

  public double* GetPCoords() {
    auto ret = cast(double*)vtkd_im.vtkCellPicker_GetPCoords__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetPCoords(double* _arg1, double* _arg2, double* _arg3) {
    vtkd_im.vtkCellPicker_GetPCoords__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetPCoords(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkCellPicker_GetPCoords__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public vtkTexture.vtkTexture GetTexture() {
    void* cPtr = vtkd_im.vtkCellPicker_GetTexture(cast(void*)swigCPtr);
    vtkTexture.vtkTexture ret = (cPtr is null) ? null : new vtkTexture.vtkTexture(cPtr, false);
    return ret;
  }

  public void SetPickTextureData(int _arg) {
    vtkd_im.vtkCellPicker_SetPickTextureData(cast(void*)swigCPtr, _arg);
  }

  public void PickTextureDataOn() {
    vtkd_im.vtkCellPicker_PickTextureDataOn(cast(void*)swigCPtr);
  }

  public void PickTextureDataOff() {
    vtkd_im.vtkCellPicker_PickTextureDataOff(cast(void*)swigCPtr);
  }

  public int GetPickTextureData() {
    auto ret = vtkd_im.vtkCellPicker_GetPickTextureData(cast(void*)swigCPtr);
    return ret;
  }
}
