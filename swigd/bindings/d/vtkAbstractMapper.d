/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkAbstractMapper;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkWindow;
static import vtkPlane;
static import vtkPlaneCollection;
static import vtkPlanes;
static import vtkDataArray;
static import vtkDataSet;
static import vtkAlgorithm;

class vtkAbstractMapper : vtkAlgorithm.vtkAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkAbstractMapper_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkAbstractMapper obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkAbstractMapper_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkAbstractMapper SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkAbstractMapper_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkAbstractMapper ret = (cPtr is null) ? null : new vtkAbstractMapper(cPtr, false);
    return ret;
  }

  public vtkAbstractMapper NewInstance() const {
    void* cPtr = vtkd_im.vtkAbstractMapper_NewInstance(cast(void*)swigCPtr);
    vtkAbstractMapper ret = (cPtr is null) ? null : new vtkAbstractMapper(cPtr, false);
    return ret;
  }

  alias vtkAlgorithm.vtkAlgorithm.NewInstance NewInstance;

  public void ReleaseGraphicsResources(vtkWindow.vtkWindow arg0) {
    vtkd_im.vtkAbstractMapper_ReleaseGraphicsResources(cast(void*)swigCPtr, vtkWindow.vtkWindow.swigGetCPtr(arg0));
  }

  public double GetTimeToDraw() {
    auto ret = vtkd_im.vtkAbstractMapper_GetTimeToDraw(cast(void*)swigCPtr);
    return ret;
  }

  public void AddClippingPlane(vtkPlane.vtkPlane plane) {
    vtkd_im.vtkAbstractMapper_AddClippingPlane(cast(void*)swigCPtr, vtkPlane.vtkPlane.swigGetCPtr(plane));
  }

  public void RemoveClippingPlane(vtkPlane.vtkPlane plane) {
    vtkd_im.vtkAbstractMapper_RemoveClippingPlane(cast(void*)swigCPtr, vtkPlane.vtkPlane.swigGetCPtr(plane));
  }

  public void RemoveAllClippingPlanes() {
    vtkd_im.vtkAbstractMapper_RemoveAllClippingPlanes(cast(void*)swigCPtr);
  }

  public void SetClippingPlanes(vtkPlaneCollection.vtkPlaneCollection arg0) {
    vtkd_im.vtkAbstractMapper_SetClippingPlanes__SWIG_0(cast(void*)swigCPtr, vtkPlaneCollection.vtkPlaneCollection.swigGetCPtr(arg0));
  }

  public vtkPlaneCollection.vtkPlaneCollection GetClippingPlanes() {
    void* cPtr = vtkd_im.vtkAbstractMapper_GetClippingPlanes(cast(void*)swigCPtr);
    vtkPlaneCollection.vtkPlaneCollection ret = (cPtr is null) ? null : new vtkPlaneCollection.vtkPlaneCollection(cPtr, false);
    return ret;
  }

  public void SetClippingPlanes(vtkPlanes.vtkPlanes planes) {
    vtkd_im.vtkAbstractMapper_SetClippingPlanes__SWIG_1(cast(void*)swigCPtr, vtkPlanes.vtkPlanes.swigGetCPtr(planes));
  }

  public void ShallowCopy(vtkAbstractMapper m) {
    vtkd_im.vtkAbstractMapper_ShallowCopy(cast(void*)swigCPtr, vtkAbstractMapper.swigGetCPtr(m));
  }

  public static vtkDataArray.vtkDataArray GetScalars(vtkDataSet.vtkDataSet input, int scalarMode, int arrayAccessMode, int arrayId, string arrayName, int* cellFlag) {
    void* cPtr = vtkd_im.vtkAbstractMapper_GetScalars(vtkDataSet.vtkDataSet.swigGetCPtr(input), scalarMode, arrayAccessMode, arrayId, (arrayName ? std.string.toStringz(arrayName) : null), cast(void*)cellFlag);
    vtkDataArray.vtkDataArray ret = (cPtr is null) ? null : new vtkDataArray.vtkDataArray(cPtr, false);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }
}
