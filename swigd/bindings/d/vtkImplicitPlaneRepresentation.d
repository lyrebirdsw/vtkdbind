/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkImplicitPlaneRepresentation;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkPolyData;
static import vtkPolyDataAlgorithm;
static import vtkPlane;
static import vtkProperty;
static import vtkLookupTable;
static import vtkWidgetRepresentation;

class vtkImplicitPlaneRepresentation : vtkWidgetRepresentation.vtkWidgetRepresentation {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkImplicitPlaneRepresentation_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkImplicitPlaneRepresentation obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkImplicitPlaneRepresentation New() {
    void* cPtr = vtkd_im.vtkImplicitPlaneRepresentation_New();
    vtkImplicitPlaneRepresentation ret = (cPtr is null) ? null : new vtkImplicitPlaneRepresentation(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkImplicitPlaneRepresentation_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkImplicitPlaneRepresentation SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkImplicitPlaneRepresentation_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkImplicitPlaneRepresentation ret = (cPtr is null) ? null : new vtkImplicitPlaneRepresentation(cPtr, false);
    return ret;
  }

  public vtkImplicitPlaneRepresentation NewInstance() const {
    void* cPtr = vtkd_im.vtkImplicitPlaneRepresentation_NewInstance(cast(void*)swigCPtr);
    vtkImplicitPlaneRepresentation ret = (cPtr is null) ? null : new vtkImplicitPlaneRepresentation(cPtr, false);
    return ret;
  }

  alias vtkWidgetRepresentation.vtkWidgetRepresentation.NewInstance NewInstance;

  public void SetOrigin(double x, double y, double z) {
    vtkd_im.vtkImplicitPlaneRepresentation_SetOrigin__SWIG_0(cast(void*)swigCPtr, x, y, z);
  }

  public void SetOrigin(SWIGTYPE_p_double.SWIGTYPE_p_double x) {
    vtkd_im.vtkImplicitPlaneRepresentation_SetOrigin__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x));
  }

  public double* GetOrigin() {
    auto ret = cast(double*)vtkd_im.vtkImplicitPlaneRepresentation_GetOrigin__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetOrigin(SWIGTYPE_p_double.SWIGTYPE_p_double xyz) {
    vtkd_im.vtkImplicitPlaneRepresentation_GetOrigin__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(xyz));
  }

  public void SetNormal(double x, double y, double z) {
    vtkd_im.vtkImplicitPlaneRepresentation_SetNormal__SWIG_0(cast(void*)swigCPtr, x, y, z);
  }

  public void SetNormal(SWIGTYPE_p_double.SWIGTYPE_p_double x) {
    vtkd_im.vtkImplicitPlaneRepresentation_SetNormal__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x));
  }

  public void SetNormalToCamera() {
    vtkd_im.vtkImplicitPlaneRepresentation_SetNormalToCamera(cast(void*)swigCPtr);
  }

  public double* GetNormal() {
    auto ret = cast(double*)vtkd_im.vtkImplicitPlaneRepresentation_GetNormal__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetNormal(SWIGTYPE_p_double.SWIGTYPE_p_double xyz) {
    vtkd_im.vtkImplicitPlaneRepresentation_GetNormal__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(xyz));
  }

  public void SetNormalToXAxis(int arg0) {
    vtkd_im.vtkImplicitPlaneRepresentation_SetNormalToXAxis(cast(void*)swigCPtr, arg0);
  }

  public int GetNormalToXAxis() {
    auto ret = vtkd_im.vtkImplicitPlaneRepresentation_GetNormalToXAxis(cast(void*)swigCPtr);
    return ret;
  }

  public void NormalToXAxisOn() {
    vtkd_im.vtkImplicitPlaneRepresentation_NormalToXAxisOn(cast(void*)swigCPtr);
  }

  public void NormalToXAxisOff() {
    vtkd_im.vtkImplicitPlaneRepresentation_NormalToXAxisOff(cast(void*)swigCPtr);
  }

  public void SetNormalToYAxis(int arg0) {
    vtkd_im.vtkImplicitPlaneRepresentation_SetNormalToYAxis(cast(void*)swigCPtr, arg0);
  }

  public int GetNormalToYAxis() {
    auto ret = vtkd_im.vtkImplicitPlaneRepresentation_GetNormalToYAxis(cast(void*)swigCPtr);
    return ret;
  }

  public void NormalToYAxisOn() {
    vtkd_im.vtkImplicitPlaneRepresentation_NormalToYAxisOn(cast(void*)swigCPtr);
  }

  public void NormalToYAxisOff() {
    vtkd_im.vtkImplicitPlaneRepresentation_NormalToYAxisOff(cast(void*)swigCPtr);
  }

  public void SetNormalToZAxis(int arg0) {
    vtkd_im.vtkImplicitPlaneRepresentation_SetNormalToZAxis(cast(void*)swigCPtr, arg0);
  }

  public int GetNormalToZAxis() {
    auto ret = vtkd_im.vtkImplicitPlaneRepresentation_GetNormalToZAxis(cast(void*)swigCPtr);
    return ret;
  }

  public void NormalToZAxisOn() {
    vtkd_im.vtkImplicitPlaneRepresentation_NormalToZAxisOn(cast(void*)swigCPtr);
  }

  public void NormalToZAxisOff() {
    vtkd_im.vtkImplicitPlaneRepresentation_NormalToZAxisOff(cast(void*)swigCPtr);
  }

  public void SetLockNormalToCamera(int arg0) {
    vtkd_im.vtkImplicitPlaneRepresentation_SetLockNormalToCamera(cast(void*)swigCPtr, arg0);
  }

  public int GetLockNormalToCamera() {
    auto ret = vtkd_im.vtkImplicitPlaneRepresentation_GetLockNormalToCamera(cast(void*)swigCPtr);
    return ret;
  }

  public void LockNormalToCameraOn() {
    vtkd_im.vtkImplicitPlaneRepresentation_LockNormalToCameraOn(cast(void*)swigCPtr);
  }

  public void LockNormalToCameraOff() {
    vtkd_im.vtkImplicitPlaneRepresentation_LockNormalToCameraOff(cast(void*)swigCPtr);
  }

  public void SetTubing(int _arg) {
    vtkd_im.vtkImplicitPlaneRepresentation_SetTubing(cast(void*)swigCPtr, _arg);
  }

  public int GetTubing() {
    auto ret = vtkd_im.vtkImplicitPlaneRepresentation_GetTubing(cast(void*)swigCPtr);
    return ret;
  }

  public void TubingOn() {
    vtkd_im.vtkImplicitPlaneRepresentation_TubingOn(cast(void*)swigCPtr);
  }

  public void TubingOff() {
    vtkd_im.vtkImplicitPlaneRepresentation_TubingOff(cast(void*)swigCPtr);
  }

  public void SetDrawPlane(int plane) {
    vtkd_im.vtkImplicitPlaneRepresentation_SetDrawPlane(cast(void*)swigCPtr, plane);
  }

  public int GetDrawPlane() {
    auto ret = vtkd_im.vtkImplicitPlaneRepresentation_GetDrawPlane(cast(void*)swigCPtr);
    return ret;
  }

  public void DrawPlaneOn() {
    vtkd_im.vtkImplicitPlaneRepresentation_DrawPlaneOn(cast(void*)swigCPtr);
  }

  public void DrawPlaneOff() {
    vtkd_im.vtkImplicitPlaneRepresentation_DrawPlaneOff(cast(void*)swigCPtr);
  }

  public void SetOutlineTranslation(int _arg) {
    vtkd_im.vtkImplicitPlaneRepresentation_SetOutlineTranslation(cast(void*)swigCPtr, _arg);
  }

  public int GetOutlineTranslation() {
    auto ret = vtkd_im.vtkImplicitPlaneRepresentation_GetOutlineTranslation(cast(void*)swigCPtr);
    return ret;
  }

  public void OutlineTranslationOn() {
    vtkd_im.vtkImplicitPlaneRepresentation_OutlineTranslationOn(cast(void*)swigCPtr);
  }

  public void OutlineTranslationOff() {
    vtkd_im.vtkImplicitPlaneRepresentation_OutlineTranslationOff(cast(void*)swigCPtr);
  }

  public void SetOutsideBounds(int _arg) {
    vtkd_im.vtkImplicitPlaneRepresentation_SetOutsideBounds(cast(void*)swigCPtr, _arg);
  }

  public int GetOutsideBounds() {
    auto ret = vtkd_im.vtkImplicitPlaneRepresentation_GetOutsideBounds(cast(void*)swigCPtr);
    return ret;
  }

  public void OutsideBoundsOn() {
    vtkd_im.vtkImplicitPlaneRepresentation_OutsideBoundsOn(cast(void*)swigCPtr);
  }

  public void OutsideBoundsOff() {
    vtkd_im.vtkImplicitPlaneRepresentation_OutsideBoundsOff(cast(void*)swigCPtr);
  }

  public void SetScaleEnabled(int _arg) {
    vtkd_im.vtkImplicitPlaneRepresentation_SetScaleEnabled(cast(void*)swigCPtr, _arg);
  }

  public int GetScaleEnabled() {
    auto ret = vtkd_im.vtkImplicitPlaneRepresentation_GetScaleEnabled(cast(void*)swigCPtr);
    return ret;
  }

  public void ScaleEnabledOn() {
    vtkd_im.vtkImplicitPlaneRepresentation_ScaleEnabledOn(cast(void*)swigCPtr);
  }

  public void ScaleEnabledOff() {
    vtkd_im.vtkImplicitPlaneRepresentation_ScaleEnabledOff(cast(void*)swigCPtr);
  }

  public void GetPolyData(vtkPolyData.vtkPolyData pd) {
    vtkd_im.vtkImplicitPlaneRepresentation_GetPolyData(cast(void*)swigCPtr, vtkPolyData.vtkPolyData.swigGetCPtr(pd));
  }

  public vtkPolyDataAlgorithm.vtkPolyDataAlgorithm GetPolyDataAlgorithm() {
    void* cPtr = vtkd_im.vtkImplicitPlaneRepresentation_GetPolyDataAlgorithm(cast(void*)swigCPtr);
    vtkPolyDataAlgorithm.vtkPolyDataAlgorithm ret = (cPtr is null) ? null : new vtkPolyDataAlgorithm.vtkPolyDataAlgorithm(cPtr, false);
    return ret;
  }

  public void GetPlane(vtkPlane.vtkPlane plane) {
    vtkd_im.vtkImplicitPlaneRepresentation_GetPlane(cast(void*)swigCPtr, vtkPlane.vtkPlane.swigGetCPtr(plane));
  }

  public void UpdatePlacement() {
    vtkd_im.vtkImplicitPlaneRepresentation_UpdatePlacement(cast(void*)swigCPtr);
  }

  public vtkProperty.vtkProperty GetNormalProperty() {
    void* cPtr = vtkd_im.vtkImplicitPlaneRepresentation_GetNormalProperty(cast(void*)swigCPtr);
    vtkProperty.vtkProperty ret = (cPtr is null) ? null : new vtkProperty.vtkProperty(cPtr, false);
    return ret;
  }

  public vtkProperty.vtkProperty GetSelectedNormalProperty() {
    void* cPtr = vtkd_im.vtkImplicitPlaneRepresentation_GetSelectedNormalProperty(cast(void*)swigCPtr);
    vtkProperty.vtkProperty ret = (cPtr is null) ? null : new vtkProperty.vtkProperty(cPtr, false);
    return ret;
  }

  public vtkProperty.vtkProperty GetPlaneProperty() {
    void* cPtr = vtkd_im.vtkImplicitPlaneRepresentation_GetPlaneProperty(cast(void*)swigCPtr);
    vtkProperty.vtkProperty ret = (cPtr is null) ? null : new vtkProperty.vtkProperty(cPtr, false);
    return ret;
  }

  public vtkProperty.vtkProperty GetSelectedPlaneProperty() {
    void* cPtr = vtkd_im.vtkImplicitPlaneRepresentation_GetSelectedPlaneProperty(cast(void*)swigCPtr);
    vtkProperty.vtkProperty ret = (cPtr is null) ? null : new vtkProperty.vtkProperty(cPtr, false);
    return ret;
  }

  public vtkProperty.vtkProperty GetOutlineProperty() {
    void* cPtr = vtkd_im.vtkImplicitPlaneRepresentation_GetOutlineProperty(cast(void*)swigCPtr);
    vtkProperty.vtkProperty ret = (cPtr is null) ? null : new vtkProperty.vtkProperty(cPtr, false);
    return ret;
  }

  public vtkProperty.vtkProperty GetSelectedOutlineProperty() {
    void* cPtr = vtkd_im.vtkImplicitPlaneRepresentation_GetSelectedOutlineProperty(cast(void*)swigCPtr);
    vtkProperty.vtkProperty ret = (cPtr is null) ? null : new vtkProperty.vtkProperty(cPtr, false);
    return ret;
  }

  public vtkProperty.vtkProperty GetEdgesProperty() {
    void* cPtr = vtkd_im.vtkImplicitPlaneRepresentation_GetEdgesProperty(cast(void*)swigCPtr);
    vtkProperty.vtkProperty ret = (cPtr is null) ? null : new vtkProperty.vtkProperty(cPtr, false);
    return ret;
  }

  public void SetEdgeColor(vtkLookupTable.vtkLookupTable arg0) {
    vtkd_im.vtkImplicitPlaneRepresentation_SetEdgeColor__SWIG_0(cast(void*)swigCPtr, vtkLookupTable.vtkLookupTable.swigGetCPtr(arg0));
  }

  public void SetEdgeColor(double arg0, double arg1, double arg2) {
    vtkd_im.vtkImplicitPlaneRepresentation_SetEdgeColor__SWIG_1(cast(void*)swigCPtr, arg0, arg1, arg2);
  }

  public void SetEdgeColor(SWIGTYPE_p_double.SWIGTYPE_p_double x) {
    vtkd_im.vtkImplicitPlaneRepresentation_SetEdgeColor__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x));
  }

  public void SetBumpDistance(double _arg) {
    vtkd_im.vtkImplicitPlaneRepresentation_SetBumpDistance(cast(void*)swigCPtr, _arg);
  }

  public double GetBumpDistanceMinValue() {
    auto ret = vtkd_im.vtkImplicitPlaneRepresentation_GetBumpDistanceMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetBumpDistanceMaxValue() {
    auto ret = vtkd_im.vtkImplicitPlaneRepresentation_GetBumpDistanceMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetBumpDistance() {
    auto ret = vtkd_im.vtkImplicitPlaneRepresentation_GetBumpDistance(cast(void*)swigCPtr);
    return ret;
  }

  public void BumpPlane(int dir, double factor) {
    vtkd_im.vtkImplicitPlaneRepresentation_BumpPlane(cast(void*)swigCPtr, dir, factor);
  }

  public void PushPlane(double distance) {
    vtkd_im.vtkImplicitPlaneRepresentation_PushPlane(cast(void*)swigCPtr, distance);
  }

  public override int ComputeInteractionState(int X, int Y, int modify) {
    auto ret = vtkd_im.vtkImplicitPlaneRepresentation_ComputeInteractionState__SWIG_0(cast(void*)swigCPtr, X, Y, modify);
    return ret;
  }

  public override int ComputeInteractionState(int X, int Y) {
    auto ret = vtkd_im.vtkImplicitPlaneRepresentation_ComputeInteractionState__SWIG_1(cast(void*)swigCPtr, X, Y);
    return ret;
  }

  public void PlaceWidget(SWIGTYPE_p_double.SWIGTYPE_p_double bounds) {
    vtkd_im.vtkImplicitPlaneRepresentation_PlaceWidget(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
  }

  alias vtkWidgetRepresentation.vtkWidgetRepresentation.PlaceWidget PlaceWidget;

  public void SetInteractionState(int _arg) {
    vtkd_im.vtkImplicitPlaneRepresentation_SetInteractionState(cast(void*)swigCPtr, _arg);
  }

  public int GetInteractionStateMinValue() {
    auto ret = vtkd_im.vtkImplicitPlaneRepresentation_GetInteractionStateMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetInteractionStateMaxValue() {
    auto ret = vtkd_im.vtkImplicitPlaneRepresentation_GetInteractionStateMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public void SetRepresentationState(int arg0) {
    vtkd_im.vtkImplicitPlaneRepresentation_SetRepresentationState(cast(void*)swigCPtr, arg0);
  }

  public int GetRepresentationState() {
    auto ret = vtkd_im.vtkImplicitPlaneRepresentation_GetRepresentationState(cast(void*)swigCPtr);
    return ret;
  }
}
