/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkUnstructuredGrid;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkIdList;
static import vtkCell;
static import vtkGenericCell;
static import vtkUnsignedCharArray;
static import vtkIdTypeArray;
static import vtkCellLinks;
static import vtkCellArray;
static import vtkPointSet;

class vtkUnstructuredGrid : vtkPointSet.vtkPointSet {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkUnstructuredGrid_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkUnstructuredGrid obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkUnstructuredGrid New() {
    void* cPtr = vtkd_im.vtkUnstructuredGrid_New();
    vtkUnstructuredGrid ret = (cPtr is null) ? null : new vtkUnstructuredGrid(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkUnstructuredGrid_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkUnstructuredGrid SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkUnstructuredGrid_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkUnstructuredGrid ret = (cPtr is null) ? null : new vtkUnstructuredGrid(cPtr, false);
    return ret;
  }

  public vtkUnstructuredGrid NewInstance() const {
    void* cPtr = vtkd_im.vtkUnstructuredGrid_NewInstance(cast(void*)swigCPtr);
    vtkUnstructuredGrid ret = (cPtr is null) ? null : new vtkUnstructuredGrid(cPtr, false);
    return ret;
  }

  alias vtkPointSet.vtkPointSet.NewInstance NewInstance;

  public void Allocate(long numCells, int extSize) {
    vtkd_im.vtkUnstructuredGrid_Allocate__SWIG_0(cast(void*)swigCPtr, numCells, extSize);
  }

  public void Allocate(long numCells) {
    vtkd_im.vtkUnstructuredGrid_Allocate__SWIG_1(cast(void*)swigCPtr, numCells);
  }

  public void Allocate() {
    vtkd_im.vtkUnstructuredGrid_Allocate__SWIG_2(cast(void*)swigCPtr);
  }

  public long InsertNextCell(int type, long npts, long* ptIds) {
    auto ret = vtkd_im.vtkUnstructuredGrid_InsertNextCell__SWIG_0(cast(void*)swigCPtr, type, npts, cast(void*)ptIds);
    return ret;
  }

  public long InsertNextCell(int type, vtkIdList.vtkIdList ptIds) {
    auto ret = vtkd_im.vtkUnstructuredGrid_InsertNextCell__SWIG_1(cast(void*)swigCPtr, type, vtkIdList.vtkIdList.swigGetCPtr(ptIds));
    return ret;
  }

  public long InsertNextCell(int type, long npts, long* ptIds, long nfaces, long* faces) {
    auto ret = vtkd_im.vtkUnstructuredGrid_InsertNextCell__SWIG_2(cast(void*)swigCPtr, type, npts, cast(void*)ptIds, nfaces, cast(void*)faces);
    return ret;
  }

  public void Reset() {
    vtkd_im.vtkUnstructuredGrid_Reset(cast(void*)swigCPtr);
  }

  public override vtkCell.vtkCell GetCell(long cellId) {
    void* cPtr = vtkd_im.vtkUnstructuredGrid_GetCell__SWIG_0(cast(void*)swigCPtr, cellId);
    vtkCell.vtkCell ret = (cPtr is null) ? null : new vtkCell.vtkCell(cPtr, false);
    return ret;
  }

  public override void GetCell(long cellId, vtkGenericCell.vtkGenericCell cell) {
    vtkd_im.vtkUnstructuredGrid_GetCell__SWIG_1(cast(void*)swigCPtr, cellId, vtkGenericCell.vtkGenericCell.swigGetCPtr(cell));
  }

  public override void GetCellPoints(long cellId, vtkIdList.vtkIdList ptIds) {
    vtkd_im.vtkUnstructuredGrid_GetCellPoints__SWIG_0(cast(void*)swigCPtr, cellId, vtkIdList.vtkIdList.swigGetCPtr(ptIds));
  }

  public vtkUnsignedCharArray.vtkUnsignedCharArray GetCellTypesArray() {
    void* cPtr = vtkd_im.vtkUnstructuredGrid_GetCellTypesArray(cast(void*)swigCPtr);
    vtkUnsignedCharArray.vtkUnsignedCharArray ret = (cPtr is null) ? null : new vtkUnsignedCharArray.vtkUnsignedCharArray(cPtr, false);
    return ret;
  }

  public vtkIdTypeArray.vtkIdTypeArray GetCellLocationsArray() {
    void* cPtr = vtkd_im.vtkUnstructuredGrid_GetCellLocationsArray(cast(void*)swigCPtr);
    vtkIdTypeArray.vtkIdTypeArray ret = (cPtr is null) ? null : new vtkIdTypeArray.vtkIdTypeArray(cPtr, false);
    return ret;
  }

  public void BuildLinks() {
    vtkd_im.vtkUnstructuredGrid_BuildLinks(cast(void*)swigCPtr);
  }

  public vtkCellLinks.vtkCellLinks GetCellLinks() {
    void* cPtr = vtkd_im.vtkUnstructuredGrid_GetCellLinks(cast(void*)swigCPtr);
    vtkCellLinks.vtkCellLinks ret = (cPtr is null) ? null : new vtkCellLinks.vtkCellLinks(cPtr, false);
    return ret;
  }

  public void GetCellPoints(long cellId, long* npts, long** pts) {
    vtkd_im.vtkUnstructuredGrid_GetCellPoints__SWIG_1(cast(void*)swigCPtr, cellId, cast(void*)npts, cast(void*)pts);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetFaceStream(long cellId, vtkIdList.vtkIdList ptIds) {
    vtkd_im.vtkUnstructuredGrid_GetFaceStream__SWIG_0(cast(void*)swigCPtr, cellId, vtkIdList.vtkIdList.swigGetCPtr(ptIds));
  }

  public void GetFaceStream(long cellId, long* nfaces, long** ptIds) {
    vtkd_im.vtkUnstructuredGrid_GetFaceStream__SWIG_1(cast(void*)swigCPtr, cellId, cast(void*)nfaces, cast(void*)ptIds);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void SetCells(int type, vtkCellArray.vtkCellArray cells) {
    vtkd_im.vtkUnstructuredGrid_SetCells__SWIG_0(cast(void*)swigCPtr, type, vtkCellArray.vtkCellArray.swigGetCPtr(cells));
  }

  public void SetCells(int* types, vtkCellArray.vtkCellArray cells) {
    vtkd_im.vtkUnstructuredGrid_SetCells__SWIG_1(cast(void*)swigCPtr, cast(void*)types, vtkCellArray.vtkCellArray.swigGetCPtr(cells));
  }

  public void SetCells(vtkUnsignedCharArray.vtkUnsignedCharArray cellTypes, vtkIdTypeArray.vtkIdTypeArray cellLocations, vtkCellArray.vtkCellArray cells) {
    vtkd_im.vtkUnstructuredGrid_SetCells__SWIG_2(cast(void*)swigCPtr, vtkUnsignedCharArray.vtkUnsignedCharArray.swigGetCPtr(cellTypes), vtkIdTypeArray.vtkIdTypeArray.swigGetCPtr(cellLocations), vtkCellArray.vtkCellArray.swigGetCPtr(cells));
  }

  public void SetCells(vtkUnsignedCharArray.vtkUnsignedCharArray cellTypes, vtkIdTypeArray.vtkIdTypeArray cellLocations, vtkCellArray.vtkCellArray cells, vtkIdTypeArray.vtkIdTypeArray faceLocations, vtkIdTypeArray.vtkIdTypeArray faces) {
    vtkd_im.vtkUnstructuredGrid_SetCells__SWIG_3(cast(void*)swigCPtr, vtkUnsignedCharArray.vtkUnsignedCharArray.swigGetCPtr(cellTypes), vtkIdTypeArray.vtkIdTypeArray.swigGetCPtr(cellLocations), vtkCellArray.vtkCellArray.swigGetCPtr(cells), vtkIdTypeArray.vtkIdTypeArray.swigGetCPtr(faceLocations), vtkIdTypeArray.vtkIdTypeArray.swigGetCPtr(faces));
  }

  public vtkCellArray.vtkCellArray GetCells() {
    void* cPtr = vtkd_im.vtkUnstructuredGrid_GetCells(cast(void*)swigCPtr);
    vtkCellArray.vtkCellArray ret = (cPtr is null) ? null : new vtkCellArray.vtkCellArray(cPtr, false);
    return ret;
  }

  public void ReplaceCell(long cellId, int npts, long* pts) {
    vtkd_im.vtkUnstructuredGrid_ReplaceCell(cast(void*)swigCPtr, cellId, npts, cast(void*)pts);
  }

  public long InsertNextLinkedCell(int type, int npts, long* pts) {
    auto ret = vtkd_im.vtkUnstructuredGrid_InsertNextLinkedCell(cast(void*)swigCPtr, type, npts, cast(void*)pts);
    return ret;
  }

  public void RemoveReferenceToCell(long ptId, long cellId) {
    vtkd_im.vtkUnstructuredGrid_RemoveReferenceToCell(cast(void*)swigCPtr, ptId, cellId);
  }

  public void AddReferenceToCell(long ptId, long cellId) {
    vtkd_im.vtkUnstructuredGrid_AddReferenceToCell(cast(void*)swigCPtr, ptId, cellId);
  }

  public void ResizeCellList(long ptId, int size) {
    vtkd_im.vtkUnstructuredGrid_ResizeCellList(cast(void*)swigCPtr, ptId, size);
  }

  public int GetPiece() {
    auto ret = vtkd_im.vtkUnstructuredGrid_GetPiece(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfPieces() {
    auto ret = vtkd_im.vtkUnstructuredGrid_GetNumberOfPieces(cast(void*)swigCPtr);
    return ret;
  }

  public int GetGhostLevel() {
    auto ret = vtkd_im.vtkUnstructuredGrid_GetGhostLevel(cast(void*)swigCPtr);
    return ret;
  }

  public void GetIdsOfCellsOfType(int type, vtkIdTypeArray.vtkIdTypeArray array) {
    vtkd_im.vtkUnstructuredGrid_GetIdsOfCellsOfType(cast(void*)swigCPtr, type, vtkIdTypeArray.vtkIdTypeArray.swigGetCPtr(array));
  }

  public int IsHomogeneous() {
    auto ret = vtkd_im.vtkUnstructuredGrid_IsHomogeneous(cast(void*)swigCPtr);
    return ret;
  }

  public void RemoveGhostCells(int level) {
    vtkd_im.vtkUnstructuredGrid_RemoveGhostCells(cast(void*)swigCPtr, level);
  }

  public long* GetFaces(long cellId) {
    auto ret = cast(long*)vtkd_im.vtkUnstructuredGrid_GetFaces__SWIG_0(cast(void*)swigCPtr, cellId);
    return ret;
  }

  public vtkIdTypeArray.vtkIdTypeArray GetFaces() {
    void* cPtr = vtkd_im.vtkUnstructuredGrid_GetFaces__SWIG_1(cast(void*)swigCPtr);
    vtkIdTypeArray.vtkIdTypeArray ret = (cPtr is null) ? null : new vtkIdTypeArray.vtkIdTypeArray(cPtr, false);
    return ret;
  }

  public vtkIdTypeArray.vtkIdTypeArray GetFaceLocations() {
    void* cPtr = vtkd_im.vtkUnstructuredGrid_GetFaceLocations(cast(void*)swigCPtr);
    vtkIdTypeArray.vtkIdTypeArray ret = (cPtr is null) ? null : new vtkIdTypeArray.vtkIdTypeArray(cPtr, false);
    return ret;
  }

  public int InitializeFacesRepresentation(long numPrevCells) {
    auto ret = vtkd_im.vtkUnstructuredGrid_InitializeFacesRepresentation(cast(void*)swigCPtr, numPrevCells);
    return ret;
  }

  public static void DecomposeAPolyhedronCell(vtkCellArray.vtkCellArray polyhedronCellArray, long* nCellpts, long* nCellfaces, vtkCellArray.vtkCellArray cellArray, vtkIdTypeArray.vtkIdTypeArray faces) {
    vtkd_im.vtkUnstructuredGrid_DecomposeAPolyhedronCell__SWIG_0(vtkCellArray.vtkCellArray.swigGetCPtr(polyhedronCellArray), cast(void*)nCellpts, cast(void*)nCellfaces, vtkCellArray.vtkCellArray.swigGetCPtr(cellArray), vtkIdTypeArray.vtkIdTypeArray.swigGetCPtr(faces));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public static void DecomposeAPolyhedronCell(long* polyhedronCellStream, long* nCellpts, long* nCellfaces, vtkCellArray.vtkCellArray cellArray, vtkIdTypeArray.vtkIdTypeArray faces) {
    vtkd_im.vtkUnstructuredGrid_DecomposeAPolyhedronCell__SWIG_1(cast(void*)polyhedronCellStream, cast(void*)nCellpts, cast(void*)nCellfaces, vtkCellArray.vtkCellArray.swigGetCPtr(cellArray), vtkIdTypeArray.vtkIdTypeArray.swigGetCPtr(faces));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public static void DecomposeAPolyhedronCell(long nCellFaces, long* inFaceStream, long* nCellpts, vtkCellArray.vtkCellArray cellArray, vtkIdTypeArray.vtkIdTypeArray faces) {
    vtkd_im.vtkUnstructuredGrid_DecomposeAPolyhedronCell__SWIG_2(nCellFaces, cast(void*)inFaceStream, cast(void*)nCellpts, vtkCellArray.vtkCellArray.swigGetCPtr(cellArray), vtkIdTypeArray.vtkIdTypeArray.swigGetCPtr(faces));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public static void ConvertFaceStreamPointIds(vtkIdList.vtkIdList faceStream, long* idMap) {
    vtkd_im.vtkUnstructuredGrid_ConvertFaceStreamPointIds__SWIG_0(vtkIdList.vtkIdList.swigGetCPtr(faceStream), cast(void*)idMap);
  }

  public static void ConvertFaceStreamPointIds(long nfaces, long* faceStream, long* idMap) {
    vtkd_im.vtkUnstructuredGrid_ConvertFaceStreamPointIds__SWIG_1(nfaces, cast(void*)faceStream, cast(void*)idMap);
  }
}
