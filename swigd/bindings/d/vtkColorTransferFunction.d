/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkColorTransferFunction;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkScalarsToColors;

class vtkColorTransferFunction : vtkScalarsToColors.vtkScalarsToColors {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkColorTransferFunction_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkColorTransferFunction obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkColorTransferFunction New() {
    void* cPtr = vtkd_im.vtkColorTransferFunction_New();
    vtkColorTransferFunction ret = (cPtr is null) ? null : new vtkColorTransferFunction(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkColorTransferFunction_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkColorTransferFunction SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkColorTransferFunction_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkColorTransferFunction ret = (cPtr is null) ? null : new vtkColorTransferFunction(cPtr, false);
    return ret;
  }

  public vtkColorTransferFunction NewInstance() const {
    void* cPtr = vtkd_im.vtkColorTransferFunction_NewInstance(cast(void*)swigCPtr);
    vtkColorTransferFunction ret = (cPtr is null) ? null : new vtkColorTransferFunction(cPtr, false);
    return ret;
  }

  alias vtkScalarsToColors.vtkScalarsToColors.NewInstance NewInstance;

  public void ShallowCopy(vtkColorTransferFunction f) {
    vtkd_im.vtkColorTransferFunction_ShallowCopy(cast(void*)swigCPtr, vtkColorTransferFunction.swigGetCPtr(f));
  }

  public int GetSize() {
    auto ret = vtkd_im.vtkColorTransferFunction_GetSize(cast(void*)swigCPtr);
    return ret;
  }

  public int AddRGBPoint(double x, double r, double g, double b) {
    auto ret = vtkd_im.vtkColorTransferFunction_AddRGBPoint__SWIG_0(cast(void*)swigCPtr, x, r, g, b);
    return ret;
  }

  public int AddRGBPoint(double x, double r, double g, double b, double midpoint, double sharpness) {
    auto ret = vtkd_im.vtkColorTransferFunction_AddRGBPoint__SWIG_1(cast(void*)swigCPtr, x, r, g, b, midpoint, sharpness);
    return ret;
  }

  public int AddHSVPoint(double x, double h, double s, double v) {
    auto ret = vtkd_im.vtkColorTransferFunction_AddHSVPoint__SWIG_0(cast(void*)swigCPtr, x, h, s, v);
    return ret;
  }

  public int AddHSVPoint(double x, double h, double s, double v, double midpoint, double sharpness) {
    auto ret = vtkd_im.vtkColorTransferFunction_AddHSVPoint__SWIG_1(cast(void*)swigCPtr, x, h, s, v, midpoint, sharpness);
    return ret;
  }

  public int RemovePoint(double x) {
    auto ret = vtkd_im.vtkColorTransferFunction_RemovePoint(cast(void*)swigCPtr, x);
    return ret;
  }

  public void AddRGBSegment(double x1, double r1, double g1, double b1, double x2, double r2, double g2, double b2) {
    vtkd_im.vtkColorTransferFunction_AddRGBSegment(cast(void*)swigCPtr, x1, r1, g1, b1, x2, r2, g2, b2);
  }

  public void AddHSVSegment(double x1, double h1, double s1, double v1, double x2, double h2, double s2, double v2) {
    vtkd_im.vtkColorTransferFunction_AddHSVSegment(cast(void*)swigCPtr, x1, h1, s1, v1, x2, h2, s2, v2);
  }

  public void RemoveAllPoints() {
    vtkd_im.vtkColorTransferFunction_RemoveAllPoints(cast(void*)swigCPtr);
  }

  public double* GetColor(double x) {
    auto ret = cast(double*)vtkd_im.vtkColorTransferFunction_GetColor__SWIG_0(cast(void*)swigCPtr, x);
    return ret;
  }

  public override void GetColor(double x, SWIGTYPE_p_double.SWIGTYPE_p_double rgb) {
    vtkd_im.vtkColorTransferFunction_GetColor__SWIG_1(cast(void*)swigCPtr, x, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(rgb));
  }

  public double GetRedValue(double x) {
    auto ret = vtkd_im.vtkColorTransferFunction_GetRedValue(cast(void*)swigCPtr, x);
    return ret;
  }

  public double GetGreenValue(double x) {
    auto ret = vtkd_im.vtkColorTransferFunction_GetGreenValue(cast(void*)swigCPtr, x);
    return ret;
  }

  public double GetBlueValue(double x) {
    auto ret = vtkd_im.vtkColorTransferFunction_GetBlueValue(cast(void*)swigCPtr, x);
    return ret;
  }

  public int GetNodeValue(int index, SWIGTYPE_p_double.SWIGTYPE_p_double val) {
    auto ret = vtkd_im.vtkColorTransferFunction_GetNodeValue(cast(void*)swigCPtr, index, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(val));
    return ret;
  }

  public int SetNodeValue(int index, SWIGTYPE_p_double.SWIGTYPE_p_double val) {
    auto ret = vtkd_im.vtkColorTransferFunction_SetNodeValue(cast(void*)swigCPtr, index, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(val));
    return ret;
  }

  public override double* GetRange() {
    auto ret = cast(double*)vtkd_im.vtkColorTransferFunction_GetRange__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetRange(double* _arg1, double* _arg2) {
    vtkd_im.vtkColorTransferFunction_GetRange__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetRange(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkColorTransferFunction_GetRange__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  alias vtkScalarsToColors.vtkScalarsToColors.GetRange GetRange;

  public int AdjustRange(SWIGTYPE_p_double.SWIGTYPE_p_double range) {
    auto ret = vtkd_im.vtkColorTransferFunction_AdjustRange(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(range));
    return ret;
  }

  public void GetTable(double x1, double x2, int n, double* table) {
    vtkd_im.vtkColorTransferFunction_GetTable__SWIG_0(cast(void*)swigCPtr, x1, x2, n, cast(void*)table);
  }

  public void GetTable(double x1, double x2, int n, float* table) {
    vtkd_im.vtkColorTransferFunction_GetTable__SWIG_1(cast(void*)swigCPtr, x1, x2, n, cast(void*)table);
  }

  public ubyte* GetTable(double x1, double x2, int n) {
    auto ret = cast(ubyte*)vtkd_im.vtkColorTransferFunction_GetTable__SWIG_2(cast(void*)swigCPtr, x1, x2, n);
    return ret;
  }

  public void BuildFunctionFromTable(double x1, double x2, int size, double* table) {
    vtkd_im.vtkColorTransferFunction_BuildFunctionFromTable(cast(void*)swigCPtr, x1, x2, size, cast(void*)table);
  }

  public void SetClamping(int _arg) {
    vtkd_im.vtkColorTransferFunction_SetClamping(cast(void*)swigCPtr, _arg);
  }

  public int GetClampingMinValue() {
    auto ret = vtkd_im.vtkColorTransferFunction_GetClampingMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetClampingMaxValue() {
    auto ret = vtkd_im.vtkColorTransferFunction_GetClampingMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetClamping() {
    auto ret = vtkd_im.vtkColorTransferFunction_GetClamping(cast(void*)swigCPtr);
    return ret;
  }

  public void ClampingOn() {
    vtkd_im.vtkColorTransferFunction_ClampingOn(cast(void*)swigCPtr);
  }

  public void ClampingOff() {
    vtkd_im.vtkColorTransferFunction_ClampingOff(cast(void*)swigCPtr);
  }

  public void SetColorSpace(int _arg) {
    vtkd_im.vtkColorTransferFunction_SetColorSpace(cast(void*)swigCPtr, _arg);
  }

  public int GetColorSpaceMinValue() {
    auto ret = vtkd_im.vtkColorTransferFunction_GetColorSpaceMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetColorSpaceMaxValue() {
    auto ret = vtkd_im.vtkColorTransferFunction_GetColorSpaceMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public void SetColorSpaceToRGB() {
    vtkd_im.vtkColorTransferFunction_SetColorSpaceToRGB(cast(void*)swigCPtr);
  }

  public void SetColorSpaceToHSV() {
    vtkd_im.vtkColorTransferFunction_SetColorSpaceToHSV(cast(void*)swigCPtr);
  }

  public void SetColorSpaceToLab() {
    vtkd_im.vtkColorTransferFunction_SetColorSpaceToLab(cast(void*)swigCPtr);
  }

  public void SetColorSpaceToDiverging() {
    vtkd_im.vtkColorTransferFunction_SetColorSpaceToDiverging(cast(void*)swigCPtr);
  }

  public int GetColorSpace() {
    auto ret = vtkd_im.vtkColorTransferFunction_GetColorSpace(cast(void*)swigCPtr);
    return ret;
  }

  public void SetHSVWrap(int _arg) {
    vtkd_im.vtkColorTransferFunction_SetHSVWrap(cast(void*)swigCPtr, _arg);
  }

  public int GetHSVWrap() {
    auto ret = vtkd_im.vtkColorTransferFunction_GetHSVWrap(cast(void*)swigCPtr);
    return ret;
  }

  public void HSVWrapOn() {
    vtkd_im.vtkColorTransferFunction_HSVWrapOn(cast(void*)swigCPtr);
  }

  public void HSVWrapOff() {
    vtkd_im.vtkColorTransferFunction_HSVWrapOff(cast(void*)swigCPtr);
  }

  public void SetScale(int _arg) {
    vtkd_im.vtkColorTransferFunction_SetScale(cast(void*)swigCPtr, _arg);
  }

  public void SetScaleToLinear() {
    vtkd_im.vtkColorTransferFunction_SetScaleToLinear(cast(void*)swigCPtr);
  }

  public void SetScaleToLog10() {
    vtkd_im.vtkColorTransferFunction_SetScaleToLog10(cast(void*)swigCPtr);
  }

  public int GetScale() {
    auto ret = vtkd_im.vtkColorTransferFunction_GetScale(cast(void*)swigCPtr);
    return ret;
  }

  public void SetNanColor(double _arg1, double _arg2, double _arg3) {
    vtkd_im.vtkColorTransferFunction_SetNanColor__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetNanColor(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkColorTransferFunction_SetNanColor__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetNanColor() {
    auto ret = cast(double*)vtkd_im.vtkColorTransferFunction_GetNanColor__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetNanColor(double* _arg1, double* _arg2, double* _arg3) {
    vtkd_im.vtkColorTransferFunction_GetNanColor__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetNanColor(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkColorTransferFunction_GetNanColor__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetDataPointer() {
    auto ret = cast(double*)vtkd_im.vtkColorTransferFunction_GetDataPointer(cast(void*)swigCPtr);
    return ret;
  }

  public void FillFromDataPointer(int arg0, double* arg1) {
    vtkd_im.vtkColorTransferFunction_FillFromDataPointer(cast(void*)swigCPtr, arg0, cast(void*)arg1);
  }

  public void SetAllowDuplicateScalars(int _arg) {
    vtkd_im.vtkColorTransferFunction_SetAllowDuplicateScalars(cast(void*)swigCPtr, _arg);
  }

  public int GetAllowDuplicateScalars() {
    auto ret = vtkd_im.vtkColorTransferFunction_GetAllowDuplicateScalars(cast(void*)swigCPtr);
    return ret;
  }

  public void AllowDuplicateScalarsOn() {
    vtkd_im.vtkColorTransferFunction_AllowDuplicateScalarsOn(cast(void*)swigCPtr);
  }

  public void AllowDuplicateScalarsOff() {
    vtkd_im.vtkColorTransferFunction_AllowDuplicateScalarsOff(cast(void*)swigCPtr);
  }
}
