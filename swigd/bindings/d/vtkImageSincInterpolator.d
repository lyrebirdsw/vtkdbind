/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkImageSincInterpolator;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import SWIGTYPE_p_int;
static import SWIGTYPE_p_p_vtkInterpolationWeights;
static import SWIGTYPE_p_float;
static import vtkAbstractImageInterpolator;

class vtkImageSincInterpolator : vtkAbstractImageInterpolator.vtkAbstractImageInterpolator {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkImageSincInterpolator_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkImageSincInterpolator obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkImageSincInterpolator New() {
    void* cPtr = vtkd_im.vtkImageSincInterpolator_New();
    vtkImageSincInterpolator ret = (cPtr is null) ? null : new vtkImageSincInterpolator(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkImageSincInterpolator_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkImageSincInterpolator SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkImageSincInterpolator_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkImageSincInterpolator ret = (cPtr is null) ? null : new vtkImageSincInterpolator(cPtr, false);
    return ret;
  }

  public vtkImageSincInterpolator NewInstance() const {
    void* cPtr = vtkd_im.vtkImageSincInterpolator_NewInstance(cast(void*)swigCPtr);
    vtkImageSincInterpolator ret = (cPtr is null) ? null : new vtkImageSincInterpolator(cPtr, false);
    return ret;
  }

  alias vtkAbstractImageInterpolator.vtkAbstractImageInterpolator.NewInstance NewInstance;

  public void SetWindowFunction(int mode) {
    vtkd_im.vtkImageSincInterpolator_SetWindowFunction(cast(void*)swigCPtr, mode);
  }

  public void SetWindowFunctionToLanczos() {
    vtkd_im.vtkImageSincInterpolator_SetWindowFunctionToLanczos(cast(void*)swigCPtr);
  }

  public void SetWindowFunctionToKaiser() {
    vtkd_im.vtkImageSincInterpolator_SetWindowFunctionToKaiser(cast(void*)swigCPtr);
  }

  public void SetWindowFunctionToCosine() {
    vtkd_im.vtkImageSincInterpolator_SetWindowFunctionToCosine(cast(void*)swigCPtr);
  }

  public void SetWindowFunctionToHann() {
    vtkd_im.vtkImageSincInterpolator_SetWindowFunctionToHann(cast(void*)swigCPtr);
  }

  public void SetWindowFunctionToHamming() {
    vtkd_im.vtkImageSincInterpolator_SetWindowFunctionToHamming(cast(void*)swigCPtr);
  }

  public void SetWindowFunctionToBlackman() {
    vtkd_im.vtkImageSincInterpolator_SetWindowFunctionToBlackman(cast(void*)swigCPtr);
  }

  public void SetWindowFunctionToBlackmanHarris3() {
    vtkd_im.vtkImageSincInterpolator_SetWindowFunctionToBlackmanHarris3(cast(void*)swigCPtr);
  }

  public void SetWindowFunctionToBlackmanHarris4() {
    vtkd_im.vtkImageSincInterpolator_SetWindowFunctionToBlackmanHarris4(cast(void*)swigCPtr);
  }

  public void SetWindowFunctionToNuttall() {
    vtkd_im.vtkImageSincInterpolator_SetWindowFunctionToNuttall(cast(void*)swigCPtr);
  }

  public void SetWindowFunctionToBlackmanNuttall3() {
    vtkd_im.vtkImageSincInterpolator_SetWindowFunctionToBlackmanNuttall3(cast(void*)swigCPtr);
  }

  public void SetWindowFunctionToBlackmanNuttall4() {
    vtkd_im.vtkImageSincInterpolator_SetWindowFunctionToBlackmanNuttall4(cast(void*)swigCPtr);
  }

  public int GetWindowFunction() {
    auto ret = vtkd_im.vtkImageSincInterpolator_GetWindowFunction(cast(void*)swigCPtr);
    return ret;
  }

  public string GetWindowFunctionAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkImageSincInterpolator_GetWindowFunctionAsString(cast(void*)swigCPtr));
    return ret;
  }

  public void SetWindowHalfWidth(int n) {
    vtkd_im.vtkImageSincInterpolator_SetWindowHalfWidth(cast(void*)swigCPtr, n);
  }

  public int GetWindowHalfWidth() {
    auto ret = vtkd_im.vtkImageSincInterpolator_GetWindowHalfWidth(cast(void*)swigCPtr);
    return ret;
  }

  public void SetUseWindowParameter(int val) {
    vtkd_im.vtkImageSincInterpolator_SetUseWindowParameter(cast(void*)swigCPtr, val);
  }

  public void UseWindowParameterOn() {
    vtkd_im.vtkImageSincInterpolator_UseWindowParameterOn(cast(void*)swigCPtr);
  }

  public void UseWindowParameterOff() {
    vtkd_im.vtkImageSincInterpolator_UseWindowParameterOff(cast(void*)swigCPtr);
  }

  public int GetUseWindowParameter() {
    auto ret = vtkd_im.vtkImageSincInterpolator_GetUseWindowParameter(cast(void*)swigCPtr);
    return ret;
  }

  public void SetWindowParameter(double parm) {
    vtkd_im.vtkImageSincInterpolator_SetWindowParameter(cast(void*)swigCPtr, parm);
  }

  public double GetWindowParameter() {
    auto ret = vtkd_im.vtkImageSincInterpolator_GetWindowParameter(cast(void*)swigCPtr);
    return ret;
  }

  public void SetBlurFactors(double x, double y, double z) {
    vtkd_im.vtkImageSincInterpolator_SetBlurFactors__SWIG_0(cast(void*)swigCPtr, x, y, z);
  }

  public void SetBlurFactors(SWIGTYPE_p_double.SWIGTYPE_p_double f) {
    vtkd_im.vtkImageSincInterpolator_SetBlurFactors__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(f));
  }

  public void GetBlurFactors(SWIGTYPE_p_double.SWIGTYPE_p_double f) {
    vtkd_im.vtkImageSincInterpolator_GetBlurFactors__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(f));
  }

  public double* GetBlurFactors() {
    auto ret = cast(double*)vtkd_im.vtkImageSincInterpolator_GetBlurFactors__SWIG_1(cast(void*)swigCPtr);
    return ret;
  }

  public void SetAntialiasing(int antialiasing) {
    vtkd_im.vtkImageSincInterpolator_SetAntialiasing(cast(void*)swigCPtr, antialiasing);
  }

  public void AntialiasingOn() {
    vtkd_im.vtkImageSincInterpolator_AntialiasingOn(cast(void*)swigCPtr);
  }

  public void AntialiasingOff() {
    vtkd_im.vtkImageSincInterpolator_AntialiasingOff(cast(void*)swigCPtr);
  }

  public int GetAntialiasing() {
    auto ret = vtkd_im.vtkImageSincInterpolator_GetAntialiasing(cast(void*)swigCPtr);
    return ret;
  }

  public void SetRenormalization(int antialiasing) {
    vtkd_im.vtkImageSincInterpolator_SetRenormalization(cast(void*)swigCPtr, antialiasing);
  }

  public void RenormalizationOn() {
    vtkd_im.vtkImageSincInterpolator_RenormalizationOn(cast(void*)swigCPtr);
  }

  public void RenormalizationOff() {
    vtkd_im.vtkImageSincInterpolator_RenormalizationOff(cast(void*)swigCPtr);
  }

  public int GetRenormalization() {
    auto ret = vtkd_im.vtkImageSincInterpolator_GetRenormalization(cast(void*)swigCPtr);
    return ret;
  }

  public override void PrecomputeWeightsForExtent(SWIGTYPE_p_double.SWIGTYPE_p_double matrix, SWIGTYPE_p_int.SWIGTYPE_p_int extent, SWIGTYPE_p_int.SWIGTYPE_p_int newExtent, SWIGTYPE_p_p_vtkInterpolationWeights.SWIGTYPE_p_p_vtkInterpolationWeights weights) {
    vtkd_im.vtkImageSincInterpolator_PrecomputeWeightsForExtent__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(matrix), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(extent), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(newExtent), SWIGTYPE_p_p_vtkInterpolationWeights.SWIGTYPE_p_p_vtkInterpolationWeights.swigGetCPtr(weights));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public override void PrecomputeWeightsForExtent(SWIGTYPE_p_float.SWIGTYPE_p_float matrix, SWIGTYPE_p_int.SWIGTYPE_p_int extent, SWIGTYPE_p_int.SWIGTYPE_p_int newExtent, SWIGTYPE_p_p_vtkInterpolationWeights.SWIGTYPE_p_p_vtkInterpolationWeights weights) {
    vtkd_im.vtkImageSincInterpolator_PrecomputeWeightsForExtent__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(matrix), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(extent), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(newExtent), SWIGTYPE_p_p_vtkInterpolationWeights.SWIGTYPE_p_p_vtkInterpolationWeights.swigGetCPtr(weights));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }
}
