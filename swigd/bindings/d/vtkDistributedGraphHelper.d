/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkDistributedGraphHelper;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkVariant;
static import vtkInformationIntegerKey;
static import vtkObject;

class vtkDistributedGraphHelper : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkDistributedGraphHelper_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkDistributedGraphHelper obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkDistributedGraphHelper_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkDistributedGraphHelper SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkDistributedGraphHelper_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkDistributedGraphHelper ret = (cPtr is null) ? null : new vtkDistributedGraphHelper(cPtr, false);
    return ret;
  }

  public vtkDistributedGraphHelper NewInstance() const {
    void* cPtr = vtkd_im.vtkDistributedGraphHelper_NewInstance(cast(void*)swigCPtr);
    vtkDistributedGraphHelper ret = (cPtr is null) ? null : new vtkDistributedGraphHelper(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public long GetVertexOwner(long v) const {
    auto ret = vtkd_im.vtkDistributedGraphHelper_GetVertexOwner(cast(void*)swigCPtr, v);
    return ret;
  }

  public long GetVertexIndex(long v) const {
    auto ret = vtkd_im.vtkDistributedGraphHelper_GetVertexIndex(cast(void*)swigCPtr, v);
    return ret;
  }

  public long GetEdgeOwner(long e_id) const {
    auto ret = vtkd_im.vtkDistributedGraphHelper_GetEdgeOwner(cast(void*)swigCPtr, e_id);
    return ret;
  }

  public long GetEdgeIndex(long e_id) const {
    auto ret = vtkd_im.vtkDistributedGraphHelper_GetEdgeIndex(cast(void*)swigCPtr, e_id);
    return ret;
  }

  public long MakeDistributedId(int owner, long local) {
    auto ret = vtkd_im.vtkDistributedGraphHelper_MakeDistributedId(cast(void*)swigCPtr, owner, local);
    return ret;
  }

  public long GetVertexOwnerByPedigreeId(vtkVariant.vtkVariant pedigreeId) {
    auto ret = vtkd_im.vtkDistributedGraphHelper_GetVertexOwnerByPedigreeId(cast(void*)swigCPtr, vtkVariant.vtkVariant.swigGetCPtr(pedigreeId));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void Synchronize() {
    vtkd_im.vtkDistributedGraphHelper_Synchronize(cast(void*)swigCPtr);
  }

  public vtkDistributedGraphHelper Clone() {
    void* cPtr = vtkd_im.vtkDistributedGraphHelper_Clone(cast(void*)swigCPtr);
    vtkDistributedGraphHelper ret = (cPtr is null) ? null : new vtkDistributedGraphHelper(cPtr, false);
    return ret;
  }

  public static vtkInformationIntegerKey.vtkInformationIntegerKey DISTRIBUTEDVERTEXIDS() {
    void* cPtr = vtkd_im.vtkDistributedGraphHelper_DISTRIBUTEDVERTEXIDS();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public static vtkInformationIntegerKey.vtkInformationIntegerKey DISTRIBUTEDEDGEIDS() {
    void* cPtr = vtkd_im.vtkDistributedGraphHelper_DISTRIBUTEDEDGEIDS();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }
}
