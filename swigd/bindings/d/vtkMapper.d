/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkMapper;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkAbstractMapper;
static import vtkRenderer;
static import vtkActor;
static import vtkScalarsToColors;
static import SWIGTYPE_p_double;
static import vtkDataSet;
static import vtkUnsignedCharArray;
static import vtkAbstractMapper3D;

class vtkMapper : vtkAbstractMapper3D.vtkAbstractMapper3D {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkMapper_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkMapper obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkMapper_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkMapper SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkMapper_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkMapper ret = (cPtr is null) ? null : new vtkMapper(cPtr, false);
    return ret;
  }

  public vtkMapper NewInstance() const {
    void* cPtr = vtkd_im.vtkMapper_NewInstance(cast(void*)swigCPtr);
    vtkMapper ret = (cPtr is null) ? null : new vtkMapper(cPtr, false);
    return ret;
  }

  alias vtkAbstractMapper3D.vtkAbstractMapper3D.NewInstance NewInstance;

  public void ShallowCopy(vtkAbstractMapper.vtkAbstractMapper m) {
    vtkd_im.vtkMapper_ShallowCopy(cast(void*)swigCPtr, vtkAbstractMapper.vtkAbstractMapper.swigGetCPtr(m));
  }

  public void Render(vtkRenderer.vtkRenderer ren, vtkActor.vtkActor a) {
    vtkd_im.vtkMapper_Render(cast(void*)swigCPtr, vtkRenderer.vtkRenderer.swigGetCPtr(ren), vtkActor.vtkActor.swigGetCPtr(a));
  }

  public void SetLookupTable(vtkScalarsToColors.vtkScalarsToColors lut) {
    vtkd_im.vtkMapper_SetLookupTable(cast(void*)swigCPtr, vtkScalarsToColors.vtkScalarsToColors.swigGetCPtr(lut));
  }

  public vtkScalarsToColors.vtkScalarsToColors GetLookupTable() {
    void* cPtr = vtkd_im.vtkMapper_GetLookupTable(cast(void*)swigCPtr);
    vtkScalarsToColors.vtkScalarsToColors ret = (cPtr is null) ? null : new vtkScalarsToColors.vtkScalarsToColors(cPtr, false);
    return ret;
  }

  public void CreateDefaultLookupTable() {
    vtkd_im.vtkMapper_CreateDefaultLookupTable(cast(void*)swigCPtr);
  }

  public void SetScalarVisibility(int _arg) {
    vtkd_im.vtkMapper_SetScalarVisibility(cast(void*)swigCPtr, _arg);
  }

  public int GetScalarVisibility() {
    auto ret = vtkd_im.vtkMapper_GetScalarVisibility(cast(void*)swigCPtr);
    return ret;
  }

  public void ScalarVisibilityOn() {
    vtkd_im.vtkMapper_ScalarVisibilityOn(cast(void*)swigCPtr);
  }

  public void ScalarVisibilityOff() {
    vtkd_im.vtkMapper_ScalarVisibilityOff(cast(void*)swigCPtr);
  }

  public void SetStatic(int _arg) {
    vtkd_im.vtkMapper_SetStatic(cast(void*)swigCPtr, _arg);
  }

  public int GetStatic() {
    auto ret = vtkd_im.vtkMapper_GetStatic(cast(void*)swigCPtr);
    return ret;
  }

  public void StaticOn() {
    vtkd_im.vtkMapper_StaticOn(cast(void*)swigCPtr);
  }

  public void StaticOff() {
    vtkd_im.vtkMapper_StaticOff(cast(void*)swigCPtr);
  }

  public void SetColorMode(int _arg) {
    vtkd_im.vtkMapper_SetColorMode(cast(void*)swigCPtr, _arg);
  }

  public int GetColorMode() {
    auto ret = vtkd_im.vtkMapper_GetColorMode(cast(void*)swigCPtr);
    return ret;
  }

  public void SetColorModeToDefault() {
    vtkd_im.vtkMapper_SetColorModeToDefault(cast(void*)swigCPtr);
  }

  public void SetColorModeToMapScalars() {
    vtkd_im.vtkMapper_SetColorModeToMapScalars(cast(void*)swigCPtr);
  }

  public string GetColorModeAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkMapper_GetColorModeAsString(cast(void*)swigCPtr));
    return ret;
  }

  public void SetInterpolateScalarsBeforeMapping(int _arg) {
    vtkd_im.vtkMapper_SetInterpolateScalarsBeforeMapping(cast(void*)swigCPtr, _arg);
  }

  public int GetInterpolateScalarsBeforeMapping() {
    auto ret = vtkd_im.vtkMapper_GetInterpolateScalarsBeforeMapping(cast(void*)swigCPtr);
    return ret;
  }

  public void InterpolateScalarsBeforeMappingOn() {
    vtkd_im.vtkMapper_InterpolateScalarsBeforeMappingOn(cast(void*)swigCPtr);
  }

  public void InterpolateScalarsBeforeMappingOff() {
    vtkd_im.vtkMapper_InterpolateScalarsBeforeMappingOff(cast(void*)swigCPtr);
  }

  public void SetUseLookupTableScalarRange(int _arg) {
    vtkd_im.vtkMapper_SetUseLookupTableScalarRange(cast(void*)swigCPtr, _arg);
  }

  public int GetUseLookupTableScalarRange() {
    auto ret = vtkd_im.vtkMapper_GetUseLookupTableScalarRange(cast(void*)swigCPtr);
    return ret;
  }

  public void UseLookupTableScalarRangeOn() {
    vtkd_im.vtkMapper_UseLookupTableScalarRangeOn(cast(void*)swigCPtr);
  }

  public void UseLookupTableScalarRangeOff() {
    vtkd_im.vtkMapper_UseLookupTableScalarRangeOff(cast(void*)swigCPtr);
  }

  public void SetScalarRange(double _arg1, double _arg2) {
    vtkd_im.vtkMapper_SetScalarRange__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2);
  }

  public void SetScalarRange(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkMapper_SetScalarRange__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetScalarRange() {
    auto ret = cast(double*)vtkd_im.vtkMapper_GetScalarRange__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetScalarRange(SWIGTYPE_p_double.SWIGTYPE_p_double data) {
    vtkd_im.vtkMapper_GetScalarRange__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(data));
  }

  public void SetImmediateModeRendering(int _arg) {
    vtkd_im.vtkMapper_SetImmediateModeRendering(cast(void*)swigCPtr, _arg);
  }

  public int GetImmediateModeRendering() {
    auto ret = vtkd_im.vtkMapper_GetImmediateModeRendering(cast(void*)swigCPtr);
    return ret;
  }

  public void ImmediateModeRenderingOn() {
    vtkd_im.vtkMapper_ImmediateModeRenderingOn(cast(void*)swigCPtr);
  }

  public void ImmediateModeRenderingOff() {
    vtkd_im.vtkMapper_ImmediateModeRenderingOff(cast(void*)swigCPtr);
  }

  public static void SetGlobalImmediateModeRendering(int val) {
    vtkd_im.vtkMapper_SetGlobalImmediateModeRendering(val);
  }

  public static void GlobalImmediateModeRenderingOn() {
    vtkd_im.vtkMapper_GlobalImmediateModeRenderingOn();
  }

  public static void GlobalImmediateModeRenderingOff() {
    vtkd_im.vtkMapper_GlobalImmediateModeRenderingOff();
  }

  public static int GetGlobalImmediateModeRendering() {
    auto ret = vtkd_im.vtkMapper_GetGlobalImmediateModeRendering();
    return ret;
  }

  public void SetScalarMode(int _arg) {
    vtkd_im.vtkMapper_SetScalarMode(cast(void*)swigCPtr, _arg);
  }

  public int GetScalarMode() {
    auto ret = vtkd_im.vtkMapper_GetScalarMode(cast(void*)swigCPtr);
    return ret;
  }

  public void SetScalarModeToDefault() {
    vtkd_im.vtkMapper_SetScalarModeToDefault(cast(void*)swigCPtr);
  }

  public void SetScalarModeToUsePointData() {
    vtkd_im.vtkMapper_SetScalarModeToUsePointData(cast(void*)swigCPtr);
  }

  public void SetScalarModeToUseCellData() {
    vtkd_im.vtkMapper_SetScalarModeToUseCellData(cast(void*)swigCPtr);
  }

  public void SetScalarModeToUsePointFieldData() {
    vtkd_im.vtkMapper_SetScalarModeToUsePointFieldData(cast(void*)swigCPtr);
  }

  public void SetScalarModeToUseCellFieldData() {
    vtkd_im.vtkMapper_SetScalarModeToUseCellFieldData(cast(void*)swigCPtr);
  }

  public void SetScalarModeToUseFieldData() {
    vtkd_im.vtkMapper_SetScalarModeToUseFieldData(cast(void*)swigCPtr);
  }

  public void SelectColorArray(int arrayNum) {
    vtkd_im.vtkMapper_SelectColorArray__SWIG_0(cast(void*)swigCPtr, arrayNum);
  }

  public void SelectColorArray(string arrayName) {
    vtkd_im.vtkMapper_SelectColorArray__SWIG_1(cast(void*)swigCPtr, (arrayName ? std.string.toStringz(arrayName) : null));
  }

  public void ColorByArrayComponent(int arrayNum, int component) {
    vtkd_im.vtkMapper_ColorByArrayComponent__SWIG_0(cast(void*)swigCPtr, arrayNum, component);
  }

  public void ColorByArrayComponent(string arrayName, int component) {
    vtkd_im.vtkMapper_ColorByArrayComponent__SWIG_1(cast(void*)swigCPtr, (arrayName ? std.string.toStringz(arrayName) : null), component);
  }

  public string GetArrayName() {
    string ret = std.conv.to!string(vtkd_im.vtkMapper_GetArrayName(cast(void*)swigCPtr));
    return ret;
  }

  public int GetArrayId() {
    auto ret = vtkd_im.vtkMapper_GetArrayId(cast(void*)swigCPtr);
    return ret;
  }

  public int GetArrayAccessMode() {
    auto ret = vtkd_im.vtkMapper_GetArrayAccessMode(cast(void*)swigCPtr);
    return ret;
  }

  public int GetArrayComponent() {
    auto ret = vtkd_im.vtkMapper_GetArrayComponent(cast(void*)swigCPtr);
    return ret;
  }

  public string GetScalarModeAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkMapper_GetScalarModeAsString(cast(void*)swigCPtr));
    return ret;
  }

  public static void SetResolveCoincidentTopology(int val) {
    vtkd_im.vtkMapper_SetResolveCoincidentTopology(val);
  }

  public static int GetResolveCoincidentTopology() {
    auto ret = vtkd_im.vtkMapper_GetResolveCoincidentTopology();
    return ret;
  }

  public static void SetResolveCoincidentTopologyToDefault() {
    vtkd_im.vtkMapper_SetResolveCoincidentTopologyToDefault();
  }

  public static void SetResolveCoincidentTopologyToOff() {
    vtkd_im.vtkMapper_SetResolveCoincidentTopologyToOff();
  }

  public static void SetResolveCoincidentTopologyToPolygonOffset() {
    vtkd_im.vtkMapper_SetResolveCoincidentTopologyToPolygonOffset();
  }

  public static void SetResolveCoincidentTopologyToShiftZBuffer() {
    vtkd_im.vtkMapper_SetResolveCoincidentTopologyToShiftZBuffer();
  }

  public static void SetResolveCoincidentTopologyPolygonOffsetParameters(double factor, double units) {
    vtkd_im.vtkMapper_SetResolveCoincidentTopologyPolygonOffsetParameters(factor, units);
  }

  public static void GetResolveCoincidentTopologyPolygonOffsetParameters(double* factor, double* units) {
    vtkd_im.vtkMapper_GetResolveCoincidentTopologyPolygonOffsetParameters(cast(void*)factor, cast(void*)units);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public static void SetResolveCoincidentTopologyPolygonOffsetFaces(int faces) {
    vtkd_im.vtkMapper_SetResolveCoincidentTopologyPolygonOffsetFaces(faces);
  }

  public static int GetResolveCoincidentTopologyPolygonOffsetFaces() {
    auto ret = vtkd_im.vtkMapper_GetResolveCoincidentTopologyPolygonOffsetFaces();
    return ret;
  }

  public static void SetResolveCoincidentTopologyZShift(double val) {
    vtkd_im.vtkMapper_SetResolveCoincidentTopologyZShift(val);
  }

  public static double GetResolveCoincidentTopologyZShift() {
    auto ret = vtkd_im.vtkMapper_GetResolveCoincidentTopologyZShift();
    return ret;
  }

  public override double* GetBounds() {
    auto ret = cast(double*)vtkd_im.vtkMapper_GetBounds__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public override void GetBounds(SWIGTYPE_p_double.SWIGTYPE_p_double bounds) {
    vtkd_im.vtkMapper_GetBounds__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
  }

  public void SetRenderTime(double time) {
    vtkd_im.vtkMapper_SetRenderTime(cast(void*)swigCPtr, time);
  }

  public double GetRenderTime() {
    auto ret = vtkd_im.vtkMapper_GetRenderTime(cast(void*)swigCPtr);
    return ret;
  }

  public vtkDataSet.vtkDataSet GetInputAsDataSet() {
    void* cPtr = vtkd_im.vtkMapper_GetInputAsDataSet(cast(void*)swigCPtr);
    vtkDataSet.vtkDataSet ret = (cPtr is null) ? null : new vtkDataSet.vtkDataSet(cPtr, false);
    return ret;
  }

  public vtkUnsignedCharArray.vtkUnsignedCharArray MapScalars(double alpha) {
    void* cPtr = vtkd_im.vtkMapper_MapScalars(cast(void*)swigCPtr, alpha);
    vtkUnsignedCharArray.vtkUnsignedCharArray ret = (cPtr is null) ? null : new vtkUnsignedCharArray.vtkUnsignedCharArray(cPtr, false);
    return ret;
  }

  public void SetScalarMaterialMode(int _arg) {
    vtkd_im.vtkMapper_SetScalarMaterialMode(cast(void*)swigCPtr, _arg);
  }

  public int GetScalarMaterialMode() {
    auto ret = vtkd_im.vtkMapper_GetScalarMaterialMode(cast(void*)swigCPtr);
    return ret;
  }

  public void SetScalarMaterialModeToDefault() {
    vtkd_im.vtkMapper_SetScalarMaterialModeToDefault(cast(void*)swigCPtr);
  }

  public void SetScalarMaterialModeToAmbient() {
    vtkd_im.vtkMapper_SetScalarMaterialModeToAmbient(cast(void*)swigCPtr);
  }

  public void SetScalarMaterialModeToDiffuse() {
    vtkd_im.vtkMapper_SetScalarMaterialModeToDiffuse(cast(void*)swigCPtr);
  }

  public void SetScalarMaterialModeToAmbientAndDiffuse() {
    vtkd_im.vtkMapper_SetScalarMaterialModeToAmbientAndDiffuse(cast(void*)swigCPtr);
  }

  public string GetScalarMaterialModeAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkMapper_GetScalarMaterialModeAsString(cast(void*)swigCPtr));
    return ret;
  }

  public bool GetIsOpaque() {
    bool ret = vtkd_im.vtkMapper_GetIsOpaque(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool GetSupportsSelection() {
    bool ret = vtkd_im.vtkMapper_GetSupportsSelection(cast(void*)swigCPtr) ? true : false;
    return ret;
  }
}
