/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkChartParallelCoordinates;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkStdString;
static import vtkStringArray;
static import vtkPlotParallelCoordinates;
static import vtkChart;

class vtkChartParallelCoordinates : vtkChart.vtkChart {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkChartParallelCoordinates_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkChartParallelCoordinates obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkChartParallelCoordinates(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkChartParallelCoordinates_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkChartParallelCoordinates SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkChartParallelCoordinates_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkChartParallelCoordinates ret = (cPtr is null) ? null : new vtkChartParallelCoordinates(cPtr, false);
    return ret;
  }

  public vtkChartParallelCoordinates NewInstance() const {
    void* cPtr = vtkd_im.vtkChartParallelCoordinates_NewInstance(cast(void*)swigCPtr);
    vtkChartParallelCoordinates ret = (cPtr is null) ? null : new vtkChartParallelCoordinates(cPtr, false);
    return ret;
  }

  alias vtkChart.vtkChart.NewInstance NewInstance;

  public static vtkChartParallelCoordinates New() {
    void* cPtr = vtkd_im.vtkChartParallelCoordinates_New();
    vtkChartParallelCoordinates ret = (cPtr is null) ? null : new vtkChartParallelCoordinates(cPtr, false);
    return ret;
  }

  public void SetColumnVisibility(vtkStdString.vtkStdString name, bool visible) {
    vtkd_im.vtkChartParallelCoordinates_SetColumnVisibility(cast(void*)swigCPtr, vtkStdString.vtkStdString.swigGetCPtr(name), visible);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void SetColumnVisibilityAll(bool visible) {
    vtkd_im.vtkChartParallelCoordinates_SetColumnVisibilityAll(cast(void*)swigCPtr, visible);
  }

  public bool GetColumnVisibility(vtkStdString.vtkStdString name) {
    bool ret = vtkd_im.vtkChartParallelCoordinates_GetColumnVisibility(cast(void*)swigCPtr, vtkStdString.vtkStdString.swigGetCPtr(name)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public vtkStringArray.vtkStringArray GetVisibleColumns() {
    void* cPtr = vtkd_im.vtkChartParallelCoordinates_GetVisibleColumns(cast(void*)swigCPtr);
    vtkStringArray.vtkStringArray ret = (cPtr is null) ? null : new vtkStringArray.vtkStringArray(cPtr, false);
    return ret;
  }

  public void SetPlot(vtkPlotParallelCoordinates.vtkPlotParallelCoordinates plot) {
    vtkd_im.vtkChartParallelCoordinates_SetPlot(cast(void*)swigCPtr, vtkPlotParallelCoordinates.vtkPlotParallelCoordinates.swigGetCPtr(plot));
  }

  public this() {
    this(vtkd_im.new_vtkChartParallelCoordinates(), true);
  }
}
