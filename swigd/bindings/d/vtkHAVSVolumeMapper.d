/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkHAVSVolumeMapper;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkRenderer;
static import vtkUnstructuredGridVolumeMapper;

class vtkHAVSVolumeMapper : vtkUnstructuredGridVolumeMapper.vtkUnstructuredGridVolumeMapper {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkHAVSVolumeMapper_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkHAVSVolumeMapper obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkHAVSVolumeMapper New() {
    void* cPtr = vtkd_im.vtkHAVSVolumeMapper_New();
    vtkHAVSVolumeMapper ret = (cPtr is null) ? null : new vtkHAVSVolumeMapper(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkHAVSVolumeMapper_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkHAVSVolumeMapper SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkHAVSVolumeMapper_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkHAVSVolumeMapper ret = (cPtr is null) ? null : new vtkHAVSVolumeMapper(cPtr, false);
    return ret;
  }

  public vtkHAVSVolumeMapper NewInstance() const {
    void* cPtr = vtkd_im.vtkHAVSVolumeMapper_NewInstance(cast(void*)swigCPtr);
    vtkHAVSVolumeMapper ret = (cPtr is null) ? null : new vtkHAVSVolumeMapper(cPtr, false);
    return ret;
  }

  alias vtkUnstructuredGridVolumeMapper.vtkUnstructuredGridVolumeMapper.NewInstance NewInstance;

  public void SetPartiallyRemoveNonConvexities(bool _arg) {
    vtkd_im.vtkHAVSVolumeMapper_SetPartiallyRemoveNonConvexities(cast(void*)swigCPtr, _arg);
  }

  public bool GetPartiallyRemoveNonConvexities() {
    bool ret = vtkd_im.vtkHAVSVolumeMapper_GetPartiallyRemoveNonConvexities(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetLevelOfDetailTargetTime(float _arg) {
    vtkd_im.vtkHAVSVolumeMapper_SetLevelOfDetailTargetTime(cast(void*)swigCPtr, _arg);
  }

  public float GetLevelOfDetailTargetTime() {
    auto ret = vtkd_im.vtkHAVSVolumeMapper_GetLevelOfDetailTargetTime(cast(void*)swigCPtr);
    return ret;
  }

  public void SetLevelOfDetail(bool _arg) {
    vtkd_im.vtkHAVSVolumeMapper_SetLevelOfDetail(cast(void*)swigCPtr, _arg);
  }

  public bool GetLevelOfDetail() {
    bool ret = vtkd_im.vtkHAVSVolumeMapper_GetLevelOfDetail(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetLevelOfDetailMethod(int arg0) {
    vtkd_im.vtkHAVSVolumeMapper_SetLevelOfDetailMethod(cast(void*)swigCPtr, arg0);
  }

  public int GetLevelOfDetailMethod() {
    auto ret = vtkd_im.vtkHAVSVolumeMapper_GetLevelOfDetailMethod(cast(void*)swigCPtr);
    return ret;
  }

  public void SetLevelOfDetailMethodField() {
    vtkd_im.vtkHAVSVolumeMapper_SetLevelOfDetailMethodField(cast(void*)swigCPtr);
  }

  public void SetLevelOfDetailMethodArea() {
    vtkd_im.vtkHAVSVolumeMapper_SetLevelOfDetailMethodArea(cast(void*)swigCPtr);
  }

  public void SetKBufferSize(int _arg) {
    vtkd_im.vtkHAVSVolumeMapper_SetKBufferSize(cast(void*)swigCPtr, _arg);
  }

  public int GetKBufferSize() {
    auto ret = vtkd_im.vtkHAVSVolumeMapper_GetKBufferSize(cast(void*)swigCPtr);
    return ret;
  }

  public void SetKBufferSizeTo2() {
    vtkd_im.vtkHAVSVolumeMapper_SetKBufferSizeTo2(cast(void*)swigCPtr);
  }

  public void SetKBufferSizeTo6() {
    vtkd_im.vtkHAVSVolumeMapper_SetKBufferSizeTo6(cast(void*)swigCPtr);
  }

  public bool SupportedByHardware(vtkRenderer.vtkRenderer arg0) {
    bool ret = vtkd_im.vtkHAVSVolumeMapper_SupportedByHardware(cast(void*)swigCPtr, vtkRenderer.vtkRenderer.swigGetCPtr(arg0)) ? true : false;
    return ret;
  }

  public void SetGPUDataStructures(bool arg0) {
    vtkd_im.vtkHAVSVolumeMapper_SetGPUDataStructures(cast(void*)swigCPtr, arg0);
  }

  public bool GetGPUDataStructures() {
    bool ret = vtkd_im.vtkHAVSVolumeMapper_GetGPUDataStructures(cast(void*)swigCPtr) ? true : false;
    return ret;
  }
}
