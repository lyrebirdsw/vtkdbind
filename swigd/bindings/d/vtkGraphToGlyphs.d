/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkGraphToGlyphs;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkRenderer;
static import vtkPolyDataAlgorithm;

class vtkGraphToGlyphs : vtkPolyDataAlgorithm.vtkPolyDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkGraphToGlyphs_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkGraphToGlyphs obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkGraphToGlyphs New() {
    void* cPtr = vtkd_im.vtkGraphToGlyphs_New();
    vtkGraphToGlyphs ret = (cPtr is null) ? null : new vtkGraphToGlyphs(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkGraphToGlyphs_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkGraphToGlyphs SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkGraphToGlyphs_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkGraphToGlyphs ret = (cPtr is null) ? null : new vtkGraphToGlyphs(cPtr, false);
    return ret;
  }

  public vtkGraphToGlyphs NewInstance() const {
    void* cPtr = vtkd_im.vtkGraphToGlyphs_NewInstance(cast(void*)swigCPtr);
    vtkGraphToGlyphs ret = (cPtr is null) ? null : new vtkGraphToGlyphs(cPtr, false);
    return ret;
  }

  alias vtkPolyDataAlgorithm.vtkPolyDataAlgorithm.NewInstance NewInstance;

  public void SetGlyphType(int _arg) {
    vtkd_im.vtkGraphToGlyphs_SetGlyphType(cast(void*)swigCPtr, _arg);
  }

  public int GetGlyphType() {
    auto ret = vtkd_im.vtkGraphToGlyphs_GetGlyphType(cast(void*)swigCPtr);
    return ret;
  }

  public void SetFilled(bool _arg) {
    vtkd_im.vtkGraphToGlyphs_SetFilled(cast(void*)swigCPtr, _arg);
  }

  public bool GetFilled() {
    bool ret = vtkd_im.vtkGraphToGlyphs_GetFilled(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void FilledOn() {
    vtkd_im.vtkGraphToGlyphs_FilledOn(cast(void*)swigCPtr);
  }

  public void FilledOff() {
    vtkd_im.vtkGraphToGlyphs_FilledOff(cast(void*)swigCPtr);
  }

  public void SetScreenSize(double _arg) {
    vtkd_im.vtkGraphToGlyphs_SetScreenSize(cast(void*)swigCPtr, _arg);
  }

  public double GetScreenSize() {
    auto ret = vtkd_im.vtkGraphToGlyphs_GetScreenSize(cast(void*)swigCPtr);
    return ret;
  }

  public void SetRenderer(vtkRenderer.vtkRenderer ren) {
    vtkd_im.vtkGraphToGlyphs_SetRenderer(cast(void*)swigCPtr, vtkRenderer.vtkRenderer.swigGetCPtr(ren));
  }

  public vtkRenderer.vtkRenderer GetRenderer() {
    void* cPtr = vtkd_im.vtkGraphToGlyphs_GetRenderer(cast(void*)swigCPtr);
    vtkRenderer.vtkRenderer ret = (cPtr is null) ? null : new vtkRenderer.vtkRenderer(cPtr, false);
    return ret;
  }

  public void SetScaling(bool b) {
    vtkd_im.vtkGraphToGlyphs_SetScaling(cast(void*)swigCPtr, b);
  }

  public bool GetScaling() {
    bool ret = vtkd_im.vtkGraphToGlyphs_GetScaling(cast(void*)swigCPtr) ? true : false;
    return ret;
  }
}
