/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkOpenGLLightState;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import SWIGTYPE_p_GLfloat;

class vtkOpenGLLightState {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(vtkOpenGLLightState obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkOpenGLLightState(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void Update() {
    vtkd_im.vtkOpenGLLightState_Update(cast(void*)swigCPtr);
  }

  public void Ambient(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLLightState_Ambient_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat Ambient() @property const {
    void* cPtr = vtkd_im.vtkOpenGLLightState_Ambient_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void Diffuse(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLLightState_Diffuse_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat Diffuse() @property const {
    void* cPtr = vtkd_im.vtkOpenGLLightState_Diffuse_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void Specular(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLLightState_Specular_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat Specular() @property const {
    void* cPtr = vtkd_im.vtkOpenGLLightState_Specular_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void Position(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLLightState_Position_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat Position() @property const {
    void* cPtr = vtkd_im.vtkOpenGLLightState_Position_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void ConstantAttenuation(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLLightState_ConstantAttenuation_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ConstantAttenuation() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLLightState_ConstantAttenuation_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void LinearAttenuation(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLLightState_LinearAttenuation_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat LinearAttenuation() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLLightState_LinearAttenuation_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void QuadraticAttenuation(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLLightState_QuadraticAttenuation_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat QuadraticAttenuation() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLLightState_QuadraticAttenuation_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void SpotDirection(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLLightState_SpotDirection_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat SpotDirection() @property const {
    void* cPtr = vtkd_im.vtkOpenGLLightState_SpotDirection_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = (cPtr is null) ? null : new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(cPtr, false);
    return ret;
  }

  public void SpotExponent(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLLightState_SpotExponent_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat SpotExponent() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLLightState_SpotExponent_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void SpotCutoff(SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat value) @property {
    vtkd_im.vtkOpenGLLightState_SpotCutoff_set(cast(void*)swigCPtr, SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat SpotCutoff() @property const {
    SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat ret = new SWIGTYPE_p_GLfloat.SWIGTYPE_p_GLfloat(vtkd_im.vtkOpenGLLightState_SpotCutoff_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public this() {
    this(vtkd_im.new_vtkOpenGLLightState(), true);
  }
}
