/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module DICOMParser;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import DICOMFile;
static import SWIGTYPE_p_std__vectorT_DICOMCallback_p_t;
static import DICOMCallback;
static import SWIGTYPE_p_std__vectorT_unsigned_short_t;
static import SWIGTYPE_p_std__vectorT_DICOMParser__VRTypes_t;

class DICOMParser {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(DICOMParser obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_DICOMParser(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  enum VRTypes {
    VR_UNKNOWN = 0x0,
    VR_OB = 0x424f,
    VR_AW = 0x5741,
    VR_AE = 0x4541,
    VR_AS = 0x5341,
    VR_CS = 0x5343,
    VR_UI = 0x4955,
    VR_DA = 0x4144,
    VR_DS = 0x5344,
    VR_DT = 0x5444,
    VR_IS = 0x5349,
    VR_LO = 0x4f4c,
    VR_LT = 0x544c,
    VR_OW = 0x574f,
    VR_PN = 0x4e50,
    VR_ST = 0x5453,
    VR_TM = 0x4d54,
    VR_UN = 0x4e55,
    VR_UT = 0x5455,
    VR_SQ = 0x5153,
    VR_SH = 0x4853,
    VR_FL = 0x4c46,
    VR_SL = 0x4c53,
    VR_AT = 0x5441,
    VR_UL = 0x4c55,
    VR_US = 0x5355,
    VR_SS = 0x5353,
    VR_FD = 0x4446
  }

  public this() {
    this(vtkd_im.new_DICOMParser(), true);
  }

  public bool OpenFile(string filename) {
    bool ret = vtkd_im.DICOMParser_OpenFile(cast(void*)swigCPtr, (filename ? std.string.toStringz(filename) : null)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public string GetFileName() {
    string ret = std.conv.to!string(vtkd_im.DICOMParser_GetFileName(cast(void*)swigCPtr));
    return ret;
  }

  public bool ReadHeader() {
    bool ret = vtkd_im.DICOMParser_ReadHeader(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public static bool IsDICOMFile(DICOMFile.DICOMFile file) {
    bool ret = vtkd_im.DICOMParser_IsDICOMFile__SWIG_0(DICOMFile.DICOMFile.swigGetCPtr(file)) ? true : false;
    return ret;
  }

  public bool IsDICOMFile() {
    bool ret = vtkd_im.DICOMParser_IsDICOMFile__SWIG_1(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public static bool CheckMagic(string magic_number) {
    bool ret = vtkd_im.DICOMParser_CheckMagic((magic_number ? std.string.toStringz(magic_number) : null)) ? true : false;
    return ret;
  }

  public void ModalityTag(ushort group, ushort element, DICOMParser.VRTypes datatype, ubyte* tempdata, int length) {
    vtkd_im.DICOMParser_ModalityTag(cast(void*)swigCPtr, group, element, cast(int)datatype, cast(void*)tempdata, length);
  }

  public void SetDICOMTagCallbacks(ushort group, ushort element, DICOMParser.VRTypes datatype, SWIGTYPE_p_std__vectorT_DICOMCallback_p_t.SWIGTYPE_p_std__vectorT_DICOMCallback_p_t cbVector) {
    vtkd_im.DICOMParser_SetDICOMTagCallbacks(cast(void*)swigCPtr, group, element, cast(int)datatype, SWIGTYPE_p_std__vectorT_DICOMCallback_p_t.SWIGTYPE_p_std__vectorT_DICOMCallback_p_t.swigGetCPtr(cbVector));
  }

  public void AddDICOMTagCallbacks(ushort group, ushort element, DICOMParser.VRTypes datatype, SWIGTYPE_p_std__vectorT_DICOMCallback_p_t.SWIGTYPE_p_std__vectorT_DICOMCallback_p_t cbVector) {
    vtkd_im.DICOMParser_AddDICOMTagCallbacks(cast(void*)swigCPtr, group, element, cast(int)datatype, SWIGTYPE_p_std__vectorT_DICOMCallback_p_t.SWIGTYPE_p_std__vectorT_DICOMCallback_p_t.swigGetCPtr(cbVector));
  }

  public void AddDICOMTagCallback(ushort group, ushort element, DICOMParser.VRTypes datatype, DICOMCallback.DICOMCallback cb) {
    vtkd_im.DICOMParser_AddDICOMTagCallback(cast(void*)swigCPtr, group, element, cast(int)datatype, DICOMCallback.DICOMCallback.swigGetCPtr(cb));
  }

  public void AddDICOMTagCallbackToAllTags(DICOMCallback.DICOMCallback cb) {
    vtkd_im.DICOMParser_AddDICOMTagCallbackToAllTags(cast(void*)swigCPtr, DICOMCallback.DICOMCallback.swigGetCPtr(cb));
  }

  public DICOMFile.DICOMFile GetDICOMFile() {
    void* cPtr = vtkd_im.DICOMParser_GetDICOMFile(cast(void*)swigCPtr);
    DICOMFile.DICOMFile ret = (cPtr is null) ? null : new DICOMFile.DICOMFile(cPtr, false);
    return ret;
  }

  public void ClearAllDICOMTagCallbacks() {
    vtkd_im.DICOMParser_ClearAllDICOMTagCallbacks(cast(void*)swigCPtr);
  }

  public void TransferSyntaxCallback(DICOMParser parser, ushort arg1, ushort arg2, DICOMParser.VRTypes arg3, ubyte* val, int arg5) {
    vtkd_im.DICOMParser_TransferSyntaxCallback(cast(void*)swigCPtr, DICOMParser.swigGetCPtr(parser), arg1, arg2, cast(int)arg3, cast(void*)val, arg5);
  }

  public void GetGroupsElementsDatatypes(SWIGTYPE_p_std__vectorT_unsigned_short_t.SWIGTYPE_p_std__vectorT_unsigned_short_t groups, SWIGTYPE_p_std__vectorT_unsigned_short_t.SWIGTYPE_p_std__vectorT_unsigned_short_t elements, SWIGTYPE_p_std__vectorT_DICOMParser__VRTypes_t.SWIGTYPE_p_std__vectorT_DICOMParser__VRTypes_t datatypes) {
    vtkd_im.DICOMParser_GetGroupsElementsDatatypes(cast(void*)swigCPtr, SWIGTYPE_p_std__vectorT_unsigned_short_t.SWIGTYPE_p_std__vectorT_unsigned_short_t.swigGetCPtr(groups), SWIGTYPE_p_std__vectorT_unsigned_short_t.SWIGTYPE_p_std__vectorT_unsigned_short_t.swigGetCPtr(elements), SWIGTYPE_p_std__vectorT_DICOMParser__VRTypes_t.SWIGTYPE_p_std__vectorT_DICOMParser__VRTypes_t.swigGetCPtr(datatypes));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }
}
