/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkSphereHandleRepresentation;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkProperty;
static import SWIGTYPE_p_double;
static import vtkHandleRepresentation;

class vtkSphereHandleRepresentation : vtkHandleRepresentation.vtkHandleRepresentation {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkSphereHandleRepresentation_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkSphereHandleRepresentation obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkSphereHandleRepresentation New() {
    void* cPtr = vtkd_im.vtkSphereHandleRepresentation_New();
    vtkSphereHandleRepresentation ret = (cPtr is null) ? null : new vtkSphereHandleRepresentation(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkSphereHandleRepresentation_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkSphereHandleRepresentation SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkSphereHandleRepresentation_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkSphereHandleRepresentation ret = (cPtr is null) ? null : new vtkSphereHandleRepresentation(cPtr, false);
    return ret;
  }

  public vtkSphereHandleRepresentation NewInstance() const {
    void* cPtr = vtkd_im.vtkSphereHandleRepresentation_NewInstance(cast(void*)swigCPtr);
    vtkSphereHandleRepresentation ret = (cPtr is null) ? null : new vtkSphereHandleRepresentation(cPtr, false);
    return ret;
  }

  alias vtkHandleRepresentation.vtkHandleRepresentation.NewInstance NewInstance;

  public void SetTranslationMode(int _arg) {
    vtkd_im.vtkSphereHandleRepresentation_SetTranslationMode(cast(void*)swigCPtr, _arg);
  }

  public int GetTranslationMode() {
    auto ret = vtkd_im.vtkSphereHandleRepresentation_GetTranslationMode(cast(void*)swigCPtr);
    return ret;
  }

  public void TranslationModeOn() {
    vtkd_im.vtkSphereHandleRepresentation_TranslationModeOn(cast(void*)swigCPtr);
  }

  public void TranslationModeOff() {
    vtkd_im.vtkSphereHandleRepresentation_TranslationModeOff(cast(void*)swigCPtr);
  }

  public void SetSphereRadius(double arg0) {
    vtkd_im.vtkSphereHandleRepresentation_SetSphereRadius(cast(void*)swigCPtr, arg0);
  }

  public double GetSphereRadius() {
    auto ret = vtkd_im.vtkSphereHandleRepresentation_GetSphereRadius(cast(void*)swigCPtr);
    return ret;
  }

  public void SetProperty(vtkProperty.vtkProperty arg0) {
    vtkd_im.vtkSphereHandleRepresentation_SetProperty(cast(void*)swigCPtr, vtkProperty.vtkProperty.swigGetCPtr(arg0));
  }

  public void SetSelectedProperty(vtkProperty.vtkProperty arg0) {
    vtkd_im.vtkSphereHandleRepresentation_SetSelectedProperty(cast(void*)swigCPtr, vtkProperty.vtkProperty.swigGetCPtr(arg0));
  }

  public vtkProperty.vtkProperty GetProperty() {
    void* cPtr = vtkd_im.vtkSphereHandleRepresentation_GetProperty(cast(void*)swigCPtr);
    vtkProperty.vtkProperty ret = (cPtr is null) ? null : new vtkProperty.vtkProperty(cPtr, false);
    return ret;
  }

  public vtkProperty.vtkProperty GetSelectedProperty() {
    void* cPtr = vtkd_im.vtkSphereHandleRepresentation_GetSelectedProperty(cast(void*)swigCPtr);
    vtkProperty.vtkProperty ret = (cPtr is null) ? null : new vtkProperty.vtkProperty(cPtr, false);
    return ret;
  }

  public void SetHotSpotSize(double _arg) {
    vtkd_im.vtkSphereHandleRepresentation_SetHotSpotSize(cast(void*)swigCPtr, _arg);
  }

  public double GetHotSpotSizeMinValue() {
    auto ret = vtkd_im.vtkSphereHandleRepresentation_GetHotSpotSizeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetHotSpotSizeMaxValue() {
    auto ret = vtkd_im.vtkSphereHandleRepresentation_GetHotSpotSizeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetHotSpotSize() {
    auto ret = vtkd_im.vtkSphereHandleRepresentation_GetHotSpotSize(cast(void*)swigCPtr);
    return ret;
  }

  public override int ComputeInteractionState(int X, int Y, int modify) {
    auto ret = vtkd_im.vtkSphereHandleRepresentation_ComputeInteractionState__SWIG_0(cast(void*)swigCPtr, X, Y, modify);
    return ret;
  }

  public override int ComputeInteractionState(int X, int Y) {
    auto ret = vtkd_im.vtkSphereHandleRepresentation_ComputeInteractionState__SWIG_1(cast(void*)swigCPtr, X, Y);
    return ret;
  }

  public void PlaceWidget(SWIGTYPE_p_double.SWIGTYPE_p_double bounds) {
    vtkd_im.vtkSphereHandleRepresentation_PlaceWidget(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
  }
}
