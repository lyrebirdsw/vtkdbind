/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPlanesIntersection;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkPoints;
static import SWIGTYPE_p_double;
static import vtkCell;
static import vtkPlanes;

class vtkPlanesIntersection : vtkPlanes.vtkPlanes {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPlanesIntersection_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPlanesIntersection obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPlanesIntersection_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPlanesIntersection SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPlanesIntersection_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPlanesIntersection ret = (cPtr is null) ? null : new vtkPlanesIntersection(cPtr, false);
    return ret;
  }

  public vtkPlanesIntersection NewInstance() const {
    void* cPtr = vtkd_im.vtkPlanesIntersection_NewInstance(cast(void*)swigCPtr);
    vtkPlanesIntersection ret = (cPtr is null) ? null : new vtkPlanesIntersection(cPtr, false);
    return ret;
  }

  alias vtkPlanes.vtkPlanes.NewInstance NewInstance;

  public static vtkPlanesIntersection New() {
    void* cPtr = vtkd_im.vtkPlanesIntersection_New();
    vtkPlanesIntersection ret = (cPtr is null) ? null : new vtkPlanesIntersection(cPtr, false);
    return ret;
  }

  public void SetRegionVertices(vtkPoints.vtkPoints pts) {
    vtkd_im.vtkPlanesIntersection_SetRegionVertices__SWIG_0(cast(void*)swigCPtr, vtkPoints.vtkPoints.swigGetCPtr(pts));
  }

  public void SetRegionVertices(double* v, int nvertices) {
    vtkd_im.vtkPlanesIntersection_SetRegionVertices__SWIG_1(cast(void*)swigCPtr, cast(void*)v, nvertices);
  }

  public int GetNumRegionVertices() {
    auto ret = vtkd_im.vtkPlanesIntersection_GetNumRegionVertices(cast(void*)swigCPtr);
    return ret;
  }

  public int GetRegionVertices(double* v, int nvertices) {
    auto ret = vtkd_im.vtkPlanesIntersection_GetRegionVertices(cast(void*)swigCPtr, cast(void*)v, nvertices);
    return ret;
  }

  public int IntersectsRegion(vtkPoints.vtkPoints R) {
    auto ret = vtkd_im.vtkPlanesIntersection_IntersectsRegion(cast(void*)swigCPtr, vtkPoints.vtkPoints.swigGetCPtr(R));
    return ret;
  }

  public static int PolygonIntersectsBBox(SWIGTYPE_p_double.SWIGTYPE_p_double bounds, vtkPoints.vtkPoints pts) {
    auto ret = vtkd_im.vtkPlanesIntersection_PolygonIntersectsBBox(SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds), vtkPoints.vtkPoints.swigGetCPtr(pts));
    return ret;
  }

  public static vtkPlanesIntersection Convert3DCell(vtkCell.vtkCell cell) {
    void* cPtr = vtkd_im.vtkPlanesIntersection_Convert3DCell(vtkCell.vtkCell.swigGetCPtr(cell));
    vtkPlanesIntersection ret = (cPtr is null) ? null : new vtkPlanesIntersection(cPtr, false);
    return ret;
  }
}
