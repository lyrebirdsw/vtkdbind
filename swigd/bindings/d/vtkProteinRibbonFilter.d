/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkProteinRibbonFilter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkPolyDataAlgorithm;

class vtkProteinRibbonFilter : vtkPolyDataAlgorithm.vtkPolyDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkProteinRibbonFilter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkProteinRibbonFilter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkProteinRibbonFilter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkProteinRibbonFilter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkProteinRibbonFilter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkProteinRibbonFilter ret = (cPtr is null) ? null : new vtkProteinRibbonFilter(cPtr, false);
    return ret;
  }

  public vtkProteinRibbonFilter NewInstance() const {
    void* cPtr = vtkd_im.vtkProteinRibbonFilter_NewInstance(cast(void*)swigCPtr);
    vtkProteinRibbonFilter ret = (cPtr is null) ? null : new vtkProteinRibbonFilter(cPtr, false);
    return ret;
  }

  alias vtkPolyDataAlgorithm.vtkPolyDataAlgorithm.NewInstance NewInstance;

  public static vtkProteinRibbonFilter New() {
    void* cPtr = vtkd_im.vtkProteinRibbonFilter_New();
    vtkProteinRibbonFilter ret = (cPtr is null) ? null : new vtkProteinRibbonFilter(cPtr, false);
    return ret;
  }

  public float GetCoilWidth() {
    auto ret = vtkd_im.vtkProteinRibbonFilter_GetCoilWidth(cast(void*)swigCPtr);
    return ret;
  }

  public void SetCoilWidth(float _arg) {
    vtkd_im.vtkProteinRibbonFilter_SetCoilWidth(cast(void*)swigCPtr, _arg);
  }

  public float GetHelixWidth() {
    auto ret = vtkd_im.vtkProteinRibbonFilter_GetHelixWidth(cast(void*)swigCPtr);
    return ret;
  }

  public void SetHelixWidth(float _arg) {
    vtkd_im.vtkProteinRibbonFilter_SetHelixWidth(cast(void*)swigCPtr, _arg);
  }

  public int GetSubdivideFactor() {
    auto ret = vtkd_im.vtkProteinRibbonFilter_GetSubdivideFactor(cast(void*)swigCPtr);
    return ret;
  }

  public void SetSubdivideFactor(int _arg) {
    vtkd_im.vtkProteinRibbonFilter_SetSubdivideFactor(cast(void*)swigCPtr, _arg);
  }

  public bool GetDrawSmallMoleculesAsSpheres() {
    bool ret = vtkd_im.vtkProteinRibbonFilter_GetDrawSmallMoleculesAsSpheres(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetDrawSmallMoleculesAsSpheres(bool _arg) {
    vtkd_im.vtkProteinRibbonFilter_SetDrawSmallMoleculesAsSpheres(cast(void*)swigCPtr, _arg);
  }

  public int GetSphereResolution() {
    auto ret = vtkd_im.vtkProteinRibbonFilter_GetSphereResolution(cast(void*)swigCPtr);
    return ret;
  }

  public void SetSphereResolution(int _arg) {
    vtkd_im.vtkProteinRibbonFilter_SetSphereResolution(cast(void*)swigCPtr, _arg);
  }
}
