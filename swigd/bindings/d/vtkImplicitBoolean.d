/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkImplicitBoolean;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkImplicitFunction;
static import vtkImplicitFunctionCollection;

class vtkImplicitBoolean : vtkImplicitFunction.vtkImplicitFunction {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkImplicitBoolean_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkImplicitBoolean obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  enum OperationType {
    VTK_UNION = 0,
    VTK_INTERSECTION,
    VTK_DIFFERENCE,
    VTK_UNION_OF_MAGNITUDES
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkImplicitBoolean_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkImplicitBoolean SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkImplicitBoolean_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkImplicitBoolean ret = (cPtr is null) ? null : new vtkImplicitBoolean(cPtr, false);
    return ret;
  }

  public vtkImplicitBoolean NewInstance() const {
    void* cPtr = vtkd_im.vtkImplicitBoolean_NewInstance(cast(void*)swigCPtr);
    vtkImplicitBoolean ret = (cPtr is null) ? null : new vtkImplicitBoolean(cPtr, false);
    return ret;
  }

  alias vtkImplicitFunction.vtkImplicitFunction.NewInstance NewInstance;

  public static vtkImplicitBoolean New() {
    void* cPtr = vtkd_im.vtkImplicitBoolean_New();
    vtkImplicitBoolean ret = (cPtr is null) ? null : new vtkImplicitBoolean(cPtr, false);
    return ret;
  }

  public override double EvaluateFunction(SWIGTYPE_p_double.SWIGTYPE_p_double x) {
    auto ret = vtkd_im.vtkImplicitBoolean_EvaluateFunction__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x));
    return ret;
  }

  public double EvaluateFunction(double x, double y, double z) {
    auto ret = vtkd_im.vtkImplicitBoolean_EvaluateFunction__SWIG_1(cast(void*)swigCPtr, x, y, z);
    return ret;
  }

  alias vtkImplicitFunction.vtkImplicitFunction.EvaluateFunction EvaluateFunction;

  public void AddFunction(vtkImplicitFunction.vtkImplicitFunction arg0) {
    vtkd_im.vtkImplicitBoolean_AddFunction(cast(void*)swigCPtr, vtkImplicitFunction.vtkImplicitFunction.swigGetCPtr(arg0));
  }

  public void RemoveFunction(vtkImplicitFunction.vtkImplicitFunction arg0) {
    vtkd_im.vtkImplicitBoolean_RemoveFunction(cast(void*)swigCPtr, vtkImplicitFunction.vtkImplicitFunction.swigGetCPtr(arg0));
  }

  public vtkImplicitFunctionCollection.vtkImplicitFunctionCollection GetFunction() {
    void* cPtr = vtkd_im.vtkImplicitBoolean_GetFunction(cast(void*)swigCPtr);
    vtkImplicitFunctionCollection.vtkImplicitFunctionCollection ret = (cPtr is null) ? null : new vtkImplicitFunctionCollection.vtkImplicitFunctionCollection(cPtr, false);
    return ret;
  }

  public void SetOperationType(int _arg) {
    vtkd_im.vtkImplicitBoolean_SetOperationType(cast(void*)swigCPtr, _arg);
  }

  public int GetOperationTypeMinValue() {
    auto ret = vtkd_im.vtkImplicitBoolean_GetOperationTypeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetOperationTypeMaxValue() {
    auto ret = vtkd_im.vtkImplicitBoolean_GetOperationTypeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetOperationType() {
    auto ret = vtkd_im.vtkImplicitBoolean_GetOperationType(cast(void*)swigCPtr);
    return ret;
  }

  public void SetOperationTypeToUnion() {
    vtkd_im.vtkImplicitBoolean_SetOperationTypeToUnion(cast(void*)swigCPtr);
  }

  public void SetOperationTypeToIntersection() {
    vtkd_im.vtkImplicitBoolean_SetOperationTypeToIntersection(cast(void*)swigCPtr);
  }

  public void SetOperationTypeToDifference() {
    vtkd_im.vtkImplicitBoolean_SetOperationTypeToDifference(cast(void*)swigCPtr);
  }

  public void SetOperationTypeToUnionOfMagnitudes() {
    vtkd_im.vtkImplicitBoolean_SetOperationTypeToUnionOfMagnitudes(cast(void*)swigCPtr);
  }

  public string GetOperationTypeAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkImplicitBoolean_GetOperationTypeAsString(cast(void*)swigCPtr));
    return ret;
  }
}
