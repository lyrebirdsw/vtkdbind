/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkTemporalPathLineFilter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkAlgorithmOutput;
static import vtkDataSet;
static import vtkPolyDataAlgorithm;

class vtkTemporalPathLineFilter : vtkPolyDataAlgorithm.vtkPolyDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkTemporalPathLineFilter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkTemporalPathLineFilter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkTemporalPathLineFilter New() {
    void* cPtr = vtkd_im.vtkTemporalPathLineFilter_New();
    vtkTemporalPathLineFilter ret = (cPtr is null) ? null : new vtkTemporalPathLineFilter(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkTemporalPathLineFilter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkTemporalPathLineFilter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkTemporalPathLineFilter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkTemporalPathLineFilter ret = (cPtr is null) ? null : new vtkTemporalPathLineFilter(cPtr, false);
    return ret;
  }

  public vtkTemporalPathLineFilter NewInstance() const {
    void* cPtr = vtkd_im.vtkTemporalPathLineFilter_NewInstance(cast(void*)swigCPtr);
    vtkTemporalPathLineFilter ret = (cPtr is null) ? null : new vtkTemporalPathLineFilter(cPtr, false);
    return ret;
  }

  alias vtkPolyDataAlgorithm.vtkPolyDataAlgorithm.NewInstance NewInstance;

  public void SetMaskPoints(int _arg) {
    vtkd_im.vtkTemporalPathLineFilter_SetMaskPoints(cast(void*)swigCPtr, _arg);
  }

  public int GetMaskPoints() {
    auto ret = vtkd_im.vtkTemporalPathLineFilter_GetMaskPoints(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMaxTrackLength(uint _arg) {
    vtkd_im.vtkTemporalPathLineFilter_SetMaxTrackLength(cast(void*)swigCPtr, _arg);
  }

  public uint GetMaxTrackLength() {
    auto ret = vtkd_im.vtkTemporalPathLineFilter_GetMaxTrackLength(cast(void*)swigCPtr);
    return ret;
  }

  public void SetIdChannelArray(string _arg) {
    vtkd_im.vtkTemporalPathLineFilter_SetIdChannelArray(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetIdChannelArray() {
    string ret = std.conv.to!string(vtkd_im.vtkTemporalPathLineFilter_GetIdChannelArray(cast(void*)swigCPtr));
    return ret;
  }

  public void SetMaxStepDistance(double _arg1, double _arg2, double _arg3) {
    vtkd_im.vtkTemporalPathLineFilter_SetMaxStepDistance__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetMaxStepDistance(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkTemporalPathLineFilter_SetMaxStepDistance__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetMaxStepDistance() {
    auto ret = cast(double*)vtkd_im.vtkTemporalPathLineFilter_GetMaxStepDistance__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetMaxStepDistance(double* _arg1, double* _arg2, double* _arg3) {
    vtkd_im.vtkTemporalPathLineFilter_GetMaxStepDistance__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetMaxStepDistance(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkTemporalPathLineFilter_GetMaxStepDistance__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public void SetKeepDeadTrails(int _arg) {
    vtkd_im.vtkTemporalPathLineFilter_SetKeepDeadTrails(cast(void*)swigCPtr, _arg);
  }

  public int GetKeepDeadTrails() {
    auto ret = vtkd_im.vtkTemporalPathLineFilter_GetKeepDeadTrails(cast(void*)swigCPtr);
    return ret;
  }

  public void Flush() {
    vtkd_im.vtkTemporalPathLineFilter_Flush(cast(void*)swigCPtr);
  }

  public void SetSelectionConnection(vtkAlgorithmOutput.vtkAlgorithmOutput algOutput) {
    vtkd_im.vtkTemporalPathLineFilter_SetSelectionConnection(cast(void*)swigCPtr, vtkAlgorithmOutput.vtkAlgorithmOutput.swigGetCPtr(algOutput));
  }

  public void SetSelectionData(vtkDataSet.vtkDataSet input) {
    vtkd_im.vtkTemporalPathLineFilter_SetSelectionData(cast(void*)swigCPtr, vtkDataSet.vtkDataSet.swigGetCPtr(input));
  }
}
