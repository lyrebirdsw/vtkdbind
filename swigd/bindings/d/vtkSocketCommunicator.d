/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkSocketCommunicator;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkServerSocket;
static import SWIGTYPE_p_Operation;
static import vtkClientSocket;
static import vtkCommunicator;

class vtkSocketCommunicator : vtkCommunicator.vtkCommunicator {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkSocketCommunicator_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkSocketCommunicator obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkSocketCommunicator(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkSocketCommunicator New() {
    void* cPtr = vtkd_im.vtkSocketCommunicator_New();
    vtkSocketCommunicator ret = (cPtr is null) ? null : new vtkSocketCommunicator(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkSocketCommunicator_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkSocketCommunicator SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkSocketCommunicator_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkSocketCommunicator ret = (cPtr is null) ? null : new vtkSocketCommunicator(cPtr, false);
    return ret;
  }

  public vtkSocketCommunicator NewInstance() const {
    void* cPtr = vtkd_im.vtkSocketCommunicator_NewInstance(cast(void*)swigCPtr);
    vtkSocketCommunicator ret = (cPtr is null) ? null : new vtkSocketCommunicator(cPtr, false);
    return ret;
  }

  alias vtkCommunicator.vtkCommunicator.NewInstance NewInstance;

  public int WaitForConnection(int port) {
    auto ret = vtkd_im.vtkSocketCommunicator_WaitForConnection__SWIG_0(cast(void*)swigCPtr, port);
    return ret;
  }

  public int WaitForConnection(vtkServerSocket.vtkServerSocket socket, core.stdc.config.c_ulong msec) {
    auto ret = vtkd_im.vtkSocketCommunicator_WaitForConnection__SWIG_1(cast(void*)swigCPtr, vtkServerSocket.vtkServerSocket.swigGetCPtr(socket), msec);
    return ret;
  }

  public int WaitForConnection(vtkServerSocket.vtkServerSocket socket) {
    auto ret = vtkd_im.vtkSocketCommunicator_WaitForConnection__SWIG_2(cast(void*)swigCPtr, vtkServerSocket.vtkServerSocket.swigGetCPtr(socket));
    return ret;
  }

  public void CloseConnection() {
    vtkd_im.vtkSocketCommunicator_CloseConnection(cast(void*)swigCPtr);
  }

  public int ConnectTo(string hostName, int port) {
    auto ret = vtkd_im.vtkSocketCommunicator_ConnectTo(cast(void*)swigCPtr, (hostName ? std.string.toStringz(hostName) : null), port);
    return ret;
  }

  public int GetSwapBytesInReceivedData() {
    auto ret = vtkd_im.vtkSocketCommunicator_GetSwapBytesInReceivedData(cast(void*)swigCPtr);
    return ret;
  }

  public int GetIsConnected() {
    auto ret = vtkd_im.vtkSocketCommunicator_GetIsConnected(cast(void*)swigCPtr);
    return ret;
  }

  public override int ReduceVoidArray(void* sendBuffer, void* recvBuffer, long length, int type, int operation, int destProcessId) {
    auto ret = vtkd_im.vtkSocketCommunicator_ReduceVoidArray__SWIG_0(cast(void*)swigCPtr, cast(void*)sendBuffer, cast(void*)recvBuffer, length, type, operation, destProcessId);
    return ret;
  }

  public override int ReduceVoidArray(void* sendBuffer, void* recvBuffer, long length, int type, SWIGTYPE_p_Operation.SWIGTYPE_p_Operation operation, int destProcessId) {
    auto ret = vtkd_im.vtkSocketCommunicator_ReduceVoidArray__SWIG_1(cast(void*)swigCPtr, cast(void*)sendBuffer, cast(void*)recvBuffer, length, type, SWIGTYPE_p_Operation.SWIGTYPE_p_Operation.swigGetCPtr(operation), destProcessId);
    return ret;
  }

  public override int AllReduceVoidArray(void* sendBuffer, void* recvBuffer, long length, int type, int operation) {
    auto ret = vtkd_im.vtkSocketCommunicator_AllReduceVoidArray__SWIG_0(cast(void*)swigCPtr, cast(void*)sendBuffer, cast(void*)recvBuffer, length, type, operation);
    return ret;
  }

  public override int AllReduceVoidArray(void* sendBuffer, void* recvBuffer, long length, int type, SWIGTYPE_p_Operation.SWIGTYPE_p_Operation operation) {
    auto ret = vtkd_im.vtkSocketCommunicator_AllReduceVoidArray__SWIG_1(cast(void*)swigCPtr, cast(void*)sendBuffer, cast(void*)recvBuffer, length, type, SWIGTYPE_p_Operation.SWIGTYPE_p_Operation.swigGetCPtr(operation));
    return ret;
  }

  public void SetPerformHandshake(int _arg) {
    vtkd_im.vtkSocketCommunicator_SetPerformHandshake(cast(void*)swigCPtr, _arg);
  }

  public int GetPerformHandshakeMinValue() {
    auto ret = vtkd_im.vtkSocketCommunicator_GetPerformHandshakeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetPerformHandshakeMaxValue() {
    auto ret = vtkd_im.vtkSocketCommunicator_GetPerformHandshakeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public void PerformHandshakeOn() {
    vtkd_im.vtkSocketCommunicator_PerformHandshakeOn(cast(void*)swigCPtr);
  }

  public void PerformHandshakeOff() {
    vtkd_im.vtkSocketCommunicator_PerformHandshakeOff(cast(void*)swigCPtr);
  }

  public int GetPerformHandshake() {
    auto ret = vtkd_im.vtkSocketCommunicator_GetPerformHandshake(cast(void*)swigCPtr);
    return ret;
  }

  public int LogToFile(string name) {
    auto ret = vtkd_im.vtkSocketCommunicator_LogToFile__SWIG_0(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
    return ret;
  }

  public int LogToFile(string name, int append) {
    auto ret = vtkd_im.vtkSocketCommunicator_LogToFile__SWIG_1(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), append);
    return ret;
  }

  public void SetReportErrors(int _arg) {
    vtkd_im.vtkSocketCommunicator_SetReportErrors(cast(void*)swigCPtr, _arg);
  }

  public int GetReportErrors() {
    auto ret = vtkd_im.vtkSocketCommunicator_GetReportErrors(cast(void*)swigCPtr);
    return ret;
  }

  public vtkClientSocket.vtkClientSocket GetSocket() {
    void* cPtr = vtkd_im.vtkSocketCommunicator_GetSocket(cast(void*)swigCPtr);
    vtkClientSocket.vtkClientSocket ret = (cPtr is null) ? null : new vtkClientSocket.vtkClientSocket(cPtr, false);
    return ret;
  }

  public void SetSocket(vtkClientSocket.vtkClientSocket arg0) {
    vtkd_im.vtkSocketCommunicator_SetSocket(cast(void*)swigCPtr, vtkClientSocket.vtkClientSocket.swigGetCPtr(arg0));
  }

  public int Handshake() {
    auto ret = vtkd_im.vtkSocketCommunicator_Handshake(cast(void*)swigCPtr);
    return ret;
  }

  public int ServerSideHandshake() {
    auto ret = vtkd_im.vtkSocketCommunicator_ServerSideHandshake(cast(void*)swigCPtr);
    return ret;
  }

  public int ClientSideHandshake() {
    auto ret = vtkd_im.vtkSocketCommunicator_ClientSideHandshake(cast(void*)swigCPtr);
    return ret;
  }

  public int GetIsServer() {
    auto ret = vtkd_im.vtkSocketCommunicator_GetIsServer(cast(void*)swigCPtr);
    return ret;
  }

  public static int GetVersion() {
    auto ret = vtkd_im.vtkSocketCommunicator_GetVersion();
    return ret;
  }

  public void BufferCurrentMessage() {
    vtkd_im.vtkSocketCommunicator_BufferCurrentMessage(cast(void*)swigCPtr);
  }

  public bool HasBufferredMessages() {
    bool ret = vtkd_im.vtkSocketCommunicator_HasBufferredMessages(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public this() {
    this(vtkd_im.new_vtkSocketCommunicator(), true);
  }
}
