/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkWindowToImageFilter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkWindow;
static import SWIGTYPE_p_double;
static import vtkImageData;
static import vtkAlgorithm;

class vtkWindowToImageFilter : vtkAlgorithm.vtkAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkWindowToImageFilter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkWindowToImageFilter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkWindowToImageFilter New() {
    void* cPtr = vtkd_im.vtkWindowToImageFilter_New();
    vtkWindowToImageFilter ret = (cPtr is null) ? null : new vtkWindowToImageFilter(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkWindowToImageFilter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkWindowToImageFilter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkWindowToImageFilter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkWindowToImageFilter ret = (cPtr is null) ? null : new vtkWindowToImageFilter(cPtr, false);
    return ret;
  }

  public vtkWindowToImageFilter NewInstance() const {
    void* cPtr = vtkd_im.vtkWindowToImageFilter_NewInstance(cast(void*)swigCPtr);
    vtkWindowToImageFilter ret = (cPtr is null) ? null : new vtkWindowToImageFilter(cPtr, false);
    return ret;
  }

  alias vtkAlgorithm.vtkAlgorithm.NewInstance NewInstance;

  public void SetInput(vtkWindow.vtkWindow input) {
    vtkd_im.vtkWindowToImageFilter_SetInput(cast(void*)swigCPtr, vtkWindow.vtkWindow.swigGetCPtr(input));
  }

  public vtkWindow.vtkWindow GetInput() {
    void* cPtr = vtkd_im.vtkWindowToImageFilter_GetInput(cast(void*)swigCPtr);
    vtkWindow.vtkWindow ret = (cPtr is null) ? null : new vtkWindow.vtkWindow(cPtr, false);
    return ret;
  }

  public void SetMagnification(int _arg) {
    vtkd_im.vtkWindowToImageFilter_SetMagnification(cast(void*)swigCPtr, _arg);
  }

  public int GetMagnificationMinValue() {
    auto ret = vtkd_im.vtkWindowToImageFilter_GetMagnificationMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetMagnificationMaxValue() {
    auto ret = vtkd_im.vtkWindowToImageFilter_GetMagnificationMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetMagnification() {
    auto ret = vtkd_im.vtkWindowToImageFilter_GetMagnification(cast(void*)swigCPtr);
    return ret;
  }

  public void SetFixBoundary(bool _arg) {
    vtkd_im.vtkWindowToImageFilter_SetFixBoundary(cast(void*)swigCPtr, _arg);
  }

  public bool GetFixBoundary() {
    bool ret = vtkd_im.vtkWindowToImageFilter_GetFixBoundary(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void FixBoundaryOn() {
    vtkd_im.vtkWindowToImageFilter_FixBoundaryOn(cast(void*)swigCPtr);
  }

  public void FixBoundaryOff() {
    vtkd_im.vtkWindowToImageFilter_FixBoundaryOff(cast(void*)swigCPtr);
  }

  public void ReadFrontBufferOn() {
    vtkd_im.vtkWindowToImageFilter_ReadFrontBufferOn(cast(void*)swigCPtr);
  }

  public void ReadFrontBufferOff() {
    vtkd_im.vtkWindowToImageFilter_ReadFrontBufferOff(cast(void*)swigCPtr);
  }

  public int GetReadFrontBuffer() {
    auto ret = vtkd_im.vtkWindowToImageFilter_GetReadFrontBuffer(cast(void*)swigCPtr);
    return ret;
  }

  public void SetReadFrontBuffer(int _arg) {
    vtkd_im.vtkWindowToImageFilter_SetReadFrontBuffer(cast(void*)swigCPtr, _arg);
  }

  public void ShouldRerenderOn() {
    vtkd_im.vtkWindowToImageFilter_ShouldRerenderOn(cast(void*)swigCPtr);
  }

  public void ShouldRerenderOff() {
    vtkd_im.vtkWindowToImageFilter_ShouldRerenderOff(cast(void*)swigCPtr);
  }

  public void SetShouldRerender(int _arg) {
    vtkd_im.vtkWindowToImageFilter_SetShouldRerender(cast(void*)swigCPtr, _arg);
  }

  public int GetShouldRerender() {
    auto ret = vtkd_im.vtkWindowToImageFilter_GetShouldRerender(cast(void*)swigCPtr);
    return ret;
  }

  public void SetViewport(double _arg1, double _arg2, double _arg3, double _arg4) {
    vtkd_im.vtkWindowToImageFilter_SetViewport__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3, _arg4);
  }

  public void SetViewport(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkWindowToImageFilter_SetViewport__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetViewport() {
    auto ret = cast(double*)vtkd_im.vtkWindowToImageFilter_GetViewport__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetViewport(SWIGTYPE_p_double.SWIGTYPE_p_double data) {
    vtkd_im.vtkWindowToImageFilter_GetViewport__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(data));
  }

  public void SetInputBufferType(int _arg) {
    vtkd_im.vtkWindowToImageFilter_SetInputBufferType(cast(void*)swigCPtr, _arg);
  }

  public int GetInputBufferType() {
    auto ret = vtkd_im.vtkWindowToImageFilter_GetInputBufferType(cast(void*)swigCPtr);
    return ret;
  }

  public void SetInputBufferTypeToRGB() {
    vtkd_im.vtkWindowToImageFilter_SetInputBufferTypeToRGB(cast(void*)swigCPtr);
  }

  public void SetInputBufferTypeToRGBA() {
    vtkd_im.vtkWindowToImageFilter_SetInputBufferTypeToRGBA(cast(void*)swigCPtr);
  }

  public void SetInputBufferTypeToZBuffer() {
    vtkd_im.vtkWindowToImageFilter_SetInputBufferTypeToZBuffer(cast(void*)swigCPtr);
  }

  public vtkImageData.vtkImageData GetOutput() {
    void* cPtr = vtkd_im.vtkWindowToImageFilter_GetOutput(cast(void*)swigCPtr);
    vtkImageData.vtkImageData ret = (cPtr is null) ? null : new vtkImageData.vtkImageData(cPtr, false);
    return ret;
  }
}
