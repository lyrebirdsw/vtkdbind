/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkCellTreeLocator;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkGenericCell;
static import vtkPoints;
static import vtkIdList;
static import vtkAbstractCellLocator;

class vtkCellTreeLocator : vtkAbstractCellLocator.vtkAbstractCellLocator {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkCellTreeLocator_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkCellTreeLocator obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkCellTreeLocator_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkCellTreeLocator SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkCellTreeLocator_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkCellTreeLocator ret = (cPtr is null) ? null : new vtkCellTreeLocator(cPtr, false);
    return ret;
  }

  public vtkCellTreeLocator NewInstance() const {
    void* cPtr = vtkd_im.vtkCellTreeLocator_NewInstance(cast(void*)swigCPtr);
    vtkCellTreeLocator ret = (cPtr is null) ? null : new vtkCellTreeLocator(cPtr, false);
    return ret;
  }

  alias vtkAbstractCellLocator.vtkAbstractCellLocator.NewInstance NewInstance;

  public static vtkCellTreeLocator New() {
    void* cPtr = vtkd_im.vtkCellTreeLocator_New();
    vtkCellTreeLocator ret = (cPtr is null) ? null : new vtkCellTreeLocator(cPtr, false);
    return ret;
  }

  public override long FindCell(SWIGTYPE_p_double.SWIGTYPE_p_double pos, double vtkNotUsed, vtkGenericCell.vtkGenericCell cell, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, double* weights) {
    auto ret = vtkd_im.vtkCellTreeLocator_FindCell__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pos), vtkNotUsed, vtkGenericCell.vtkGenericCell.swigGetCPtr(cell), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), cast(void*)weights);
    return ret;
  }

  public override int IntersectWithLine(SWIGTYPE_p_double.SWIGTYPE_p_double a0, SWIGTYPE_p_double.SWIGTYPE_p_double a1, double tol, double* t, SWIGTYPE_p_double.SWIGTYPE_p_double x, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, int* subId, long* cellId, vtkGenericCell.vtkGenericCell cell) {
    auto ret = vtkd_im.vtkCellTreeLocator_IntersectWithLine__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(a0), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(a1), tol, cast(void*)t, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), cast(void*)subId, cast(void*)cellId, vtkGenericCell.vtkGenericCell.swigGetCPtr(cell));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public override int IntersectWithLine(SWIGTYPE_p_double.SWIGTYPE_p_double p1, SWIGTYPE_p_double.SWIGTYPE_p_double p2, double tol, double* t, SWIGTYPE_p_double.SWIGTYPE_p_double x, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, int* subId) {
    auto ret = vtkd_im.vtkCellTreeLocator_IntersectWithLine__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p1), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p2), tol, cast(void*)t, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), cast(void*)subId);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public override int IntersectWithLine(SWIGTYPE_p_double.SWIGTYPE_p_double p1, SWIGTYPE_p_double.SWIGTYPE_p_double p2, double tol, double* t, SWIGTYPE_p_double.SWIGTYPE_p_double x, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, int* subId, long* cellId) {
    auto ret = vtkd_im.vtkCellTreeLocator_IntersectWithLine__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p1), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p2), tol, cast(void*)t, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), cast(void*)subId, cast(void*)cellId);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public override int IntersectWithLine(SWIGTYPE_p_double.SWIGTYPE_p_double p1, SWIGTYPE_p_double.SWIGTYPE_p_double p2, vtkPoints.vtkPoints points, vtkIdList.vtkIdList cellIds) {
    auto ret = vtkd_im.vtkCellTreeLocator_IntersectWithLine__SWIG_3(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p1), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p2), vtkPoints.vtkPoints.swigGetCPtr(points), vtkIdList.vtkIdList.swigGetCPtr(cellIds));
    return ret;
  }

  public override long FindCell(SWIGTYPE_p_double.SWIGTYPE_p_double x) {
    auto ret = vtkd_im.vtkCellTreeLocator_FindCell__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x));
    return ret;
  }

  public void BuildLocatorInternal() {
    vtkd_im.vtkCellTreeLocator_BuildLocatorInternal(cast(void*)swigCPtr);
  }

  public void BuildLocatorIfNeeded() {
    vtkd_im.vtkCellTreeLocator_BuildLocatorIfNeeded(cast(void*)swigCPtr);
  }

  public void ForceBuildLocator() {
    vtkd_im.vtkCellTreeLocator_ForceBuildLocator(cast(void*)swigCPtr);
  }
}
