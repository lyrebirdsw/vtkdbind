/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkWindow;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_int;
static import vtkUnsignedCharArray;
static import SWIGTYPE_p_double;
static import vtkObject;

class vtkWindow : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkWindow_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkWindow obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkWindow_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkWindow SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkWindow_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkWindow ret = (cPtr is null) ? null : new vtkWindow(cPtr, false);
    return ret;
  }

  public vtkWindow NewInstance() const {
    void* cPtr = vtkd_im.vtkWindow_NewInstance(cast(void*)swigCPtr);
    vtkWindow ret = (cPtr is null) ? null : new vtkWindow(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public void SetDisplayId(void* arg0) {
    vtkd_im.vtkWindow_SetDisplayId(cast(void*)swigCPtr, cast(void*)arg0);
  }

  public void SetWindowId(void* arg0) {
    vtkd_im.vtkWindow_SetWindowId(cast(void*)swigCPtr, cast(void*)arg0);
  }

  public void SetParentId(void* arg0) {
    vtkd_im.vtkWindow_SetParentId(cast(void*)swigCPtr, cast(void*)arg0);
  }

  public void* GetGenericDisplayId() {
    auto ret = cast(void*)vtkd_im.vtkWindow_GetGenericDisplayId(cast(void*)swigCPtr);
    return ret;
  }

  public void* GetGenericWindowId() {
    auto ret = cast(void*)vtkd_im.vtkWindow_GetGenericWindowId(cast(void*)swigCPtr);
    return ret;
  }

  public void* GetGenericParentId() {
    auto ret = cast(void*)vtkd_im.vtkWindow_GetGenericParentId(cast(void*)swigCPtr);
    return ret;
  }

  public void* GetGenericContext() {
    auto ret = cast(void*)vtkd_im.vtkWindow_GetGenericContext(cast(void*)swigCPtr);
    return ret;
  }

  public void* GetGenericDrawable() {
    auto ret = cast(void*)vtkd_im.vtkWindow_GetGenericDrawable(cast(void*)swigCPtr);
    return ret;
  }

  public void SetWindowInfo(string arg0) {
    vtkd_im.vtkWindow_SetWindowInfo(cast(void*)swigCPtr, (arg0 ? std.string.toStringz(arg0) : null));
  }

  public void SetParentInfo(string arg0) {
    vtkd_im.vtkWindow_SetParentInfo(cast(void*)swigCPtr, (arg0 ? std.string.toStringz(arg0) : null));
  }

  public int* GetPosition() {
    auto ret = cast(int*)vtkd_im.vtkWindow_GetPosition(cast(void*)swigCPtr);
    return ret;
  }

  public void SetPosition(int arg0, int arg1) {
    vtkd_im.vtkWindow_SetPosition__SWIG_0(cast(void*)swigCPtr, arg0, arg1);
  }

  public void SetPosition(SWIGTYPE_p_int.SWIGTYPE_p_int a) {
    vtkd_im.vtkWindow_SetPosition__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(a));
  }

  public int* GetSize() {
    auto ret = cast(int*)vtkd_im.vtkWindow_GetSize(cast(void*)swigCPtr);
    return ret;
  }

  public void SetSize(int arg0, int arg1) {
    vtkd_im.vtkWindow_SetSize__SWIG_0(cast(void*)swigCPtr, arg0, arg1);
  }

  public void SetSize(SWIGTYPE_p_int.SWIGTYPE_p_int a) {
    vtkd_im.vtkWindow_SetSize__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(a));
  }

  public int* GetActualSize() {
    auto ret = cast(int*)vtkd_im.vtkWindow_GetActualSize(cast(void*)swigCPtr);
    return ret;
  }

  public int* GetScreenSize() {
    auto ret = cast(int*)vtkd_im.vtkWindow_GetScreenSize(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMapped(int _arg) {
    vtkd_im.vtkWindow_SetMapped(cast(void*)swigCPtr, _arg);
  }

  public int GetMapped() {
    auto ret = vtkd_im.vtkWindow_GetMapped(cast(void*)swigCPtr);
    return ret;
  }

  public void MappedOn() {
    vtkd_im.vtkWindow_MappedOn(cast(void*)swigCPtr);
  }

  public void MappedOff() {
    vtkd_im.vtkWindow_MappedOff(cast(void*)swigCPtr);
  }

  public void SetErase(int _arg) {
    vtkd_im.vtkWindow_SetErase(cast(void*)swigCPtr, _arg);
  }

  public int GetErase() {
    auto ret = vtkd_im.vtkWindow_GetErase(cast(void*)swigCPtr);
    return ret;
  }

  public void EraseOn() {
    vtkd_im.vtkWindow_EraseOn(cast(void*)swigCPtr);
  }

  public void EraseOff() {
    vtkd_im.vtkWindow_EraseOff(cast(void*)swigCPtr);
  }

  public void SetDoubleBuffer(int _arg) {
    vtkd_im.vtkWindow_SetDoubleBuffer(cast(void*)swigCPtr, _arg);
  }

  public int GetDoubleBuffer() {
    auto ret = vtkd_im.vtkWindow_GetDoubleBuffer(cast(void*)swigCPtr);
    return ret;
  }

  public void DoubleBufferOn() {
    vtkd_im.vtkWindow_DoubleBufferOn(cast(void*)swigCPtr);
  }

  public void DoubleBufferOff() {
    vtkd_im.vtkWindow_DoubleBufferOff(cast(void*)swigCPtr);
  }

  public string GetWindowName() {
    string ret = std.conv.to!string(vtkd_im.vtkWindow_GetWindowName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetWindowName(string _arg) {
    vtkd_im.vtkWindow_SetWindowName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public void Render() {
    vtkd_im.vtkWindow_Render(cast(void*)swigCPtr);
  }

  public ubyte* GetPixelData(int x, int y, int x2, int y2, int front) {
    auto ret = cast(ubyte*)vtkd_im.vtkWindow_GetPixelData__SWIG_0(cast(void*)swigCPtr, x, y, x2, y2, front);
    return ret;
  }

  public int GetPixelData(int x, int y, int x2, int y2, int front, vtkUnsignedCharArray.vtkUnsignedCharArray data) {
    auto ret = vtkd_im.vtkWindow_GetPixelData__SWIG_1(cast(void*)swigCPtr, x, y, x2, y2, front, vtkUnsignedCharArray.vtkUnsignedCharArray.swigGetCPtr(data));
    return ret;
  }

  public int GetDPI() {
    auto ret = vtkd_im.vtkWindow_GetDPI(cast(void*)swigCPtr);
    return ret;
  }

  public void SetDPI(int _arg) {
    vtkd_im.vtkWindow_SetDPI(cast(void*)swigCPtr, _arg);
  }

  public int GetDPIMinValue() {
    auto ret = vtkd_im.vtkWindow_GetDPIMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetDPIMaxValue() {
    auto ret = vtkd_im.vtkWindow_GetDPIMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public void SetOffScreenRendering(int _arg) {
    vtkd_im.vtkWindow_SetOffScreenRendering(cast(void*)swigCPtr, _arg);
  }

  public int GetOffScreenRendering() {
    auto ret = vtkd_im.vtkWindow_GetOffScreenRendering(cast(void*)swigCPtr);
    return ret;
  }

  public void OffScreenRenderingOn() {
    vtkd_im.vtkWindow_OffScreenRenderingOn(cast(void*)swigCPtr);
  }

  public void OffScreenRenderingOff() {
    vtkd_im.vtkWindow_OffScreenRenderingOff(cast(void*)swigCPtr);
  }

  public void MakeCurrent() {
    vtkd_im.vtkWindow_MakeCurrent(cast(void*)swigCPtr);
  }

  public void SetTileScale(int _arg1, int _arg2) {
    vtkd_im.vtkWindow_SetTileScale__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2);
  }

  public void SetTileScale(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkWindow_SetTileScale__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public int* GetTileScale() {
    auto ret = cast(int*)vtkd_im.vtkWindow_GetTileScale__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetTileScale(int* _arg1, int* _arg2) {
    vtkd_im.vtkWindow_GetTileScale__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetTileScale(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkWindow_GetTileScale__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public void SetTileScale(int s) {
    vtkd_im.vtkWindow_SetTileScale__SWIG_2(cast(void*)swigCPtr, s);
  }

  public void SetTileViewport(double _arg1, double _arg2, double _arg3, double _arg4) {
    vtkd_im.vtkWindow_SetTileViewport__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3, _arg4);
  }

  public void SetTileViewport(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkWindow_SetTileViewport__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetTileViewport() {
    auto ret = cast(double*)vtkd_im.vtkWindow_GetTileViewport__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetTileViewport(double* _arg1, double* _arg2, double* _arg3, double* _arg4) {
    vtkd_im.vtkWindow_GetTileViewport__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3, cast(void*)_arg4);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetTileViewport(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkWindow_GetTileViewport__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }
}
