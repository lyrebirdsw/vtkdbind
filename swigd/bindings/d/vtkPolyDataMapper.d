/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPolyDataMapper;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkRenderer;
static import vtkActor;
static import vtkPolyData;
static import SWIGTYPE_p_double;
static import vtkAbstractMapper;
static import vtkMapper;

class vtkPolyDataMapper : vtkMapper.vtkMapper {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPolyDataMapper_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPolyDataMapper obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkPolyDataMapper New() {
    void* cPtr = vtkd_im.vtkPolyDataMapper_New();
    vtkPolyDataMapper ret = (cPtr is null) ? null : new vtkPolyDataMapper(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPolyDataMapper_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPolyDataMapper SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPolyDataMapper_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPolyDataMapper ret = (cPtr is null) ? null : new vtkPolyDataMapper(cPtr, false);
    return ret;
  }

  public vtkPolyDataMapper NewInstance() const {
    void* cPtr = vtkd_im.vtkPolyDataMapper_NewInstance(cast(void*)swigCPtr);
    vtkPolyDataMapper ret = (cPtr is null) ? null : new vtkPolyDataMapper(cPtr, false);
    return ret;
  }

  alias vtkMapper.vtkMapper.NewInstance NewInstance;

  public void RenderPiece(vtkRenderer.vtkRenderer ren, vtkActor.vtkActor act) {
    vtkd_im.vtkPolyDataMapper_RenderPiece(cast(void*)swigCPtr, vtkRenderer.vtkRenderer.swigGetCPtr(ren), vtkActor.vtkActor.swigGetCPtr(act));
  }

  public void SetInputData(vtkPolyData.vtkPolyData arg0) {
    vtkd_im.vtkPolyDataMapper_SetInputData(cast(void*)swigCPtr, vtkPolyData.vtkPolyData.swigGetCPtr(arg0));
  }

  public vtkPolyData.vtkPolyData GetInput() {
    void* cPtr = vtkd_im.vtkPolyDataMapper_GetInput(cast(void*)swigCPtr);
    vtkPolyData.vtkPolyData ret = (cPtr is null) ? null : new vtkPolyData.vtkPolyData(cPtr, false);
    return ret;
  }

  public override void Update() {
    vtkd_im.vtkPolyDataMapper_Update__SWIG_0(cast(void*)swigCPtr);
  }

  public override void Update(int port) {
    vtkd_im.vtkPolyDataMapper_Update__SWIG_1(cast(void*)swigCPtr, port);
  }

  public void SetPiece(int _arg) {
    vtkd_im.vtkPolyDataMapper_SetPiece(cast(void*)swigCPtr, _arg);
  }

  public int GetPiece() {
    auto ret = vtkd_im.vtkPolyDataMapper_GetPiece(cast(void*)swigCPtr);
    return ret;
  }

  public void SetNumberOfPieces(int _arg) {
    vtkd_im.vtkPolyDataMapper_SetNumberOfPieces(cast(void*)swigCPtr, _arg);
  }

  public int GetNumberOfPieces() {
    auto ret = vtkd_im.vtkPolyDataMapper_GetNumberOfPieces(cast(void*)swigCPtr);
    return ret;
  }

  public void SetNumberOfSubPieces(int _arg) {
    vtkd_im.vtkPolyDataMapper_SetNumberOfSubPieces(cast(void*)swigCPtr, _arg);
  }

  public int GetNumberOfSubPieces() {
    auto ret = vtkd_im.vtkPolyDataMapper_GetNumberOfSubPieces(cast(void*)swigCPtr);
    return ret;
  }

  public void SetGhostLevel(int _arg) {
    vtkd_im.vtkPolyDataMapper_SetGhostLevel(cast(void*)swigCPtr, _arg);
  }

  public int GetGhostLevel() {
    auto ret = vtkd_im.vtkPolyDataMapper_GetGhostLevel(cast(void*)swigCPtr);
    return ret;
  }

  public override double* GetBounds() {
    auto ret = cast(double*)vtkd_im.vtkPolyDataMapper_GetBounds__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public override void GetBounds(SWIGTYPE_p_double.SWIGTYPE_p_double bounds) {
    vtkd_im.vtkPolyDataMapper_GetBounds__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
  }

  public void ShallowCopy(vtkAbstractMapper.vtkAbstractMapper m) {
    vtkd_im.vtkPolyDataMapper_ShallowCopy(cast(void*)swigCPtr, vtkAbstractMapper.vtkAbstractMapper.swigGetCPtr(m));
  }

  alias vtkMapper.vtkMapper.ShallowCopy ShallowCopy;

  public void MapDataArrayToVertexAttribute(string vertexAttributeName, string dataArrayName, int fieldAssociation, int componentno) {
    vtkd_im.vtkPolyDataMapper_MapDataArrayToVertexAttribute__SWIG_0(cast(void*)swigCPtr, (vertexAttributeName ? std.string.toStringz(vertexAttributeName) : null), (dataArrayName ? std.string.toStringz(dataArrayName) : null), fieldAssociation, componentno);
  }

  public void MapDataArrayToVertexAttribute(string vertexAttributeName, string dataArrayName, int fieldAssociation) {
    vtkd_im.vtkPolyDataMapper_MapDataArrayToVertexAttribute__SWIG_1(cast(void*)swigCPtr, (vertexAttributeName ? std.string.toStringz(vertexAttributeName) : null), (dataArrayName ? std.string.toStringz(dataArrayName) : null), fieldAssociation);
  }

  public void MapDataArrayToMultiTextureAttribute(int unit, string dataArrayName, int fieldAssociation, int componentno) {
    vtkd_im.vtkPolyDataMapper_MapDataArrayToMultiTextureAttribute__SWIG_0(cast(void*)swigCPtr, unit, (dataArrayName ? std.string.toStringz(dataArrayName) : null), fieldAssociation, componentno);
  }

  public void MapDataArrayToMultiTextureAttribute(int unit, string dataArrayName, int fieldAssociation) {
    vtkd_im.vtkPolyDataMapper_MapDataArrayToMultiTextureAttribute__SWIG_1(cast(void*)swigCPtr, unit, (dataArrayName ? std.string.toStringz(dataArrayName) : null), fieldAssociation);
  }

  public void RemoveVertexAttributeMapping(string vertexAttributeName) {
    vtkd_im.vtkPolyDataMapper_RemoveVertexAttributeMapping(cast(void*)swigCPtr, (vertexAttributeName ? std.string.toStringz(vertexAttributeName) : null));
  }

  public void RemoveAllVertexAttributeMappings() {
    vtkd_im.vtkPolyDataMapper_RemoveAllVertexAttributeMappings(cast(void*)swigCPtr);
  }
}
