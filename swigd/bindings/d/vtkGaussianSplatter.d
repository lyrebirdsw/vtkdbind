/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkGaussianSplatter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_int;
static import SWIGTYPE_p_double;
static import vtkDataSet;
static import vtkImageData;
static import vtkInformation;
static import vtkImageAlgorithm;

class vtkGaussianSplatter : vtkImageAlgorithm.vtkImageAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkGaussianSplatter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkGaussianSplatter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkGaussianSplatter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkGaussianSplatter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkGaussianSplatter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkGaussianSplatter ret = (cPtr is null) ? null : new vtkGaussianSplatter(cPtr, false);
    return ret;
  }

  public vtkGaussianSplatter NewInstance() const {
    void* cPtr = vtkd_im.vtkGaussianSplatter_NewInstance(cast(void*)swigCPtr);
    vtkGaussianSplatter ret = (cPtr is null) ? null : new vtkGaussianSplatter(cPtr, false);
    return ret;
  }

  alias vtkImageAlgorithm.vtkImageAlgorithm.NewInstance NewInstance;

  public static vtkGaussianSplatter New() {
    void* cPtr = vtkd_im.vtkGaussianSplatter_New();
    vtkGaussianSplatter ret = (cPtr is null) ? null : new vtkGaussianSplatter(cPtr, false);
    return ret;
  }

  public void SetSampleDimensions(int i, int j, int k) {
    vtkd_im.vtkGaussianSplatter_SetSampleDimensions__SWIG_0(cast(void*)swigCPtr, i, j, k);
  }

  public void SetSampleDimensions(SWIGTYPE_p_int.SWIGTYPE_p_int dim) {
    vtkd_im.vtkGaussianSplatter_SetSampleDimensions__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(dim));
  }

  public int* GetSampleDimensions() {
    auto ret = cast(int*)vtkd_im.vtkGaussianSplatter_GetSampleDimensions__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetSampleDimensions(SWIGTYPE_p_int.SWIGTYPE_p_int data) {
    vtkd_im.vtkGaussianSplatter_GetSampleDimensions__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(data));
  }

  public void SetModelBounds(double _arg1, double _arg2, double _arg3, double _arg4, double _arg5, double _arg6) {
    vtkd_im.vtkGaussianSplatter_SetModelBounds__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
  }

  public void SetModelBounds(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkGaussianSplatter_SetModelBounds__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetModelBounds() {
    auto ret = cast(double*)vtkd_im.vtkGaussianSplatter_GetModelBounds__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetModelBounds(SWIGTYPE_p_double.SWIGTYPE_p_double data) {
    vtkd_im.vtkGaussianSplatter_GetModelBounds__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(data));
  }

  public void SetRadius(double _arg) {
    vtkd_im.vtkGaussianSplatter_SetRadius(cast(void*)swigCPtr, _arg);
  }

  public double GetRadiusMinValue() {
    auto ret = vtkd_im.vtkGaussianSplatter_GetRadiusMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetRadiusMaxValue() {
    auto ret = vtkd_im.vtkGaussianSplatter_GetRadiusMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetRadius() {
    auto ret = vtkd_im.vtkGaussianSplatter_GetRadius(cast(void*)swigCPtr);
    return ret;
  }

  public void SetScaleFactor(double _arg) {
    vtkd_im.vtkGaussianSplatter_SetScaleFactor(cast(void*)swigCPtr, _arg);
  }

  public double GetScaleFactorMinValue() {
    auto ret = vtkd_im.vtkGaussianSplatter_GetScaleFactorMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetScaleFactorMaxValue() {
    auto ret = vtkd_im.vtkGaussianSplatter_GetScaleFactorMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetScaleFactor() {
    auto ret = vtkd_im.vtkGaussianSplatter_GetScaleFactor(cast(void*)swigCPtr);
    return ret;
  }

  public void SetExponentFactor(double _arg) {
    vtkd_im.vtkGaussianSplatter_SetExponentFactor(cast(void*)swigCPtr, _arg);
  }

  public double GetExponentFactor() {
    auto ret = vtkd_im.vtkGaussianSplatter_GetExponentFactor(cast(void*)swigCPtr);
    return ret;
  }

  public void SetNormalWarping(int _arg) {
    vtkd_im.vtkGaussianSplatter_SetNormalWarping(cast(void*)swigCPtr, _arg);
  }

  public int GetNormalWarping() {
    auto ret = vtkd_im.vtkGaussianSplatter_GetNormalWarping(cast(void*)swigCPtr);
    return ret;
  }

  public void NormalWarpingOn() {
    vtkd_im.vtkGaussianSplatter_NormalWarpingOn(cast(void*)swigCPtr);
  }

  public void NormalWarpingOff() {
    vtkd_im.vtkGaussianSplatter_NormalWarpingOff(cast(void*)swigCPtr);
  }

  public void SetEccentricity(double _arg) {
    vtkd_im.vtkGaussianSplatter_SetEccentricity(cast(void*)swigCPtr, _arg);
  }

  public double GetEccentricityMinValue() {
    auto ret = vtkd_im.vtkGaussianSplatter_GetEccentricityMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetEccentricityMaxValue() {
    auto ret = vtkd_im.vtkGaussianSplatter_GetEccentricityMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetEccentricity() {
    auto ret = vtkd_im.vtkGaussianSplatter_GetEccentricity(cast(void*)swigCPtr);
    return ret;
  }

  public void SetScalarWarping(int _arg) {
    vtkd_im.vtkGaussianSplatter_SetScalarWarping(cast(void*)swigCPtr, _arg);
  }

  public int GetScalarWarping() {
    auto ret = vtkd_im.vtkGaussianSplatter_GetScalarWarping(cast(void*)swigCPtr);
    return ret;
  }

  public void ScalarWarpingOn() {
    vtkd_im.vtkGaussianSplatter_ScalarWarpingOn(cast(void*)swigCPtr);
  }

  public void ScalarWarpingOff() {
    vtkd_im.vtkGaussianSplatter_ScalarWarpingOff(cast(void*)swigCPtr);
  }

  public void SetCapping(int _arg) {
    vtkd_im.vtkGaussianSplatter_SetCapping(cast(void*)swigCPtr, _arg);
  }

  public int GetCapping() {
    auto ret = vtkd_im.vtkGaussianSplatter_GetCapping(cast(void*)swigCPtr);
    return ret;
  }

  public void CappingOn() {
    vtkd_im.vtkGaussianSplatter_CappingOn(cast(void*)swigCPtr);
  }

  public void CappingOff() {
    vtkd_im.vtkGaussianSplatter_CappingOff(cast(void*)swigCPtr);
  }

  public void SetCapValue(double _arg) {
    vtkd_im.vtkGaussianSplatter_SetCapValue(cast(void*)swigCPtr, _arg);
  }

  public double GetCapValue() {
    auto ret = vtkd_im.vtkGaussianSplatter_GetCapValue(cast(void*)swigCPtr);
    return ret;
  }

  public void SetAccumulationMode(int _arg) {
    vtkd_im.vtkGaussianSplatter_SetAccumulationMode(cast(void*)swigCPtr, _arg);
  }

  public int GetAccumulationModeMinValue() {
    auto ret = vtkd_im.vtkGaussianSplatter_GetAccumulationModeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetAccumulationModeMaxValue() {
    auto ret = vtkd_im.vtkGaussianSplatter_GetAccumulationModeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetAccumulationMode() {
    auto ret = vtkd_im.vtkGaussianSplatter_GetAccumulationMode(cast(void*)swigCPtr);
    return ret;
  }

  public void SetAccumulationModeToMin() {
    vtkd_im.vtkGaussianSplatter_SetAccumulationModeToMin(cast(void*)swigCPtr);
  }

  public void SetAccumulationModeToMax() {
    vtkd_im.vtkGaussianSplatter_SetAccumulationModeToMax(cast(void*)swigCPtr);
  }

  public void SetAccumulationModeToSum() {
    vtkd_im.vtkGaussianSplatter_SetAccumulationModeToSum(cast(void*)swigCPtr);
  }

  public string GetAccumulationModeAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkGaussianSplatter_GetAccumulationModeAsString(cast(void*)swigCPtr));
    return ret;
  }

  public void SetNullValue(double _arg) {
    vtkd_im.vtkGaussianSplatter_SetNullValue(cast(void*)swigCPtr, _arg);
  }

  public double GetNullValue() {
    auto ret = vtkd_im.vtkGaussianSplatter_GetNullValue(cast(void*)swigCPtr);
    return ret;
  }

  public void ComputeModelBounds(vtkDataSet.vtkDataSet input, vtkImageData.vtkImageData output, vtkInformation.vtkInformation outInfo) {
    vtkd_im.vtkGaussianSplatter_ComputeModelBounds(cast(void*)swigCPtr, vtkDataSet.vtkDataSet.swigGetCPtr(input), vtkImageData.vtkImageData.swigGetCPtr(output), vtkInformation.vtkInformation.swigGetCPtr(outInfo));
  }
}
