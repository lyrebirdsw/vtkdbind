/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkFreeTypeTools;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_FT_Library;
static import vtkTextProperty;
static import vtkStdString;
static import SWIGTYPE_p_int;
static import vtkUnicodeString;
static import vtkImageData;
static import vtkPath;
static import SWIGTYPE_p_FT_Face;
static import vtkObject;

class vtkFreeTypeTools : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkFreeTypeTools_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkFreeTypeTools obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkFreeTypeTools_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkFreeTypeTools SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkFreeTypeTools_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkFreeTypeTools ret = (cPtr is null) ? null : new vtkFreeTypeTools(cPtr, false);
    return ret;
  }

  public vtkFreeTypeTools NewInstance() const {
    void* cPtr = vtkd_im.vtkFreeTypeTools_NewInstance(cast(void*)swigCPtr);
    vtkFreeTypeTools ret = (cPtr is null) ? null : new vtkFreeTypeTools(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public static vtkFreeTypeTools GetInstance() {
    void* cPtr = vtkd_im.vtkFreeTypeTools_GetInstance();
    vtkFreeTypeTools ret = (cPtr is null) ? null : new vtkFreeTypeTools(cPtr, false);
    return ret;
  }

  public static void SetInstance(vtkFreeTypeTools instance) {
    vtkd_im.vtkFreeTypeTools_SetInstance(vtkFreeTypeTools.swigGetCPtr(instance));
  }

  public SWIGTYPE_p_FT_Library.SWIGTYPE_p_FT_Library GetLibrary() {
    void* cPtr = vtkd_im.vtkFreeTypeTools_GetLibrary(cast(void*)swigCPtr);
    SWIGTYPE_p_FT_Library.SWIGTYPE_p_FT_Library ret = (cPtr is null) ? null : new SWIGTYPE_p_FT_Library.SWIGTYPE_p_FT_Library(cPtr, false);
    return ret;
  }

  public void SetMaximumNumberOfFaces(uint _arg) {
    vtkd_im.vtkFreeTypeTools_SetMaximumNumberOfFaces(cast(void*)swigCPtr, _arg);
  }

  public uint GetMaximumNumberOfFacesMinValue() {
    auto ret = vtkd_im.vtkFreeTypeTools_GetMaximumNumberOfFacesMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public uint GetMaximumNumberOfFacesMaxValue() {
    auto ret = vtkd_im.vtkFreeTypeTools_GetMaximumNumberOfFacesMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public uint GetMaximumNumberOfFaces() {
    auto ret = vtkd_im.vtkFreeTypeTools_GetMaximumNumberOfFaces(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMaximumNumberOfSizes(uint _arg) {
    vtkd_im.vtkFreeTypeTools_SetMaximumNumberOfSizes(cast(void*)swigCPtr, _arg);
  }

  public uint GetMaximumNumberOfSizesMinValue() {
    auto ret = vtkd_im.vtkFreeTypeTools_GetMaximumNumberOfSizesMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public uint GetMaximumNumberOfSizesMaxValue() {
    auto ret = vtkd_im.vtkFreeTypeTools_GetMaximumNumberOfSizesMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public uint GetMaximumNumberOfSizes() {
    auto ret = vtkd_im.vtkFreeTypeTools_GetMaximumNumberOfSizes(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMaximumNumberOfBytes(core.stdc.config.c_ulong _arg) {
    vtkd_im.vtkFreeTypeTools_SetMaximumNumberOfBytes(cast(void*)swigCPtr, _arg);
  }

  public core.stdc.config.c_ulong GetMaximumNumberOfBytesMinValue() {
    auto ret = vtkd_im.vtkFreeTypeTools_GetMaximumNumberOfBytesMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public core.stdc.config.c_ulong GetMaximumNumberOfBytesMaxValue() {
    auto ret = vtkd_im.vtkFreeTypeTools_GetMaximumNumberOfBytesMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public core.stdc.config.c_ulong GetMaximumNumberOfBytes() {
    auto ret = vtkd_im.vtkFreeTypeTools_GetMaximumNumberOfBytes(cast(void*)swigCPtr);
    return ret;
  }

  public bool GetBoundingBox(vtkTextProperty.vtkTextProperty tprop, vtkStdString.vtkStdString str, SWIGTYPE_p_int.SWIGTYPE_p_int bbox) {
    bool ret = vtkd_im.vtkFreeTypeTools_GetBoundingBox__SWIG_0(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), vtkStdString.vtkStdString.swigGetCPtr(str), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(bbox)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool GetBoundingBox(vtkTextProperty.vtkTextProperty tprop, vtkUnicodeString.vtkUnicodeString str, SWIGTYPE_p_int.SWIGTYPE_p_int bbox) {
    bool ret = vtkd_im.vtkFreeTypeTools_GetBoundingBox__SWIG_1(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), vtkUnicodeString.vtkUnicodeString.swigGetCPtr(str), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(bbox)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool IsBoundingBoxValid(SWIGTYPE_p_int.SWIGTYPE_p_int bbox) {
    bool ret = vtkd_im.vtkFreeTypeTools_IsBoundingBoxValid(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(bbox)) ? true : false;
    return ret;
  }

  public bool RenderString(vtkTextProperty.vtkTextProperty tprop, vtkStdString.vtkStdString str, vtkImageData.vtkImageData data, SWIGTYPE_p_int.SWIGTYPE_p_int textDims) {
    bool ret = vtkd_im.vtkFreeTypeTools_RenderString__SWIG_0(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), vtkStdString.vtkStdString.swigGetCPtr(str), vtkImageData.vtkImageData.swigGetCPtr(data), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(textDims)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool RenderString(vtkTextProperty.vtkTextProperty tprop, vtkStdString.vtkStdString str, vtkImageData.vtkImageData data) {
    bool ret = vtkd_im.vtkFreeTypeTools_RenderString__SWIG_1(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), vtkStdString.vtkStdString.swigGetCPtr(str), vtkImageData.vtkImageData.swigGetCPtr(data)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool RenderString(vtkTextProperty.vtkTextProperty tprop, vtkUnicodeString.vtkUnicodeString str, vtkImageData.vtkImageData data, SWIGTYPE_p_int.SWIGTYPE_p_int textDims) {
    bool ret = vtkd_im.vtkFreeTypeTools_RenderString__SWIG_2(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), vtkUnicodeString.vtkUnicodeString.swigGetCPtr(str), vtkImageData.vtkImageData.swigGetCPtr(data), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(textDims)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool RenderString(vtkTextProperty.vtkTextProperty tprop, vtkUnicodeString.vtkUnicodeString str, vtkImageData.vtkImageData data) {
    bool ret = vtkd_im.vtkFreeTypeTools_RenderString__SWIG_3(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), vtkUnicodeString.vtkUnicodeString.swigGetCPtr(str), vtkImageData.vtkImageData.swigGetCPtr(data)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool StringToPath(vtkTextProperty.vtkTextProperty tprop, vtkStdString.vtkStdString str, vtkPath.vtkPath path) {
    bool ret = vtkd_im.vtkFreeTypeTools_StringToPath__SWIG_0(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), vtkStdString.vtkStdString.swigGetCPtr(str), vtkPath.vtkPath.swigGetCPtr(path)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool StringToPath(vtkTextProperty.vtkTextProperty tprop, vtkUnicodeString.vtkUnicodeString str, vtkPath.vtkPath path) {
    bool ret = vtkd_im.vtkFreeTypeTools_StringToPath__SWIG_1(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), vtkUnicodeString.vtkUnicodeString.swigGetCPtr(str), vtkPath.vtkPath.swigGetCPtr(path)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public int GetConstrainedFontSize(vtkStdString.vtkStdString str, vtkTextProperty.vtkTextProperty tprop, int targetWidth, int targetHeight) {
    auto ret = vtkd_im.vtkFreeTypeTools_GetConstrainedFontSize__SWIG_0(cast(void*)swigCPtr, vtkStdString.vtkStdString.swigGetCPtr(str), vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), targetWidth, targetHeight);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public int GetConstrainedFontSize(vtkUnicodeString.vtkUnicodeString str, vtkTextProperty.vtkTextProperty tprop, int targetWidth, int targetHeight) {
    auto ret = vtkd_im.vtkFreeTypeTools_GetConstrainedFontSize__SWIG_1(cast(void*)swigCPtr, vtkUnicodeString.vtkUnicodeString.swigGetCPtr(str), vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), targetWidth, targetHeight);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public static ushort HashString(string str) {
    auto ret = vtkd_im.vtkFreeTypeTools_HashString((str ? std.string.toStringz(str) : null));
    return ret;
  }

  public void MapTextPropertyToId(vtkTextProperty.vtkTextProperty tprop, core.stdc.config.c_ulong* tprop_cache_id) {
    vtkd_im.vtkFreeTypeTools_MapTextPropertyToId(cast(void*)swigCPtr, vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), cast(void*)tprop_cache_id);
  }

  public void MapIdToTextProperty(core.stdc.config.c_ulong tprop_cache_id, vtkTextProperty.vtkTextProperty tprop) {
    vtkd_im.vtkFreeTypeTools_MapIdToTextProperty(cast(void*)swigCPtr, tprop_cache_id, vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop));
  }

  public void SetScaleToPowerTwo(bool _arg) {
    vtkd_im.vtkFreeTypeTools_SetScaleToPowerTwo(cast(void*)swigCPtr, _arg);
  }

  public bool GetScaleToPowerTwo() {
    bool ret = vtkd_im.vtkFreeTypeTools_GetScaleToPowerTwo(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void ScaleToPowerTwoOn() {
    vtkd_im.vtkFreeTypeTools_ScaleToPowerTwoOn(cast(void*)swigCPtr);
  }

  public void ScaleToPowerTwoOff() {
    vtkd_im.vtkFreeTypeTools_ScaleToPowerTwoOff(cast(void*)swigCPtr);
  }

  public void SetForceCompiledFonts(bool _arg) {
    vtkd_im.vtkFreeTypeTools_SetForceCompiledFonts(cast(void*)swigCPtr, _arg);
  }

  public bool GetForceCompiledFonts() {
    bool ret = vtkd_im.vtkFreeTypeTools_GetForceCompiledFonts(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void ForceCompiledFontsOn() {
    vtkd_im.vtkFreeTypeTools_ForceCompiledFontsOn(cast(void*)swigCPtr);
  }

  public void ForceCompiledFontsOff() {
    vtkd_im.vtkFreeTypeTools_ForceCompiledFontsOff(cast(void*)swigCPtr);
  }

  public static bool LookupFace(vtkTextProperty.vtkTextProperty tprop, SWIGTYPE_p_FT_Library.SWIGTYPE_p_FT_Library lib, SWIGTYPE_p_FT_Face.SWIGTYPE_p_FT_Face face) {
    bool ret = vtkd_im.vtkFreeTypeTools_LookupFace(vtkTextProperty.vtkTextProperty.swigGetCPtr(tprop), SWIGTYPE_p_FT_Library.SWIGTYPE_p_FT_Library.swigGetCPtr(lib), SWIGTYPE_p_FT_Face.SWIGTYPE_p_FT_Face.swigGetCPtr(face)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }
}
