/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkShaderProgram2;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkOpenGLRenderWindow;
static import vtkShader2Collection;
static import SWIGTYPE_p_ostream;
static import vtkIndent;
static import vtkUniformVariables;
static import vtkObject;

class vtkShaderProgram2 : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkShaderProgram2_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkShaderProgram2 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkShaderProgram2 New() {
    void* cPtr = vtkd_im.vtkShaderProgram2_New();
    vtkShaderProgram2 ret = (cPtr is null) ? null : new vtkShaderProgram2(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkShaderProgram2_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkShaderProgram2 SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkShaderProgram2_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkShaderProgram2 ret = (cPtr is null) ? null : new vtkShaderProgram2(cPtr, false);
    return ret;
  }

  public vtkShaderProgram2 NewInstance() const {
    void* cPtr = vtkd_im.vtkShaderProgram2_NewInstance(cast(void*)swigCPtr);
    vtkShaderProgram2 ret = (cPtr is null) ? null : new vtkShaderProgram2(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public static bool IsSupported(vtkOpenGLRenderWindow.vtkOpenGLRenderWindow context) {
    bool ret = vtkd_im.vtkShaderProgram2_IsSupported(vtkOpenGLRenderWindow.vtkOpenGLRenderWindow.swigGetCPtr(context)) ? true : false;
    return ret;
  }

  public static bool LoadExtensions(vtkOpenGLRenderWindow.vtkOpenGLRenderWindow context) {
    bool ret = vtkd_im.vtkShaderProgram2_LoadExtensions(vtkOpenGLRenderWindow.vtkOpenGLRenderWindow.swigGetCPtr(context)) ? true : false;
    return ret;
  }

  public bool GetPrintErrors() {
    bool ret = vtkd_im.vtkShaderProgram2_GetPrintErrors(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetPrintErrors(bool _arg) {
    vtkd_im.vtkShaderProgram2_SetPrintErrors(cast(void*)swigCPtr, _arg);
  }

  public void SetContext(vtkOpenGLRenderWindow.vtkOpenGLRenderWindow context) {
    vtkd_im.vtkShaderProgram2_SetContext(cast(void*)swigCPtr, vtkOpenGLRenderWindow.vtkOpenGLRenderWindow.swigGetCPtr(context));
  }

  public vtkOpenGLRenderWindow.vtkOpenGLRenderWindow GetContext() {
    void* cPtr = vtkd_im.vtkShaderProgram2_GetContext(cast(void*)swigCPtr);
    vtkOpenGLRenderWindow.vtkOpenGLRenderWindow ret = (cPtr is null) ? null : new vtkOpenGLRenderWindow.vtkOpenGLRenderWindow(cPtr, false);
    return ret;
  }

  public vtkShader2Collection.vtkShader2Collection GetShaders() {
    void* cPtr = vtkd_im.vtkShaderProgram2_GetShaders(cast(void*)swigCPtr);
    vtkShader2Collection.vtkShader2Collection ret = (cPtr is null) ? null : new vtkShader2Collection.vtkShader2Collection(cPtr, false);
    return ret;
  }

  public bool HasVertexShaders() {
    bool ret = vtkd_im.vtkShaderProgram2_HasVertexShaders(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool HasTessellationControlShaders() {
    bool ret = vtkd_im.vtkShaderProgram2_HasTessellationControlShaders(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool HasTessellationEvaluationShaders() {
    bool ret = vtkd_im.vtkShaderProgram2_HasTessellationEvaluationShaders(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool HasGeometryShaders() {
    bool ret = vtkd_im.vtkShaderProgram2_HasGeometryShaders(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool HasFragmentShaders() {
    bool ret = vtkd_im.vtkShaderProgram2_HasFragmentShaders(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool IsValid() {
    bool ret = vtkd_im.vtkShaderProgram2_IsValid(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void Build() {
    vtkd_im.vtkShaderProgram2_Build(cast(void*)swigCPtr);
  }

  public void SendUniforms() {
    vtkd_im.vtkShaderProgram2_SendUniforms(cast(void*)swigCPtr);
  }

  public void PrintActiveUniformVariables(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream os, vtkIndent.vtkIndent indent) {
    vtkd_im.vtkShaderProgram2_PrintActiveUniformVariables(cast(void*)swigCPtr, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(os), vtkIndent.vtkIndent.swigGetCPtr(indent));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void PrintActiveUniformVariablesOnCout() {
    vtkd_im.vtkShaderProgram2_PrintActiveUniformVariablesOnCout(cast(void*)swigCPtr);
  }

  public bool IsUsed() {
    bool ret = vtkd_im.vtkShaderProgram2_IsUsed(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void Use() {
    vtkd_im.vtkShaderProgram2_Use(cast(void*)swigCPtr);
  }

  public void Restore() {
    vtkd_im.vtkShaderProgram2_Restore(cast(void*)swigCPtr);
  }

  public void RestoreFixedPipeline() {
    vtkd_im.vtkShaderProgram2_RestoreFixedPipeline(cast(void*)swigCPtr);
  }

  public int GetLastBuildStatus() {
    auto ret = vtkd_im.vtkShaderProgram2_GetLastBuildStatus(cast(void*)swigCPtr);
    return ret;
  }

  public string GetLastLinkLog() {
    string ret = std.conv.to!string(vtkd_im.vtkShaderProgram2_GetLastLinkLog(cast(void*)swigCPtr));
    return ret;
  }

  public string GetLastValidateLog() {
    string ret = std.conv.to!string(vtkd_im.vtkShaderProgram2_GetLastValidateLog(cast(void*)swigCPtr));
    return ret;
  }

  public void ReleaseGraphicsResources() {
    vtkd_im.vtkShaderProgram2_ReleaseGraphicsResources(cast(void*)swigCPtr);
  }

  public int GetAttributeLocation(string name) {
    auto ret = vtkd_im.vtkShaderProgram2_GetAttributeLocation(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
    return ret;
  }

  public vtkUniformVariables.vtkUniformVariables GetUniformVariables() {
    void* cPtr = vtkd_im.vtkShaderProgram2_GetUniformVariables(cast(void*)swigCPtr);
    vtkUniformVariables.vtkUniformVariables ret = (cPtr is null) ? null : new vtkUniformVariables.vtkUniformVariables(cPtr, false);
    return ret;
  }

  public void SetUniformVariables(vtkUniformVariables.vtkUniformVariables variables) {
    vtkd_im.vtkShaderProgram2_SetUniformVariables(cast(void*)swigCPtr, vtkUniformVariables.vtkUniformVariables.swigGetCPtr(variables));
  }

  public bool DisplayListUnderCreationInCompileMode() {
    bool ret = vtkd_im.vtkShaderProgram2_DisplayListUnderCreationInCompileMode(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetGeometryTypeIn(int _arg) {
    vtkd_im.vtkShaderProgram2_SetGeometryTypeIn(cast(void*)swigCPtr, _arg);
  }

  public int GetGeometryTypeIn() {
    auto ret = vtkd_im.vtkShaderProgram2_GetGeometryTypeIn(cast(void*)swigCPtr);
    return ret;
  }

  public void SetGeometryVerticesOut(int _arg) {
    vtkd_im.vtkShaderProgram2_SetGeometryVerticesOut(cast(void*)swigCPtr, _arg);
  }

  public int GetGeometryVerticesOut() {
    auto ret = vtkd_im.vtkShaderProgram2_GetGeometryVerticesOut(cast(void*)swigCPtr);
    return ret;
  }

  public void SetGeometryTypeOut(int _arg) {
    vtkd_im.vtkShaderProgram2_SetGeometryTypeOut(cast(void*)swigCPtr, _arg);
  }

  public int GetGeometryTypeOut() {
    auto ret = vtkd_im.vtkShaderProgram2_GetGeometryTypeOut(cast(void*)swigCPtr);
    return ret;
  }
}
