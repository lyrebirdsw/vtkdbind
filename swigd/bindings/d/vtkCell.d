/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkCell;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkPoints;
static import vtkIdList;
static import SWIGTYPE_p_double;
static import vtkDataArray;
static import vtkIncrementalPointLocator;
static import vtkCellArray;
static import vtkPointData;
static import vtkCellData;
static import vtkObject;

class vtkCell : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkCell_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkCell obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkCell_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkCell SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkCell_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkCell ret = (cPtr is null) ? null : new vtkCell(cPtr, false);
    return ret;
  }

  public vtkCell NewInstance() const {
    void* cPtr = vtkd_im.vtkCell_NewInstance(cast(void*)swigCPtr);
    vtkCell ret = (cPtr is null) ? null : new vtkCell(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public void Initialize(int npts, long* pts, vtkPoints.vtkPoints p) {
    vtkd_im.vtkCell_Initialize__SWIG_0(cast(void*)swigCPtr, npts, cast(void*)pts, vtkPoints.vtkPoints.swigGetCPtr(p));
  }

  public void ShallowCopy(vtkCell c) {
    vtkd_im.vtkCell_ShallowCopy(cast(void*)swigCPtr, vtkCell.swigGetCPtr(c));
  }

  public void DeepCopy(vtkCell c) {
    vtkd_im.vtkCell_DeepCopy(cast(void*)swigCPtr, vtkCell.swigGetCPtr(c));
  }

  public int GetCellType() {
    auto ret = vtkd_im.vtkCell_GetCellType(cast(void*)swigCPtr);
    return ret;
  }

  public int GetCellDimension() {
    auto ret = vtkd_im.vtkCell_GetCellDimension(cast(void*)swigCPtr);
    return ret;
  }

  public int IsLinear() {
    auto ret = vtkd_im.vtkCell_IsLinear(cast(void*)swigCPtr);
    return ret;
  }

  public int RequiresInitialization() {
    auto ret = vtkd_im.vtkCell_RequiresInitialization(cast(void*)swigCPtr);
    return ret;
  }

  public void Initialize() {
    vtkd_im.vtkCell_Initialize__SWIG_1(cast(void*)swigCPtr);
  }

  public int IsExplicitCell() {
    auto ret = vtkd_im.vtkCell_IsExplicitCell(cast(void*)swigCPtr);
    return ret;
  }

  public int RequiresExplicitFaceRepresentation() {
    auto ret = vtkd_im.vtkCell_RequiresExplicitFaceRepresentation(cast(void*)swigCPtr);
    return ret;
  }

  public void SetFaces(long* arg0) {
    vtkd_im.vtkCell_SetFaces(cast(void*)swigCPtr, cast(void*)arg0);
  }

  public long* GetFaces() {
    auto ret = cast(long*)vtkd_im.vtkCell_GetFaces(cast(void*)swigCPtr);
    return ret;
  }

  public vtkPoints.vtkPoints GetPoints() {
    void* cPtr = vtkd_im.vtkCell_GetPoints(cast(void*)swigCPtr);
    vtkPoints.vtkPoints ret = (cPtr is null) ? null : new vtkPoints.vtkPoints(cPtr, false);
    return ret;
  }

  public long GetNumberOfPoints() {
    auto ret = vtkd_im.vtkCell_GetNumberOfPoints(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfEdges() {
    auto ret = vtkd_im.vtkCell_GetNumberOfEdges(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfFaces() {
    auto ret = vtkd_im.vtkCell_GetNumberOfFaces(cast(void*)swigCPtr);
    return ret;
  }

  public vtkIdList.vtkIdList GetPointIds() {
    void* cPtr = vtkd_im.vtkCell_GetPointIds(cast(void*)swigCPtr);
    vtkIdList.vtkIdList ret = (cPtr is null) ? null : new vtkIdList.vtkIdList(cPtr, false);
    return ret;
  }

  public long GetPointId(int ptId) {
    auto ret = vtkd_im.vtkCell_GetPointId(cast(void*)swigCPtr, ptId);
    return ret;
  }

  public vtkCell GetEdge(int edgeId) {
    void* cPtr = vtkd_im.vtkCell_GetEdge(cast(void*)swigCPtr, edgeId);
    vtkCell ret = (cPtr is null) ? null : new vtkCell(cPtr, false);
    return ret;
  }

  public vtkCell GetFace(int faceId) {
    void* cPtr = vtkd_im.vtkCell_GetFace(cast(void*)swigCPtr, faceId);
    vtkCell ret = (cPtr is null) ? null : new vtkCell(cPtr, false);
    return ret;
  }

  public int CellBoundary(int subId, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, vtkIdList.vtkIdList pts) {
    auto ret = vtkd_im.vtkCell_CellBoundary(cast(void*)swigCPtr, subId, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), vtkIdList.vtkIdList.swigGetCPtr(pts));
    return ret;
  }

  public int EvaluatePosition(SWIGTYPE_p_double.SWIGTYPE_p_double x, double* closestPoint, int* subId, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, double* dist2, double* weights) {
    auto ret = vtkd_im.vtkCell_EvaluatePosition(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), cast(void*)closestPoint, cast(void*)subId, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), cast(void*)dist2, cast(void*)weights);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void EvaluateLocation(int* subId, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, SWIGTYPE_p_double.SWIGTYPE_p_double x, double* weights) {
    vtkd_im.vtkCell_EvaluateLocation(cast(void*)swigCPtr, cast(void*)subId, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), cast(void*)weights);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void Contour(double value, vtkDataArray.vtkDataArray cellScalars, vtkIncrementalPointLocator.vtkIncrementalPointLocator locator, vtkCellArray.vtkCellArray verts, vtkCellArray.vtkCellArray lines, vtkCellArray.vtkCellArray polys, vtkPointData.vtkPointData inPd, vtkPointData.vtkPointData outPd, vtkCellData.vtkCellData inCd, long cellId, vtkCellData.vtkCellData outCd) {
    vtkd_im.vtkCell_Contour(cast(void*)swigCPtr, value, vtkDataArray.vtkDataArray.swigGetCPtr(cellScalars), vtkIncrementalPointLocator.vtkIncrementalPointLocator.swigGetCPtr(locator), vtkCellArray.vtkCellArray.swigGetCPtr(verts), vtkCellArray.vtkCellArray.swigGetCPtr(lines), vtkCellArray.vtkCellArray.swigGetCPtr(polys), vtkPointData.vtkPointData.swigGetCPtr(inPd), vtkPointData.vtkPointData.swigGetCPtr(outPd), vtkCellData.vtkCellData.swigGetCPtr(inCd), cellId, vtkCellData.vtkCellData.swigGetCPtr(outCd));
  }

  public void Clip(double value, vtkDataArray.vtkDataArray cellScalars, vtkIncrementalPointLocator.vtkIncrementalPointLocator locator, vtkCellArray.vtkCellArray connectivity, vtkPointData.vtkPointData inPd, vtkPointData.vtkPointData outPd, vtkCellData.vtkCellData inCd, long cellId, vtkCellData.vtkCellData outCd, int insideOut) {
    vtkd_im.vtkCell_Clip(cast(void*)swigCPtr, value, vtkDataArray.vtkDataArray.swigGetCPtr(cellScalars), vtkIncrementalPointLocator.vtkIncrementalPointLocator.swigGetCPtr(locator), vtkCellArray.vtkCellArray.swigGetCPtr(connectivity), vtkPointData.vtkPointData.swigGetCPtr(inPd), vtkPointData.vtkPointData.swigGetCPtr(outPd), vtkCellData.vtkCellData.swigGetCPtr(inCd), cellId, vtkCellData.vtkCellData.swigGetCPtr(outCd), insideOut);
  }

  public int IntersectWithLine(SWIGTYPE_p_double.SWIGTYPE_p_double p1, SWIGTYPE_p_double.SWIGTYPE_p_double p2, double tol, double* t, SWIGTYPE_p_double.SWIGTYPE_p_double x, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, int* subId) {
    auto ret = vtkd_im.vtkCell_IntersectWithLine(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p1), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p2), tol, cast(void*)t, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), cast(void*)subId);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public int Triangulate(int index, vtkIdList.vtkIdList ptIds, vtkPoints.vtkPoints pts) {
    auto ret = vtkd_im.vtkCell_Triangulate(cast(void*)swigCPtr, index, vtkIdList.vtkIdList.swigGetCPtr(ptIds), vtkPoints.vtkPoints.swigGetCPtr(pts));
    return ret;
  }

  public void Derivatives(int subId, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, double* values, int dim, double* derivs) {
    vtkd_im.vtkCell_Derivatives(cast(void*)swigCPtr, subId, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), cast(void*)values, dim, cast(void*)derivs);
  }

  public void GetBounds(SWIGTYPE_p_double.SWIGTYPE_p_double bounds) {
    vtkd_im.vtkCell_GetBounds__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
  }

  public double* GetBounds() {
    auto ret = cast(double*)vtkd_im.vtkCell_GetBounds__SWIG_1(cast(void*)swigCPtr);
    return ret;
  }

  public double GetLength2() {
    auto ret = vtkd_im.vtkCell_GetLength2(cast(void*)swigCPtr);
    return ret;
  }

  public int GetParametricCenter(SWIGTYPE_p_double.SWIGTYPE_p_double pcoords) {
    auto ret = vtkd_im.vtkCell_GetParametricCenter(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords));
    return ret;
  }

  public double GetParametricDistance(SWIGTYPE_p_double.SWIGTYPE_p_double pcoords) {
    auto ret = vtkd_im.vtkCell_GetParametricDistance(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords));
    return ret;
  }

  public int IsPrimaryCell() {
    auto ret = vtkd_im.vtkCell_IsPrimaryCell(cast(void*)swigCPtr);
    return ret;
  }

  public double* GetParametricCoords() {
    auto ret = cast(double*)vtkd_im.vtkCell_GetParametricCoords(cast(void*)swigCPtr);
    return ret;
  }

  public void InterpolateFunctions(SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, SWIGTYPE_p_double.SWIGTYPE_p_double weights) {
    vtkd_im.vtkCell_InterpolateFunctions(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(weights));
  }

  public void InterpolateDerivs(SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, SWIGTYPE_p_double.SWIGTYPE_p_double derivs) {
    vtkd_im.vtkCell_InterpolateDerivs(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(derivs));
  }

  public void Points(vtkPoints.vtkPoints value) @property {
    vtkd_im.vtkCell_Points_set(cast(void*)swigCPtr, vtkPoints.vtkPoints.swigGetCPtr(value));
  }

  public vtkPoints.vtkPoints Points() @property const {
    void* cPtr = vtkd_im.vtkCell_Points_get(cast(void*)swigCPtr);
    vtkPoints.vtkPoints ret = (cPtr is null) ? null : new vtkPoints.vtkPoints(cPtr, false);
    return ret;
  }

  public void PointIds(vtkIdList.vtkIdList value) @property {
    vtkd_im.vtkCell_PointIds_set(cast(void*)swigCPtr, vtkIdList.vtkIdList.swigGetCPtr(value));
  }

  public vtkIdList.vtkIdList PointIds() @property const {
    void* cPtr = vtkd_im.vtkCell_PointIds_get(cast(void*)swigCPtr);
    vtkIdList.vtkIdList ret = (cPtr is null) ? null : new vtkIdList.vtkIdList(cPtr, false);
    return ret;
  }
}
