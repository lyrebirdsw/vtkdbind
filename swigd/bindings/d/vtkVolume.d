/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkVolume;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkAbstractVolumeMapper;
static import vtkVolumeProperty;
static import SWIGTYPE_p_double;
static import vtkProp3D;

class vtkVolume : vtkProp3D.vtkProp3D {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkVolume_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkVolume obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkVolume_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkVolume SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkVolume_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkVolume ret = (cPtr is null) ? null : new vtkVolume(cPtr, false);
    return ret;
  }

  public vtkVolume NewInstance() const {
    void* cPtr = vtkd_im.vtkVolume_NewInstance(cast(void*)swigCPtr);
    vtkVolume ret = (cPtr is null) ? null : new vtkVolume(cPtr, false);
    return ret;
  }

  alias vtkProp3D.vtkProp3D.NewInstance NewInstance;

  public static vtkVolume New() {
    void* cPtr = vtkd_im.vtkVolume_New();
    vtkVolume ret = (cPtr is null) ? null : new vtkVolume(cPtr, false);
    return ret;
  }

  public void SetMapper(vtkAbstractVolumeMapper.vtkAbstractVolumeMapper mapper) {
    vtkd_im.vtkVolume_SetMapper(cast(void*)swigCPtr, vtkAbstractVolumeMapper.vtkAbstractVolumeMapper.swigGetCPtr(mapper));
  }

  public vtkAbstractVolumeMapper.vtkAbstractVolumeMapper GetMapper() {
    void* cPtr = vtkd_im.vtkVolume_GetMapper(cast(void*)swigCPtr);
    vtkAbstractVolumeMapper.vtkAbstractVolumeMapper ret = (cPtr is null) ? null : new vtkAbstractVolumeMapper.vtkAbstractVolumeMapper(cPtr, false);
    return ret;
  }

  public void SetProperty(vtkVolumeProperty.vtkVolumeProperty property) {
    vtkd_im.vtkVolume_SetProperty(cast(void*)swigCPtr, vtkVolumeProperty.vtkVolumeProperty.swigGetCPtr(property));
  }

  public vtkVolumeProperty.vtkVolumeProperty GetProperty() {
    void* cPtr = vtkd_im.vtkVolume_GetProperty(cast(void*)swigCPtr);
    vtkVolumeProperty.vtkVolumeProperty ret = (cPtr is null) ? null : new vtkVolumeProperty.vtkVolumeProperty(cPtr, false);
    return ret;
  }

  public void Update() {
    vtkd_im.vtkVolume_Update(cast(void*)swigCPtr);
  }

  public override double* GetBounds() {
    auto ret = cast(double*)vtkd_im.vtkVolume_GetBounds__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetBounds(SWIGTYPE_p_double.SWIGTYPE_p_double bounds) {
    vtkd_im.vtkVolume_GetBounds__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
  }

  alias vtkProp3D.vtkProp3D.GetBounds GetBounds;

  public double GetMinXBound() {
    auto ret = vtkd_im.vtkVolume_GetMinXBound(cast(void*)swigCPtr);
    return ret;
  }

  public double GetMaxXBound() {
    auto ret = vtkd_im.vtkVolume_GetMaxXBound(cast(void*)swigCPtr);
    return ret;
  }

  public double GetMinYBound() {
    auto ret = vtkd_im.vtkVolume_GetMinYBound(cast(void*)swigCPtr);
    return ret;
  }

  public double GetMaxYBound() {
    auto ret = vtkd_im.vtkVolume_GetMaxYBound(cast(void*)swigCPtr);
    return ret;
  }

  public double GetMinZBound() {
    auto ret = vtkd_im.vtkVolume_GetMinZBound(cast(void*)swigCPtr);
    return ret;
  }

  public double GetMaxZBound() {
    auto ret = vtkd_im.vtkVolume_GetMaxZBound(cast(void*)swigCPtr);
    return ret;
  }
}
