/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkTubeFilter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkPolyDataAlgorithm;

class vtkTubeFilter : vtkPolyDataAlgorithm.vtkPolyDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkTubeFilter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkTubeFilter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkTubeFilter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkTubeFilter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkTubeFilter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkTubeFilter ret = (cPtr is null) ? null : new vtkTubeFilter(cPtr, false);
    return ret;
  }

  public vtkTubeFilter NewInstance() const {
    void* cPtr = vtkd_im.vtkTubeFilter_NewInstance(cast(void*)swigCPtr);
    vtkTubeFilter ret = (cPtr is null) ? null : new vtkTubeFilter(cPtr, false);
    return ret;
  }

  alias vtkPolyDataAlgorithm.vtkPolyDataAlgorithm.NewInstance NewInstance;

  public static vtkTubeFilter New() {
    void* cPtr = vtkd_im.vtkTubeFilter_New();
    vtkTubeFilter ret = (cPtr is null) ? null : new vtkTubeFilter(cPtr, false);
    return ret;
  }

  public void SetRadius(double _arg) {
    vtkd_im.vtkTubeFilter_SetRadius(cast(void*)swigCPtr, _arg);
  }

  public double GetRadiusMinValue() {
    auto ret = vtkd_im.vtkTubeFilter_GetRadiusMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetRadiusMaxValue() {
    auto ret = vtkd_im.vtkTubeFilter_GetRadiusMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetRadius() {
    auto ret = vtkd_im.vtkTubeFilter_GetRadius(cast(void*)swigCPtr);
    return ret;
  }

  public void SetVaryRadius(int _arg) {
    vtkd_im.vtkTubeFilter_SetVaryRadius(cast(void*)swigCPtr, _arg);
  }

  public int GetVaryRadiusMinValue() {
    auto ret = vtkd_im.vtkTubeFilter_GetVaryRadiusMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetVaryRadiusMaxValue() {
    auto ret = vtkd_im.vtkTubeFilter_GetVaryRadiusMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetVaryRadius() {
    auto ret = vtkd_im.vtkTubeFilter_GetVaryRadius(cast(void*)swigCPtr);
    return ret;
  }

  public void SetVaryRadiusToVaryRadiusOff() {
    vtkd_im.vtkTubeFilter_SetVaryRadiusToVaryRadiusOff(cast(void*)swigCPtr);
  }

  public void SetVaryRadiusToVaryRadiusByScalar() {
    vtkd_im.vtkTubeFilter_SetVaryRadiusToVaryRadiusByScalar(cast(void*)swigCPtr);
  }

  public void SetVaryRadiusToVaryRadiusByVector() {
    vtkd_im.vtkTubeFilter_SetVaryRadiusToVaryRadiusByVector(cast(void*)swigCPtr);
  }

  public void SetVaryRadiusToVaryRadiusByAbsoluteScalar() {
    vtkd_im.vtkTubeFilter_SetVaryRadiusToVaryRadiusByAbsoluteScalar(cast(void*)swigCPtr);
  }

  public string GetVaryRadiusAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkTubeFilter_GetVaryRadiusAsString(cast(void*)swigCPtr));
    return ret;
  }

  public void SetNumberOfSides(int _arg) {
    vtkd_im.vtkTubeFilter_SetNumberOfSides(cast(void*)swigCPtr, _arg);
  }

  public int GetNumberOfSidesMinValue() {
    auto ret = vtkd_im.vtkTubeFilter_GetNumberOfSidesMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfSidesMaxValue() {
    auto ret = vtkd_im.vtkTubeFilter_GetNumberOfSidesMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfSides() {
    auto ret = vtkd_im.vtkTubeFilter_GetNumberOfSides(cast(void*)swigCPtr);
    return ret;
  }

  public void SetRadiusFactor(double _arg) {
    vtkd_im.vtkTubeFilter_SetRadiusFactor(cast(void*)swigCPtr, _arg);
  }

  public double GetRadiusFactor() {
    auto ret = vtkd_im.vtkTubeFilter_GetRadiusFactor(cast(void*)swigCPtr);
    return ret;
  }

  public void SetDefaultNormal(double _arg1, double _arg2, double _arg3) {
    vtkd_im.vtkTubeFilter_SetDefaultNormal__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetDefaultNormal(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkTubeFilter_SetDefaultNormal__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetDefaultNormal() {
    auto ret = cast(double*)vtkd_im.vtkTubeFilter_GetDefaultNormal__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetDefaultNormal(SWIGTYPE_p_double.SWIGTYPE_p_double data) {
    vtkd_im.vtkTubeFilter_GetDefaultNormal__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(data));
  }

  public void SetUseDefaultNormal(int _arg) {
    vtkd_im.vtkTubeFilter_SetUseDefaultNormal(cast(void*)swigCPtr, _arg);
  }

  public int GetUseDefaultNormal() {
    auto ret = vtkd_im.vtkTubeFilter_GetUseDefaultNormal(cast(void*)swigCPtr);
    return ret;
  }

  public void UseDefaultNormalOn() {
    vtkd_im.vtkTubeFilter_UseDefaultNormalOn(cast(void*)swigCPtr);
  }

  public void UseDefaultNormalOff() {
    vtkd_im.vtkTubeFilter_UseDefaultNormalOff(cast(void*)swigCPtr);
  }

  public void SetSidesShareVertices(int _arg) {
    vtkd_im.vtkTubeFilter_SetSidesShareVertices(cast(void*)swigCPtr, _arg);
  }

  public int GetSidesShareVertices() {
    auto ret = vtkd_im.vtkTubeFilter_GetSidesShareVertices(cast(void*)swigCPtr);
    return ret;
  }

  public void SidesShareVerticesOn() {
    vtkd_im.vtkTubeFilter_SidesShareVerticesOn(cast(void*)swigCPtr);
  }

  public void SidesShareVerticesOff() {
    vtkd_im.vtkTubeFilter_SidesShareVerticesOff(cast(void*)swigCPtr);
  }

  public void SetCapping(int _arg) {
    vtkd_im.vtkTubeFilter_SetCapping(cast(void*)swigCPtr, _arg);
  }

  public int GetCapping() {
    auto ret = vtkd_im.vtkTubeFilter_GetCapping(cast(void*)swigCPtr);
    return ret;
  }

  public void CappingOn() {
    vtkd_im.vtkTubeFilter_CappingOn(cast(void*)swigCPtr);
  }

  public void CappingOff() {
    vtkd_im.vtkTubeFilter_CappingOff(cast(void*)swigCPtr);
  }

  public void SetOnRatio(int _arg) {
    vtkd_im.vtkTubeFilter_SetOnRatio(cast(void*)swigCPtr, _arg);
  }

  public int GetOnRatioMinValue() {
    auto ret = vtkd_im.vtkTubeFilter_GetOnRatioMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetOnRatioMaxValue() {
    auto ret = vtkd_im.vtkTubeFilter_GetOnRatioMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetOnRatio() {
    auto ret = vtkd_im.vtkTubeFilter_GetOnRatio(cast(void*)swigCPtr);
    return ret;
  }

  public void SetOffset(int _arg) {
    vtkd_im.vtkTubeFilter_SetOffset(cast(void*)swigCPtr, _arg);
  }

  public int GetOffsetMinValue() {
    auto ret = vtkd_im.vtkTubeFilter_GetOffsetMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetOffsetMaxValue() {
    auto ret = vtkd_im.vtkTubeFilter_GetOffsetMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetOffset() {
    auto ret = vtkd_im.vtkTubeFilter_GetOffset(cast(void*)swigCPtr);
    return ret;
  }

  public void SetGenerateTCoords(int _arg) {
    vtkd_im.vtkTubeFilter_SetGenerateTCoords(cast(void*)swigCPtr, _arg);
  }

  public int GetGenerateTCoordsMinValue() {
    auto ret = vtkd_im.vtkTubeFilter_GetGenerateTCoordsMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetGenerateTCoordsMaxValue() {
    auto ret = vtkd_im.vtkTubeFilter_GetGenerateTCoordsMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetGenerateTCoords() {
    auto ret = vtkd_im.vtkTubeFilter_GetGenerateTCoords(cast(void*)swigCPtr);
    return ret;
  }

  public void SetGenerateTCoordsToOff() {
    vtkd_im.vtkTubeFilter_SetGenerateTCoordsToOff(cast(void*)swigCPtr);
  }

  public void SetGenerateTCoordsToNormalizedLength() {
    vtkd_im.vtkTubeFilter_SetGenerateTCoordsToNormalizedLength(cast(void*)swigCPtr);
  }

  public void SetGenerateTCoordsToUseLength() {
    vtkd_im.vtkTubeFilter_SetGenerateTCoordsToUseLength(cast(void*)swigCPtr);
  }

  public void SetGenerateTCoordsToUseScalars() {
    vtkd_im.vtkTubeFilter_SetGenerateTCoordsToUseScalars(cast(void*)swigCPtr);
  }

  public string GetGenerateTCoordsAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkTubeFilter_GetGenerateTCoordsAsString(cast(void*)swigCPtr));
    return ret;
  }

  public void SetTextureLength(double _arg) {
    vtkd_im.vtkTubeFilter_SetTextureLength(cast(void*)swigCPtr, _arg);
  }

  public double GetTextureLengthMinValue() {
    auto ret = vtkd_im.vtkTubeFilter_GetTextureLengthMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetTextureLengthMaxValue() {
    auto ret = vtkd_im.vtkTubeFilter_GetTextureLengthMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetTextureLength() {
    auto ret = vtkd_im.vtkTubeFilter_GetTextureLength(cast(void*)swigCPtr);
    return ret;
  }
}
