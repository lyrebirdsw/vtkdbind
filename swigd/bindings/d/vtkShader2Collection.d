/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkShader2Collection;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkShader2;
static import vtkCollection;

class vtkShader2Collection : vtkCollection.vtkCollection {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkShader2Collection_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkShader2Collection obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkShader2Collection New() {
    void* cPtr = vtkd_im.vtkShader2Collection_New();
    vtkShader2Collection ret = (cPtr is null) ? null : new vtkShader2Collection(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkShader2Collection_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkShader2Collection SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkShader2Collection_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkShader2Collection ret = (cPtr is null) ? null : new vtkShader2Collection(cPtr, false);
    return ret;
  }

  public vtkShader2Collection NewInstance() const {
    void* cPtr = vtkd_im.vtkShader2Collection_NewInstance(cast(void*)swigCPtr);
    vtkShader2Collection ret = (cPtr is null) ? null : new vtkShader2Collection(cPtr, false);
    return ret;
  }

  alias vtkCollection.vtkCollection.NewInstance NewInstance;

  public void AddItem(vtkShader2.vtkShader2 shader) {
    vtkd_im.vtkShader2Collection_AddItem(cast(void*)swigCPtr, vtkShader2.vtkShader2.swigGetCPtr(shader));
  }

  alias vtkCollection.vtkCollection.AddItem AddItem;

  public vtkShader2.vtkShader2 GetNextShader() {
    void* cPtr = vtkd_im.vtkShader2Collection_GetNextShader(cast(void*)swigCPtr);
    vtkShader2.vtkShader2 ret = (cPtr is null) ? null : new vtkShader2.vtkShader2(cPtr, false);
    return ret;
  }

  public vtkShader2.vtkShader2 GetLastShader() {
    void* cPtr = vtkd_im.vtkShader2Collection_GetLastShader(cast(void*)swigCPtr);
    vtkShader2.vtkShader2 ret = (cPtr is null) ? null : new vtkShader2.vtkShader2(cPtr, false);
    return ret;
  }

  public void AddCollection(vtkShader2Collection other) {
    vtkd_im.vtkShader2Collection_AddCollection(cast(void*)swigCPtr, vtkShader2Collection.swigGetCPtr(other));
  }

  public void RemoveCollection(vtkShader2Collection other) {
    vtkd_im.vtkShader2Collection_RemoveCollection(cast(void*)swigCPtr, vtkShader2Collection.swigGetCPtr(other));
  }

  public bool HasVertexShaders() {
    bool ret = vtkd_im.vtkShader2Collection_HasVertexShaders(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool HasTessellationControlShaders() {
    bool ret = vtkd_im.vtkShader2Collection_HasTessellationControlShaders(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool HasTessellationEvaluationShaders() {
    bool ret = vtkd_im.vtkShader2Collection_HasTessellationEvaluationShaders(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool HasGeometryShaders() {
    bool ret = vtkd_im.vtkShader2Collection_HasGeometryShaders(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool HasFragmentShaders() {
    bool ret = vtkd_im.vtkShader2Collection_HasFragmentShaders(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void ReleaseGraphicsResources() {
    vtkd_im.vtkShader2Collection_ReleaseGraphicsResources(cast(void*)swigCPtr);
  }
}
