/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkResliceCursorPolyDataAlgorithm;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkResliceCursor;
static import SWIGTYPE_p_double;
static import vtkPolyData;
static import vtkPolyDataAlgorithm;

class vtkResliceCursorPolyDataAlgorithm : vtkPolyDataAlgorithm.vtkPolyDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkResliceCursorPolyDataAlgorithm_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkResliceCursorPolyDataAlgorithm obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkResliceCursorPolyDataAlgorithm_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkResliceCursorPolyDataAlgorithm SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkResliceCursorPolyDataAlgorithm_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkResliceCursorPolyDataAlgorithm ret = (cPtr is null) ? null : new vtkResliceCursorPolyDataAlgorithm(cPtr, false);
    return ret;
  }

  public vtkResliceCursorPolyDataAlgorithm NewInstance() const {
    void* cPtr = vtkd_im.vtkResliceCursorPolyDataAlgorithm_NewInstance(cast(void*)swigCPtr);
    vtkResliceCursorPolyDataAlgorithm ret = (cPtr is null) ? null : new vtkResliceCursorPolyDataAlgorithm(cPtr, false);
    return ret;
  }

  alias vtkPolyDataAlgorithm.vtkPolyDataAlgorithm.NewInstance NewInstance;

  public static vtkResliceCursorPolyDataAlgorithm New() {
    void* cPtr = vtkd_im.vtkResliceCursorPolyDataAlgorithm_New();
    vtkResliceCursorPolyDataAlgorithm ret = (cPtr is null) ? null : new vtkResliceCursorPolyDataAlgorithm(cPtr, false);
    return ret;
  }

  public void SetReslicePlaneNormal(int _arg) {
    vtkd_im.vtkResliceCursorPolyDataAlgorithm_SetReslicePlaneNormal(cast(void*)swigCPtr, _arg);
  }

  public int GetReslicePlaneNormal() {
    auto ret = vtkd_im.vtkResliceCursorPolyDataAlgorithm_GetReslicePlaneNormal(cast(void*)swigCPtr);
    return ret;
  }

  public void SetReslicePlaneNormalToXAxis() {
    vtkd_im.vtkResliceCursorPolyDataAlgorithm_SetReslicePlaneNormalToXAxis(cast(void*)swigCPtr);
  }

  public void SetReslicePlaneNormalToYAxis() {
    vtkd_im.vtkResliceCursorPolyDataAlgorithm_SetReslicePlaneNormalToYAxis(cast(void*)swigCPtr);
  }

  public void SetReslicePlaneNormalToZAxis() {
    vtkd_im.vtkResliceCursorPolyDataAlgorithm_SetReslicePlaneNormalToZAxis(cast(void*)swigCPtr);
  }

  public void SetResliceCursor(vtkResliceCursor.vtkResliceCursor arg0) {
    vtkd_im.vtkResliceCursorPolyDataAlgorithm_SetResliceCursor(cast(void*)swigCPtr, vtkResliceCursor.vtkResliceCursor.swigGetCPtr(arg0));
  }

  public vtkResliceCursor.vtkResliceCursor GetResliceCursor() {
    void* cPtr = vtkd_im.vtkResliceCursorPolyDataAlgorithm_GetResliceCursor(cast(void*)swigCPtr);
    vtkResliceCursor.vtkResliceCursor ret = (cPtr is null) ? null : new vtkResliceCursor.vtkResliceCursor(cPtr, false);
    return ret;
  }

  public void SetSliceBounds(double _arg1, double _arg2, double _arg3, double _arg4, double _arg5, double _arg6) {
    vtkd_im.vtkResliceCursorPolyDataAlgorithm_SetSliceBounds__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
  }

  public void SetSliceBounds(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkResliceCursorPolyDataAlgorithm_SetSliceBounds__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetSliceBounds() {
    auto ret = cast(double*)vtkd_im.vtkResliceCursorPolyDataAlgorithm_GetSliceBounds__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetSliceBounds(double* _arg1, double* _arg2, double* _arg3, double* _arg4, double* _arg5, double* _arg6) {
    vtkd_im.vtkResliceCursorPolyDataAlgorithm_GetSliceBounds__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3, cast(void*)_arg4, cast(void*)_arg5, cast(void*)_arg6);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetSliceBounds(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkResliceCursorPolyDataAlgorithm_GetSliceBounds__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public vtkPolyData.vtkPolyData GetCenterlineAxis1() {
    void* cPtr = vtkd_im.vtkResliceCursorPolyDataAlgorithm_GetCenterlineAxis1(cast(void*)swigCPtr);
    vtkPolyData.vtkPolyData ret = (cPtr is null) ? null : new vtkPolyData.vtkPolyData(cPtr, false);
    return ret;
  }

  public vtkPolyData.vtkPolyData GetCenterlineAxis2() {
    void* cPtr = vtkd_im.vtkResliceCursorPolyDataAlgorithm_GetCenterlineAxis2(cast(void*)swigCPtr);
    vtkPolyData.vtkPolyData ret = (cPtr is null) ? null : new vtkPolyData.vtkPolyData(cPtr, false);
    return ret;
  }

  public vtkPolyData.vtkPolyData GetThickSlabAxis1() {
    void* cPtr = vtkd_im.vtkResliceCursorPolyDataAlgorithm_GetThickSlabAxis1(cast(void*)swigCPtr);
    vtkPolyData.vtkPolyData ret = (cPtr is null) ? null : new vtkPolyData.vtkPolyData(cPtr, false);
    return ret;
  }

  public vtkPolyData.vtkPolyData GetThickSlabAxis2() {
    void* cPtr = vtkd_im.vtkResliceCursorPolyDataAlgorithm_GetThickSlabAxis2(cast(void*)swigCPtr);
    vtkPolyData.vtkPolyData ret = (cPtr is null) ? null : new vtkPolyData.vtkPolyData(cPtr, false);
    return ret;
  }

  public int GetAxis1() {
    auto ret = vtkd_im.vtkResliceCursorPolyDataAlgorithm_GetAxis1(cast(void*)swigCPtr);
    return ret;
  }

  public int GetAxis2() {
    auto ret = vtkd_im.vtkResliceCursorPolyDataAlgorithm_GetAxis2(cast(void*)swigCPtr);
    return ret;
  }

  public int GetPlaneAxis1() {
    auto ret = vtkd_im.vtkResliceCursorPolyDataAlgorithm_GetPlaneAxis1(cast(void*)swigCPtr);
    return ret;
  }

  public int GetPlaneAxis2() {
    auto ret = vtkd_im.vtkResliceCursorPolyDataAlgorithm_GetPlaneAxis2(cast(void*)swigCPtr);
    return ret;
  }

  public int GetOtherPlaneForAxis(int p) {
    auto ret = vtkd_im.vtkResliceCursorPolyDataAlgorithm_GetOtherPlaneForAxis(cast(void*)swigCPtr, p);
    return ret;
  }
}
