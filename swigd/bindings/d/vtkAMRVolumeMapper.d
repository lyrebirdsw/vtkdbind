/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkAMRVolumeMapper;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkImageData;
static import vtkDataSet;
static import vtkOverlappingAMR;
static import vtkAlgorithmOutput;
static import SWIGTYPE_p_double;
static import SWIGTYPE_p_int;
static import vtkCamera;
static import vtkRenderer;
static import vtkVolumeMapper;

class vtkAMRVolumeMapper : vtkVolumeMapper.vtkVolumeMapper {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkAMRVolumeMapper_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkAMRVolumeMapper obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkAMRVolumeMapper New() {
    void* cPtr = vtkd_im.vtkAMRVolumeMapper_New();
    vtkAMRVolumeMapper ret = (cPtr is null) ? null : new vtkAMRVolumeMapper(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkAMRVolumeMapper_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkAMRVolumeMapper SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkAMRVolumeMapper_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkAMRVolumeMapper ret = (cPtr is null) ? null : new vtkAMRVolumeMapper(cPtr, false);
    return ret;
  }

  public vtkAMRVolumeMapper NewInstance() const {
    void* cPtr = vtkd_im.vtkAMRVolumeMapper_NewInstance(cast(void*)swigCPtr);
    vtkAMRVolumeMapper ret = (cPtr is null) ? null : new vtkAMRVolumeMapper(cPtr, false);
    return ret;
  }

  alias vtkVolumeMapper.vtkVolumeMapper.NewInstance NewInstance;

  public override void SetInputData(vtkImageData.vtkImageData arg0) {
    vtkd_im.vtkAMRVolumeMapper_SetInputData__SWIG_0(cast(void*)swigCPtr, vtkImageData.vtkImageData.swigGetCPtr(arg0));
  }

  public override void SetInputData(vtkDataSet.vtkDataSet arg0) {
    vtkd_im.vtkAMRVolumeMapper_SetInputData__SWIG_1(cast(void*)swigCPtr, vtkDataSet.vtkDataSet.swigGetCPtr(arg0));
  }

  public void SetInputData(vtkOverlappingAMR.vtkOverlappingAMR arg0) {
    vtkd_im.vtkAMRVolumeMapper_SetInputData__SWIG_2(cast(void*)swigCPtr, vtkOverlappingAMR.vtkOverlappingAMR.swigGetCPtr(arg0));
  }

  alias vtkVolumeMapper.vtkVolumeMapper.SetInputData SetInputData;

  public override void SetInputConnection(int port, vtkAlgorithmOutput.vtkAlgorithmOutput input) {
    vtkd_im.vtkAMRVolumeMapper_SetInputConnection__SWIG_0(cast(void*)swigCPtr, port, vtkAlgorithmOutput.vtkAlgorithmOutput.swigGetCPtr(input));
  }

  public override void SetInputConnection(vtkAlgorithmOutput.vtkAlgorithmOutput input) {
    vtkd_im.vtkAMRVolumeMapper_SetInputConnection__SWIG_1(cast(void*)swigCPtr, vtkAlgorithmOutput.vtkAlgorithmOutput.swigGetCPtr(input));
  }

  public override double* GetBounds() {
    auto ret = cast(double*)vtkd_im.vtkAMRVolumeMapper_GetBounds__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public override void GetBounds(SWIGTYPE_p_double.SWIGTYPE_p_double bounds) {
    vtkd_im.vtkAMRVolumeMapper_GetBounds__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
  }

  public override void SelectScalarArray(int arrayNum) {
    vtkd_im.vtkAMRVolumeMapper_SelectScalarArray__SWIG_0(cast(void*)swigCPtr, arrayNum);
  }

  public override void SelectScalarArray(string arrayName) {
    vtkd_im.vtkAMRVolumeMapper_SelectScalarArray__SWIG_1(cast(void*)swigCPtr, (arrayName ? std.string.toStringz(arrayName) : null));
  }

  public string GetScalarModeAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkAMRVolumeMapper_GetScalarModeAsString(cast(void*)swigCPtr));
    return ret;
  }

  public override void SetCroppingRegionPlanes(double arg1, double arg2, double arg3, double arg4, double arg5, double arg6) {
    vtkd_im.vtkAMRVolumeMapper_SetCroppingRegionPlanes__SWIG_0(cast(void*)swigCPtr, arg1, arg2, arg3, arg4, arg5, arg6);
  }

  public void SetCroppingRegionPlanes(double* planes) {
    vtkd_im.vtkAMRVolumeMapper_SetCroppingRegionPlanes__SWIG_1(cast(void*)swigCPtr, cast(void*)planes);
  }

  alias vtkVolumeMapper.vtkVolumeMapper.SetCroppingRegionPlanes SetCroppingRegionPlanes;

  public void GetCroppingRegionPlanes(double* planes) {
    vtkd_im.vtkAMRVolumeMapper_GetCroppingRegionPlanes__SWIG_0(cast(void*)swigCPtr, cast(void*)planes);
  }

  public override double* GetCroppingRegionPlanes() {
    auto ret = cast(double*)vtkd_im.vtkAMRVolumeMapper_GetCroppingRegionPlanes__SWIG_1(cast(void*)swigCPtr);
    return ret;
  }

  public void SetRequestedRenderMode(int mode) {
    vtkd_im.vtkAMRVolumeMapper_SetRequestedRenderMode(cast(void*)swigCPtr, mode);
  }

  public int GetRequestedRenderMode() {
    auto ret = vtkd_im.vtkAMRVolumeMapper_GetRequestedRenderMode(cast(void*)swigCPtr);
    return ret;
  }

  public void SetRequestedRenderModeToDefault() {
    vtkd_im.vtkAMRVolumeMapper_SetRequestedRenderModeToDefault(cast(void*)swigCPtr);
  }

  public void SetRequestedRenderModeToRayCastAndTexture() {
    vtkd_im.vtkAMRVolumeMapper_SetRequestedRenderModeToRayCastAndTexture(cast(void*)swigCPtr);
  }

  public void SetRequestedRenderModeToRayCast() {
    vtkd_im.vtkAMRVolumeMapper_SetRequestedRenderModeToRayCast(cast(void*)swigCPtr);
  }

  public void SetRequestedRenderModeToTexture() {
    vtkd_im.vtkAMRVolumeMapper_SetRequestedRenderModeToTexture(cast(void*)swigCPtr);
  }

  public void SetRequestedRenderModeToGPU() {
    vtkd_im.vtkAMRVolumeMapper_SetRequestedRenderModeToGPU(cast(void*)swigCPtr);
  }

  public void SetInterpolationMode(int mode) {
    vtkd_im.vtkAMRVolumeMapper_SetInterpolationMode(cast(void*)swigCPtr, mode);
  }

  public int GetInterpolationMode() {
    auto ret = vtkd_im.vtkAMRVolumeMapper_GetInterpolationMode(cast(void*)swigCPtr);
    return ret;
  }

  public void SetInterpolationModeToNearestNeighbor() {
    vtkd_im.vtkAMRVolumeMapper_SetInterpolationModeToNearestNeighbor(cast(void*)swigCPtr);
  }

  public void SetInterpolationModeToLinear() {
    vtkd_im.vtkAMRVolumeMapper_SetInterpolationModeToLinear(cast(void*)swigCPtr);
  }

  public void SetInterpolationModeToCubic() {
    vtkd_im.vtkAMRVolumeMapper_SetInterpolationModeToCubic(cast(void*)swigCPtr);
  }

  public void SetNumberOfSamples(int _arg1, int _arg2, int _arg3) {
    vtkd_im.vtkAMRVolumeMapper_SetNumberOfSamples__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetNumberOfSamples(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkAMRVolumeMapper_SetNumberOfSamples__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public int* GetNumberOfSamples() {
    auto ret = cast(int*)vtkd_im.vtkAMRVolumeMapper_GetNumberOfSamples__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetNumberOfSamples(int* _arg1, int* _arg2, int* _arg3) {
    vtkd_im.vtkAMRVolumeMapper_GetNumberOfSamples__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetNumberOfSamples(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkAMRVolumeMapper_GetNumberOfSamples__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public void SetInteractiveUpdateRate(double rate) {
    vtkd_im.vtkAMRVolumeMapper_SetInteractiveUpdateRate(cast(void*)swigCPtr, rate);
  }

  public double GetInteractiveUpdateRate() {
    auto ret = vtkd_im.vtkAMRVolumeMapper_GetInteractiveUpdateRate(cast(void*)swigCPtr);
    return ret;
  }

  public void SetRequestedResamplingMode(int _arg) {
    vtkd_im.vtkAMRVolumeMapper_SetRequestedResamplingMode(cast(void*)swigCPtr, _arg);
  }

  public int GetRequestedResamplingMode() {
    auto ret = vtkd_im.vtkAMRVolumeMapper_GetRequestedResamplingMode(cast(void*)swigCPtr);
    return ret;
  }

  public void SetFreezeFocalPoint(bool _arg) {
    vtkd_im.vtkAMRVolumeMapper_SetFreezeFocalPoint(cast(void*)swigCPtr, _arg);
  }

  public bool GetFreezeFocalPoint() {
    bool ret = vtkd_im.vtkAMRVolumeMapper_GetFreezeFocalPoint(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetResamplerUpdateTolerance(double _arg) {
    vtkd_im.vtkAMRVolumeMapper_SetResamplerUpdateTolerance(cast(void*)swigCPtr, _arg);
  }

  public double GetResamplerUpdateTolerance() {
    auto ret = vtkd_im.vtkAMRVolumeMapper_GetResamplerUpdateTolerance(cast(void*)swigCPtr);
    return ret;
  }

  public void SetUseDefaultThreading(bool _arg) {
    vtkd_im.vtkAMRVolumeMapper_SetUseDefaultThreading(cast(void*)swigCPtr, _arg);
  }

  public bool GetUseDefaultThreading() {
    bool ret = vtkd_im.vtkAMRVolumeMapper_GetUseDefaultThreading(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public static bool ComputeResamplerBoundsFrustumMethod(vtkCamera.vtkCamera camera, vtkRenderer.vtkRenderer renderer, SWIGTYPE_p_double.SWIGTYPE_p_double data_bounds, SWIGTYPE_p_double.SWIGTYPE_p_double out_bounds) {
    bool ret = vtkd_im.vtkAMRVolumeMapper_ComputeResamplerBoundsFrustumMethod(vtkCamera.vtkCamera.swigGetCPtr(camera), vtkRenderer.vtkRenderer.swigGetCPtr(renderer), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(data_bounds), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(out_bounds)) ? true : false;
    return ret;
  }
}
