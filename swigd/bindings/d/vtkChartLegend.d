/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkChartLegend;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_float;
static import vtkVector2f;
static import vtkChart;
static import vtkRectf;
static import vtkContext2D;
static import vtkPen;
static import vtkBrush;
static import vtkTextProperty;
static import vtkContextMouseEvent;
static import vtkContextItem;

class vtkChartLegend : vtkContextItem.vtkContextItem {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkChartLegend_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkChartLegend obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  enum {
    LEFT = 0,
    CENTER,
    RIGHT,
    TOP,
    BOTTOM,
    CUSTOM
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkChartLegend_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkChartLegend SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkChartLegend_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkChartLegend ret = (cPtr is null) ? null : new vtkChartLegend(cPtr, false);
    return ret;
  }

  public vtkChartLegend NewInstance() const {
    void* cPtr = vtkd_im.vtkChartLegend_NewInstance(cast(void*)swigCPtr);
    vtkChartLegend ret = (cPtr is null) ? null : new vtkChartLegend(cPtr, false);
    return ret;
  }

  alias vtkContextItem.vtkContextItem.NewInstance NewInstance;

  public static vtkChartLegend New() {
    void* cPtr = vtkd_im.vtkChartLegend_New();
    vtkChartLegend ret = (cPtr is null) ? null : new vtkChartLegend(cPtr, false);
    return ret;
  }

  public void SetPoint(float _arg1, float _arg2) {
    vtkd_im.vtkChartLegend_SetPoint__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2);
  }

  public void SetPoint(SWIGTYPE_p_float.SWIGTYPE_p_float _arg) {
    vtkd_im.vtkChartLegend_SetPoint__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(_arg));
  }

  public float* GetPoint() {
    auto ret = cast(float*)vtkd_im.vtkChartLegend_GetPoint__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetPoint(float* _arg1, float* _arg2) {
    vtkd_im.vtkChartLegend_GetPoint__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetPoint(SWIGTYPE_p_float.SWIGTYPE_p_float _arg) {
    vtkd_im.vtkChartLegend_GetPoint__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(_arg));
  }

  public void SetPoint(vtkVector2f.vtkVector2f point) {
    vtkd_im.vtkChartLegend_SetPoint__SWIG_2(cast(void*)swigCPtr, vtkVector2f.vtkVector2f.swigGetCPtr(point));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public vtkVector2f.vtkVector2f GetPointVector() {
    vtkVector2f.vtkVector2f ret = new vtkVector2f.vtkVector2f(vtkd_im.vtkChartLegend_GetPointVector(cast(void*)swigCPtr), false);
    return ret;
  }

  public void SetHorizontalAlignment(int _arg) {
    vtkd_im.vtkChartLegend_SetHorizontalAlignment(cast(void*)swigCPtr, _arg);
  }

  public int GetHorizontalAlignment() {
    auto ret = vtkd_im.vtkChartLegend_GetHorizontalAlignment(cast(void*)swigCPtr);
    return ret;
  }

  public void SetVerticalAlignment(int _arg) {
    vtkd_im.vtkChartLegend_SetVerticalAlignment(cast(void*)swigCPtr, _arg);
  }

  public int GetVerticalAlignment() {
    auto ret = vtkd_im.vtkChartLegend_GetVerticalAlignment(cast(void*)swigCPtr);
    return ret;
  }

  public void SetPadding(int _arg) {
    vtkd_im.vtkChartLegend_SetPadding(cast(void*)swigCPtr, _arg);
  }

  public int GetPadding() {
    auto ret = vtkd_im.vtkChartLegend_GetPadding(cast(void*)swigCPtr);
    return ret;
  }

  public void SetSymbolWidth(int _arg) {
    vtkd_im.vtkChartLegend_SetSymbolWidth(cast(void*)swigCPtr, _arg);
  }

  public int GetSymbolWidth() {
    auto ret = vtkd_im.vtkChartLegend_GetSymbolWidth(cast(void*)swigCPtr);
    return ret;
  }

  public void SetLabelSize(int size) {
    vtkd_im.vtkChartLegend_SetLabelSize(cast(void*)swigCPtr, size);
  }

  public int GetLabelSize() {
    auto ret = vtkd_im.vtkChartLegend_GetLabelSize(cast(void*)swigCPtr);
    return ret;
  }

  public void SetInline(bool _arg) {
    vtkd_im.vtkChartLegend_SetInline(cast(void*)swigCPtr, _arg);
  }

  public bool GetInline() {
    bool ret = vtkd_im.vtkChartLegend_GetInline(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetDragEnabled(bool _arg) {
    vtkd_im.vtkChartLegend_SetDragEnabled(cast(void*)swigCPtr, _arg);
  }

  public bool GetDragEnabled() {
    bool ret = vtkd_im.vtkChartLegend_GetDragEnabled(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetChart(vtkChart.vtkChart chart) {
    vtkd_im.vtkChartLegend_SetChart(cast(void*)swigCPtr, vtkChart.vtkChart.swigGetCPtr(chart));
  }

  public vtkChart.vtkChart GetChart() {
    void* cPtr = vtkd_im.vtkChartLegend_GetChart(cast(void*)swigCPtr);
    vtkChart.vtkChart ret = (cPtr is null) ? null : new vtkChart.vtkChart(cPtr, false);
    return ret;
  }

  public vtkRectf.vtkRectf GetBoundingRect(vtkContext2D.vtkContext2D painter) {
    vtkRectf.vtkRectf ret = new vtkRectf.vtkRectf(vtkd_im.vtkChartLegend_GetBoundingRect(cast(void*)swigCPtr, vtkContext2D.vtkContext2D.swigGetCPtr(painter)), true);
    return ret;
  }

  public vtkPen.vtkPen GetPen() {
    void* cPtr = vtkd_im.vtkChartLegend_GetPen(cast(void*)swigCPtr);
    vtkPen.vtkPen ret = (cPtr is null) ? null : new vtkPen.vtkPen(cPtr, false);
    return ret;
  }

  public vtkBrush.vtkBrush GetBrush() {
    void* cPtr = vtkd_im.vtkChartLegend_GetBrush(cast(void*)swigCPtr);
    vtkBrush.vtkBrush ret = (cPtr is null) ? null : new vtkBrush.vtkBrush(cPtr, false);
    return ret;
  }

  public vtkTextProperty.vtkTextProperty GetLabelProperties() {
    void* cPtr = vtkd_im.vtkChartLegend_GetLabelProperties(cast(void*)swigCPtr);
    vtkTextProperty.vtkTextProperty ret = (cPtr is null) ? null : new vtkTextProperty.vtkTextProperty(cPtr, false);
    return ret;
  }

  public bool Hit(vtkContextMouseEvent.vtkContextMouseEvent mouse) {
    bool ret = vtkd_im.vtkChartLegend_Hit(cast(void*)swigCPtr, vtkContextMouseEvent.vtkContextMouseEvent.swigGetCPtr(mouse)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool MouseMoveEvent(vtkContextMouseEvent.vtkContextMouseEvent mouse) {
    bool ret = vtkd_im.vtkChartLegend_MouseMoveEvent(cast(void*)swigCPtr, vtkContextMouseEvent.vtkContextMouseEvent.swigGetCPtr(mouse)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool MouseButtonPressEvent(vtkContextMouseEvent.vtkContextMouseEvent mouse) {
    bool ret = vtkd_im.vtkChartLegend_MouseButtonPressEvent(cast(void*)swigCPtr, vtkContextMouseEvent.vtkContextMouseEvent.swigGetCPtr(mouse)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool MouseButtonReleaseEvent(vtkContextMouseEvent.vtkContextMouseEvent mouse) {
    bool ret = vtkd_im.vtkChartLegend_MouseButtonReleaseEvent(cast(void*)swigCPtr, vtkContextMouseEvent.vtkContextMouseEvent.swigGetCPtr(mouse)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }
}
