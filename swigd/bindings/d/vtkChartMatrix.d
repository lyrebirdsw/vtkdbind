/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkChartMatrix;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkVector2i;
static import SWIGTYPE_p_int;
static import vtkVector2f;
static import vtkChart;
static import vtkAbstractContextItem;

class vtkChartMatrix : vtkAbstractContextItem.vtkAbstractContextItem {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkChartMatrix_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkChartMatrix obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkChartMatrix_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkChartMatrix SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkChartMatrix_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkChartMatrix ret = (cPtr is null) ? null : new vtkChartMatrix(cPtr, false);
    return ret;
  }

  public vtkChartMatrix NewInstance() const {
    void* cPtr = vtkd_im.vtkChartMatrix_NewInstance(cast(void*)swigCPtr);
    vtkChartMatrix ret = (cPtr is null) ? null : new vtkChartMatrix(cPtr, false);
    return ret;
  }

  alias vtkAbstractContextItem.vtkAbstractContextItem.NewInstance NewInstance;

  public static vtkChartMatrix New() {
    void* cPtr = vtkd_im.vtkChartMatrix_New();
    vtkChartMatrix ret = (cPtr is null) ? null : new vtkChartMatrix(cPtr, false);
    return ret;
  }

  public void SetSize(vtkVector2i.vtkVector2i size) {
    vtkd_im.vtkChartMatrix_SetSize(cast(void*)swigCPtr, vtkVector2i.vtkVector2i.swigGetCPtr(size));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public vtkVector2i.vtkVector2i GetSize() const {
    vtkVector2i.vtkVector2i ret = new vtkVector2i.vtkVector2i(vtkd_im.vtkChartMatrix_GetSize(cast(void*)swigCPtr), true);
    return ret;
  }

  public void SetBorders(int left, int bottom, int right, int top) {
    vtkd_im.vtkChartMatrix_SetBorders(cast(void*)swigCPtr, left, bottom, right, top);
  }

  public void GetBorders(SWIGTYPE_p_int.SWIGTYPE_p_int borders) {
    vtkd_im.vtkChartMatrix_GetBorders(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(borders));
  }

  public void SetGutter(vtkVector2f.vtkVector2f gutter) {
    vtkd_im.vtkChartMatrix_SetGutter(cast(void*)swigCPtr, vtkVector2f.vtkVector2f.swigGetCPtr(gutter));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public vtkVector2f.vtkVector2f GetGutter() const {
    vtkVector2f.vtkVector2f ret = new vtkVector2f.vtkVector2f(vtkd_im.vtkChartMatrix_GetGutter(cast(void*)swigCPtr), true);
    return ret;
  }

  public void Allocate() {
    vtkd_im.vtkChartMatrix_Allocate(cast(void*)swigCPtr);
  }

  public bool SetChart(vtkVector2i.vtkVector2i position, vtkChart.vtkChart chart) {
    bool ret = vtkd_im.vtkChartMatrix_SetChart(cast(void*)swigCPtr, vtkVector2i.vtkVector2i.swigGetCPtr(position), vtkChart.vtkChart.swigGetCPtr(chart)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public vtkChart.vtkChart GetChart(vtkVector2i.vtkVector2i position) {
    void* cPtr = vtkd_im.vtkChartMatrix_GetChart(cast(void*)swigCPtr, vtkVector2i.vtkVector2i.swigGetCPtr(position));
    vtkChart.vtkChart ret = (cPtr is null) ? null : new vtkChart.vtkChart(cPtr, false);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool SetChartSpan(vtkVector2i.vtkVector2i position, vtkVector2i.vtkVector2i span) {
    bool ret = vtkd_im.vtkChartMatrix_SetChartSpan(cast(void*)swigCPtr, vtkVector2i.vtkVector2i.swigGetCPtr(position), vtkVector2i.vtkVector2i.swigGetCPtr(span)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public vtkVector2i.vtkVector2i GetChartSpan(vtkVector2i.vtkVector2i position) {
    vtkVector2i.vtkVector2i ret = new vtkVector2i.vtkVector2i(vtkd_im.vtkChartMatrix_GetChartSpan(cast(void*)swigCPtr, vtkVector2i.vtkVector2i.swigGetCPtr(position)), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public vtkVector2i.vtkVector2i GetChartIndex(vtkVector2f.vtkVector2f position) {
    vtkVector2i.vtkVector2i ret = new vtkVector2i.vtkVector2i(vtkd_im.vtkChartMatrix_GetChartIndex(cast(void*)swigCPtr, vtkVector2f.vtkVector2f.swigGetCPtr(position)), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }
}
