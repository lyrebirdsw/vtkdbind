/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkOpenGLBufferObjectState;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import SWIGTYPE_p_ostream;
static import vtkIndent;
static import SWIGTYPE_p_GLuint;
static import SWIGTYPE_p_GLint;
static import SWIGTYPE_p_GLenum;
static import SWIGTYPE_p_GLboolean;
static import SWIGTYPE_p_GLvoid;

class vtkOpenGLBufferObjectState {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(vtkOpenGLBufferObjectState obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkOpenGLBufferObjectState(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void PrintSelf(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream os, vtkIndent.vtkIndent indent) {
    vtkd_im.vtkOpenGLBufferObjectState_PrintSelf(cast(void*)swigCPtr, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(os), vtkIndent.vtkIndent.swigGetCPtr(indent));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void Id(SWIGTYPE_p_GLuint.SWIGTYPE_p_GLuint value) @property {
    vtkd_im.vtkOpenGLBufferObjectState_Id_set(cast(void*)swigCPtr, SWIGTYPE_p_GLuint.SWIGTYPE_p_GLuint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLuint.SWIGTYPE_p_GLuint Id() @property const {
    SWIGTYPE_p_GLuint.SWIGTYPE_p_GLuint ret = new SWIGTYPE_p_GLuint.SWIGTYPE_p_GLuint(vtkd_im.vtkOpenGLBufferObjectState_Id_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void Size(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLBufferObjectState_Size_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint Size() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLBufferObjectState_Size_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void Usage(SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum value) @property {
    vtkd_im.vtkOpenGLBufferObjectState_Usage_set(cast(void*)swigCPtr, SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum Usage() @property const {
    SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum ret = new SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum(vtkd_im.vtkOpenGLBufferObjectState_Usage_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void Access(SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum value) @property {
    vtkd_im.vtkOpenGLBufferObjectState_Access_set(cast(void*)swigCPtr, SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum Access() @property const {
    SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum ret = new SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum(vtkd_im.vtkOpenGLBufferObjectState_Access_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void AccessFlags(SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum value) @property {
    vtkd_im.vtkOpenGLBufferObjectState_AccessFlags_set(cast(void*)swigCPtr, SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum AccessFlags() @property const {
    SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum ret = new SWIGTYPE_p_GLenum.SWIGTYPE_p_GLenum(vtkd_im.vtkOpenGLBufferObjectState_AccessFlags_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void Mapped(SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean value) @property {
    vtkd_im.vtkOpenGLBufferObjectState_Mapped_set(cast(void*)swigCPtr, SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean Mapped() @property const {
    SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean ret = new SWIGTYPE_p_GLboolean.SWIGTYPE_p_GLboolean(vtkd_im.vtkOpenGLBufferObjectState_Mapped_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MapPointer(SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid value) @property {
    vtkd_im.vtkOpenGLBufferObjectState_MapPointer_set(cast(void*)swigCPtr, SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid.swigGetCPtr(value));
  }

  public SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid MapPointer() @property const {
    void* cPtr = vtkd_im.vtkOpenGLBufferObjectState_MapPointer_get(cast(void*)swigCPtr);
    SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid ret = (cPtr is null) ? null : new SWIGTYPE_p_GLvoid.SWIGTYPE_p_GLvoid(cPtr, false);
    return ret;
  }

  public void MapOffset(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLBufferObjectState_MapOffset_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MapOffset() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLBufferObjectState_MapOffset_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MapLength(SWIGTYPE_p_GLint.SWIGTYPE_p_GLint value) @property {
    vtkd_im.vtkOpenGLBufferObjectState_MapLength_set(cast(void*)swigCPtr, SWIGTYPE_p_GLint.SWIGTYPE_p_GLint.swigGetCPtr(value));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLint.SWIGTYPE_p_GLint MapLength() @property const {
    SWIGTYPE_p_GLint.SWIGTYPE_p_GLint ret = new SWIGTYPE_p_GLint.SWIGTYPE_p_GLint(vtkd_im.vtkOpenGLBufferObjectState_MapLength_get(cast(void*)swigCPtr), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public this() {
    this(vtkd_im.new_vtkOpenGLBufferObjectState(), true);
  }
}
