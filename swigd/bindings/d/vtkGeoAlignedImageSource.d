/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkGeoAlignedImageSource;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkImageData;
static import SWIGTYPE_p_double;
static import vtkGeoSource;

class vtkGeoAlignedImageSource : vtkGeoSource.vtkGeoSource {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkGeoAlignedImageSource_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkGeoAlignedImageSource obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkGeoAlignedImageSource New() {
    void* cPtr = vtkd_im.vtkGeoAlignedImageSource_New();
    vtkGeoAlignedImageSource ret = (cPtr is null) ? null : new vtkGeoAlignedImageSource(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkGeoAlignedImageSource_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkGeoAlignedImageSource SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkGeoAlignedImageSource_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkGeoAlignedImageSource ret = (cPtr is null) ? null : new vtkGeoAlignedImageSource(cPtr, false);
    return ret;
  }

  public vtkGeoAlignedImageSource NewInstance() const {
    void* cPtr = vtkd_im.vtkGeoAlignedImageSource_NewInstance(cast(void*)swigCPtr);
    vtkGeoAlignedImageSource ret = (cPtr is null) ? null : new vtkGeoAlignedImageSource(cPtr, false);
    return ret;
  }

  alias vtkGeoSource.vtkGeoSource.NewInstance NewInstance;

  public vtkImageData.vtkImageData GetImage() {
    void* cPtr = vtkd_im.vtkGeoAlignedImageSource_GetImage(cast(void*)swigCPtr);
    vtkImageData.vtkImageData ret = (cPtr is null) ? null : new vtkImageData.vtkImageData(cPtr, false);
    return ret;
  }

  public void SetImage(vtkImageData.vtkImageData image) {
    vtkd_im.vtkGeoAlignedImageSource_SetImage(cast(void*)swigCPtr, vtkImageData.vtkImageData.swigGetCPtr(image));
  }

  public void SetLatitudeRange(double _arg1, double _arg2) {
    vtkd_im.vtkGeoAlignedImageSource_SetLatitudeRange__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2);
  }

  public void SetLatitudeRange(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkGeoAlignedImageSource_SetLatitudeRange__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetLatitudeRange() {
    auto ret = cast(double*)vtkd_im.vtkGeoAlignedImageSource_GetLatitudeRange__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetLatitudeRange(double* _arg1, double* _arg2) {
    vtkd_im.vtkGeoAlignedImageSource_GetLatitudeRange__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetLatitudeRange(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkGeoAlignedImageSource_GetLatitudeRange__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public void SetLongitudeRange(double _arg1, double _arg2) {
    vtkd_im.vtkGeoAlignedImageSource_SetLongitudeRange__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2);
  }

  public void SetLongitudeRange(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkGeoAlignedImageSource_SetLongitudeRange__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetLongitudeRange() {
    auto ret = cast(double*)vtkd_im.vtkGeoAlignedImageSource_GetLongitudeRange__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetLongitudeRange(double* _arg1, double* _arg2) {
    vtkd_im.vtkGeoAlignedImageSource_GetLongitudeRange__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetLongitudeRange(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkGeoAlignedImageSource_GetLongitudeRange__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public void SetOverlap(double _arg) {
    vtkd_im.vtkGeoAlignedImageSource_SetOverlap(cast(void*)swigCPtr, _arg);
  }

  public double GetOverlapMinValue() {
    auto ret = vtkd_im.vtkGeoAlignedImageSource_GetOverlapMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetOverlapMaxValue() {
    auto ret = vtkd_im.vtkGeoAlignedImageSource_GetOverlapMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetOverlap() {
    auto ret = vtkd_im.vtkGeoAlignedImageSource_GetOverlap(cast(void*)swigCPtr);
    return ret;
  }

  public void SetPowerOfTwoSize(bool _arg) {
    vtkd_im.vtkGeoAlignedImageSource_SetPowerOfTwoSize(cast(void*)swigCPtr, _arg);
  }

  public bool GetPowerOfTwoSize() {
    bool ret = vtkd_im.vtkGeoAlignedImageSource_GetPowerOfTwoSize(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void PowerOfTwoSizeOn() {
    vtkd_im.vtkGeoAlignedImageSource_PowerOfTwoSizeOn(cast(void*)swigCPtr);
  }

  public void PowerOfTwoSizeOff() {
    vtkd_im.vtkGeoAlignedImageSource_PowerOfTwoSizeOff(cast(void*)swigCPtr);
  }
}
