/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkTemporalInterpolatedVelocityField;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkDataSet;
static import SWIGTYPE_p_long_long;
static import SWIGTYPE_p_int;
static import SWIGTYPE_p_double;
static import vtkPointData;
static import SWIGTYPE_p_p_vtkGenericCell;
static import vtkDoubleArray;
static import vtkFunctionSet;

class vtkTemporalInterpolatedVelocityField : vtkFunctionSet.vtkFunctionSet {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkTemporalInterpolatedVelocityField_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkTemporalInterpolatedVelocityField obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkTemporalInterpolatedVelocityField_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkTemporalInterpolatedVelocityField SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkTemporalInterpolatedVelocityField_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkTemporalInterpolatedVelocityField ret = (cPtr is null) ? null : new vtkTemporalInterpolatedVelocityField(cPtr, false);
    return ret;
  }

  public vtkTemporalInterpolatedVelocityField NewInstance() const {
    void* cPtr = vtkd_im.vtkTemporalInterpolatedVelocityField_NewInstance(cast(void*)swigCPtr);
    vtkTemporalInterpolatedVelocityField ret = (cPtr is null) ? null : new vtkTemporalInterpolatedVelocityField(cPtr, false);
    return ret;
  }

  alias vtkFunctionSet.vtkFunctionSet.NewInstance NewInstance;

  public static vtkTemporalInterpolatedVelocityField New() {
    void* cPtr = vtkd_im.vtkTemporalInterpolatedVelocityField_New();
    vtkTemporalInterpolatedVelocityField ret = (cPtr is null) ? null : new vtkTemporalInterpolatedVelocityField(cPtr, false);
    return ret;
  }

  public int FunctionValuesAtT(int T, double* x, double* u) {
    auto ret = vtkd_im.vtkTemporalInterpolatedVelocityField_FunctionValuesAtT(cast(void*)swigCPtr, T, cast(void*)x, cast(void*)u);
    return ret;
  }

  public void SelectVectors(string fieldName) {
    vtkd_im.vtkTemporalInterpolatedVelocityField_SelectVectors(cast(void*)swigCPtr, (fieldName ? std.string.toStringz(fieldName) : null));
  }

  public void SetDataSetAtTime(int I, int N, double T, vtkDataSet.vtkDataSet dataset, bool staticdataset) {
    vtkd_im.vtkTemporalInterpolatedVelocityField_SetDataSetAtTime(cast(void*)swigCPtr, I, N, T, vtkDataSet.vtkDataSet.swigGetCPtr(dataset), staticdataset);
  }

  public bool GetCachedCellIds(SWIGTYPE_p_long_long.SWIGTYPE_p_long_long id, SWIGTYPE_p_int.SWIGTYPE_p_int ds) {
    bool ret = vtkd_im.vtkTemporalInterpolatedVelocityField_GetCachedCellIds(cast(void*)swigCPtr, SWIGTYPE_p_long_long.SWIGTYPE_p_long_long.swigGetCPtr(id), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(ds)) ? true : false;
    return ret;
  }

  public void SetCachedCellIds(SWIGTYPE_p_long_long.SWIGTYPE_p_long_long id, SWIGTYPE_p_int.SWIGTYPE_p_int ds) {
    vtkd_im.vtkTemporalInterpolatedVelocityField_SetCachedCellIds(cast(void*)swigCPtr, SWIGTYPE_p_long_long.SWIGTYPE_p_long_long.swigGetCPtr(id), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(ds));
  }

  public void ClearCache() {
    vtkd_im.vtkTemporalInterpolatedVelocityField_ClearCache(cast(void*)swigCPtr);
  }

  public int TestPoint(double* x) {
    auto ret = vtkd_im.vtkTemporalInterpolatedVelocityField_TestPoint(cast(void*)swigCPtr, cast(void*)x);
    return ret;
  }

  public int QuickTestPoint(double* x) {
    auto ret = vtkd_im.vtkTemporalInterpolatedVelocityField_QuickTestPoint(cast(void*)swigCPtr, cast(void*)x);
    return ret;
  }

  public double* GetLastGoodVelocity() {
    auto ret = cast(double*)vtkd_im.vtkTemporalInterpolatedVelocityField_GetLastGoodVelocity__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetLastGoodVelocity(double* _arg1, double* _arg2, double* _arg3) {
    vtkd_im.vtkTemporalInterpolatedVelocityField_GetLastGoodVelocity__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetLastGoodVelocity(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkTemporalInterpolatedVelocityField_GetLastGoodVelocity__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double GetCurrentWeight() {
    auto ret = vtkd_im.vtkTemporalInterpolatedVelocityField_GetCurrentWeight(cast(void*)swigCPtr);
    return ret;
  }

  public bool InterpolatePoint(vtkPointData.vtkPointData outPD1, vtkPointData.vtkPointData outPD2, long outIndex) {
    bool ret = vtkd_im.vtkTemporalInterpolatedVelocityField_InterpolatePoint__SWIG_0(cast(void*)swigCPtr, vtkPointData.vtkPointData.swigGetCPtr(outPD1), vtkPointData.vtkPointData.swigGetCPtr(outPD2), outIndex) ? true : false;
    return ret;
  }

  public bool InterpolatePoint(int T, vtkPointData.vtkPointData outPD1, long outIndex) {
    bool ret = vtkd_im.vtkTemporalInterpolatedVelocityField_InterpolatePoint__SWIG_1(cast(void*)swigCPtr, T, vtkPointData.vtkPointData.swigGetCPtr(outPD1), outIndex) ? true : false;
    return ret;
  }

  public bool GetVorticityData(int T, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, double* weights, SWIGTYPE_p_p_vtkGenericCell.SWIGTYPE_p_p_vtkGenericCell cell, vtkDoubleArray.vtkDoubleArray cellVectors) {
    bool ret = vtkd_im.vtkTemporalInterpolatedVelocityField_GetVorticityData(cast(void*)swigCPtr, T, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), cast(void*)weights, SWIGTYPE_p_p_vtkGenericCell.SWIGTYPE_p_p_vtkGenericCell.swigGetCPtr(cell), vtkDoubleArray.vtkDoubleArray.swigGetCPtr(cellVectors)) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ShowCacheResults() {
    vtkd_im.vtkTemporalInterpolatedVelocityField_ShowCacheResults(cast(void*)swigCPtr);
  }

  public bool IsStatic(int datasetIndex) {
    bool ret = vtkd_im.vtkTemporalInterpolatedVelocityField_IsStatic(cast(void*)swigCPtr, datasetIndex) ? true : false;
    return ret;
  }

  public void AdvanceOneTimeStep() {
    vtkd_im.vtkTemporalInterpolatedVelocityField_AdvanceOneTimeStep(cast(void*)swigCPtr);
  }
}
