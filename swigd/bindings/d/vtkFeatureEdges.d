/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkFeatureEdges;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkIncrementalPointLocator;
static import vtkPolyDataAlgorithm;

class vtkFeatureEdges : vtkPolyDataAlgorithm.vtkPolyDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkFeatureEdges_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkFeatureEdges obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkFeatureEdges_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkFeatureEdges SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkFeatureEdges_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkFeatureEdges ret = (cPtr is null) ? null : new vtkFeatureEdges(cPtr, false);
    return ret;
  }

  public vtkFeatureEdges NewInstance() const {
    void* cPtr = vtkd_im.vtkFeatureEdges_NewInstance(cast(void*)swigCPtr);
    vtkFeatureEdges ret = (cPtr is null) ? null : new vtkFeatureEdges(cPtr, false);
    return ret;
  }

  alias vtkPolyDataAlgorithm.vtkPolyDataAlgorithm.NewInstance NewInstance;

  public static vtkFeatureEdges New() {
    void* cPtr = vtkd_im.vtkFeatureEdges_New();
    vtkFeatureEdges ret = (cPtr is null) ? null : new vtkFeatureEdges(cPtr, false);
    return ret;
  }

  public void SetBoundaryEdges(int _arg) {
    vtkd_im.vtkFeatureEdges_SetBoundaryEdges(cast(void*)swigCPtr, _arg);
  }

  public int GetBoundaryEdges() {
    auto ret = vtkd_im.vtkFeatureEdges_GetBoundaryEdges(cast(void*)swigCPtr);
    return ret;
  }

  public void BoundaryEdgesOn() {
    vtkd_im.vtkFeatureEdges_BoundaryEdgesOn(cast(void*)swigCPtr);
  }

  public void BoundaryEdgesOff() {
    vtkd_im.vtkFeatureEdges_BoundaryEdgesOff(cast(void*)swigCPtr);
  }

  public void SetFeatureEdges(int _arg) {
    vtkd_im.vtkFeatureEdges_SetFeatureEdges(cast(void*)swigCPtr, _arg);
  }

  public int GetFeatureEdges() {
    auto ret = vtkd_im.vtkFeatureEdges_GetFeatureEdges(cast(void*)swigCPtr);
    return ret;
  }

  public void FeatureEdgesOn() {
    vtkd_im.vtkFeatureEdges_FeatureEdgesOn(cast(void*)swigCPtr);
  }

  public void FeatureEdgesOff() {
    vtkd_im.vtkFeatureEdges_FeatureEdgesOff(cast(void*)swigCPtr);
  }

  public void SetFeatureAngle(double _arg) {
    vtkd_im.vtkFeatureEdges_SetFeatureAngle(cast(void*)swigCPtr, _arg);
  }

  public double GetFeatureAngleMinValue() {
    auto ret = vtkd_im.vtkFeatureEdges_GetFeatureAngleMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetFeatureAngleMaxValue() {
    auto ret = vtkd_im.vtkFeatureEdges_GetFeatureAngleMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetFeatureAngle() {
    auto ret = vtkd_im.vtkFeatureEdges_GetFeatureAngle(cast(void*)swigCPtr);
    return ret;
  }

  public void SetNonManifoldEdges(int _arg) {
    vtkd_im.vtkFeatureEdges_SetNonManifoldEdges(cast(void*)swigCPtr, _arg);
  }

  public int GetNonManifoldEdges() {
    auto ret = vtkd_im.vtkFeatureEdges_GetNonManifoldEdges(cast(void*)swigCPtr);
    return ret;
  }

  public void NonManifoldEdgesOn() {
    vtkd_im.vtkFeatureEdges_NonManifoldEdgesOn(cast(void*)swigCPtr);
  }

  public void NonManifoldEdgesOff() {
    vtkd_im.vtkFeatureEdges_NonManifoldEdgesOff(cast(void*)swigCPtr);
  }

  public void SetManifoldEdges(int _arg) {
    vtkd_im.vtkFeatureEdges_SetManifoldEdges(cast(void*)swigCPtr, _arg);
  }

  public int GetManifoldEdges() {
    auto ret = vtkd_im.vtkFeatureEdges_GetManifoldEdges(cast(void*)swigCPtr);
    return ret;
  }

  public void ManifoldEdgesOn() {
    vtkd_im.vtkFeatureEdges_ManifoldEdgesOn(cast(void*)swigCPtr);
  }

  public void ManifoldEdgesOff() {
    vtkd_im.vtkFeatureEdges_ManifoldEdgesOff(cast(void*)swigCPtr);
  }

  public void SetColoring(int _arg) {
    vtkd_im.vtkFeatureEdges_SetColoring(cast(void*)swigCPtr, _arg);
  }

  public int GetColoring() {
    auto ret = vtkd_im.vtkFeatureEdges_GetColoring(cast(void*)swigCPtr);
    return ret;
  }

  public void ColoringOn() {
    vtkd_im.vtkFeatureEdges_ColoringOn(cast(void*)swigCPtr);
  }

  public void ColoringOff() {
    vtkd_im.vtkFeatureEdges_ColoringOff(cast(void*)swigCPtr);
  }

  public void SetLocator(vtkIncrementalPointLocator.vtkIncrementalPointLocator locator) {
    vtkd_im.vtkFeatureEdges_SetLocator(cast(void*)swigCPtr, vtkIncrementalPointLocator.vtkIncrementalPointLocator.swigGetCPtr(locator));
  }

  public vtkIncrementalPointLocator.vtkIncrementalPointLocator GetLocator() {
    void* cPtr = vtkd_im.vtkFeatureEdges_GetLocator(cast(void*)swigCPtr);
    vtkIncrementalPointLocator.vtkIncrementalPointLocator ret = (cPtr is null) ? null : new vtkIncrementalPointLocator.vtkIncrementalPointLocator(cPtr, false);
    return ret;
  }

  public void CreateDefaultLocator() {
    vtkd_im.vtkFeatureEdges_CreateDefaultLocator(cast(void*)swigCPtr);
  }
}
