/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkGenericSubdivisionErrorMetric;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkGenericAdaptorCell;
static import vtkGenericDataSet;
static import vtkObject;

class vtkGenericSubdivisionErrorMetric : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkGenericSubdivisionErrorMetric_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkGenericSubdivisionErrorMetric obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkGenericSubdivisionErrorMetric_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkGenericSubdivisionErrorMetric SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkGenericSubdivisionErrorMetric_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkGenericSubdivisionErrorMetric ret = (cPtr is null) ? null : new vtkGenericSubdivisionErrorMetric(cPtr, false);
    return ret;
  }

  public vtkGenericSubdivisionErrorMetric NewInstance() const {
    void* cPtr = vtkd_im.vtkGenericSubdivisionErrorMetric_NewInstance(cast(void*)swigCPtr);
    vtkGenericSubdivisionErrorMetric ret = (cPtr is null) ? null : new vtkGenericSubdivisionErrorMetric(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public int RequiresEdgeSubdivision(double* leftPoint, double* midPoint, double* rightPoint, double alpha) {
    auto ret = vtkd_im.vtkGenericSubdivisionErrorMetric_RequiresEdgeSubdivision(cast(void*)swigCPtr, cast(void*)leftPoint, cast(void*)midPoint, cast(void*)rightPoint, alpha);
    return ret;
  }

  public double GetError(double* leftPoint, double* midPoint, double* rightPoint, double alpha) {
    auto ret = vtkd_im.vtkGenericSubdivisionErrorMetric_GetError(cast(void*)swigCPtr, cast(void*)leftPoint, cast(void*)midPoint, cast(void*)rightPoint, alpha);
    return ret;
  }

  public void SetGenericCell(vtkGenericAdaptorCell.vtkGenericAdaptorCell cell) {
    vtkd_im.vtkGenericSubdivisionErrorMetric_SetGenericCell(cast(void*)swigCPtr, vtkGenericAdaptorCell.vtkGenericAdaptorCell.swigGetCPtr(cell));
  }

  public vtkGenericAdaptorCell.vtkGenericAdaptorCell GetGenericCell() {
    void* cPtr = vtkd_im.vtkGenericSubdivisionErrorMetric_GetGenericCell(cast(void*)swigCPtr);
    vtkGenericAdaptorCell.vtkGenericAdaptorCell ret = (cPtr is null) ? null : new vtkGenericAdaptorCell.vtkGenericAdaptorCell(cPtr, false);
    return ret;
  }

  public void SetDataSet(vtkGenericDataSet.vtkGenericDataSet ds) {
    vtkd_im.vtkGenericSubdivisionErrorMetric_SetDataSet(cast(void*)swigCPtr, vtkGenericDataSet.vtkGenericDataSet.swigGetCPtr(ds));
  }

  public vtkGenericDataSet.vtkGenericDataSet GetDataSet() {
    void* cPtr = vtkd_im.vtkGenericSubdivisionErrorMetric_GetDataSet(cast(void*)swigCPtr);
    vtkGenericDataSet.vtkGenericDataSet ret = (cPtr is null) ? null : new vtkGenericDataSet.vtkGenericDataSet(cPtr, false);
    return ret;
  }
}
