/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkTableExtentTranslator;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkExtentTranslator;

class vtkTableExtentTranslator : vtkExtentTranslator.vtkExtentTranslator {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkTableExtentTranslator_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkTableExtentTranslator obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkTableExtentTranslator_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkTableExtentTranslator SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkTableExtentTranslator_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkTableExtentTranslator ret = (cPtr is null) ? null : new vtkTableExtentTranslator(cPtr, false);
    return ret;
  }

  public vtkTableExtentTranslator NewInstance() const {
    void* cPtr = vtkd_im.vtkTableExtentTranslator_NewInstance(cast(void*)swigCPtr);
    vtkTableExtentTranslator ret = (cPtr is null) ? null : new vtkTableExtentTranslator(cPtr, false);
    return ret;
  }

  alias vtkExtentTranslator.vtkExtentTranslator.NewInstance NewInstance;

  public static vtkTableExtentTranslator New() {
    void* cPtr = vtkd_im.vtkTableExtentTranslator_New();
    vtkTableExtentTranslator ret = (cPtr is null) ? null : new vtkTableExtentTranslator(cPtr, false);
    return ret;
  }

  public void SetNumberOfPiecesInTable(int pieces) {
    vtkd_im.vtkTableExtentTranslator_SetNumberOfPiecesInTable(cast(void*)swigCPtr, pieces);
  }

  public int GetNumberOfPiecesInTable() {
    auto ret = vtkd_im.vtkTableExtentTranslator_GetNumberOfPiecesInTable(cast(void*)swigCPtr);
    return ret;
  }

  public void SetExtentForPiece(int piece, int* extent) {
    vtkd_im.vtkTableExtentTranslator_SetExtentForPiece(cast(void*)swigCPtr, piece, cast(void*)extent);
  }

  public void GetExtentForPiece(int piece, int* extent) {
    vtkd_im.vtkTableExtentTranslator_GetExtentForPiece__SWIG_0(cast(void*)swigCPtr, piece, cast(void*)extent);
  }

  public int* GetExtentForPiece(int piece) {
    auto ret = cast(int*)vtkd_im.vtkTableExtentTranslator_GetExtentForPiece__SWIG_1(cast(void*)swigCPtr, piece);
    return ret;
  }

  public void SetMaximumGhostLevel(int _arg) {
    vtkd_im.vtkTableExtentTranslator_SetMaximumGhostLevel(cast(void*)swigCPtr, _arg);
  }

  public int GetMaximumGhostLevel() {
    auto ret = vtkd_im.vtkTableExtentTranslator_GetMaximumGhostLevel(cast(void*)swigCPtr);
    return ret;
  }

  public void SetPieceAvailable(int piece, int available) {
    vtkd_im.vtkTableExtentTranslator_SetPieceAvailable(cast(void*)swigCPtr, piece, available);
  }

  public int GetPieceAvailable(int piece) {
    auto ret = vtkd_im.vtkTableExtentTranslator_GetPieceAvailable(cast(void*)swigCPtr, piece);
    return ret;
  }
}
