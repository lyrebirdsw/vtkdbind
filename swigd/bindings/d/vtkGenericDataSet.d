/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkGenericDataSet;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkCellTypes;
static import vtkGenericCellIterator;
static import vtkGenericPointIterator;
static import SWIGTYPE_p_double;
static import SWIGTYPE_p_p_vtkGenericCellIterator;
static import vtkGenericAttributeCollection;
static import vtkDataSetAttributes;
static import vtkGenericCellTessellator;
static import vtkDataObject;

class vtkGenericDataSet : vtkDataObject.vtkDataObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkGenericDataSet_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkGenericDataSet obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkGenericDataSet_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkGenericDataSet SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkGenericDataSet_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkGenericDataSet ret = (cPtr is null) ? null : new vtkGenericDataSet(cPtr, false);
    return ret;
  }

  public vtkGenericDataSet NewInstance() const {
    void* cPtr = vtkd_im.vtkGenericDataSet_NewInstance(cast(void*)swigCPtr);
    vtkGenericDataSet ret = (cPtr is null) ? null : new vtkGenericDataSet(cPtr, false);
    return ret;
  }

  alias vtkDataObject.vtkDataObject.NewInstance NewInstance;

  public long GetNumberOfPoints() {
    auto ret = vtkd_im.vtkGenericDataSet_GetNumberOfPoints(cast(void*)swigCPtr);
    return ret;
  }

  public long GetNumberOfCells(int dim) {
    auto ret = vtkd_im.vtkGenericDataSet_GetNumberOfCells__SWIG_0(cast(void*)swigCPtr, dim);
    return ret;
  }

  public long GetNumberOfCells() {
    auto ret = vtkd_im.vtkGenericDataSet_GetNumberOfCells__SWIG_1(cast(void*)swigCPtr);
    return ret;
  }

  public int GetCellDimension() {
    auto ret = vtkd_im.vtkGenericDataSet_GetCellDimension(cast(void*)swigCPtr);
    return ret;
  }

  public void GetCellTypes(vtkCellTypes.vtkCellTypes types) {
    vtkd_im.vtkGenericDataSet_GetCellTypes(cast(void*)swigCPtr, vtkCellTypes.vtkCellTypes.swigGetCPtr(types));
  }

  public vtkGenericCellIterator.vtkGenericCellIterator NewCellIterator(int dim) {
    void* cPtr = vtkd_im.vtkGenericDataSet_NewCellIterator__SWIG_0(cast(void*)swigCPtr, dim);
    vtkGenericCellIterator.vtkGenericCellIterator ret = (cPtr is null) ? null : new vtkGenericCellIterator.vtkGenericCellIterator(cPtr, false);
    return ret;
  }

  public vtkGenericCellIterator.vtkGenericCellIterator NewCellIterator() {
    void* cPtr = vtkd_im.vtkGenericDataSet_NewCellIterator__SWIG_1(cast(void*)swigCPtr);
    vtkGenericCellIterator.vtkGenericCellIterator ret = (cPtr is null) ? null : new vtkGenericCellIterator.vtkGenericCellIterator(cPtr, false);
    return ret;
  }

  public vtkGenericCellIterator.vtkGenericCellIterator NewBoundaryIterator(int dim, int exteriorOnly) {
    void* cPtr = vtkd_im.vtkGenericDataSet_NewBoundaryIterator__SWIG_0(cast(void*)swigCPtr, dim, exteriorOnly);
    vtkGenericCellIterator.vtkGenericCellIterator ret = (cPtr is null) ? null : new vtkGenericCellIterator.vtkGenericCellIterator(cPtr, false);
    return ret;
  }

  public vtkGenericCellIterator.vtkGenericCellIterator NewBoundaryIterator(int dim) {
    void* cPtr = vtkd_im.vtkGenericDataSet_NewBoundaryIterator__SWIG_1(cast(void*)swigCPtr, dim);
    vtkGenericCellIterator.vtkGenericCellIterator ret = (cPtr is null) ? null : new vtkGenericCellIterator.vtkGenericCellIterator(cPtr, false);
    return ret;
  }

  public vtkGenericCellIterator.vtkGenericCellIterator NewBoundaryIterator() {
    void* cPtr = vtkd_im.vtkGenericDataSet_NewBoundaryIterator__SWIG_2(cast(void*)swigCPtr);
    vtkGenericCellIterator.vtkGenericCellIterator ret = (cPtr is null) ? null : new vtkGenericCellIterator.vtkGenericCellIterator(cPtr, false);
    return ret;
  }

  public vtkGenericPointIterator.vtkGenericPointIterator NewPointIterator() {
    void* cPtr = vtkd_im.vtkGenericDataSet_NewPointIterator(cast(void*)swigCPtr);
    vtkGenericPointIterator.vtkGenericPointIterator ret = (cPtr is null) ? null : new vtkGenericPointIterator.vtkGenericPointIterator(cPtr, false);
    return ret;
  }

  public int FindCell(SWIGTYPE_p_double.SWIGTYPE_p_double x, SWIGTYPE_p_p_vtkGenericCellIterator.SWIGTYPE_p_p_vtkGenericCellIterator cell, double tol2, int* subId, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords) {
    auto ret = vtkd_im.vtkGenericDataSet_FindCell(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), SWIGTYPE_p_p_vtkGenericCellIterator.SWIGTYPE_p_p_vtkGenericCellIterator.swigGetCPtr(cell), tol2, cast(void*)subId, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void FindPoint(SWIGTYPE_p_double.SWIGTYPE_p_double x, vtkGenericPointIterator.vtkGenericPointIterator p) {
    vtkd_im.vtkGenericDataSet_FindPoint(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), vtkGenericPointIterator.vtkGenericPointIterator.swigGetCPtr(p));
  }

  public void ComputeBounds() {
    vtkd_im.vtkGenericDataSet_ComputeBounds(cast(void*)swigCPtr);
  }

  public double* GetBounds() {
    auto ret = cast(double*)vtkd_im.vtkGenericDataSet_GetBounds__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetBounds(SWIGTYPE_p_double.SWIGTYPE_p_double bounds) {
    vtkd_im.vtkGenericDataSet_GetBounds__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
  }

  public double* GetCenter() {
    auto ret = cast(double*)vtkd_im.vtkGenericDataSet_GetCenter__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetCenter(SWIGTYPE_p_double.SWIGTYPE_p_double center) {
    vtkd_im.vtkGenericDataSet_GetCenter__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(center));
  }

  public double GetLength() {
    auto ret = vtkd_im.vtkGenericDataSet_GetLength(cast(void*)swigCPtr);
    return ret;
  }

  public vtkGenericAttributeCollection.vtkGenericAttributeCollection GetAttributes() {
    void* cPtr = vtkd_im.vtkGenericDataSet_GetAttributes__SWIG_0(cast(void*)swigCPtr);
    vtkGenericAttributeCollection.vtkGenericAttributeCollection ret = (cPtr is null) ? null : new vtkGenericAttributeCollection.vtkGenericAttributeCollection(cPtr, false);
    return ret;
  }

  public override vtkDataSetAttributes.vtkDataSetAttributes GetAttributes(int type) {
    void* cPtr = vtkd_im.vtkGenericDataSet_GetAttributes__SWIG_1(cast(void*)swigCPtr, type);
    vtkDataSetAttributes.vtkDataSetAttributes ret = (cPtr is null) ? null : new vtkDataSetAttributes.vtkDataSetAttributes(cPtr, false);
    return ret;
  }

  public void SetTessellator(vtkGenericCellTessellator.vtkGenericCellTessellator tessellator) {
    vtkd_im.vtkGenericDataSet_SetTessellator(cast(void*)swigCPtr, vtkGenericCellTessellator.vtkGenericCellTessellator.swigGetCPtr(tessellator));
  }

  public vtkGenericCellTessellator.vtkGenericCellTessellator GetTessellator() {
    void* cPtr = vtkd_im.vtkGenericDataSet_GetTessellator(cast(void*)swigCPtr);
    vtkGenericCellTessellator.vtkGenericCellTessellator ret = (cPtr is null) ? null : new vtkGenericCellTessellator.vtkGenericCellTessellator(cPtr, false);
    return ret;
  }

  public long GetEstimatedSize() {
    auto ret = vtkd_im.vtkGenericDataSet_GetEstimatedSize(cast(void*)swigCPtr);
    return ret;
  }
}
