/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkRectilinearWipeRepresentation;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkImageRectilinearWipe;
static import vtkImageActor;
static import vtkProperty2D;
static import vtkWidgetRepresentation;

class vtkRectilinearWipeRepresentation : vtkWidgetRepresentation.vtkWidgetRepresentation {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkRectilinearWipeRepresentation_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkRectilinearWipeRepresentation obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkRectilinearWipeRepresentation New() {
    void* cPtr = vtkd_im.vtkRectilinearWipeRepresentation_New();
    vtkRectilinearWipeRepresentation ret = (cPtr is null) ? null : new vtkRectilinearWipeRepresentation(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkRectilinearWipeRepresentation_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkRectilinearWipeRepresentation SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkRectilinearWipeRepresentation_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkRectilinearWipeRepresentation ret = (cPtr is null) ? null : new vtkRectilinearWipeRepresentation(cPtr, false);
    return ret;
  }

  public vtkRectilinearWipeRepresentation NewInstance() const {
    void* cPtr = vtkd_im.vtkRectilinearWipeRepresentation_NewInstance(cast(void*)swigCPtr);
    vtkRectilinearWipeRepresentation ret = (cPtr is null) ? null : new vtkRectilinearWipeRepresentation(cPtr, false);
    return ret;
  }

  alias vtkWidgetRepresentation.vtkWidgetRepresentation.NewInstance NewInstance;

  public void SetRectilinearWipe(vtkImageRectilinearWipe.vtkImageRectilinearWipe wipe) {
    vtkd_im.vtkRectilinearWipeRepresentation_SetRectilinearWipe(cast(void*)swigCPtr, vtkImageRectilinearWipe.vtkImageRectilinearWipe.swigGetCPtr(wipe));
  }

  public vtkImageRectilinearWipe.vtkImageRectilinearWipe GetRectilinearWipe() {
    void* cPtr = vtkd_im.vtkRectilinearWipeRepresentation_GetRectilinearWipe(cast(void*)swigCPtr);
    vtkImageRectilinearWipe.vtkImageRectilinearWipe ret = (cPtr is null) ? null : new vtkImageRectilinearWipe.vtkImageRectilinearWipe(cPtr, false);
    return ret;
  }

  public void SetImageActor(vtkImageActor.vtkImageActor imageActor) {
    vtkd_im.vtkRectilinearWipeRepresentation_SetImageActor(cast(void*)swigCPtr, vtkImageActor.vtkImageActor.swigGetCPtr(imageActor));
  }

  public vtkImageActor.vtkImageActor GetImageActor() {
    void* cPtr = vtkd_im.vtkRectilinearWipeRepresentation_GetImageActor(cast(void*)swigCPtr);
    vtkImageActor.vtkImageActor ret = (cPtr is null) ? null : new vtkImageActor.vtkImageActor(cPtr, false);
    return ret;
  }

  public void SetTolerance(int _arg) {
    vtkd_im.vtkRectilinearWipeRepresentation_SetTolerance(cast(void*)swigCPtr, _arg);
  }

  public int GetToleranceMinValue() {
    auto ret = vtkd_im.vtkRectilinearWipeRepresentation_GetToleranceMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetToleranceMaxValue() {
    auto ret = vtkd_im.vtkRectilinearWipeRepresentation_GetToleranceMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetTolerance() {
    auto ret = vtkd_im.vtkRectilinearWipeRepresentation_GetTolerance(cast(void*)swigCPtr);
    return ret;
  }

  public vtkProperty2D.vtkProperty2D GetProperty() {
    void* cPtr = vtkd_im.vtkRectilinearWipeRepresentation_GetProperty(cast(void*)swigCPtr);
    vtkProperty2D.vtkProperty2D ret = (cPtr is null) ? null : new vtkProperty2D.vtkProperty2D(cPtr, false);
    return ret;
  }

  public override int ComputeInteractionState(int X, int Y, int modify) {
    auto ret = vtkd_im.vtkRectilinearWipeRepresentation_ComputeInteractionState__SWIG_0(cast(void*)swigCPtr, X, Y, modify);
    return ret;
  }

  public override int ComputeInteractionState(int X, int Y) {
    auto ret = vtkd_im.vtkRectilinearWipeRepresentation_ComputeInteractionState__SWIG_1(cast(void*)swigCPtr, X, Y);
    return ret;
  }
}
