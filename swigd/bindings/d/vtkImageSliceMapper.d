/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkImageSliceMapper;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_int;
static import SWIGTYPE_p_double;
static import vtkImageMapper3D;

class vtkImageSliceMapper : vtkImageMapper3D.vtkImageMapper3D {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkImageSliceMapper_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkImageSliceMapper obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkImageSliceMapper New() {
    void* cPtr = vtkd_im.vtkImageSliceMapper_New();
    vtkImageSliceMapper ret = (cPtr is null) ? null : new vtkImageSliceMapper(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkImageSliceMapper_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkImageSliceMapper SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkImageSliceMapper_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkImageSliceMapper ret = (cPtr is null) ? null : new vtkImageSliceMapper(cPtr, false);
    return ret;
  }

  public vtkImageSliceMapper NewInstance() const {
    void* cPtr = vtkd_im.vtkImageSliceMapper_NewInstance(cast(void*)swigCPtr);
    vtkImageSliceMapper ret = (cPtr is null) ? null : new vtkImageSliceMapper(cPtr, false);
    return ret;
  }

  alias vtkImageMapper3D.vtkImageMapper3D.NewInstance NewInstance;

  public void SetSliceNumber(int slice) {
    vtkd_im.vtkImageSliceMapper_SetSliceNumber(cast(void*)swigCPtr, slice);
  }

  public int GetSliceNumber() {
    auto ret = vtkd_im.vtkImageSliceMapper_GetSliceNumber(cast(void*)swigCPtr);
    return ret;
  }

  public int GetSliceNumberMinValue() {
    auto ret = vtkd_im.vtkImageSliceMapper_GetSliceNumberMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetSliceNumberMaxValue() {
    auto ret = vtkd_im.vtkImageSliceMapper_GetSliceNumberMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public void SetOrientation(int _arg) {
    vtkd_im.vtkImageSliceMapper_SetOrientation(cast(void*)swigCPtr, _arg);
  }

  public int GetOrientationMinValue() {
    auto ret = vtkd_im.vtkImageSliceMapper_GetOrientationMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetOrientationMaxValue() {
    auto ret = vtkd_im.vtkImageSliceMapper_GetOrientationMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetOrientation() {
    auto ret = vtkd_im.vtkImageSliceMapper_GetOrientation(cast(void*)swigCPtr);
    return ret;
  }

  public void SetOrientationToX() {
    vtkd_im.vtkImageSliceMapper_SetOrientationToX(cast(void*)swigCPtr);
  }

  public void SetOrientationToY() {
    vtkd_im.vtkImageSliceMapper_SetOrientationToY(cast(void*)swigCPtr);
  }

  public void SetOrientationToZ() {
    vtkd_im.vtkImageSliceMapper_SetOrientationToZ(cast(void*)swigCPtr);
  }

  public void SetCropping(int _arg) {
    vtkd_im.vtkImageSliceMapper_SetCropping(cast(void*)swigCPtr, _arg);
  }

  public void CroppingOn() {
    vtkd_im.vtkImageSliceMapper_CroppingOn(cast(void*)swigCPtr);
  }

  public void CroppingOff() {
    vtkd_im.vtkImageSliceMapper_CroppingOff(cast(void*)swigCPtr);
  }

  public int GetCropping() {
    auto ret = vtkd_im.vtkImageSliceMapper_GetCropping(cast(void*)swigCPtr);
    return ret;
  }

  public void SetCroppingRegion(int _arg1, int _arg2, int _arg3, int _arg4, int _arg5, int _arg6) {
    vtkd_im.vtkImageSliceMapper_SetCroppingRegion__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
  }

  public void SetCroppingRegion(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkImageSliceMapper_SetCroppingRegion__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public int* GetCroppingRegion() {
    auto ret = cast(int*)vtkd_im.vtkImageSliceMapper_GetCroppingRegion__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetCroppingRegion(int* _arg1, int* _arg2, int* _arg3, int* _arg4, int* _arg5, int* _arg6) {
    vtkd_im.vtkImageSliceMapper_GetCroppingRegion__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3, cast(void*)_arg4, cast(void*)_arg5, cast(void*)_arg6);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetCroppingRegion(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkImageSliceMapper_GetCroppingRegion__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public override void Update() {
    vtkd_im.vtkImageSliceMapper_Update__SWIG_0(cast(void*)swigCPtr);
  }

  public override void Update(int port) {
    vtkd_im.vtkImageSliceMapper_Update__SWIG_1(cast(void*)swigCPtr, port);
  }

  public override double* GetBounds() {
    auto ret = cast(double*)vtkd_im.vtkImageSliceMapper_GetBounds__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public override void GetBounds(SWIGTYPE_p_double.SWIGTYPE_p_double bounds) {
    vtkd_im.vtkImageSliceMapper_GetBounds__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
  }
}
