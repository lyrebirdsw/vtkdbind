/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkCellArray;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkIdList;
static import vtkCell;
static import vtkIdTypeArray;
static import vtkObject;

class vtkCellArray : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkCellArray_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkCellArray obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkCellArray_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkCellArray SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkCellArray_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkCellArray ret = (cPtr is null) ? null : new vtkCellArray(cPtr, false);
    return ret;
  }

  public vtkCellArray NewInstance() const {
    void* cPtr = vtkd_im.vtkCellArray_NewInstance(cast(void*)swigCPtr);
    vtkCellArray ret = (cPtr is null) ? null : new vtkCellArray(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public static vtkCellArray New() {
    void* cPtr = vtkd_im.vtkCellArray_New();
    vtkCellArray ret = (cPtr is null) ? null : new vtkCellArray(cPtr, false);
    return ret;
  }

  public int Allocate(long sz, int ext) {
    auto ret = vtkd_im.vtkCellArray_Allocate__SWIG_0(cast(void*)swigCPtr, sz, ext);
    return ret;
  }

  public int Allocate(long sz) {
    auto ret = vtkd_im.vtkCellArray_Allocate__SWIG_1(cast(void*)swigCPtr, sz);
    return ret;
  }

  public void Initialize() {
    vtkd_im.vtkCellArray_Initialize(cast(void*)swigCPtr);
  }

  public long GetNumberOfCells() {
    auto ret = vtkd_im.vtkCellArray_GetNumberOfCells(cast(void*)swigCPtr);
    return ret;
  }

  public void SetNumberOfCells(long _arg) {
    vtkd_im.vtkCellArray_SetNumberOfCells(cast(void*)swigCPtr, _arg);
  }

  public long EstimateSize(long numCells, int maxPtsPerCell) {
    auto ret = vtkd_im.vtkCellArray_EstimateSize(cast(void*)swigCPtr, numCells, maxPtsPerCell);
    return ret;
  }

  public void InitTraversal() {
    vtkd_im.vtkCellArray_InitTraversal(cast(void*)swigCPtr);
  }

  public int GetNextCell(long* npts, long** pts) {
    auto ret = vtkd_im.vtkCellArray_GetNextCell__SWIG_0(cast(void*)swigCPtr, cast(void*)npts, cast(void*)pts);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public int GetNextCell(vtkIdList.vtkIdList pts) {
    auto ret = vtkd_im.vtkCellArray_GetNextCell__SWIG_1(cast(void*)swigCPtr, vtkIdList.vtkIdList.swigGetCPtr(pts));
    return ret;
  }

  public long GetSize() {
    auto ret = vtkd_im.vtkCellArray_GetSize(cast(void*)swigCPtr);
    return ret;
  }

  public long GetNumberOfConnectivityEntries() {
    auto ret = vtkd_im.vtkCellArray_GetNumberOfConnectivityEntries(cast(void*)swigCPtr);
    return ret;
  }

  public void GetCell(long loc, long* npts, long** pts) {
    vtkd_im.vtkCellArray_GetCell__SWIG_0(cast(void*)swigCPtr, loc, cast(void*)npts, cast(void*)pts);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetCell(long loc, vtkIdList.vtkIdList pts) {
    vtkd_im.vtkCellArray_GetCell__SWIG_1(cast(void*)swigCPtr, loc, vtkIdList.vtkIdList.swigGetCPtr(pts));
  }

  public long InsertNextCell(vtkCell.vtkCell cell) {
    auto ret = vtkd_im.vtkCellArray_InsertNextCell__SWIG_0(cast(void*)swigCPtr, vtkCell.vtkCell.swigGetCPtr(cell));
    return ret;
  }

  public long InsertNextCell(long npts, long* pts) {
    auto ret = vtkd_im.vtkCellArray_InsertNextCell__SWIG_1(cast(void*)swigCPtr, npts, cast(void*)pts);
    return ret;
  }

  public long InsertNextCell(vtkIdList.vtkIdList pts) {
    auto ret = vtkd_im.vtkCellArray_InsertNextCell__SWIG_2(cast(void*)swigCPtr, vtkIdList.vtkIdList.swigGetCPtr(pts));
    return ret;
  }

  public long InsertNextCell(int npts) {
    auto ret = vtkd_im.vtkCellArray_InsertNextCell__SWIG_3(cast(void*)swigCPtr, npts);
    return ret;
  }

  public void InsertCellPoint(long id) {
    vtkd_im.vtkCellArray_InsertCellPoint(cast(void*)swigCPtr, id);
  }

  public void UpdateCellCount(int npts) {
    vtkd_im.vtkCellArray_UpdateCellCount(cast(void*)swigCPtr, npts);
  }

  public long GetInsertLocation(int npts) {
    auto ret = vtkd_im.vtkCellArray_GetInsertLocation(cast(void*)swigCPtr, npts);
    return ret;
  }

  public long GetTraversalLocation() {
    auto ret = vtkd_im.vtkCellArray_GetTraversalLocation__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void SetTraversalLocation(long loc) {
    vtkd_im.vtkCellArray_SetTraversalLocation(cast(void*)swigCPtr, loc);
  }

  public long GetTraversalLocation(long npts) {
    auto ret = vtkd_im.vtkCellArray_GetTraversalLocation__SWIG_1(cast(void*)swigCPtr, npts);
    return ret;
  }

  public void ReverseCell(long loc) {
    vtkd_im.vtkCellArray_ReverseCell(cast(void*)swigCPtr, loc);
  }

  public void ReplaceCell(long loc, int npts, long* pts) {
    vtkd_im.vtkCellArray_ReplaceCell(cast(void*)swigCPtr, loc, npts, cast(void*)pts);
  }

  public int GetMaxCellSize() {
    auto ret = vtkd_im.vtkCellArray_GetMaxCellSize(cast(void*)swigCPtr);
    return ret;
  }

  public long* GetPointer() {
    auto ret = cast(long*)vtkd_im.vtkCellArray_GetPointer(cast(void*)swigCPtr);
    return ret;
  }

  public long* WritePointer(long ncells, long size) {
    auto ret = cast(long*)vtkd_im.vtkCellArray_WritePointer(cast(void*)swigCPtr, ncells, size);
    return ret;
  }

  public void SetCells(long ncells, vtkIdTypeArray.vtkIdTypeArray cells) {
    vtkd_im.vtkCellArray_SetCells(cast(void*)swigCPtr, ncells, vtkIdTypeArray.vtkIdTypeArray.swigGetCPtr(cells));
  }

  public void DeepCopy(vtkCellArray ca) {
    vtkd_im.vtkCellArray_DeepCopy(cast(void*)swigCPtr, vtkCellArray.swigGetCPtr(ca));
  }

  public vtkIdTypeArray.vtkIdTypeArray GetData() {
    void* cPtr = vtkd_im.vtkCellArray_GetData(cast(void*)swigCPtr);
    vtkIdTypeArray.vtkIdTypeArray ret = (cPtr is null) ? null : new vtkIdTypeArray.vtkIdTypeArray(cPtr, false);
    return ret;
  }

  public void Reset() {
    vtkd_im.vtkCellArray_Reset(cast(void*)swigCPtr);
  }

  public void Squeeze() {
    vtkd_im.vtkCellArray_Squeeze(cast(void*)swigCPtr);
  }

  public core.stdc.config.c_ulong GetActualMemorySize() {
    auto ret = vtkd_im.vtkCellArray_GetActualMemorySize(cast(void*)swigCPtr);
    return ret;
  }
}
