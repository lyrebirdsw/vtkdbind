/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkVolumeMapper;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkImageData;
static import vtkDataSet;
static import SWIGTYPE_p_double;
static import vtkAbstractVolumeMapper;

class vtkVolumeMapper : vtkAbstractVolumeMapper.vtkAbstractVolumeMapper {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkVolumeMapper_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkVolumeMapper obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkVolumeMapper_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkVolumeMapper SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkVolumeMapper_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkVolumeMapper ret = (cPtr is null) ? null : new vtkVolumeMapper(cPtr, false);
    return ret;
  }

  public vtkVolumeMapper NewInstance() const {
    void* cPtr = vtkd_im.vtkVolumeMapper_NewInstance(cast(void*)swigCPtr);
    vtkVolumeMapper ret = (cPtr is null) ? null : new vtkVolumeMapper(cPtr, false);
    return ret;
  }

  alias vtkAbstractVolumeMapper.vtkAbstractVolumeMapper.NewInstance NewInstance;

  public void SetInputData(vtkImageData.vtkImageData arg0) {
    vtkd_im.vtkVolumeMapper_SetInputData__SWIG_0(cast(void*)swigCPtr, vtkImageData.vtkImageData.swigGetCPtr(arg0));
  }

  public void SetInputData(vtkDataSet.vtkDataSet arg0) {
    vtkd_im.vtkVolumeMapper_SetInputData__SWIG_1(cast(void*)swigCPtr, vtkDataSet.vtkDataSet.swigGetCPtr(arg0));
  }

  public vtkImageData.vtkImageData GetInput() {
    void* cPtr = vtkd_im.vtkVolumeMapper_GetInput(cast(void*)swigCPtr);
    vtkImageData.vtkImageData ret = (cPtr is null) ? null : new vtkImageData.vtkImageData(cPtr, false);
    return ret;
  }

  public void SetBlendMode(int _arg) {
    vtkd_im.vtkVolumeMapper_SetBlendMode(cast(void*)swigCPtr, _arg);
  }

  public void SetBlendModeToComposite() {
    vtkd_im.vtkVolumeMapper_SetBlendModeToComposite(cast(void*)swigCPtr);
  }

  public void SetBlendModeToMaximumIntensity() {
    vtkd_im.vtkVolumeMapper_SetBlendModeToMaximumIntensity(cast(void*)swigCPtr);
  }

  public void SetBlendModeToMinimumIntensity() {
    vtkd_im.vtkVolumeMapper_SetBlendModeToMinimumIntensity(cast(void*)swigCPtr);
  }

  public void SetBlendModeToAdditive() {
    vtkd_im.vtkVolumeMapper_SetBlendModeToAdditive(cast(void*)swigCPtr);
  }

  public int GetBlendMode() {
    auto ret = vtkd_im.vtkVolumeMapper_GetBlendMode(cast(void*)swigCPtr);
    return ret;
  }

  public void SetCropping(int _arg) {
    vtkd_im.vtkVolumeMapper_SetCropping(cast(void*)swigCPtr, _arg);
  }

  public int GetCroppingMinValue() {
    auto ret = vtkd_im.vtkVolumeMapper_GetCroppingMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetCroppingMaxValue() {
    auto ret = vtkd_im.vtkVolumeMapper_GetCroppingMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetCropping() {
    auto ret = vtkd_im.vtkVolumeMapper_GetCropping(cast(void*)swigCPtr);
    return ret;
  }

  public void CroppingOn() {
    vtkd_im.vtkVolumeMapper_CroppingOn(cast(void*)swigCPtr);
  }

  public void CroppingOff() {
    vtkd_im.vtkVolumeMapper_CroppingOff(cast(void*)swigCPtr);
  }

  public void SetCroppingRegionPlanes(double _arg1, double _arg2, double _arg3, double _arg4, double _arg5, double _arg6) {
    vtkd_im.vtkVolumeMapper_SetCroppingRegionPlanes__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
  }

  public void SetCroppingRegionPlanes(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkVolumeMapper_SetCroppingRegionPlanes__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetCroppingRegionPlanes() {
    auto ret = cast(double*)vtkd_im.vtkVolumeMapper_GetCroppingRegionPlanes__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetCroppingRegionPlanes(SWIGTYPE_p_double.SWIGTYPE_p_double data) {
    vtkd_im.vtkVolumeMapper_GetCroppingRegionPlanes__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(data));
  }

  public double* GetVoxelCroppingRegionPlanes() {
    auto ret = cast(double*)vtkd_im.vtkVolumeMapper_GetVoxelCroppingRegionPlanes__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetVoxelCroppingRegionPlanes(SWIGTYPE_p_double.SWIGTYPE_p_double data) {
    vtkd_im.vtkVolumeMapper_GetVoxelCroppingRegionPlanes__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(data));
  }

  public void SetCroppingRegionFlags(int _arg) {
    vtkd_im.vtkVolumeMapper_SetCroppingRegionFlags(cast(void*)swigCPtr, _arg);
  }

  public int GetCroppingRegionFlagsMinValue() {
    auto ret = vtkd_im.vtkVolumeMapper_GetCroppingRegionFlagsMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetCroppingRegionFlagsMaxValue() {
    auto ret = vtkd_im.vtkVolumeMapper_GetCroppingRegionFlagsMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetCroppingRegionFlags() {
    auto ret = vtkd_im.vtkVolumeMapper_GetCroppingRegionFlags(cast(void*)swigCPtr);
    return ret;
  }

  public void SetCroppingRegionFlagsToSubVolume() {
    vtkd_im.vtkVolumeMapper_SetCroppingRegionFlagsToSubVolume(cast(void*)swigCPtr);
  }

  public void SetCroppingRegionFlagsToFence() {
    vtkd_im.vtkVolumeMapper_SetCroppingRegionFlagsToFence(cast(void*)swigCPtr);
  }

  public void SetCroppingRegionFlagsToInvertedFence() {
    vtkd_im.vtkVolumeMapper_SetCroppingRegionFlagsToInvertedFence(cast(void*)swigCPtr);
  }

  public void SetCroppingRegionFlagsToCross() {
    vtkd_im.vtkVolumeMapper_SetCroppingRegionFlagsToCross(cast(void*)swigCPtr);
  }

  public void SetCroppingRegionFlagsToInvertedCross() {
    vtkd_im.vtkVolumeMapper_SetCroppingRegionFlagsToInvertedCross(cast(void*)swigCPtr);
  }
}
