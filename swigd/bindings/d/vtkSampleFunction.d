/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkSampleFunction;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkImplicitFunction;
static import vtkDataArray;
static import SWIGTYPE_p_int;
static import SWIGTYPE_p_double;
static import vtkImageAlgorithm;

class vtkSampleFunction : vtkImageAlgorithm.vtkImageAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkSampleFunction_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkSampleFunction obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkSampleFunction_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkSampleFunction SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkSampleFunction_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkSampleFunction ret = (cPtr is null) ? null : new vtkSampleFunction(cPtr, false);
    return ret;
  }

  public vtkSampleFunction NewInstance() const {
    void* cPtr = vtkd_im.vtkSampleFunction_NewInstance(cast(void*)swigCPtr);
    vtkSampleFunction ret = (cPtr is null) ? null : new vtkSampleFunction(cPtr, false);
    return ret;
  }

  alias vtkImageAlgorithm.vtkImageAlgorithm.NewInstance NewInstance;

  public static vtkSampleFunction New() {
    void* cPtr = vtkd_im.vtkSampleFunction_New();
    vtkSampleFunction ret = (cPtr is null) ? null : new vtkSampleFunction(cPtr, false);
    return ret;
  }

  public void SetImplicitFunction(vtkImplicitFunction.vtkImplicitFunction arg0) {
    vtkd_im.vtkSampleFunction_SetImplicitFunction(cast(void*)swigCPtr, vtkImplicitFunction.vtkImplicitFunction.swigGetCPtr(arg0));
  }

  public vtkImplicitFunction.vtkImplicitFunction GetImplicitFunction() {
    void* cPtr = vtkd_im.vtkSampleFunction_GetImplicitFunction(cast(void*)swigCPtr);
    vtkImplicitFunction.vtkImplicitFunction ret = (cPtr is null) ? null : new vtkImplicitFunction.vtkImplicitFunction(cPtr, false);
    return ret;
  }

  public void SetOutputScalarType(int _arg) {
    vtkd_im.vtkSampleFunction_SetOutputScalarType(cast(void*)swigCPtr, _arg);
  }

  public int GetOutputScalarType() {
    auto ret = vtkd_im.vtkSampleFunction_GetOutputScalarType(cast(void*)swigCPtr);
    return ret;
  }

  public void SetOutputScalarTypeToDouble() {
    vtkd_im.vtkSampleFunction_SetOutputScalarTypeToDouble(cast(void*)swigCPtr);
  }

  public void SetOutputScalarTypeToFloat() {
    vtkd_im.vtkSampleFunction_SetOutputScalarTypeToFloat(cast(void*)swigCPtr);
  }

  public void SetOutputScalarTypeToLong() {
    vtkd_im.vtkSampleFunction_SetOutputScalarTypeToLong(cast(void*)swigCPtr);
  }

  public void SetOutputScalarTypeToUnsignedLong() {
    vtkd_im.vtkSampleFunction_SetOutputScalarTypeToUnsignedLong(cast(void*)swigCPtr);
  }

  public void SetOutputScalarTypeToInt() {
    vtkd_im.vtkSampleFunction_SetOutputScalarTypeToInt(cast(void*)swigCPtr);
  }

  public void SetOutputScalarTypeToUnsignedInt() {
    vtkd_im.vtkSampleFunction_SetOutputScalarTypeToUnsignedInt(cast(void*)swigCPtr);
  }

  public void SetOutputScalarTypeToShort() {
    vtkd_im.vtkSampleFunction_SetOutputScalarTypeToShort(cast(void*)swigCPtr);
  }

  public void SetOutputScalarTypeToUnsignedShort() {
    vtkd_im.vtkSampleFunction_SetOutputScalarTypeToUnsignedShort(cast(void*)swigCPtr);
  }

  public void SetOutputScalarTypeToChar() {
    vtkd_im.vtkSampleFunction_SetOutputScalarTypeToChar(cast(void*)swigCPtr);
  }

  public void SetOutputScalarTypeToUnsignedChar() {
    vtkd_im.vtkSampleFunction_SetOutputScalarTypeToUnsignedChar(cast(void*)swigCPtr);
  }

  public void SetScalars(vtkDataArray.vtkDataArray da) {
    vtkd_im.vtkSampleFunction_SetScalars(cast(void*)swigCPtr, vtkDataArray.vtkDataArray.swigGetCPtr(da));
  }

  public void SetSampleDimensions(int i, int j, int k) {
    vtkd_im.vtkSampleFunction_SetSampleDimensions__SWIG_0(cast(void*)swigCPtr, i, j, k);
  }

  public void SetSampleDimensions(SWIGTYPE_p_int.SWIGTYPE_p_int dim) {
    vtkd_im.vtkSampleFunction_SetSampleDimensions__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(dim));
  }

  public int* GetSampleDimensions() {
    auto ret = cast(int*)vtkd_im.vtkSampleFunction_GetSampleDimensions__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetSampleDimensions(SWIGTYPE_p_int.SWIGTYPE_p_int data) {
    vtkd_im.vtkSampleFunction_GetSampleDimensions__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(data));
  }

  public void SetModelBounds(SWIGTYPE_p_double.SWIGTYPE_p_double bounds) {
    vtkd_im.vtkSampleFunction_SetModelBounds__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
  }

  public void SetModelBounds(double xMin, double xMax, double yMin, double yMax, double zMin, double zMax) {
    vtkd_im.vtkSampleFunction_SetModelBounds__SWIG_1(cast(void*)swigCPtr, xMin, xMax, yMin, yMax, zMin, zMax);
  }

  public double* GetModelBounds() {
    auto ret = cast(double*)vtkd_im.vtkSampleFunction_GetModelBounds__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetModelBounds(SWIGTYPE_p_double.SWIGTYPE_p_double data) {
    vtkd_im.vtkSampleFunction_GetModelBounds__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(data));
  }

  public void SetCapping(int _arg) {
    vtkd_im.vtkSampleFunction_SetCapping(cast(void*)swigCPtr, _arg);
  }

  public int GetCapping() {
    auto ret = vtkd_im.vtkSampleFunction_GetCapping(cast(void*)swigCPtr);
    return ret;
  }

  public void CappingOn() {
    vtkd_im.vtkSampleFunction_CappingOn(cast(void*)swigCPtr);
  }

  public void CappingOff() {
    vtkd_im.vtkSampleFunction_CappingOff(cast(void*)swigCPtr);
  }

  public void SetCapValue(double _arg) {
    vtkd_im.vtkSampleFunction_SetCapValue(cast(void*)swigCPtr, _arg);
  }

  public double GetCapValue() {
    auto ret = vtkd_im.vtkSampleFunction_GetCapValue(cast(void*)swigCPtr);
    return ret;
  }

  public void SetComputeNormals(int _arg) {
    vtkd_im.vtkSampleFunction_SetComputeNormals(cast(void*)swigCPtr, _arg);
  }

  public int GetComputeNormals() {
    auto ret = vtkd_im.vtkSampleFunction_GetComputeNormals(cast(void*)swigCPtr);
    return ret;
  }

  public void ComputeNormalsOn() {
    vtkd_im.vtkSampleFunction_ComputeNormalsOn(cast(void*)swigCPtr);
  }

  public void ComputeNormalsOff() {
    vtkd_im.vtkSampleFunction_ComputeNormalsOff(cast(void*)swigCPtr);
  }

  public void SetScalarArrayName(string _arg) {
    vtkd_im.vtkSampleFunction_SetScalarArrayName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetScalarArrayName() {
    string ret = std.conv.to!string(vtkd_im.vtkSampleFunction_GetScalarArrayName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetNormalArrayName(string _arg) {
    vtkd_im.vtkSampleFunction_SetNormalArrayName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetNormalArrayName() {
    string ret = std.conv.to!string(vtkd_im.vtkSampleFunction_GetNormalArrayName(cast(void*)swigCPtr));
    return ret;
  }
}
