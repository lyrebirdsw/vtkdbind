/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkConnectivityFilter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkUnstructuredGridAlgorithm;

class vtkConnectivityFilter : vtkUnstructuredGridAlgorithm.vtkUnstructuredGridAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkConnectivityFilter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkConnectivityFilter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkConnectivityFilter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkConnectivityFilter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkConnectivityFilter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkConnectivityFilter ret = (cPtr is null) ? null : new vtkConnectivityFilter(cPtr, false);
    return ret;
  }

  public vtkConnectivityFilter NewInstance() const {
    void* cPtr = vtkd_im.vtkConnectivityFilter_NewInstance(cast(void*)swigCPtr);
    vtkConnectivityFilter ret = (cPtr is null) ? null : new vtkConnectivityFilter(cPtr, false);
    return ret;
  }

  alias vtkUnstructuredGridAlgorithm.vtkUnstructuredGridAlgorithm.NewInstance NewInstance;

  public static vtkConnectivityFilter New() {
    void* cPtr = vtkd_im.vtkConnectivityFilter_New();
    vtkConnectivityFilter ret = (cPtr is null) ? null : new vtkConnectivityFilter(cPtr, false);
    return ret;
  }

  public void SetScalarConnectivity(int _arg) {
    vtkd_im.vtkConnectivityFilter_SetScalarConnectivity(cast(void*)swigCPtr, _arg);
  }

  public int GetScalarConnectivity() {
    auto ret = vtkd_im.vtkConnectivityFilter_GetScalarConnectivity(cast(void*)swigCPtr);
    return ret;
  }

  public void ScalarConnectivityOn() {
    vtkd_im.vtkConnectivityFilter_ScalarConnectivityOn(cast(void*)swigCPtr);
  }

  public void ScalarConnectivityOff() {
    vtkd_im.vtkConnectivityFilter_ScalarConnectivityOff(cast(void*)swigCPtr);
  }

  public void SetScalarRange(double _arg1, double _arg2) {
    vtkd_im.vtkConnectivityFilter_SetScalarRange__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2);
  }

  public void SetScalarRange(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkConnectivityFilter_SetScalarRange__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetScalarRange() {
    auto ret = cast(double*)vtkd_im.vtkConnectivityFilter_GetScalarRange__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetScalarRange(double* _arg1, double* _arg2) {
    vtkd_im.vtkConnectivityFilter_GetScalarRange__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetScalarRange(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkConnectivityFilter_GetScalarRange__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public void SetExtractionMode(int _arg) {
    vtkd_im.vtkConnectivityFilter_SetExtractionMode(cast(void*)swigCPtr, _arg);
  }

  public int GetExtractionModeMinValue() {
    auto ret = vtkd_im.vtkConnectivityFilter_GetExtractionModeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetExtractionModeMaxValue() {
    auto ret = vtkd_im.vtkConnectivityFilter_GetExtractionModeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetExtractionMode() {
    auto ret = vtkd_im.vtkConnectivityFilter_GetExtractionMode(cast(void*)swigCPtr);
    return ret;
  }

  public void SetExtractionModeToPointSeededRegions() {
    vtkd_im.vtkConnectivityFilter_SetExtractionModeToPointSeededRegions(cast(void*)swigCPtr);
  }

  public void SetExtractionModeToCellSeededRegions() {
    vtkd_im.vtkConnectivityFilter_SetExtractionModeToCellSeededRegions(cast(void*)swigCPtr);
  }

  public void SetExtractionModeToLargestRegion() {
    vtkd_im.vtkConnectivityFilter_SetExtractionModeToLargestRegion(cast(void*)swigCPtr);
  }

  public void SetExtractionModeToSpecifiedRegions() {
    vtkd_im.vtkConnectivityFilter_SetExtractionModeToSpecifiedRegions(cast(void*)swigCPtr);
  }

  public void SetExtractionModeToClosestPointRegion() {
    vtkd_im.vtkConnectivityFilter_SetExtractionModeToClosestPointRegion(cast(void*)swigCPtr);
  }

  public void SetExtractionModeToAllRegions() {
    vtkd_im.vtkConnectivityFilter_SetExtractionModeToAllRegions(cast(void*)swigCPtr);
  }

  public string GetExtractionModeAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkConnectivityFilter_GetExtractionModeAsString(cast(void*)swigCPtr));
    return ret;
  }

  public void InitializeSeedList() {
    vtkd_im.vtkConnectivityFilter_InitializeSeedList(cast(void*)swigCPtr);
  }

  public void AddSeed(long id) {
    vtkd_im.vtkConnectivityFilter_AddSeed(cast(void*)swigCPtr, id);
  }

  public void DeleteSeed(long id) {
    vtkd_im.vtkConnectivityFilter_DeleteSeed(cast(void*)swigCPtr, id);
  }

  public void InitializeSpecifiedRegionList() {
    vtkd_im.vtkConnectivityFilter_InitializeSpecifiedRegionList(cast(void*)swigCPtr);
  }

  public void AddSpecifiedRegion(int id) {
    vtkd_im.vtkConnectivityFilter_AddSpecifiedRegion(cast(void*)swigCPtr, id);
  }

  public void DeleteSpecifiedRegion(int id) {
    vtkd_im.vtkConnectivityFilter_DeleteSpecifiedRegion(cast(void*)swigCPtr, id);
  }

  public void SetClosestPoint(double _arg1, double _arg2, double _arg3) {
    vtkd_im.vtkConnectivityFilter_SetClosestPoint__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetClosestPoint(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkConnectivityFilter_SetClosestPoint__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetClosestPoint() {
    auto ret = cast(double*)vtkd_im.vtkConnectivityFilter_GetClosestPoint__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetClosestPoint(SWIGTYPE_p_double.SWIGTYPE_p_double data) {
    vtkd_im.vtkConnectivityFilter_GetClosestPoint__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(data));
  }

  public int GetNumberOfExtractedRegions() {
    auto ret = vtkd_im.vtkConnectivityFilter_GetNumberOfExtractedRegions(cast(void*)swigCPtr);
    return ret;
  }

  public void SetColorRegions(int _arg) {
    vtkd_im.vtkConnectivityFilter_SetColorRegions(cast(void*)swigCPtr, _arg);
  }

  public int GetColorRegions() {
    auto ret = vtkd_im.vtkConnectivityFilter_GetColorRegions(cast(void*)swigCPtr);
    return ret;
  }

  public void ColorRegionsOn() {
    vtkd_im.vtkConnectivityFilter_ColorRegionsOn(cast(void*)swigCPtr);
  }

  public void ColorRegionsOff() {
    vtkd_im.vtkConnectivityFilter_ColorRegionsOff(cast(void*)swigCPtr);
  }
}
