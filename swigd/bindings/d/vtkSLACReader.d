/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkSLACReader;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkDoubleArray;
static import vtkInformationIntegerKey;
static import vtkInformationObjectBaseKey;
static import vtkMultiBlockDataSetAlgorithm;

class vtkSLACReader : vtkMultiBlockDataSetAlgorithm.vtkMultiBlockDataSetAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkSLACReader_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkSLACReader obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkSLACReader_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkSLACReader SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkSLACReader_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkSLACReader ret = (cPtr is null) ? null : new vtkSLACReader(cPtr, false);
    return ret;
  }

  public vtkSLACReader NewInstance() const {
    void* cPtr = vtkd_im.vtkSLACReader_NewInstance(cast(void*)swigCPtr);
    vtkSLACReader ret = (cPtr is null) ? null : new vtkSLACReader(cPtr, false);
    return ret;
  }

  alias vtkMultiBlockDataSetAlgorithm.vtkMultiBlockDataSetAlgorithm.NewInstance NewInstance;

  public static vtkSLACReader New() {
    void* cPtr = vtkd_im.vtkSLACReader_New();
    vtkSLACReader ret = (cPtr is null) ? null : new vtkSLACReader(cPtr, false);
    return ret;
  }

  public string GetMeshFileName() {
    string ret = std.conv.to!string(vtkd_im.vtkSLACReader_GetMeshFileName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetMeshFileName(string _arg) {
    vtkd_im.vtkSLACReader_SetMeshFileName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public void AddModeFileName(string fname) {
    vtkd_im.vtkSLACReader_AddModeFileName(cast(void*)swigCPtr, (fname ? std.string.toStringz(fname) : null));
  }

  public void RemoveAllModeFileNames() {
    vtkd_im.vtkSLACReader_RemoveAllModeFileNames(cast(void*)swigCPtr);
  }

  public uint GetNumberOfModeFileNames() {
    auto ret = vtkd_im.vtkSLACReader_GetNumberOfModeFileNames(cast(void*)swigCPtr);
    return ret;
  }

  public string GetModeFileName(uint idx) {
    string ret = std.conv.to!string(vtkd_im.vtkSLACReader_GetModeFileName(cast(void*)swigCPtr, idx));
    return ret;
  }

  public int GetReadInternalVolume() {
    auto ret = vtkd_im.vtkSLACReader_GetReadInternalVolume(cast(void*)swigCPtr);
    return ret;
  }

  public void SetReadInternalVolume(int _arg) {
    vtkd_im.vtkSLACReader_SetReadInternalVolume(cast(void*)swigCPtr, _arg);
  }

  public void ReadInternalVolumeOn() {
    vtkd_im.vtkSLACReader_ReadInternalVolumeOn(cast(void*)swigCPtr);
  }

  public void ReadInternalVolumeOff() {
    vtkd_im.vtkSLACReader_ReadInternalVolumeOff(cast(void*)swigCPtr);
  }

  public int GetReadExternalSurface() {
    auto ret = vtkd_im.vtkSLACReader_GetReadExternalSurface(cast(void*)swigCPtr);
    return ret;
  }

  public void SetReadExternalSurface(int _arg) {
    vtkd_im.vtkSLACReader_SetReadExternalSurface(cast(void*)swigCPtr, _arg);
  }

  public void ReadExternalSurfaceOn() {
    vtkd_im.vtkSLACReader_ReadExternalSurfaceOn(cast(void*)swigCPtr);
  }

  public void ReadExternalSurfaceOff() {
    vtkd_im.vtkSLACReader_ReadExternalSurfaceOff(cast(void*)swigCPtr);
  }

  public int GetReadMidpoints() {
    auto ret = vtkd_im.vtkSLACReader_GetReadMidpoints(cast(void*)swigCPtr);
    return ret;
  }

  public void SetReadMidpoints(int _arg) {
    vtkd_im.vtkSLACReader_SetReadMidpoints(cast(void*)swigCPtr, _arg);
  }

  public void ReadMidpointsOn() {
    vtkd_im.vtkSLACReader_ReadMidpointsOn(cast(void*)swigCPtr);
  }

  public void ReadMidpointsOff() {
    vtkd_im.vtkSLACReader_ReadMidpointsOff(cast(void*)swigCPtr);
  }

  public int GetNumberOfVariableArrays() {
    auto ret = vtkd_im.vtkSLACReader_GetNumberOfVariableArrays(cast(void*)swigCPtr);
    return ret;
  }

  public string GetVariableArrayName(int idx) {
    string ret = std.conv.to!string(vtkd_im.vtkSLACReader_GetVariableArrayName(cast(void*)swigCPtr, idx));
    return ret;
  }

  public int GetVariableArrayStatus(string name) {
    auto ret = vtkd_im.vtkSLACReader_GetVariableArrayStatus(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
    return ret;
  }

  public void SetVariableArrayStatus(string name, int status) {
    vtkd_im.vtkSLACReader_SetVariableArrayStatus(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), status);
  }

  public void ResetFrequencyScales() {
    vtkd_im.vtkSLACReader_ResetFrequencyScales(cast(void*)swigCPtr);
  }

  public void SetFrequencyScale(int index, double scale) {
    vtkd_im.vtkSLACReader_SetFrequencyScale(cast(void*)swigCPtr, index, scale);
  }

  public void ResetPhaseShifts() {
    vtkd_im.vtkSLACReader_ResetPhaseShifts(cast(void*)swigCPtr);
  }

  public void SetPhaseShift(int index, double shift) {
    vtkd_im.vtkSLACReader_SetPhaseShift(cast(void*)swigCPtr, index, shift);
  }

  public vtkDoubleArray.vtkDoubleArray GetFrequencyScales() {
    void* cPtr = vtkd_im.vtkSLACReader_GetFrequencyScales(cast(void*)swigCPtr);
    vtkDoubleArray.vtkDoubleArray ret = (cPtr is null) ? null : new vtkDoubleArray.vtkDoubleArray(cPtr, false);
    return ret;
  }

  public vtkDoubleArray.vtkDoubleArray GetPhaseShifts() {
    void* cPtr = vtkd_im.vtkSLACReader_GetPhaseShifts(cast(void*)swigCPtr);
    vtkDoubleArray.vtkDoubleArray ret = (cPtr is null) ? null : new vtkDoubleArray.vtkDoubleArray(cPtr, false);
    return ret;
  }

  public static int CanReadFile(string filename) {
    auto ret = vtkd_im.vtkSLACReader_CanReadFile((filename ? std.string.toStringz(filename) : null));
    return ret;
  }

  public static vtkInformationIntegerKey.vtkInformationIntegerKey IS_INTERNAL_VOLUME() {
    void* cPtr = vtkd_im.vtkSLACReader_IS_INTERNAL_VOLUME();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public static vtkInformationIntegerKey.vtkInformationIntegerKey IS_EXTERNAL_SURFACE() {
    void* cPtr = vtkd_im.vtkSLACReader_IS_EXTERNAL_SURFACE();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public static vtkInformationObjectBaseKey.vtkInformationObjectBaseKey POINTS() {
    void* cPtr = vtkd_im.vtkSLACReader_POINTS();
    vtkInformationObjectBaseKey.vtkInformationObjectBaseKey ret = (cPtr is null) ? null : new vtkInformationObjectBaseKey.vtkInformationObjectBaseKey(cPtr, false);
    return ret;
  }

  public static vtkInformationObjectBaseKey.vtkInformationObjectBaseKey POINT_DATA() {
    void* cPtr = vtkd_im.vtkSLACReader_POINT_DATA();
    vtkInformationObjectBaseKey.vtkInformationObjectBaseKey ret = (cPtr is null) ? null : new vtkInformationObjectBaseKey.vtkInformationObjectBaseKey(cPtr, false);
    return ret;
  }
}
