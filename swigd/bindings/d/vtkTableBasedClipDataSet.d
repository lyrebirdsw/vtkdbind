/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkTableBasedClipDataSet;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkImplicitFunction;
static import vtkIncrementalPointLocator;
static import vtkUnstructuredGrid;
static import vtkUnstructuredGridAlgorithm;

class vtkTableBasedClipDataSet : vtkUnstructuredGridAlgorithm.vtkUnstructuredGridAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkTableBasedClipDataSet_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkTableBasedClipDataSet obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkTableBasedClipDataSet_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkTableBasedClipDataSet SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkTableBasedClipDataSet_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkTableBasedClipDataSet ret = (cPtr is null) ? null : new vtkTableBasedClipDataSet(cPtr, false);
    return ret;
  }

  public vtkTableBasedClipDataSet NewInstance() const {
    void* cPtr = vtkd_im.vtkTableBasedClipDataSet_NewInstance(cast(void*)swigCPtr);
    vtkTableBasedClipDataSet ret = (cPtr is null) ? null : new vtkTableBasedClipDataSet(cPtr, false);
    return ret;
  }

  alias vtkUnstructuredGridAlgorithm.vtkUnstructuredGridAlgorithm.NewInstance NewInstance;

  public static vtkTableBasedClipDataSet New() {
    void* cPtr = vtkd_im.vtkTableBasedClipDataSet_New();
    vtkTableBasedClipDataSet ret = (cPtr is null) ? null : new vtkTableBasedClipDataSet(cPtr, false);
    return ret;
  }

  public void SetInsideOut(int _arg) {
    vtkd_im.vtkTableBasedClipDataSet_SetInsideOut(cast(void*)swigCPtr, _arg);
  }

  public int GetInsideOut() {
    auto ret = vtkd_im.vtkTableBasedClipDataSet_GetInsideOut(cast(void*)swigCPtr);
    return ret;
  }

  public void InsideOutOn() {
    vtkd_im.vtkTableBasedClipDataSet_InsideOutOn(cast(void*)swigCPtr);
  }

  public void InsideOutOff() {
    vtkd_im.vtkTableBasedClipDataSet_InsideOutOff(cast(void*)swigCPtr);
  }

  public void SetValue(double _arg) {
    vtkd_im.vtkTableBasedClipDataSet_SetValue(cast(void*)swigCPtr, _arg);
  }

  public double GetValue() {
    auto ret = vtkd_im.vtkTableBasedClipDataSet_GetValue(cast(void*)swigCPtr);
    return ret;
  }

  public void SetUseValueAsOffset(bool _arg) {
    vtkd_im.vtkTableBasedClipDataSet_SetUseValueAsOffset(cast(void*)swigCPtr, _arg);
  }

  public bool GetUseValueAsOffset() {
    bool ret = vtkd_im.vtkTableBasedClipDataSet_GetUseValueAsOffset(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void UseValueAsOffsetOn() {
    vtkd_im.vtkTableBasedClipDataSet_UseValueAsOffsetOn(cast(void*)swigCPtr);
  }

  public void UseValueAsOffsetOff() {
    vtkd_im.vtkTableBasedClipDataSet_UseValueAsOffsetOff(cast(void*)swigCPtr);
  }

  public void SetClipFunction(vtkImplicitFunction.vtkImplicitFunction arg0) {
    vtkd_im.vtkTableBasedClipDataSet_SetClipFunction(cast(void*)swigCPtr, vtkImplicitFunction.vtkImplicitFunction.swigGetCPtr(arg0));
  }

  public vtkImplicitFunction.vtkImplicitFunction GetClipFunction() {
    void* cPtr = vtkd_im.vtkTableBasedClipDataSet_GetClipFunction(cast(void*)swigCPtr);
    vtkImplicitFunction.vtkImplicitFunction ret = (cPtr is null) ? null : new vtkImplicitFunction.vtkImplicitFunction(cPtr, false);
    return ret;
  }

  public void SetGenerateClipScalars(int _arg) {
    vtkd_im.vtkTableBasedClipDataSet_SetGenerateClipScalars(cast(void*)swigCPtr, _arg);
  }

  public int GetGenerateClipScalars() {
    auto ret = vtkd_im.vtkTableBasedClipDataSet_GetGenerateClipScalars(cast(void*)swigCPtr);
    return ret;
  }

  public void GenerateClipScalarsOn() {
    vtkd_im.vtkTableBasedClipDataSet_GenerateClipScalarsOn(cast(void*)swigCPtr);
  }

  public void GenerateClipScalarsOff() {
    vtkd_im.vtkTableBasedClipDataSet_GenerateClipScalarsOff(cast(void*)swigCPtr);
  }

  public void SetLocator(vtkIncrementalPointLocator.vtkIncrementalPointLocator locator) {
    vtkd_im.vtkTableBasedClipDataSet_SetLocator(cast(void*)swigCPtr, vtkIncrementalPointLocator.vtkIncrementalPointLocator.swigGetCPtr(locator));
  }

  public vtkIncrementalPointLocator.vtkIncrementalPointLocator GetLocator() {
    void* cPtr = vtkd_im.vtkTableBasedClipDataSet_GetLocator(cast(void*)swigCPtr);
    vtkIncrementalPointLocator.vtkIncrementalPointLocator ret = (cPtr is null) ? null : new vtkIncrementalPointLocator.vtkIncrementalPointLocator(cPtr, false);
    return ret;
  }

  public void SetMergeTolerance(double _arg) {
    vtkd_im.vtkTableBasedClipDataSet_SetMergeTolerance(cast(void*)swigCPtr, _arg);
  }

  public double GetMergeToleranceMinValue() {
    auto ret = vtkd_im.vtkTableBasedClipDataSet_GetMergeToleranceMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetMergeToleranceMaxValue() {
    auto ret = vtkd_im.vtkTableBasedClipDataSet_GetMergeToleranceMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetMergeTolerance() {
    auto ret = vtkd_im.vtkTableBasedClipDataSet_GetMergeTolerance(cast(void*)swigCPtr);
    return ret;
  }

  public void CreateDefaultLocator() {
    vtkd_im.vtkTableBasedClipDataSet_CreateDefaultLocator(cast(void*)swigCPtr);
  }

  public void SetGenerateClippedOutput(int _arg) {
    vtkd_im.vtkTableBasedClipDataSet_SetGenerateClippedOutput(cast(void*)swigCPtr, _arg);
  }

  public int GetGenerateClippedOutput() {
    auto ret = vtkd_im.vtkTableBasedClipDataSet_GetGenerateClippedOutput(cast(void*)swigCPtr);
    return ret;
  }

  public void GenerateClippedOutputOn() {
    vtkd_im.vtkTableBasedClipDataSet_GenerateClippedOutputOn(cast(void*)swigCPtr);
  }

  public void GenerateClippedOutputOff() {
    vtkd_im.vtkTableBasedClipDataSet_GenerateClippedOutputOff(cast(void*)swigCPtr);
  }

  public vtkUnstructuredGrid.vtkUnstructuredGrid GetClippedOutput() {
    void* cPtr = vtkd_im.vtkTableBasedClipDataSet_GetClippedOutput(cast(void*)swigCPtr);
    vtkUnstructuredGrid.vtkUnstructuredGrid ret = (cPtr is null) ? null : new vtkUnstructuredGrid.vtkUnstructuredGrid(cPtr, false);
    return ret;
  }

  public void SetOutputPointsPrecision(int _arg) {
    vtkd_im.vtkTableBasedClipDataSet_SetOutputPointsPrecision(cast(void*)swigCPtr, _arg);
  }

  public int GetOutputPointsPrecisionMinValue() {
    auto ret = vtkd_im.vtkTableBasedClipDataSet_GetOutputPointsPrecisionMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetOutputPointsPrecisionMaxValue() {
    auto ret = vtkd_im.vtkTableBasedClipDataSet_GetOutputPointsPrecisionMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetOutputPointsPrecision() {
    auto ret = vtkd_im.vtkTableBasedClipDataSet_GetOutputPointsPrecision(cast(void*)swigCPtr);
    return ret;
  }
}
