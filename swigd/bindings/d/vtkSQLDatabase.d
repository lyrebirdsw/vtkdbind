/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkSQLDatabase;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkSQLQuery;
static import vtkStringArray;
static import vtkStdString;
static import vtkSQLDatabaseSchema;
static import SWIGTYPE_p_CreateFunction;
static import vtkInformationObjectBaseKey;
static import vtkObject;

class vtkSQLDatabase : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkSQLDatabase_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkSQLDatabase obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkSQLDatabase(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkSQLDatabase_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkSQLDatabase SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkSQLDatabase_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkSQLDatabase ret = (cPtr is null) ? null : new vtkSQLDatabase(cPtr, false);
    return ret;
  }

  public vtkSQLDatabase NewInstance() const {
    void* cPtr = vtkd_im.vtkSQLDatabase_NewInstance(cast(void*)swigCPtr);
    vtkSQLDatabase ret = (cPtr is null) ? null : new vtkSQLDatabase(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public bool Open(string password) {
    bool ret = vtkd_im.vtkSQLDatabase_Open(cast(void*)swigCPtr, (password ? std.string.toStringz(password) : null)) ? true : false;
    return ret;
  }

  public void Close() {
    vtkd_im.vtkSQLDatabase_Close(cast(void*)swigCPtr);
  }

  public bool IsOpen() {
    bool ret = vtkd_im.vtkSQLDatabase_IsOpen(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public vtkSQLQuery.vtkSQLQuery GetQueryInstance() {
    void* cPtr = vtkd_im.vtkSQLDatabase_GetQueryInstance(cast(void*)swigCPtr);
    vtkSQLQuery.vtkSQLQuery ret = (cPtr is null) ? null : new vtkSQLQuery.vtkSQLQuery(cPtr, false);
    return ret;
  }

  public bool HasError() {
    bool ret = vtkd_im.vtkSQLDatabase_HasError(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public string GetLastErrorText() {
    string ret = std.conv.to!string(vtkd_im.vtkSQLDatabase_GetLastErrorText(cast(void*)swigCPtr));
    return ret;
  }

  public string GetDatabaseType() {
    string ret = std.conv.to!string(vtkd_im.vtkSQLDatabase_GetDatabaseType(cast(void*)swigCPtr));
    return ret;
  }

  public vtkStringArray.vtkStringArray GetTables() {
    void* cPtr = vtkd_im.vtkSQLDatabase_GetTables(cast(void*)swigCPtr);
    vtkStringArray.vtkStringArray ret = (cPtr is null) ? null : new vtkStringArray.vtkStringArray(cPtr, false);
    return ret;
  }

  public vtkStringArray.vtkStringArray GetRecord(string table) {
    void* cPtr = vtkd_im.vtkSQLDatabase_GetRecord(cast(void*)swigCPtr, (table ? std.string.toStringz(table) : null));
    vtkStringArray.vtkStringArray ret = (cPtr is null) ? null : new vtkStringArray.vtkStringArray(cPtr, false);
    return ret;
  }

  public bool IsSupported(int arg0) {
    bool ret = vtkd_im.vtkSQLDatabase_IsSupported(cast(void*)swigCPtr, arg0) ? true : false;
    return ret;
  }

  public vtkStdString.vtkStdString GetURL() {
    vtkStdString.vtkStdString ret = new vtkStdString.vtkStdString(vtkd_im.vtkSQLDatabase_GetURL(cast(void*)swigCPtr), true);
    return ret;
  }

  public vtkStdString.vtkStdString GetTablePreamble(bool arg0) {
    vtkStdString.vtkStdString ret = new vtkStdString.vtkStdString(vtkd_im.vtkSQLDatabase_GetTablePreamble(cast(void*)swigCPtr, arg0), true);
    return ret;
  }

  public vtkStdString.vtkStdString GetColumnSpecification(vtkSQLDatabaseSchema.vtkSQLDatabaseSchema schema, int tblHandle, int colHandle) {
    vtkStdString.vtkStdString ret = new vtkStdString.vtkStdString(vtkd_im.vtkSQLDatabase_GetColumnSpecification(cast(void*)swigCPtr, vtkSQLDatabaseSchema.vtkSQLDatabaseSchema.swigGetCPtr(schema), tblHandle, colHandle), true);
    return ret;
  }

  public vtkStdString.vtkStdString GetIndexSpecification(vtkSQLDatabaseSchema.vtkSQLDatabaseSchema schema, int tblHandle, int idxHandle, bool* skipped) {
    vtkStdString.vtkStdString ret = new vtkStdString.vtkStdString(vtkd_im.vtkSQLDatabase_GetIndexSpecification(cast(void*)swigCPtr, vtkSQLDatabaseSchema.vtkSQLDatabaseSchema.swigGetCPtr(schema), tblHandle, idxHandle, cast(void*)skipped), true);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public vtkStdString.vtkStdString GetTriggerSpecification(vtkSQLDatabaseSchema.vtkSQLDatabaseSchema schema, int tblHandle, int trgHandle) {
    vtkStdString.vtkStdString ret = new vtkStdString.vtkStdString(vtkd_im.vtkSQLDatabase_GetTriggerSpecification(cast(void*)swigCPtr, vtkSQLDatabaseSchema.vtkSQLDatabaseSchema.swigGetCPtr(schema), tblHandle, trgHandle), true);
    return ret;
  }

  public static vtkSQLDatabase CreateFromURL(string URL) {
    void* cPtr = vtkd_im.vtkSQLDatabase_CreateFromURL((URL ? std.string.toStringz(URL) : null));
    vtkSQLDatabase ret = (cPtr is null) ? null : new vtkSQLDatabase(cPtr, false);
    return ret;
  }

  public bool EffectSchema(vtkSQLDatabaseSchema.vtkSQLDatabaseSchema arg0, bool dropIfExists) {
    bool ret = vtkd_im.vtkSQLDatabase_EffectSchema__SWIG_0(cast(void*)swigCPtr, vtkSQLDatabaseSchema.vtkSQLDatabaseSchema.swigGetCPtr(arg0), dropIfExists) ? true : false;
    return ret;
  }

  public bool EffectSchema(vtkSQLDatabaseSchema.vtkSQLDatabaseSchema arg0) {
    bool ret = vtkd_im.vtkSQLDatabase_EffectSchema__SWIG_1(cast(void*)swigCPtr, vtkSQLDatabaseSchema.vtkSQLDatabaseSchema.swigGetCPtr(arg0)) ? true : false;
    return ret;
  }

  public static void RegisterCreateFromURLCallback(SWIGTYPE_p_CreateFunction.SWIGTYPE_p_CreateFunction callback) {
    vtkd_im.vtkSQLDatabase_RegisterCreateFromURLCallback(SWIGTYPE_p_CreateFunction.SWIGTYPE_p_CreateFunction.swigGetCPtr(callback));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public static void UnRegisterCreateFromURLCallback(SWIGTYPE_p_CreateFunction.SWIGTYPE_p_CreateFunction callback) {
    vtkd_im.vtkSQLDatabase_UnRegisterCreateFromURLCallback(SWIGTYPE_p_CreateFunction.SWIGTYPE_p_CreateFunction.swigGetCPtr(callback));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public static void UnRegisterAllCreateFromURLCallbacks() {
    vtkd_im.vtkSQLDatabase_UnRegisterAllCreateFromURLCallbacks();
  }

  public static vtkInformationObjectBaseKey.vtkInformationObjectBaseKey DATABASE() {
    void* cPtr = vtkd_im.vtkSQLDatabase_DATABASE();
    vtkInformationObjectBaseKey.vtkInformationObjectBaseKey ret = (cPtr is null) ? null : new vtkInformationObjectBaseKey.vtkInformationObjectBaseKey(cPtr, false);
    return ret;
  }
}
