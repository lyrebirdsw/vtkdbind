/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkIncrementalForceLayout;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkGraph;
static import vtkObject;

class vtkIncrementalForceLayout : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkIncrementalForceLayout_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkIncrementalForceLayout obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkIncrementalForceLayout_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkIncrementalForceLayout SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkIncrementalForceLayout_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkIncrementalForceLayout ret = (cPtr is null) ? null : new vtkIncrementalForceLayout(cPtr, false);
    return ret;
  }

  public vtkIncrementalForceLayout NewInstance() const {
    void* cPtr = vtkd_im.vtkIncrementalForceLayout_NewInstance(cast(void*)swigCPtr);
    vtkIncrementalForceLayout ret = (cPtr is null) ? null : new vtkIncrementalForceLayout(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public static vtkIncrementalForceLayout New() {
    void* cPtr = vtkd_im.vtkIncrementalForceLayout_New();
    vtkIncrementalForceLayout ret = (cPtr is null) ? null : new vtkIncrementalForceLayout(cPtr, false);
    return ret;
  }

  public void SetGraph(vtkGraph.vtkGraph g) {
    vtkd_im.vtkIncrementalForceLayout_SetGraph(cast(void*)swigCPtr, vtkGraph.vtkGraph.swigGetCPtr(g));
  }

  public vtkGraph.vtkGraph GetGraph() {
    void* cPtr = vtkd_im.vtkIncrementalForceLayout_GetGraph(cast(void*)swigCPtr);
    vtkGraph.vtkGraph ret = (cPtr is null) ? null : new vtkGraph.vtkGraph(cPtr, false);
    return ret;
  }

  public void SetFixed(long fixed) {
    vtkd_im.vtkIncrementalForceLayout_SetFixed(cast(void*)swigCPtr, fixed);
  }

  public long GetFixed() {
    auto ret = vtkd_im.vtkIncrementalForceLayout_GetFixed(cast(void*)swigCPtr);
    return ret;
  }

  public void SetAlpha(float _arg) {
    vtkd_im.vtkIncrementalForceLayout_SetAlpha(cast(void*)swigCPtr, _arg);
  }

  public float GetAlpha() {
    auto ret = vtkd_im.vtkIncrementalForceLayout_GetAlpha(cast(void*)swigCPtr);
    return ret;
  }

  public void SetTheta(float _arg) {
    vtkd_im.vtkIncrementalForceLayout_SetTheta(cast(void*)swigCPtr, _arg);
  }

  public float GetTheta() {
    auto ret = vtkd_im.vtkIncrementalForceLayout_GetTheta(cast(void*)swigCPtr);
    return ret;
  }

  public void SetCharge(float _arg) {
    vtkd_im.vtkIncrementalForceLayout_SetCharge(cast(void*)swigCPtr, _arg);
  }

  public float GetCharge() {
    auto ret = vtkd_im.vtkIncrementalForceLayout_GetCharge(cast(void*)swigCPtr);
    return ret;
  }

  public void SetStrength(float _arg) {
    vtkd_im.vtkIncrementalForceLayout_SetStrength(cast(void*)swigCPtr, _arg);
  }

  public float GetStrength() {
    auto ret = vtkd_im.vtkIncrementalForceLayout_GetStrength(cast(void*)swigCPtr);
    return ret;
  }

  public void SetDistance(float _arg) {
    vtkd_im.vtkIncrementalForceLayout_SetDistance(cast(void*)swigCPtr, _arg);
  }

  public float GetDistance() {
    auto ret = vtkd_im.vtkIncrementalForceLayout_GetDistance(cast(void*)swigCPtr);
    return ret;
  }

  public void SetGravity(float _arg) {
    vtkd_im.vtkIncrementalForceLayout_SetGravity(cast(void*)swigCPtr, _arg);
  }

  public float GetGravity() {
    auto ret = vtkd_im.vtkIncrementalForceLayout_GetGravity(cast(void*)swigCPtr);
    return ret;
  }

  public void SetFriction(float _arg) {
    vtkd_im.vtkIncrementalForceLayout_SetFriction(cast(void*)swigCPtr, _arg);
  }

  public float GetFriction() {
    auto ret = vtkd_im.vtkIncrementalForceLayout_GetFriction(cast(void*)swigCPtr);
    return ret;
  }

  public void UpdatePositions() {
    vtkd_im.vtkIncrementalForceLayout_UpdatePositions(cast(void*)swigCPtr);
  }
}
