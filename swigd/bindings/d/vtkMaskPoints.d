/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkMaskPoints;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkPolyDataAlgorithm;

class vtkMaskPoints : vtkPolyDataAlgorithm.vtkPolyDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkMaskPoints_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkMaskPoints obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkMaskPoints New() {
    void* cPtr = vtkd_im.vtkMaskPoints_New();
    vtkMaskPoints ret = (cPtr is null) ? null : new vtkMaskPoints(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkMaskPoints_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkMaskPoints SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkMaskPoints_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkMaskPoints ret = (cPtr is null) ? null : new vtkMaskPoints(cPtr, false);
    return ret;
  }

  public vtkMaskPoints NewInstance() const {
    void* cPtr = vtkd_im.vtkMaskPoints_NewInstance(cast(void*)swigCPtr);
    vtkMaskPoints ret = (cPtr is null) ? null : new vtkMaskPoints(cPtr, false);
    return ret;
  }

  alias vtkPolyDataAlgorithm.vtkPolyDataAlgorithm.NewInstance NewInstance;

  public void SetOnRatio(int _arg) {
    vtkd_im.vtkMaskPoints_SetOnRatio(cast(void*)swigCPtr, _arg);
  }

  public int GetOnRatioMinValue() {
    auto ret = vtkd_im.vtkMaskPoints_GetOnRatioMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetOnRatioMaxValue() {
    auto ret = vtkd_im.vtkMaskPoints_GetOnRatioMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetOnRatio() {
    auto ret = vtkd_im.vtkMaskPoints_GetOnRatio(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMaximumNumberOfPoints(long _arg) {
    vtkd_im.vtkMaskPoints_SetMaximumNumberOfPoints(cast(void*)swigCPtr, _arg);
  }

  public long GetMaximumNumberOfPointsMinValue() {
    auto ret = vtkd_im.vtkMaskPoints_GetMaximumNumberOfPointsMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public long GetMaximumNumberOfPointsMaxValue() {
    auto ret = vtkd_im.vtkMaskPoints_GetMaximumNumberOfPointsMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public long GetMaximumNumberOfPoints() {
    auto ret = vtkd_im.vtkMaskPoints_GetMaximumNumberOfPoints(cast(void*)swigCPtr);
    return ret;
  }

  public void SetOffset(long _arg) {
    vtkd_im.vtkMaskPoints_SetOffset(cast(void*)swigCPtr, _arg);
  }

  public long GetOffsetMinValue() {
    auto ret = vtkd_im.vtkMaskPoints_GetOffsetMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public long GetOffsetMaxValue() {
    auto ret = vtkd_im.vtkMaskPoints_GetOffsetMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public long GetOffset() {
    auto ret = vtkd_im.vtkMaskPoints_GetOffset(cast(void*)swigCPtr);
    return ret;
  }

  public void SetRandomMode(int _arg) {
    vtkd_im.vtkMaskPoints_SetRandomMode(cast(void*)swigCPtr, _arg);
  }

  public int GetRandomMode() {
    auto ret = vtkd_im.vtkMaskPoints_GetRandomMode(cast(void*)swigCPtr);
    return ret;
  }

  public void RandomModeOn() {
    vtkd_im.vtkMaskPoints_RandomModeOn(cast(void*)swigCPtr);
  }

  public void RandomModeOff() {
    vtkd_im.vtkMaskPoints_RandomModeOff(cast(void*)swigCPtr);
  }

  public void SetRandomModeType(int _arg) {
    vtkd_im.vtkMaskPoints_SetRandomModeType(cast(void*)swigCPtr, _arg);
  }

  public int GetRandomModeTypeMinValue() {
    auto ret = vtkd_im.vtkMaskPoints_GetRandomModeTypeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetRandomModeTypeMaxValue() {
    auto ret = vtkd_im.vtkMaskPoints_GetRandomModeTypeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetRandomModeType() {
    auto ret = vtkd_im.vtkMaskPoints_GetRandomModeType(cast(void*)swigCPtr);
    return ret;
  }

  public void SetProportionalMaximumNumberOfPoints(int _arg) {
    vtkd_im.vtkMaskPoints_SetProportionalMaximumNumberOfPoints(cast(void*)swigCPtr, _arg);
  }

  public int GetProportionalMaximumNumberOfPoints() {
    auto ret = vtkd_im.vtkMaskPoints_GetProportionalMaximumNumberOfPoints(cast(void*)swigCPtr);
    return ret;
  }

  public void ProportionalMaximumNumberOfPointsOn() {
    vtkd_im.vtkMaskPoints_ProportionalMaximumNumberOfPointsOn(cast(void*)swigCPtr);
  }

  public void ProportionalMaximumNumberOfPointsOff() {
    vtkd_im.vtkMaskPoints_ProportionalMaximumNumberOfPointsOff(cast(void*)swigCPtr);
  }

  public void SetGenerateVertices(int _arg) {
    vtkd_im.vtkMaskPoints_SetGenerateVertices(cast(void*)swigCPtr, _arg);
  }

  public int GetGenerateVertices() {
    auto ret = vtkd_im.vtkMaskPoints_GetGenerateVertices(cast(void*)swigCPtr);
    return ret;
  }

  public void GenerateVerticesOn() {
    vtkd_im.vtkMaskPoints_GenerateVerticesOn(cast(void*)swigCPtr);
  }

  public void GenerateVerticesOff() {
    vtkd_im.vtkMaskPoints_GenerateVerticesOff(cast(void*)swigCPtr);
  }

  public void SetSingleVertexPerCell(int _arg) {
    vtkd_im.vtkMaskPoints_SetSingleVertexPerCell(cast(void*)swigCPtr, _arg);
  }

  public int GetSingleVertexPerCell() {
    auto ret = vtkd_im.vtkMaskPoints_GetSingleVertexPerCell(cast(void*)swigCPtr);
    return ret;
  }

  public void SingleVertexPerCellOn() {
    vtkd_im.vtkMaskPoints_SingleVertexPerCellOn(cast(void*)swigCPtr);
  }

  public void SingleVertexPerCellOff() {
    vtkd_im.vtkMaskPoints_SingleVertexPerCellOff(cast(void*)swigCPtr);
  }
}
