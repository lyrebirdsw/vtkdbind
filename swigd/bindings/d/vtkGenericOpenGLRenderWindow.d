/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkGenericOpenGLRenderWindow;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkOpenGLRenderWindow;

class vtkGenericOpenGLRenderWindow : vtkOpenGLRenderWindow.vtkOpenGLRenderWindow {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkGenericOpenGLRenderWindow_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkGenericOpenGLRenderWindow obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkGenericOpenGLRenderWindow New() {
    void* cPtr = vtkd_im.vtkGenericOpenGLRenderWindow_New();
    vtkGenericOpenGLRenderWindow ret = (cPtr is null) ? null : new vtkGenericOpenGLRenderWindow(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkGenericOpenGLRenderWindow_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkGenericOpenGLRenderWindow SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkGenericOpenGLRenderWindow_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkGenericOpenGLRenderWindow ret = (cPtr is null) ? null : new vtkGenericOpenGLRenderWindow(cPtr, false);
    return ret;
  }

  public vtkGenericOpenGLRenderWindow NewInstance() const {
    void* cPtr = vtkd_im.vtkGenericOpenGLRenderWindow_NewInstance(cast(void*)swigCPtr);
    vtkGenericOpenGLRenderWindow ret = (cPtr is null) ? null : new vtkGenericOpenGLRenderWindow(cPtr, false);
    return ret;
  }

  alias vtkOpenGLRenderWindow.vtkOpenGLRenderWindow.NewInstance NewInstance;

  public void SetFrontBuffer(uint arg0) {
    vtkd_im.vtkGenericOpenGLRenderWindow_SetFrontBuffer(cast(void*)swigCPtr, arg0);
  }

  public void SetFrontLeftBuffer(uint arg0) {
    vtkd_im.vtkGenericOpenGLRenderWindow_SetFrontLeftBuffer(cast(void*)swigCPtr, arg0);
  }

  public void SetFrontRightBuffer(uint arg0) {
    vtkd_im.vtkGenericOpenGLRenderWindow_SetFrontRightBuffer(cast(void*)swigCPtr, arg0);
  }

  public void SetBackBuffer(uint arg0) {
    vtkd_im.vtkGenericOpenGLRenderWindow_SetBackBuffer(cast(void*)swigCPtr, arg0);
  }

  public void SetBackLeftBuffer(uint arg0) {
    vtkd_im.vtkGenericOpenGLRenderWindow_SetBackLeftBuffer(cast(void*)swigCPtr, arg0);
  }

  public void SetBackRightBuffer(uint arg0) {
    vtkd_im.vtkGenericOpenGLRenderWindow_SetBackRightBuffer(cast(void*)swigCPtr, arg0);
  }

  public void PushState() {
    vtkd_im.vtkGenericOpenGLRenderWindow_PushState(cast(void*)swigCPtr);
  }

  public void PopState() {
    vtkd_im.vtkGenericOpenGLRenderWindow_PopState(cast(void*)swigCPtr);
  }

  public void CreateAWindow() {
    vtkd_im.vtkGenericOpenGLRenderWindow_CreateAWindow(cast(void*)swigCPtr);
  }

  public void DestroyWindow() {
    vtkd_im.vtkGenericOpenGLRenderWindow_DestroyWindow(cast(void*)swigCPtr);
  }
}
