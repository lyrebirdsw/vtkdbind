/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkExtractArraysOverTime;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkAlgorithmOutput;
static import vtkExtractSelection;
static import vtkMultiBlockDataSetAlgorithm;

class vtkExtractArraysOverTime : vtkMultiBlockDataSetAlgorithm.vtkMultiBlockDataSetAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkExtractArraysOverTime_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkExtractArraysOverTime obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkExtractArraysOverTime(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkExtractArraysOverTime New() {
    void* cPtr = vtkd_im.vtkExtractArraysOverTime_New();
    vtkExtractArraysOverTime ret = (cPtr is null) ? null : new vtkExtractArraysOverTime(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkExtractArraysOverTime_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkExtractArraysOverTime SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkExtractArraysOverTime_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkExtractArraysOverTime ret = (cPtr is null) ? null : new vtkExtractArraysOverTime(cPtr, false);
    return ret;
  }

  public vtkExtractArraysOverTime NewInstance() const {
    void* cPtr = vtkd_im.vtkExtractArraysOverTime_NewInstance(cast(void*)swigCPtr);
    vtkExtractArraysOverTime ret = (cPtr is null) ? null : new vtkExtractArraysOverTime(cPtr, false);
    return ret;
  }

  alias vtkMultiBlockDataSetAlgorithm.vtkMultiBlockDataSetAlgorithm.NewInstance NewInstance;

  public int GetNumberOfTimeSteps() {
    auto ret = vtkd_im.vtkExtractArraysOverTime_GetNumberOfTimeSteps(cast(void*)swigCPtr);
    return ret;
  }

  public void SetSelectionConnection(vtkAlgorithmOutput.vtkAlgorithmOutput algOutput) {
    vtkd_im.vtkExtractArraysOverTime_SetSelectionConnection(cast(void*)swigCPtr, vtkAlgorithmOutput.vtkAlgorithmOutput.swigGetCPtr(algOutput));
  }

  public void SetSelectionExtractor(vtkExtractSelection.vtkExtractSelection arg0) {
    vtkd_im.vtkExtractArraysOverTime_SetSelectionExtractor(cast(void*)swigCPtr, vtkExtractSelection.vtkExtractSelection.swigGetCPtr(arg0));
  }

  public vtkExtractSelection.vtkExtractSelection GetSelectionExtractor() {
    void* cPtr = vtkd_im.vtkExtractArraysOverTime_GetSelectionExtractor(cast(void*)swigCPtr);
    vtkExtractSelection.vtkExtractSelection ret = (cPtr is null) ? null : new vtkExtractSelection.vtkExtractSelection(cPtr, false);
    return ret;
  }

  public void SetReportStatisticsOnly(int _arg) {
    vtkd_im.vtkExtractArraysOverTime_SetReportStatisticsOnly(cast(void*)swigCPtr, _arg);
  }

  public int GetReportStatisticsOnly() {
    auto ret = vtkd_im.vtkExtractArraysOverTime_GetReportStatisticsOnly(cast(void*)swigCPtr);
    return ret;
  }

  public void ReportStatisticsOnlyOn() {
    vtkd_im.vtkExtractArraysOverTime_ReportStatisticsOnlyOn(cast(void*)swigCPtr);
  }

  public void ReportStatisticsOnlyOff() {
    vtkd_im.vtkExtractArraysOverTime_ReportStatisticsOnlyOff(cast(void*)swigCPtr);
  }

  public this() {
    this(vtkd_im.new_vtkExtractArraysOverTime(), true);
  }
}
