/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkObjectBase;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import SWIGTYPE_p_ostream;
static import vtkIndent;

class vtkObjectBase {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(vtkObjectBase obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
      }
    }
  }

  public string GetClassName() const {
    string ret = std.conv.to!string(vtkd_im.vtkObjectBase_GetClassName(cast(void*)swigCPtr));
    return ret;
  }

  public static int IsTypeOf(string name) {
    auto ret = vtkd_im.vtkObjectBase_IsTypeOf((name ? std.string.toStringz(name) : null));
    return ret;
  }

  public int IsA(string name) {
    auto ret = vtkd_im.vtkObjectBase_IsA(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
    return ret;
  }

  public void Delete() {
    vtkd_im.vtkObjectBase_Delete(cast(void*)swigCPtr);
  }

  public void FastDelete() {
    vtkd_im.vtkObjectBase_FastDelete(cast(void*)swigCPtr);
  }

  public static vtkObjectBase New() {
    void* cPtr = vtkd_im.vtkObjectBase_New();
    vtkObjectBase ret = (cPtr is null) ? null : new vtkObjectBase(cPtr, false);
    return ret;
  }

  public void Print(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream os) {
    vtkd_im.vtkObjectBase_Print(cast(void*)swigCPtr, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(os));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void PrintSelf(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream os, vtkIndent.vtkIndent indent) {
    vtkd_im.vtkObjectBase_PrintSelf(cast(void*)swigCPtr, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(os), vtkIndent.vtkIndent.swigGetCPtr(indent));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void PrintHeader(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream os, vtkIndent.vtkIndent indent) {
    vtkd_im.vtkObjectBase_PrintHeader(cast(void*)swigCPtr, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(os), vtkIndent.vtkIndent.swigGetCPtr(indent));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void PrintTrailer(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream os, vtkIndent.vtkIndent indent) {
    vtkd_im.vtkObjectBase_PrintTrailer(cast(void*)swigCPtr, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(os), vtkIndent.vtkIndent.swigGetCPtr(indent));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void Register(vtkObjectBase o) {
    vtkd_im.vtkObjectBase_Register(cast(void*)swigCPtr, vtkObjectBase.swigGetCPtr(o));
  }

  public void UnRegister(vtkObjectBase o) {
    vtkd_im.vtkObjectBase_UnRegister(cast(void*)swigCPtr, vtkObjectBase.swigGetCPtr(o));
  }

  public int GetReferenceCount() {
    auto ret = vtkd_im.vtkObjectBase_GetReferenceCount(cast(void*)swigCPtr);
    return ret;
  }

  public void SetReferenceCount(int arg0) {
    vtkd_im.vtkObjectBase_SetReferenceCount(cast(void*)swigCPtr, arg0);
  }

  public void PrintRevisions(SWIGTYPE_p_ostream.SWIGTYPE_p_ostream arg0) {
    vtkd_im.vtkObjectBase_PrintRevisions(cast(void*)swigCPtr, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(arg0));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }
}
