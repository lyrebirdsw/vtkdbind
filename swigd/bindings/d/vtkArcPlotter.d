/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkArcPlotter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkCamera;
static import SWIGTYPE_p_float;
static import vtkPolyDataAlgorithm;

class vtkArcPlotter : vtkPolyDataAlgorithm.vtkPolyDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkArcPlotter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkArcPlotter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkArcPlotter New() {
    void* cPtr = vtkd_im.vtkArcPlotter_New();
    vtkArcPlotter ret = (cPtr is null) ? null : new vtkArcPlotter(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkArcPlotter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkArcPlotter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkArcPlotter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkArcPlotter ret = (cPtr is null) ? null : new vtkArcPlotter(cPtr, false);
    return ret;
  }

  public vtkArcPlotter NewInstance() const {
    void* cPtr = vtkd_im.vtkArcPlotter_NewInstance(cast(void*)swigCPtr);
    vtkArcPlotter ret = (cPtr is null) ? null : new vtkArcPlotter(cPtr, false);
    return ret;
  }

  alias vtkPolyDataAlgorithm.vtkPolyDataAlgorithm.NewInstance NewInstance;

  public void SetCamera(vtkCamera.vtkCamera arg0) {
    vtkd_im.vtkArcPlotter_SetCamera(cast(void*)swigCPtr, vtkCamera.vtkCamera.swigGetCPtr(arg0));
  }

  public vtkCamera.vtkCamera GetCamera() {
    void* cPtr = vtkd_im.vtkArcPlotter_GetCamera(cast(void*)swigCPtr);
    vtkCamera.vtkCamera ret = (cPtr is null) ? null : new vtkCamera.vtkCamera(cPtr, false);
    return ret;
  }

  public void SetPlotMode(int _arg) {
    vtkd_im.vtkArcPlotter_SetPlotMode(cast(void*)swigCPtr, _arg);
  }

  public int GetPlotMode() {
    auto ret = vtkd_im.vtkArcPlotter_GetPlotMode(cast(void*)swigCPtr);
    return ret;
  }

  public void SetPlotModeToPlotScalars() {
    vtkd_im.vtkArcPlotter_SetPlotModeToPlotScalars(cast(void*)swigCPtr);
  }

  public void SetPlotModeToPlotVectors() {
    vtkd_im.vtkArcPlotter_SetPlotModeToPlotVectors(cast(void*)swigCPtr);
  }

  public void SetPlotModeToPlotNormals() {
    vtkd_im.vtkArcPlotter_SetPlotModeToPlotNormals(cast(void*)swigCPtr);
  }

  public void SetPlotModeToPlotTCoords() {
    vtkd_im.vtkArcPlotter_SetPlotModeToPlotTCoords(cast(void*)swigCPtr);
  }

  public void SetPlotModeToPlotTensors() {
    vtkd_im.vtkArcPlotter_SetPlotModeToPlotTensors(cast(void*)swigCPtr);
  }

  public void SetPlotModeToPlotFieldData() {
    vtkd_im.vtkArcPlotter_SetPlotModeToPlotFieldData(cast(void*)swigCPtr);
  }

  public void SetPlotComponent(int _arg) {
    vtkd_im.vtkArcPlotter_SetPlotComponent(cast(void*)swigCPtr, _arg);
  }

  public int GetPlotComponent() {
    auto ret = vtkd_im.vtkArcPlotter_GetPlotComponent(cast(void*)swigCPtr);
    return ret;
  }

  public void SetRadius(double _arg) {
    vtkd_im.vtkArcPlotter_SetRadius(cast(void*)swigCPtr, _arg);
  }

  public double GetRadiusMinValue() {
    auto ret = vtkd_im.vtkArcPlotter_GetRadiusMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetRadiusMaxValue() {
    auto ret = vtkd_im.vtkArcPlotter_GetRadiusMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetRadius() {
    auto ret = vtkd_im.vtkArcPlotter_GetRadius(cast(void*)swigCPtr);
    return ret;
  }

  public void SetHeight(double _arg) {
    vtkd_im.vtkArcPlotter_SetHeight(cast(void*)swigCPtr, _arg);
  }

  public double GetHeightMinValue() {
    auto ret = vtkd_im.vtkArcPlotter_GetHeightMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetHeightMaxValue() {
    auto ret = vtkd_im.vtkArcPlotter_GetHeightMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetHeight() {
    auto ret = vtkd_im.vtkArcPlotter_GetHeight(cast(void*)swigCPtr);
    return ret;
  }

  public void SetOffset(double _arg) {
    vtkd_im.vtkArcPlotter_SetOffset(cast(void*)swigCPtr, _arg);
  }

  public double GetOffsetMinValue() {
    auto ret = vtkd_im.vtkArcPlotter_GetOffsetMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetOffsetMaxValue() {
    auto ret = vtkd_im.vtkArcPlotter_GetOffsetMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetOffset() {
    auto ret = vtkd_im.vtkArcPlotter_GetOffset(cast(void*)swigCPtr);
    return ret;
  }

  public void SetUseDefaultNormal(int _arg) {
    vtkd_im.vtkArcPlotter_SetUseDefaultNormal(cast(void*)swigCPtr, _arg);
  }

  public int GetUseDefaultNormal() {
    auto ret = vtkd_im.vtkArcPlotter_GetUseDefaultNormal(cast(void*)swigCPtr);
    return ret;
  }

  public void UseDefaultNormalOn() {
    vtkd_im.vtkArcPlotter_UseDefaultNormalOn(cast(void*)swigCPtr);
  }

  public void UseDefaultNormalOff() {
    vtkd_im.vtkArcPlotter_UseDefaultNormalOff(cast(void*)swigCPtr);
  }

  public void SetDefaultNormal(float _arg1, float _arg2, float _arg3) {
    vtkd_im.vtkArcPlotter_SetDefaultNormal__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetDefaultNormal(SWIGTYPE_p_float.SWIGTYPE_p_float _arg) {
    vtkd_im.vtkArcPlotter_SetDefaultNormal__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(_arg));
  }

  public float* GetDefaultNormal() {
    auto ret = cast(float*)vtkd_im.vtkArcPlotter_GetDefaultNormal__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetDefaultNormal(SWIGTYPE_p_float.SWIGTYPE_p_float data) {
    vtkd_im.vtkArcPlotter_GetDefaultNormal__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(data));
  }

  public void SetFieldDataArray(int _arg) {
    vtkd_im.vtkArcPlotter_SetFieldDataArray(cast(void*)swigCPtr, _arg);
  }

  public int GetFieldDataArrayMinValue() {
    auto ret = vtkd_im.vtkArcPlotter_GetFieldDataArrayMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetFieldDataArrayMaxValue() {
    auto ret = vtkd_im.vtkArcPlotter_GetFieldDataArrayMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetFieldDataArray() {
    auto ret = vtkd_im.vtkArcPlotter_GetFieldDataArray(cast(void*)swigCPtr);
    return ret;
  }
}
