/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkLinearExtrusionFilter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkPolyDataAlgorithm;

class vtkLinearExtrusionFilter : vtkPolyDataAlgorithm.vtkPolyDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkLinearExtrusionFilter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkLinearExtrusionFilter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkLinearExtrusionFilter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkLinearExtrusionFilter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkLinearExtrusionFilter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkLinearExtrusionFilter ret = (cPtr is null) ? null : new vtkLinearExtrusionFilter(cPtr, false);
    return ret;
  }

  public vtkLinearExtrusionFilter NewInstance() const {
    void* cPtr = vtkd_im.vtkLinearExtrusionFilter_NewInstance(cast(void*)swigCPtr);
    vtkLinearExtrusionFilter ret = (cPtr is null) ? null : new vtkLinearExtrusionFilter(cPtr, false);
    return ret;
  }

  alias vtkPolyDataAlgorithm.vtkPolyDataAlgorithm.NewInstance NewInstance;

  public static vtkLinearExtrusionFilter New() {
    void* cPtr = vtkd_im.vtkLinearExtrusionFilter_New();
    vtkLinearExtrusionFilter ret = (cPtr is null) ? null : new vtkLinearExtrusionFilter(cPtr, false);
    return ret;
  }

  public void SetExtrusionType(int _arg) {
    vtkd_im.vtkLinearExtrusionFilter_SetExtrusionType(cast(void*)swigCPtr, _arg);
  }

  public int GetExtrusionTypeMinValue() {
    auto ret = vtkd_im.vtkLinearExtrusionFilter_GetExtrusionTypeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetExtrusionTypeMaxValue() {
    auto ret = vtkd_im.vtkLinearExtrusionFilter_GetExtrusionTypeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetExtrusionType() {
    auto ret = vtkd_im.vtkLinearExtrusionFilter_GetExtrusionType(cast(void*)swigCPtr);
    return ret;
  }

  public void SetExtrusionTypeToVectorExtrusion() {
    vtkd_im.vtkLinearExtrusionFilter_SetExtrusionTypeToVectorExtrusion(cast(void*)swigCPtr);
  }

  public void SetExtrusionTypeToNormalExtrusion() {
    vtkd_im.vtkLinearExtrusionFilter_SetExtrusionTypeToNormalExtrusion(cast(void*)swigCPtr);
  }

  public void SetExtrusionTypeToPointExtrusion() {
    vtkd_im.vtkLinearExtrusionFilter_SetExtrusionTypeToPointExtrusion(cast(void*)swigCPtr);
  }

  public void SetCapping(int _arg) {
    vtkd_im.vtkLinearExtrusionFilter_SetCapping(cast(void*)swigCPtr, _arg);
  }

  public int GetCapping() {
    auto ret = vtkd_im.vtkLinearExtrusionFilter_GetCapping(cast(void*)swigCPtr);
    return ret;
  }

  public void CappingOn() {
    vtkd_im.vtkLinearExtrusionFilter_CappingOn(cast(void*)swigCPtr);
  }

  public void CappingOff() {
    vtkd_im.vtkLinearExtrusionFilter_CappingOff(cast(void*)swigCPtr);
  }

  public void SetScaleFactor(double _arg) {
    vtkd_im.vtkLinearExtrusionFilter_SetScaleFactor(cast(void*)swigCPtr, _arg);
  }

  public double GetScaleFactor() {
    auto ret = vtkd_im.vtkLinearExtrusionFilter_GetScaleFactor(cast(void*)swigCPtr);
    return ret;
  }

  public void SetVector(double _arg1, double _arg2, double _arg3) {
    vtkd_im.vtkLinearExtrusionFilter_SetVector__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetVector(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkLinearExtrusionFilter_SetVector__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetVector() {
    auto ret = cast(double*)vtkd_im.vtkLinearExtrusionFilter_GetVector__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetVector(SWIGTYPE_p_double.SWIGTYPE_p_double data) {
    vtkd_im.vtkLinearExtrusionFilter_GetVector__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(data));
  }

  public void SetExtrusionPoint(double _arg1, double _arg2, double _arg3) {
    vtkd_im.vtkLinearExtrusionFilter_SetExtrusionPoint__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetExtrusionPoint(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkLinearExtrusionFilter_SetExtrusionPoint__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetExtrusionPoint() {
    auto ret = cast(double*)vtkd_im.vtkLinearExtrusionFilter_GetExtrusionPoint__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetExtrusionPoint(SWIGTYPE_p_double.SWIGTYPE_p_double data) {
    vtkd_im.vtkLinearExtrusionFilter_GetExtrusionPoint__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(data));
  }
}
