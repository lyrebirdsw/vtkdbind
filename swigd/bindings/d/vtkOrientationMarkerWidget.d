/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkOrientationMarkerWidget;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkProp;
static import vtkObject;
static import vtkInteractorObserver;

class vtkOrientationMarkerWidget : vtkInteractorObserver.vtkInteractorObserver {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkOrientationMarkerWidget_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkOrientationMarkerWidget obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkOrientationMarkerWidget New() {
    void* cPtr = vtkd_im.vtkOrientationMarkerWidget_New();
    vtkOrientationMarkerWidget ret = (cPtr is null) ? null : new vtkOrientationMarkerWidget(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkOrientationMarkerWidget_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkOrientationMarkerWidget SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkOrientationMarkerWidget_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkOrientationMarkerWidget ret = (cPtr is null) ? null : new vtkOrientationMarkerWidget(cPtr, false);
    return ret;
  }

  public vtkOrientationMarkerWidget NewInstance() const {
    void* cPtr = vtkd_im.vtkOrientationMarkerWidget_NewInstance(cast(void*)swigCPtr);
    vtkOrientationMarkerWidget ret = (cPtr is null) ? null : new vtkOrientationMarkerWidget(cPtr, false);
    return ret;
  }

  alias vtkInteractorObserver.vtkInteractorObserver.NewInstance NewInstance;

  public void SetOrientationMarker(vtkProp.vtkProp prop) {
    vtkd_im.vtkOrientationMarkerWidget_SetOrientationMarker(cast(void*)swigCPtr, vtkProp.vtkProp.swigGetCPtr(prop));
  }

  public vtkProp.vtkProp GetOrientationMarker() {
    void* cPtr = vtkd_im.vtkOrientationMarkerWidget_GetOrientationMarker(cast(void*)swigCPtr);
    vtkProp.vtkProp ret = (cPtr is null) ? null : new vtkProp.vtkProp(cPtr, false);
    return ret;
  }

  public void ExecuteCameraUpdateEvent(vtkObject.vtkObject o, core.stdc.config.c_ulong event, void* calldata) {
    vtkd_im.vtkOrientationMarkerWidget_ExecuteCameraUpdateEvent(cast(void*)swigCPtr, vtkObject.vtkObject.swigGetCPtr(o), event, cast(void*)calldata);
  }

  public void SetInteractive(int state) {
    vtkd_im.vtkOrientationMarkerWidget_SetInteractive(cast(void*)swigCPtr, state);
  }

  public int GetInteractive() {
    auto ret = vtkd_im.vtkOrientationMarkerWidget_GetInteractive(cast(void*)swigCPtr);
    return ret;
  }

  public void InteractiveOn() {
    vtkd_im.vtkOrientationMarkerWidget_InteractiveOn(cast(void*)swigCPtr);
  }

  public void InteractiveOff() {
    vtkd_im.vtkOrientationMarkerWidget_InteractiveOff(cast(void*)swigCPtr);
  }

  public void SetOutlineColor(double r, double g, double b) {
    vtkd_im.vtkOrientationMarkerWidget_SetOutlineColor(cast(void*)swigCPtr, r, g, b);
  }

  public double* GetOutlineColor() {
    auto ret = cast(double*)vtkd_im.vtkOrientationMarkerWidget_GetOutlineColor(cast(void*)swigCPtr);
    return ret;
  }

  public void SetViewport(double minX, double minY, double maxX, double maxY) {
    vtkd_im.vtkOrientationMarkerWidget_SetViewport(cast(void*)swigCPtr, minX, minY, maxX, maxY);
  }

  public double* GetViewport() {
    auto ret = cast(double*)vtkd_im.vtkOrientationMarkerWidget_GetViewport(cast(void*)swigCPtr);
    return ret;
  }

  public void SetTolerance(int _arg) {
    vtkd_im.vtkOrientationMarkerWidget_SetTolerance(cast(void*)swigCPtr, _arg);
  }

  public int GetToleranceMinValue() {
    auto ret = vtkd_im.vtkOrientationMarkerWidget_GetToleranceMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetToleranceMaxValue() {
    auto ret = vtkd_im.vtkOrientationMarkerWidget_GetToleranceMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetTolerance() {
    auto ret = vtkd_im.vtkOrientationMarkerWidget_GetTolerance(cast(void*)swigCPtr);
    return ret;
  }
}
