/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkRIBProperty;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkProperty;

class vtkRIBProperty : vtkProperty.vtkProperty {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkRIBProperty_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkRIBProperty obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkRIBProperty New() {
    void* cPtr = vtkd_im.vtkRIBProperty_New();
    vtkRIBProperty ret = (cPtr is null) ? null : new vtkRIBProperty(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkRIBProperty_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkRIBProperty SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkRIBProperty_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkRIBProperty ret = (cPtr is null) ? null : new vtkRIBProperty(cPtr, false);
    return ret;
  }

  public vtkRIBProperty NewInstance() const {
    void* cPtr = vtkd_im.vtkRIBProperty_NewInstance(cast(void*)swigCPtr);
    vtkRIBProperty ret = (cPtr is null) ? null : new vtkRIBProperty(cPtr, false);
    return ret;
  }

  alias vtkProperty.vtkProperty.NewInstance NewInstance;

  public void SetSurfaceShader(string _arg) {
    vtkd_im.vtkRIBProperty_SetSurfaceShader(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetSurfaceShader() {
    string ret = std.conv.to!string(vtkd_im.vtkRIBProperty_GetSurfaceShader(cast(void*)swigCPtr));
    return ret;
  }

  public void SetDisplacementShader(string _arg) {
    vtkd_im.vtkRIBProperty_SetDisplacementShader(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetDisplacementShader() {
    string ret = std.conv.to!string(vtkd_im.vtkRIBProperty_GetDisplacementShader(cast(void*)swigCPtr));
    return ret;
  }

  public void SetVariable(string variable, string declaration) {
    vtkd_im.vtkRIBProperty_SetVariable(cast(void*)swigCPtr, (variable ? std.string.toStringz(variable) : null), (declaration ? std.string.toStringz(declaration) : null));
  }

  public void AddVariable(string variable, string declaration) {
    vtkd_im.vtkRIBProperty_AddVariable(cast(void*)swigCPtr, (variable ? std.string.toStringz(variable) : null), (declaration ? std.string.toStringz(declaration) : null));
  }

  public string GetDeclarations() {
    string ret = std.conv.to!string(vtkd_im.vtkRIBProperty_GetDeclarations(cast(void*)swigCPtr));
    return ret;
  }

  public void SetParameter(string parameter, string value) {
    vtkd_im.vtkRIBProperty_SetParameter(cast(void*)swigCPtr, (parameter ? std.string.toStringz(parameter) : null), (value ? std.string.toStringz(value) : null));
  }

  public void AddParameter(string parameter, string value) {
    vtkd_im.vtkRIBProperty_AddParameter(cast(void*)swigCPtr, (parameter ? std.string.toStringz(parameter) : null), (value ? std.string.toStringz(value) : null));
  }

  public string GetParameters() {
    string ret = std.conv.to!string(vtkd_im.vtkRIBProperty_GetParameters(cast(void*)swigCPtr));
    return ret;
  }
}
