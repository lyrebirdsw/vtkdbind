/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkImageSlice;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkImageMapper3D;
static import vtkImageProperty;
static import SWIGTYPE_p_double;
static import vtkPropCollection;
static import vtkViewport;
static import vtkRenderer;
static import vtkWindow;
static import vtkProp3D;

class vtkImageSlice : vtkProp3D.vtkProp3D {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkImageSlice_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkImageSlice obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkImageSlice_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkImageSlice SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkImageSlice_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkImageSlice ret = (cPtr is null) ? null : new vtkImageSlice(cPtr, false);
    return ret;
  }

  public vtkImageSlice NewInstance() const {
    void* cPtr = vtkd_im.vtkImageSlice_NewInstance(cast(void*)swigCPtr);
    vtkImageSlice ret = (cPtr is null) ? null : new vtkImageSlice(cPtr, false);
    return ret;
  }

  alias vtkProp3D.vtkProp3D.NewInstance NewInstance;

  public static vtkImageSlice New() {
    void* cPtr = vtkd_im.vtkImageSlice_New();
    vtkImageSlice ret = (cPtr is null) ? null : new vtkImageSlice(cPtr, false);
    return ret;
  }

  public void SetMapper(vtkImageMapper3D.vtkImageMapper3D mapper) {
    vtkd_im.vtkImageSlice_SetMapper(cast(void*)swigCPtr, vtkImageMapper3D.vtkImageMapper3D.swigGetCPtr(mapper));
  }

  public vtkImageMapper3D.vtkImageMapper3D GetMapper() {
    void* cPtr = vtkd_im.vtkImageSlice_GetMapper(cast(void*)swigCPtr);
    vtkImageMapper3D.vtkImageMapper3D ret = (cPtr is null) ? null : new vtkImageMapper3D.vtkImageMapper3D(cPtr, false);
    return ret;
  }

  public void SetProperty(vtkImageProperty.vtkImageProperty property) {
    vtkd_im.vtkImageSlice_SetProperty(cast(void*)swigCPtr, vtkImageProperty.vtkImageProperty.swigGetCPtr(property));
  }

  public vtkImageProperty.vtkImageProperty GetProperty() {
    void* cPtr = vtkd_im.vtkImageSlice_GetProperty(cast(void*)swigCPtr);
    vtkImageProperty.vtkImageProperty ret = (cPtr is null) ? null : new vtkImageProperty.vtkImageProperty(cPtr, false);
    return ret;
  }

  public void Update() {
    vtkd_im.vtkImageSlice_Update(cast(void*)swigCPtr);
  }

  public override double* GetBounds() {
    auto ret = cast(double*)vtkd_im.vtkImageSlice_GetBounds__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetBounds(SWIGTYPE_p_double.SWIGTYPE_p_double bounds) {
    vtkd_im.vtkImageSlice_GetBounds__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
  }

  alias vtkProp3D.vtkProp3D.GetBounds GetBounds;

  public double GetMinXBound() {
    auto ret = vtkd_im.vtkImageSlice_GetMinXBound(cast(void*)swigCPtr);
    return ret;
  }

  public double GetMaxXBound() {
    auto ret = vtkd_im.vtkImageSlice_GetMaxXBound(cast(void*)swigCPtr);
    return ret;
  }

  public double GetMinYBound() {
    auto ret = vtkd_im.vtkImageSlice_GetMinYBound(cast(void*)swigCPtr);
    return ret;
  }

  public double GetMaxYBound() {
    auto ret = vtkd_im.vtkImageSlice_GetMaxYBound(cast(void*)swigCPtr);
    return ret;
  }

  public double GetMinZBound() {
    auto ret = vtkd_im.vtkImageSlice_GetMinZBound(cast(void*)swigCPtr);
    return ret;
  }

  public double GetMaxZBound() {
    auto ret = vtkd_im.vtkImageSlice_GetMaxZBound(cast(void*)swigCPtr);
    return ret;
  }

  public void GetImages(vtkPropCollection.vtkPropCollection arg0) {
    vtkd_im.vtkImageSlice_GetImages(cast(void*)swigCPtr, vtkPropCollection.vtkPropCollection.swigGetCPtr(arg0));
  }

  public int RenderOverlay(vtkViewport.vtkViewport viewport) {
    auto ret = vtkd_im.vtkImageSlice_RenderOverlay(cast(void*)swigCPtr, vtkViewport.vtkViewport.swigGetCPtr(viewport));
    return ret;
  }

  public int RenderOpaqueGeometry(vtkViewport.vtkViewport viewport) {
    auto ret = vtkd_im.vtkImageSlice_RenderOpaqueGeometry(cast(void*)swigCPtr, vtkViewport.vtkViewport.swigGetCPtr(viewport));
    return ret;
  }

  public int RenderTranslucentPolygonalGeometry(vtkViewport.vtkViewport viewport) {
    auto ret = vtkd_im.vtkImageSlice_RenderTranslucentPolygonalGeometry(cast(void*)swigCPtr, vtkViewport.vtkViewport.swigGetCPtr(viewport));
    return ret;
  }

  public int HasTranslucentPolygonalGeometry() {
    auto ret = vtkd_im.vtkImageSlice_HasTranslucentPolygonalGeometry(cast(void*)swigCPtr);
    return ret;
  }

  public void Render(vtkRenderer.vtkRenderer arg0) {
    vtkd_im.vtkImageSlice_Render(cast(void*)swigCPtr, vtkRenderer.vtkRenderer.swigGetCPtr(arg0));
  }

  public void ReleaseGraphicsResources(vtkWindow.vtkWindow win) {
    vtkd_im.vtkImageSlice_ReleaseGraphicsResources(cast(void*)swigCPtr, vtkWindow.vtkWindow.swigGetCPtr(win));
  }

  public void SetStackedImagePass(int pass) {
    vtkd_im.vtkImageSlice_SetStackedImagePass(cast(void*)swigCPtr, pass);
  }
}
