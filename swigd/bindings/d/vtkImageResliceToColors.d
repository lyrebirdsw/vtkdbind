/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkImageResliceToColors;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkScalarsToColors;
static import vtkImageReslice;

class vtkImageResliceToColors : vtkImageReslice.vtkImageReslice {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkImageResliceToColors_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkImageResliceToColors obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkImageResliceToColors New() {
    void* cPtr = vtkd_im.vtkImageResliceToColors_New();
    vtkImageResliceToColors ret = (cPtr is null) ? null : new vtkImageResliceToColors(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkImageResliceToColors_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkImageResliceToColors SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkImageResliceToColors_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkImageResliceToColors ret = (cPtr is null) ? null : new vtkImageResliceToColors(cPtr, false);
    return ret;
  }

  public vtkImageResliceToColors NewInstance() const {
    void* cPtr = vtkd_im.vtkImageResliceToColors_NewInstance(cast(void*)swigCPtr);
    vtkImageResliceToColors ret = (cPtr is null) ? null : new vtkImageResliceToColors(cPtr, false);
    return ret;
  }

  alias vtkImageReslice.vtkImageReslice.NewInstance NewInstance;

  public void SetLookupTable(vtkScalarsToColors.vtkScalarsToColors table) {
    vtkd_im.vtkImageResliceToColors_SetLookupTable(cast(void*)swigCPtr, vtkScalarsToColors.vtkScalarsToColors.swigGetCPtr(table));
  }

  public vtkScalarsToColors.vtkScalarsToColors GetLookupTable() {
    void* cPtr = vtkd_im.vtkImageResliceToColors_GetLookupTable(cast(void*)swigCPtr);
    vtkScalarsToColors.vtkScalarsToColors ret = (cPtr is null) ? null : new vtkScalarsToColors.vtkScalarsToColors(cPtr, false);
    return ret;
  }

  public void SetOutputFormat(int _arg) {
    vtkd_im.vtkImageResliceToColors_SetOutputFormat(cast(void*)swigCPtr, _arg);
  }

  public int GetOutputFormatMinValue() {
    auto ret = vtkd_im.vtkImageResliceToColors_GetOutputFormatMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetOutputFormatMaxValue() {
    auto ret = vtkd_im.vtkImageResliceToColors_GetOutputFormatMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetOutputFormat() {
    auto ret = vtkd_im.vtkImageResliceToColors_GetOutputFormat(cast(void*)swigCPtr);
    return ret;
  }

  public void SetOutputFormatToRGBA() {
    vtkd_im.vtkImageResliceToColors_SetOutputFormatToRGBA(cast(void*)swigCPtr);
  }

  public void SetOutputFormatToRGB() {
    vtkd_im.vtkImageResliceToColors_SetOutputFormatToRGB(cast(void*)swigCPtr);
  }

  public void SetOutputFormatToLuminanceAlpha() {
    vtkd_im.vtkImageResliceToColors_SetOutputFormatToLuminanceAlpha(cast(void*)swigCPtr);
  }

  public void SetOutputFormatToLuminance() {
    vtkd_im.vtkImageResliceToColors_SetOutputFormatToLuminance(cast(void*)swigCPtr);
  }

  public void SetBypass(int bypass) {
    vtkd_im.vtkImageResliceToColors_SetBypass(cast(void*)swigCPtr, bypass);
  }

  public void BypassOn() {
    vtkd_im.vtkImageResliceToColors_BypassOn(cast(void*)swigCPtr);
  }

  public void BypassOff() {
    vtkd_im.vtkImageResliceToColors_BypassOff(cast(void*)swigCPtr);
  }

  public int GetBypass() {
    auto ret = vtkd_im.vtkImageResliceToColors_GetBypass(cast(void*)swigCPtr);
    return ret;
  }
}
