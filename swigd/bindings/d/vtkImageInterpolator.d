/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkImageInterpolator;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import SWIGTYPE_p_int;
static import SWIGTYPE_p_p_vtkInterpolationWeights;
static import SWIGTYPE_p_float;
static import vtkAbstractImageInterpolator;

class vtkImageInterpolator : vtkAbstractImageInterpolator.vtkAbstractImageInterpolator {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkImageInterpolator_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkImageInterpolator obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkImageInterpolator New() {
    void* cPtr = vtkd_im.vtkImageInterpolator_New();
    vtkImageInterpolator ret = (cPtr is null) ? null : new vtkImageInterpolator(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkImageInterpolator_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkImageInterpolator SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkImageInterpolator_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkImageInterpolator ret = (cPtr is null) ? null : new vtkImageInterpolator(cPtr, false);
    return ret;
  }

  public vtkImageInterpolator NewInstance() const {
    void* cPtr = vtkd_im.vtkImageInterpolator_NewInstance(cast(void*)swigCPtr);
    vtkImageInterpolator ret = (cPtr is null) ? null : new vtkImageInterpolator(cPtr, false);
    return ret;
  }

  alias vtkAbstractImageInterpolator.vtkAbstractImageInterpolator.NewInstance NewInstance;

  public void SetInterpolationMode(int mode) {
    vtkd_im.vtkImageInterpolator_SetInterpolationMode(cast(void*)swigCPtr, mode);
  }

  public void SetInterpolationModeToNearest() {
    vtkd_im.vtkImageInterpolator_SetInterpolationModeToNearest(cast(void*)swigCPtr);
  }

  public void SetInterpolationModeToLinear() {
    vtkd_im.vtkImageInterpolator_SetInterpolationModeToLinear(cast(void*)swigCPtr);
  }

  public void SetInterpolationModeToCubic() {
    vtkd_im.vtkImageInterpolator_SetInterpolationModeToCubic(cast(void*)swigCPtr);
  }

  public int GetInterpolationMode() {
    auto ret = vtkd_im.vtkImageInterpolator_GetInterpolationMode(cast(void*)swigCPtr);
    return ret;
  }

  public string GetInterpolationModeAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkImageInterpolator_GetInterpolationModeAsString(cast(void*)swigCPtr));
    return ret;
  }

  public override void PrecomputeWeightsForExtent(SWIGTYPE_p_double.SWIGTYPE_p_double matrix, SWIGTYPE_p_int.SWIGTYPE_p_int extent, SWIGTYPE_p_int.SWIGTYPE_p_int newExtent, SWIGTYPE_p_p_vtkInterpolationWeights.SWIGTYPE_p_p_vtkInterpolationWeights weights) {
    vtkd_im.vtkImageInterpolator_PrecomputeWeightsForExtent__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(matrix), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(extent), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(newExtent), SWIGTYPE_p_p_vtkInterpolationWeights.SWIGTYPE_p_p_vtkInterpolationWeights.swigGetCPtr(weights));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public override void PrecomputeWeightsForExtent(SWIGTYPE_p_float.SWIGTYPE_p_float matrix, SWIGTYPE_p_int.SWIGTYPE_p_int extent, SWIGTYPE_p_int.SWIGTYPE_p_int newExtent, SWIGTYPE_p_p_vtkInterpolationWeights.SWIGTYPE_p_p_vtkInterpolationWeights weights) {
    vtkd_im.vtkImageInterpolator_PrecomputeWeightsForExtent__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(matrix), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(extent), SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(newExtent), SWIGTYPE_p_p_vtkInterpolationWeights.SWIGTYPE_p_p_vtkInterpolationWeights.swigGetCPtr(weights));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }
}
