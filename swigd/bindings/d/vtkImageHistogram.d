/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkImageHistogram;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkImageStencilData;
static import vtkAlgorithmOutput;
static import SWIGTYPE_p_int;
static import vtkIdTypeArray;
static import vtkThreadedImageAlgorithm;

class vtkImageHistogram : vtkThreadedImageAlgorithm.vtkThreadedImageAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkImageHistogram_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkImageHistogram obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  enum {
    Linear = 0,
    Log = 1,
    Sqrt = 2
  }

  public static vtkImageHistogram New() {
    void* cPtr = vtkd_im.vtkImageHistogram_New();
    vtkImageHistogram ret = (cPtr is null) ? null : new vtkImageHistogram(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkImageHistogram_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkImageHistogram SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkImageHistogram_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkImageHistogram ret = (cPtr is null) ? null : new vtkImageHistogram(cPtr, false);
    return ret;
  }

  public vtkImageHistogram NewInstance() const {
    void* cPtr = vtkd_im.vtkImageHistogram_NewInstance(cast(void*)swigCPtr);
    vtkImageHistogram ret = (cPtr is null) ? null : new vtkImageHistogram(cPtr, false);
    return ret;
  }

  alias vtkThreadedImageAlgorithm.vtkThreadedImageAlgorithm.NewInstance NewInstance;

  public void SetActiveComponent(int _arg) {
    vtkd_im.vtkImageHistogram_SetActiveComponent(cast(void*)swigCPtr, _arg);
  }

  public int GetActiveComponent() {
    auto ret = vtkd_im.vtkImageHistogram_GetActiveComponent(cast(void*)swigCPtr);
    return ret;
  }

  public void SetAutomaticBinning(int _arg) {
    vtkd_im.vtkImageHistogram_SetAutomaticBinning(cast(void*)swigCPtr, _arg);
  }

  public void AutomaticBinningOn() {
    vtkd_im.vtkImageHistogram_AutomaticBinningOn(cast(void*)swigCPtr);
  }

  public void AutomaticBinningOff() {
    vtkd_im.vtkImageHistogram_AutomaticBinningOff(cast(void*)swigCPtr);
  }

  public int GetAutomaticBinning() {
    auto ret = vtkd_im.vtkImageHistogram_GetAutomaticBinning(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMaximumNumberOfBins(int _arg) {
    vtkd_im.vtkImageHistogram_SetMaximumNumberOfBins(cast(void*)swigCPtr, _arg);
  }

  public int GetMaximumNumberOfBins() {
    auto ret = vtkd_im.vtkImageHistogram_GetMaximumNumberOfBins(cast(void*)swigCPtr);
    return ret;
  }

  public void SetNumberOfBins(int _arg) {
    vtkd_im.vtkImageHistogram_SetNumberOfBins(cast(void*)swigCPtr, _arg);
  }

  public int GetNumberOfBins() {
    auto ret = vtkd_im.vtkImageHistogram_GetNumberOfBins(cast(void*)swigCPtr);
    return ret;
  }

  public void SetBinOrigin(double _arg) {
    vtkd_im.vtkImageHistogram_SetBinOrigin(cast(void*)swigCPtr, _arg);
  }

  public double GetBinOrigin() {
    auto ret = vtkd_im.vtkImageHistogram_GetBinOrigin(cast(void*)swigCPtr);
    return ret;
  }

  public void SetBinSpacing(double _arg) {
    vtkd_im.vtkImageHistogram_SetBinSpacing(cast(void*)swigCPtr, _arg);
  }

  public double GetBinSpacing() {
    auto ret = vtkd_im.vtkImageHistogram_GetBinSpacing(cast(void*)swigCPtr);
    return ret;
  }

  public void SetStencilData(vtkImageStencilData.vtkImageStencilData stencil) {
    vtkd_im.vtkImageHistogram_SetStencilData(cast(void*)swigCPtr, vtkImageStencilData.vtkImageStencilData.swigGetCPtr(stencil));
  }

  public vtkImageStencilData.vtkImageStencilData GetStencil() {
    void* cPtr = vtkd_im.vtkImageHistogram_GetStencil(cast(void*)swigCPtr);
    vtkImageStencilData.vtkImageStencilData ret = (cPtr is null) ? null : new vtkImageStencilData.vtkImageStencilData(cPtr, false);
    return ret;
  }

  public void SetStencilConnection(vtkAlgorithmOutput.vtkAlgorithmOutput algOutput) {
    vtkd_im.vtkImageHistogram_SetStencilConnection(cast(void*)swigCPtr, vtkAlgorithmOutput.vtkAlgorithmOutput.swigGetCPtr(algOutput));
  }

  public void SetGenerateHistogramImage(int _arg) {
    vtkd_im.vtkImageHistogram_SetGenerateHistogramImage(cast(void*)swigCPtr, _arg);
  }

  public void GenerateHistogramImageOn() {
    vtkd_im.vtkImageHistogram_GenerateHistogramImageOn(cast(void*)swigCPtr);
  }

  public void GenerateHistogramImageOff() {
    vtkd_im.vtkImageHistogram_GenerateHistogramImageOff(cast(void*)swigCPtr);
  }

  public int GetGenerateHistogramImage() {
    auto ret = vtkd_im.vtkImageHistogram_GetGenerateHistogramImage(cast(void*)swigCPtr);
    return ret;
  }

  public void SetHistogramImageSize(int _arg1, int _arg2) {
    vtkd_im.vtkImageHistogram_SetHistogramImageSize__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2);
  }

  public void SetHistogramImageSize(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkImageHistogram_SetHistogramImageSize__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public int* GetHistogramImageSize() {
    auto ret = cast(int*)vtkd_im.vtkImageHistogram_GetHistogramImageSize__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetHistogramImageSize(int* _arg1, int* _arg2) {
    vtkd_im.vtkImageHistogram_GetHistogramImageSize__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetHistogramImageSize(SWIGTYPE_p_int.SWIGTYPE_p_int _arg) {
    vtkd_im.vtkImageHistogram_GetHistogramImageSize__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_int.SWIGTYPE_p_int.swigGetCPtr(_arg));
  }

  public void SetHistogramImageScale(int _arg) {
    vtkd_im.vtkImageHistogram_SetHistogramImageScale(cast(void*)swigCPtr, _arg);
  }

  public int GetHistogramImageScaleMinValue() {
    auto ret = vtkd_im.vtkImageHistogram_GetHistogramImageScaleMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetHistogramImageScaleMaxValue() {
    auto ret = vtkd_im.vtkImageHistogram_GetHistogramImageScaleMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public void SetHistogramImageScaleToLinear() {
    vtkd_im.vtkImageHistogram_SetHistogramImageScaleToLinear(cast(void*)swigCPtr);
  }

  public void SetHistogramImageScaleToLog() {
    vtkd_im.vtkImageHistogram_SetHistogramImageScaleToLog(cast(void*)swigCPtr);
  }

  public void SetHistogramImageScaleToSqrt() {
    vtkd_im.vtkImageHistogram_SetHistogramImageScaleToSqrt(cast(void*)swigCPtr);
  }

  public int GetHistogramImageScale() {
    auto ret = vtkd_im.vtkImageHistogram_GetHistogramImageScale(cast(void*)swigCPtr);
    return ret;
  }

  public string GetHistogramImageScaleAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkImageHistogram_GetHistogramImageScaleAsString(cast(void*)swigCPtr));
    return ret;
  }

  public vtkIdTypeArray.vtkIdTypeArray GetHistogram() {
    void* cPtr = vtkd_im.vtkImageHistogram_GetHistogram(cast(void*)swigCPtr);
    vtkIdTypeArray.vtkIdTypeArray ret = (cPtr is null) ? null : new vtkIdTypeArray.vtkIdTypeArray(cPtr, false);
    return ret;
  }

  public long GetTotal() {
    auto ret = vtkd_im.vtkImageHistogram_GetTotal(cast(void*)swigCPtr);
    return ret;
  }
}
