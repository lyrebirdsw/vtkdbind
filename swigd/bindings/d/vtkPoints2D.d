/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPoints2D;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkDataArray;
static import SWIGTYPE_p_double;
static import SWIGTYPE_p_float;
static import vtkIdList;
static import vtkObject;

class vtkPoints2D : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPoints2D_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPoints2D obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkPoints2D New() {
    void* cPtr = vtkd_im.vtkPoints2D_New();
    vtkPoints2D ret = (cPtr is null) ? null : new vtkPoints2D(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPoints2D_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPoints2D SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPoints2D_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPoints2D ret = (cPtr is null) ? null : new vtkPoints2D(cPtr, false);
    return ret;
  }

  public vtkPoints2D NewInstance() const {
    void* cPtr = vtkd_im.vtkPoints2D_NewInstance(cast(void*)swigCPtr);
    vtkPoints2D ret = (cPtr is null) ? null : new vtkPoints2D(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public int Allocate(long sz, long ext) {
    auto ret = vtkd_im.vtkPoints2D_Allocate__SWIG_0(cast(void*)swigCPtr, sz, ext);
    return ret;
  }

  public int Allocate(long sz) {
    auto ret = vtkd_im.vtkPoints2D_Allocate__SWIG_1(cast(void*)swigCPtr, sz);
    return ret;
  }

  public void Initialize() {
    vtkd_im.vtkPoints2D_Initialize(cast(void*)swigCPtr);
  }

  public void SetData(vtkDataArray.vtkDataArray arg0) {
    vtkd_im.vtkPoints2D_SetData(cast(void*)swigCPtr, vtkDataArray.vtkDataArray.swigGetCPtr(arg0));
  }

  public vtkDataArray.vtkDataArray GetData() {
    void* cPtr = vtkd_im.vtkPoints2D_GetData(cast(void*)swigCPtr);
    vtkDataArray.vtkDataArray ret = (cPtr is null) ? null : new vtkDataArray.vtkDataArray(cPtr, false);
    return ret;
  }

  public int GetDataType() {
    auto ret = vtkd_im.vtkPoints2D_GetDataType(cast(void*)swigCPtr);
    return ret;
  }

  public void SetDataType(int dataType) {
    vtkd_im.vtkPoints2D_SetDataType(cast(void*)swigCPtr, dataType);
  }

  public void SetDataTypeToBit() {
    vtkd_im.vtkPoints2D_SetDataTypeToBit(cast(void*)swigCPtr);
  }

  public void SetDataTypeToChar() {
    vtkd_im.vtkPoints2D_SetDataTypeToChar(cast(void*)swigCPtr);
  }

  public void SetDataTypeToUnsignedChar() {
    vtkd_im.vtkPoints2D_SetDataTypeToUnsignedChar(cast(void*)swigCPtr);
  }

  public void SetDataTypeToShort() {
    vtkd_im.vtkPoints2D_SetDataTypeToShort(cast(void*)swigCPtr);
  }

  public void SetDataTypeToUnsignedShort() {
    vtkd_im.vtkPoints2D_SetDataTypeToUnsignedShort(cast(void*)swigCPtr);
  }

  public void SetDataTypeToInt() {
    vtkd_im.vtkPoints2D_SetDataTypeToInt(cast(void*)swigCPtr);
  }

  public void SetDataTypeToUnsignedInt() {
    vtkd_im.vtkPoints2D_SetDataTypeToUnsignedInt(cast(void*)swigCPtr);
  }

  public void SetDataTypeToLong() {
    vtkd_im.vtkPoints2D_SetDataTypeToLong(cast(void*)swigCPtr);
  }

  public void SetDataTypeToUnsignedLong() {
    vtkd_im.vtkPoints2D_SetDataTypeToUnsignedLong(cast(void*)swigCPtr);
  }

  public void SetDataTypeToFloat() {
    vtkd_im.vtkPoints2D_SetDataTypeToFloat(cast(void*)swigCPtr);
  }

  public void SetDataTypeToDouble() {
    vtkd_im.vtkPoints2D_SetDataTypeToDouble(cast(void*)swigCPtr);
  }

  public void* GetVoidPointer(int id) {
    auto ret = cast(void*)vtkd_im.vtkPoints2D_GetVoidPointer(cast(void*)swigCPtr, id);
    return ret;
  }

  public void Squeeze() {
    vtkd_im.vtkPoints2D_Squeeze(cast(void*)swigCPtr);
  }

  public void Reset() {
    vtkd_im.vtkPoints2D_Reset(cast(void*)swigCPtr);
  }

  public void DeepCopy(vtkPoints2D ad) {
    vtkd_im.vtkPoints2D_DeepCopy(cast(void*)swigCPtr, vtkPoints2D.swigGetCPtr(ad));
  }

  public void ShallowCopy(vtkPoints2D ad) {
    vtkd_im.vtkPoints2D_ShallowCopy(cast(void*)swigCPtr, vtkPoints2D.swigGetCPtr(ad));
  }

  public core.stdc.config.c_ulong GetActualMemorySize() {
    auto ret = vtkd_im.vtkPoints2D_GetActualMemorySize(cast(void*)swigCPtr);
    return ret;
  }

  public long GetNumberOfPoints() {
    auto ret = vtkd_im.vtkPoints2D_GetNumberOfPoints(cast(void*)swigCPtr);
    return ret;
  }

  public double* GetPoint(long id) {
    auto ret = cast(double*)vtkd_im.vtkPoints2D_GetPoint__SWIG_0(cast(void*)swigCPtr, id);
    return ret;
  }

  public void GetPoint(long id, SWIGTYPE_p_double.SWIGTYPE_p_double x) {
    vtkd_im.vtkPoints2D_GetPoint__SWIG_1(cast(void*)swigCPtr, id, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x));
  }

  public void SetPoint(long id, SWIGTYPE_p_float.SWIGTYPE_p_float x) {
    vtkd_im.vtkPoints2D_SetPoint__SWIG_0(cast(void*)swigCPtr, id, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(x));
  }

  public void SetPoint(long id, SWIGTYPE_p_double.SWIGTYPE_p_double x) {
    vtkd_im.vtkPoints2D_SetPoint__SWIG_1(cast(void*)swigCPtr, id, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x));
  }

  public void SetPoint(long id, double x, double y) {
    vtkd_im.vtkPoints2D_SetPoint__SWIG_2(cast(void*)swigCPtr, id, x, y);
  }

  public void InsertPoint(long id, SWIGTYPE_p_float.SWIGTYPE_p_float x) {
    vtkd_im.vtkPoints2D_InsertPoint__SWIG_0(cast(void*)swigCPtr, id, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(x));
  }

  public void InsertPoint(long id, SWIGTYPE_p_double.SWIGTYPE_p_double x) {
    vtkd_im.vtkPoints2D_InsertPoint__SWIG_1(cast(void*)swigCPtr, id, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x));
  }

  public void InsertPoint(long id, double x, double y) {
    vtkd_im.vtkPoints2D_InsertPoint__SWIG_2(cast(void*)swigCPtr, id, x, y);
  }

  public long InsertNextPoint(SWIGTYPE_p_float.SWIGTYPE_p_float x) {
    auto ret = vtkd_im.vtkPoints2D_InsertNextPoint__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(x));
    return ret;
  }

  public long InsertNextPoint(SWIGTYPE_p_double.SWIGTYPE_p_double x) {
    auto ret = vtkd_im.vtkPoints2D_InsertNextPoint__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x));
    return ret;
  }

  public long InsertNextPoint(double x, double y) {
    auto ret = vtkd_im.vtkPoints2D_InsertNextPoint__SWIG_2(cast(void*)swigCPtr, x, y);
    return ret;
  }

  public void RemovePoint(long id) {
    vtkd_im.vtkPoints2D_RemovePoint(cast(void*)swigCPtr, id);
  }

  public void SetNumberOfPoints(long number) {
    vtkd_im.vtkPoints2D_SetNumberOfPoints(cast(void*)swigCPtr, number);
  }

  public void GetPoints(vtkIdList.vtkIdList ptId, vtkPoints2D fp) {
    vtkd_im.vtkPoints2D_GetPoints(cast(void*)swigCPtr, vtkIdList.vtkIdList.swigGetCPtr(ptId), vtkPoints2D.swigGetCPtr(fp));
  }

  public void ComputeBounds() {
    vtkd_im.vtkPoints2D_ComputeBounds(cast(void*)swigCPtr);
  }

  public double* GetBounds() {
    auto ret = cast(double*)vtkd_im.vtkPoints2D_GetBounds__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetBounds(SWIGTYPE_p_double.SWIGTYPE_p_double bounds) {
    vtkd_im.vtkPoints2D_GetBounds__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
  }
}
