/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkSocketCollection;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkSocket;
static import vtkObject;
static import vtkCollection;

class vtkSocketCollection : vtkCollection.vtkCollection {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkSocketCollection_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkSocketCollection obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkSocketCollection New() {
    void* cPtr = vtkd_im.vtkSocketCollection_New();
    vtkSocketCollection ret = (cPtr is null) ? null : new vtkSocketCollection(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkSocketCollection_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkSocketCollection SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkSocketCollection_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkSocketCollection ret = (cPtr is null) ? null : new vtkSocketCollection(cPtr, false);
    return ret;
  }

  public vtkSocketCollection NewInstance() const {
    void* cPtr = vtkd_im.vtkSocketCollection_NewInstance(cast(void*)swigCPtr);
    vtkSocketCollection ret = (cPtr is null) ? null : new vtkSocketCollection(cPtr, false);
    return ret;
  }

  alias vtkCollection.vtkCollection.NewInstance NewInstance;

  public void AddItem(vtkSocket.vtkSocket soc) {
    vtkd_im.vtkSocketCollection_AddItem(cast(void*)swigCPtr, vtkSocket.vtkSocket.swigGetCPtr(soc));
  }

  alias vtkCollection.vtkCollection.AddItem AddItem;

  public int SelectSockets(core.stdc.config.c_ulong msec) {
    auto ret = vtkd_im.vtkSocketCollection_SelectSockets__SWIG_0(cast(void*)swigCPtr, msec);
    return ret;
  }

  public int SelectSockets() {
    auto ret = vtkd_im.vtkSocketCollection_SelectSockets__SWIG_1(cast(void*)swigCPtr);
    return ret;
  }

  public vtkSocket.vtkSocket GetLastSelectedSocket() {
    void* cPtr = vtkd_im.vtkSocketCollection_GetLastSelectedSocket(cast(void*)swigCPtr);
    vtkSocket.vtkSocket ret = (cPtr is null) ? null : new vtkSocket.vtkSocket(cPtr, false);
    return ret;
  }

  public void ReplaceItem(int i, vtkObject.vtkObject arg1) {
    vtkd_im.vtkSocketCollection_ReplaceItem(cast(void*)swigCPtr, i, vtkObject.vtkObject.swigGetCPtr(arg1));
  }

  alias vtkCollection.vtkCollection.ReplaceItem ReplaceItem;

  public void RemoveItem(int i) {
    vtkd_im.vtkSocketCollection_RemoveItem__SWIG_0(cast(void*)swigCPtr, i);
  }

  public void RemoveItem(vtkObject.vtkObject arg0) {
    vtkd_im.vtkSocketCollection_RemoveItem__SWIG_1(cast(void*)swigCPtr, vtkObject.vtkObject.swigGetCPtr(arg0));
  }

  alias vtkCollection.vtkCollection.RemoveItem RemoveItem;

  public void RemoveAllItems() {
    vtkd_im.vtkSocketCollection_RemoveAllItems(cast(void*)swigCPtr);
  }

  alias vtkCollection.vtkCollection.RemoveAllItems RemoveAllItems;
}
