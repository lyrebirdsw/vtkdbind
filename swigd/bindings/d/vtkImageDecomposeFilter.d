/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkImageDecomposeFilter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkImageIterateFilter;

class vtkImageDecomposeFilter : vtkImageIterateFilter.vtkImageIterateFilter {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkImageDecomposeFilter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkImageDecomposeFilter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkImageDecomposeFilter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkImageDecomposeFilter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkImageDecomposeFilter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkImageDecomposeFilter ret = (cPtr is null) ? null : new vtkImageDecomposeFilter(cPtr, false);
    return ret;
  }

  public vtkImageDecomposeFilter NewInstance() const {
    void* cPtr = vtkd_im.vtkImageDecomposeFilter_NewInstance(cast(void*)swigCPtr);
    vtkImageDecomposeFilter ret = (cPtr is null) ? null : new vtkImageDecomposeFilter(cPtr, false);
    return ret;
  }

  alias vtkImageIterateFilter.vtkImageIterateFilter.NewInstance NewInstance;

  public void SetDimensionality(int dim) {
    vtkd_im.vtkImageDecomposeFilter_SetDimensionality(cast(void*)swigCPtr, dim);
  }

  public int GetDimensionality() {
    auto ret = vtkd_im.vtkImageDecomposeFilter_GetDimensionality(cast(void*)swigCPtr);
    return ret;
  }

  public void PermuteIncrements(long* increments, long* inc0, long* inc1, long* inc2) {
    vtkd_im.vtkImageDecomposeFilter_PermuteIncrements(cast(void*)swigCPtr, cast(void*)increments, cast(void*)inc0, cast(void*)inc1, cast(void*)inc2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void PermuteExtent(int* extent, int* min0, int* max0, int* min1, int* max1, int* min2, int* max2) {
    vtkd_im.vtkImageDecomposeFilter_PermuteExtent(cast(void*)swigCPtr, cast(void*)extent, cast(void*)min0, cast(void*)max0, cast(void*)min1, cast(void*)max1, cast(void*)min2, cast(void*)max2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }
}
