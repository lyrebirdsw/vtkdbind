/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkProgrammableGlyphFilter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkAlgorithmOutput;
static import vtkPolyData;
static import SWIGTYPE_p_double;
static import vtkPointData;
static import vtkPolyDataAlgorithm;

class vtkProgrammableGlyphFilter : vtkPolyDataAlgorithm.vtkPolyDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkProgrammableGlyphFilter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkProgrammableGlyphFilter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkProgrammableGlyphFilter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkProgrammableGlyphFilter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkProgrammableGlyphFilter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkProgrammableGlyphFilter ret = (cPtr is null) ? null : new vtkProgrammableGlyphFilter(cPtr, false);
    return ret;
  }

  public vtkProgrammableGlyphFilter NewInstance() const {
    void* cPtr = vtkd_im.vtkProgrammableGlyphFilter_NewInstance(cast(void*)swigCPtr);
    vtkProgrammableGlyphFilter ret = (cPtr is null) ? null : new vtkProgrammableGlyphFilter(cPtr, false);
    return ret;
  }

  alias vtkPolyDataAlgorithm.vtkPolyDataAlgorithm.NewInstance NewInstance;

  public static vtkProgrammableGlyphFilter New() {
    void* cPtr = vtkd_im.vtkProgrammableGlyphFilter_New();
    vtkProgrammableGlyphFilter ret = (cPtr is null) ? null : new vtkProgrammableGlyphFilter(cPtr, false);
    return ret;
  }

  public void SetSourceConnection(vtkAlgorithmOutput.vtkAlgorithmOutput output) {
    vtkd_im.vtkProgrammableGlyphFilter_SetSourceConnection(cast(void*)swigCPtr, vtkAlgorithmOutput.vtkAlgorithmOutput.swigGetCPtr(output));
  }

  public void SetSourceData(vtkPolyData.vtkPolyData source) {
    vtkd_im.vtkProgrammableGlyphFilter_SetSourceData(cast(void*)swigCPtr, vtkPolyData.vtkPolyData.swigGetCPtr(source));
  }

  public vtkPolyData.vtkPolyData GetSource() {
    void* cPtr = vtkd_im.vtkProgrammableGlyphFilter_GetSource(cast(void*)swigCPtr);
    vtkPolyData.vtkPolyData ret = (cPtr is null) ? null : new vtkPolyData.vtkPolyData(cPtr, false);
    return ret;
  }

  public void SetGlyphMethod(vtkd_im.SwigExternC!(void function(void*)) f, void* arg) {
    vtkd_im.vtkProgrammableGlyphFilter_SetGlyphMethod(cast(void*)swigCPtr, cast(void*)f, cast(void*)arg);
  }

  public void SetGlyphMethodArgDelete(vtkd_im.SwigExternC!(void function(void*)) f) {
    vtkd_im.vtkProgrammableGlyphFilter_SetGlyphMethodArgDelete(cast(void*)swigCPtr, cast(void*)f);
  }

  public long GetPointId() {
    auto ret = vtkd_im.vtkProgrammableGlyphFilter_GetPointId(cast(void*)swigCPtr);
    return ret;
  }

  public double* GetPoint() {
    auto ret = cast(double*)vtkd_im.vtkProgrammableGlyphFilter_GetPoint__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetPoint(double* _arg1, double* _arg2, double* _arg3) {
    vtkd_im.vtkProgrammableGlyphFilter_GetPoint__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetPoint(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkProgrammableGlyphFilter_GetPoint__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public vtkPointData.vtkPointData GetPointData() {
    void* cPtr = vtkd_im.vtkProgrammableGlyphFilter_GetPointData(cast(void*)swigCPtr);
    vtkPointData.vtkPointData ret = (cPtr is null) ? null : new vtkPointData.vtkPointData(cPtr, false);
    return ret;
  }

  public void SetColorMode(int _arg) {
    vtkd_im.vtkProgrammableGlyphFilter_SetColorMode(cast(void*)swigCPtr, _arg);
  }

  public int GetColorMode() {
    auto ret = vtkd_im.vtkProgrammableGlyphFilter_GetColorMode(cast(void*)swigCPtr);
    return ret;
  }

  public void SetColorModeToColorByInput() {
    vtkd_im.vtkProgrammableGlyphFilter_SetColorModeToColorByInput(cast(void*)swigCPtr);
  }

  public void SetColorModeToColorBySource() {
    vtkd_im.vtkProgrammableGlyphFilter_SetColorModeToColorBySource(cast(void*)swigCPtr);
  }

  public string GetColorModeAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkProgrammableGlyphFilter_GetColorModeAsString(cast(void*)swigCPtr));
    return ret;
  }
}
