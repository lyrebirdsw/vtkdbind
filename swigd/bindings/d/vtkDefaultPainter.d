/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkDefaultPainter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkScalarsToColorsPainter;
static import vtkClipPlanesPainter;
static import vtkDisplayListPainter;
static import vtkCompositePainter;
static import vtkCoincidentTopologyResolutionPainter;
static import vtkLightingPainter;
static import vtkRepresentationPainter;
static import vtkPainter;

class vtkDefaultPainter : vtkPainter.vtkPainter {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkDefaultPainter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkDefaultPainter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkDefaultPainter New() {
    void* cPtr = vtkd_im.vtkDefaultPainter_New();
    vtkDefaultPainter ret = (cPtr is null) ? null : new vtkDefaultPainter(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkDefaultPainter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkDefaultPainter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkDefaultPainter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkDefaultPainter ret = (cPtr is null) ? null : new vtkDefaultPainter(cPtr, false);
    return ret;
  }

  public vtkDefaultPainter NewInstance() const {
    void* cPtr = vtkd_im.vtkDefaultPainter_NewInstance(cast(void*)swigCPtr);
    vtkDefaultPainter ret = (cPtr is null) ? null : new vtkDefaultPainter(cPtr, false);
    return ret;
  }

  alias vtkPainter.vtkPainter.NewInstance NewInstance;

  public void SetScalarsToColorsPainter(vtkScalarsToColorsPainter.vtkScalarsToColorsPainter arg0) {
    vtkd_im.vtkDefaultPainter_SetScalarsToColorsPainter(cast(void*)swigCPtr, vtkScalarsToColorsPainter.vtkScalarsToColorsPainter.swigGetCPtr(arg0));
  }

  public vtkScalarsToColorsPainter.vtkScalarsToColorsPainter GetScalarsToColorsPainter() {
    void* cPtr = vtkd_im.vtkDefaultPainter_GetScalarsToColorsPainter(cast(void*)swigCPtr);
    vtkScalarsToColorsPainter.vtkScalarsToColorsPainter ret = (cPtr is null) ? null : new vtkScalarsToColorsPainter.vtkScalarsToColorsPainter(cPtr, false);
    return ret;
  }

  public void SetClipPlanesPainter(vtkClipPlanesPainter.vtkClipPlanesPainter arg0) {
    vtkd_im.vtkDefaultPainter_SetClipPlanesPainter(cast(void*)swigCPtr, vtkClipPlanesPainter.vtkClipPlanesPainter.swigGetCPtr(arg0));
  }

  public vtkClipPlanesPainter.vtkClipPlanesPainter GetClipPlanesPainter() {
    void* cPtr = vtkd_im.vtkDefaultPainter_GetClipPlanesPainter(cast(void*)swigCPtr);
    vtkClipPlanesPainter.vtkClipPlanesPainter ret = (cPtr is null) ? null : new vtkClipPlanesPainter.vtkClipPlanesPainter(cPtr, false);
    return ret;
  }

  public void SetDisplayListPainter(vtkDisplayListPainter.vtkDisplayListPainter arg0) {
    vtkd_im.vtkDefaultPainter_SetDisplayListPainter(cast(void*)swigCPtr, vtkDisplayListPainter.vtkDisplayListPainter.swigGetCPtr(arg0));
  }

  public vtkDisplayListPainter.vtkDisplayListPainter GetDisplayListPainter() {
    void* cPtr = vtkd_im.vtkDefaultPainter_GetDisplayListPainter(cast(void*)swigCPtr);
    vtkDisplayListPainter.vtkDisplayListPainter ret = (cPtr is null) ? null : new vtkDisplayListPainter.vtkDisplayListPainter(cPtr, false);
    return ret;
  }

  public void SetCompositePainter(vtkCompositePainter.vtkCompositePainter arg0) {
    vtkd_im.vtkDefaultPainter_SetCompositePainter(cast(void*)swigCPtr, vtkCompositePainter.vtkCompositePainter.swigGetCPtr(arg0));
  }

  public vtkCompositePainter.vtkCompositePainter GetCompositePainter() {
    void* cPtr = vtkd_im.vtkDefaultPainter_GetCompositePainter(cast(void*)swigCPtr);
    vtkCompositePainter.vtkCompositePainter ret = (cPtr is null) ? null : new vtkCompositePainter.vtkCompositePainter(cPtr, false);
    return ret;
  }

  public void SetCoincidentTopologyResolutionPainter(vtkCoincidentTopologyResolutionPainter.vtkCoincidentTopologyResolutionPainter arg0) {
    vtkd_im.vtkDefaultPainter_SetCoincidentTopologyResolutionPainter(cast(void*)swigCPtr, vtkCoincidentTopologyResolutionPainter.vtkCoincidentTopologyResolutionPainter.swigGetCPtr(arg0));
  }

  public vtkCoincidentTopologyResolutionPainter.vtkCoincidentTopologyResolutionPainter GetCoincidentTopologyResolutionPainter() {
    void* cPtr = vtkd_im.vtkDefaultPainter_GetCoincidentTopologyResolutionPainter(cast(void*)swigCPtr);
    vtkCoincidentTopologyResolutionPainter.vtkCoincidentTopologyResolutionPainter ret = (cPtr is null) ? null : new vtkCoincidentTopologyResolutionPainter.vtkCoincidentTopologyResolutionPainter(cPtr, false);
    return ret;
  }

  public void SetLightingPainter(vtkLightingPainter.vtkLightingPainter arg0) {
    vtkd_im.vtkDefaultPainter_SetLightingPainter(cast(void*)swigCPtr, vtkLightingPainter.vtkLightingPainter.swigGetCPtr(arg0));
  }

  public vtkLightingPainter.vtkLightingPainter GetLightingPainter() {
    void* cPtr = vtkd_im.vtkDefaultPainter_GetLightingPainter(cast(void*)swigCPtr);
    vtkLightingPainter.vtkLightingPainter ret = (cPtr is null) ? null : new vtkLightingPainter.vtkLightingPainter(cPtr, false);
    return ret;
  }

  public void SetRepresentationPainter(vtkRepresentationPainter.vtkRepresentationPainter arg0) {
    vtkd_im.vtkDefaultPainter_SetRepresentationPainter(cast(void*)swigCPtr, vtkRepresentationPainter.vtkRepresentationPainter.swigGetCPtr(arg0));
  }

  public vtkRepresentationPainter.vtkRepresentationPainter GetRepresentationPainter() {
    void* cPtr = vtkd_im.vtkDefaultPainter_GetRepresentationPainter(cast(void*)swigCPtr);
    vtkRepresentationPainter.vtkRepresentationPainter ret = (cPtr is null) ? null : new vtkRepresentationPainter.vtkRepresentationPainter(cPtr, false);
    return ret;
  }
}
