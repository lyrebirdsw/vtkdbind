/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkBSPIntersections;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkBSPCuts;
static import SWIGTYPE_p_double;
static import vtkCell;
static import vtkObject;

class vtkBSPIntersections : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkBSPIntersections_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkBSPIntersections obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkBSPIntersections_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkBSPIntersections SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkBSPIntersections_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkBSPIntersections ret = (cPtr is null) ? null : new vtkBSPIntersections(cPtr, false);
    return ret;
  }

  public vtkBSPIntersections NewInstance() const {
    void* cPtr = vtkd_im.vtkBSPIntersections_NewInstance(cast(void*)swigCPtr);
    vtkBSPIntersections ret = (cPtr is null) ? null : new vtkBSPIntersections(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public static vtkBSPIntersections New() {
    void* cPtr = vtkd_im.vtkBSPIntersections_New();
    vtkBSPIntersections ret = (cPtr is null) ? null : new vtkBSPIntersections(cPtr, false);
    return ret;
  }

  public void SetCuts(vtkBSPCuts.vtkBSPCuts cuts) {
    vtkd_im.vtkBSPIntersections_SetCuts(cast(void*)swigCPtr, vtkBSPCuts.vtkBSPCuts.swigGetCPtr(cuts));
  }

  public vtkBSPCuts.vtkBSPCuts GetCuts() {
    void* cPtr = vtkd_im.vtkBSPIntersections_GetCuts(cast(void*)swigCPtr);
    vtkBSPCuts.vtkBSPCuts ret = (cPtr is null) ? null : new vtkBSPCuts.vtkBSPCuts(cPtr, false);
    return ret;
  }

  public int GetBounds(double* bounds) {
    auto ret = vtkd_im.vtkBSPIntersections_GetBounds(cast(void*)swigCPtr, cast(void*)bounds);
    return ret;
  }

  public int GetNumberOfRegions() {
    auto ret = vtkd_im.vtkBSPIntersections_GetNumberOfRegions(cast(void*)swigCPtr);
    return ret;
  }

  public int GetRegionBounds(int regionID, SWIGTYPE_p_double.SWIGTYPE_p_double bounds) {
    auto ret = vtkd_im.vtkBSPIntersections_GetRegionBounds(cast(void*)swigCPtr, regionID, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
    return ret;
  }

  public int GetRegionDataBounds(int regionID, SWIGTYPE_p_double.SWIGTYPE_p_double bounds) {
    auto ret = vtkd_im.vtkBSPIntersections_GetRegionDataBounds(cast(void*)swigCPtr, regionID, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
    return ret;
  }

  public int IntersectsBox(int regionId, double* x) {
    auto ret = vtkd_im.vtkBSPIntersections_IntersectsBox__SWIG_0(cast(void*)swigCPtr, regionId, cast(void*)x);
    return ret;
  }

  public int IntersectsBox(int regionId, double xmin, double xmax, double ymin, double ymax, double zmin, double zmax) {
    auto ret = vtkd_im.vtkBSPIntersections_IntersectsBox__SWIG_1(cast(void*)swigCPtr, regionId, xmin, xmax, ymin, ymax, zmin, zmax);
    return ret;
  }

  public int IntersectsBox(int* ids, int len, double* x) {
    auto ret = vtkd_im.vtkBSPIntersections_IntersectsBox__SWIG_2(cast(void*)swigCPtr, cast(void*)ids, len, cast(void*)x);
    return ret;
  }

  public int IntersectsBox(int* ids, int len, double x0, double x1, double y0, double y1, double z0, double z1) {
    auto ret = vtkd_im.vtkBSPIntersections_IntersectsBox__SWIG_3(cast(void*)swigCPtr, cast(void*)ids, len, x0, x1, y0, y1, z0, z1);
    return ret;
  }

  public int IntersectsSphere2(int regionId, double x, double y, double z, double rSquared) {
    auto ret = vtkd_im.vtkBSPIntersections_IntersectsSphere2__SWIG_0(cast(void*)swigCPtr, regionId, x, y, z, rSquared);
    return ret;
  }

  public int IntersectsSphere2(int* ids, int len, double x, double y, double z, double rSquared) {
    auto ret = vtkd_im.vtkBSPIntersections_IntersectsSphere2__SWIG_1(cast(void*)swigCPtr, cast(void*)ids, len, x, y, z, rSquared);
    return ret;
  }

  public int IntersectsCell(int regionId, vtkCell.vtkCell cell, int cellRegion) {
    auto ret = vtkd_im.vtkBSPIntersections_IntersectsCell__SWIG_0(cast(void*)swigCPtr, regionId, vtkCell.vtkCell.swigGetCPtr(cell), cellRegion);
    return ret;
  }

  public int IntersectsCell(int regionId, vtkCell.vtkCell cell) {
    auto ret = vtkd_im.vtkBSPIntersections_IntersectsCell__SWIG_1(cast(void*)swigCPtr, regionId, vtkCell.vtkCell.swigGetCPtr(cell));
    return ret;
  }

  public int IntersectsCell(int* ids, int len, vtkCell.vtkCell cell, int cellRegion) {
    auto ret = vtkd_im.vtkBSPIntersections_IntersectsCell__SWIG_2(cast(void*)swigCPtr, cast(void*)ids, len, vtkCell.vtkCell.swigGetCPtr(cell), cellRegion);
    return ret;
  }

  public int IntersectsCell(int* ids, int len, vtkCell.vtkCell cell) {
    auto ret = vtkd_im.vtkBSPIntersections_IntersectsCell__SWIG_3(cast(void*)swigCPtr, cast(void*)ids, len, vtkCell.vtkCell.swigGetCPtr(cell));
    return ret;
  }

  public int GetComputeIntersectionsUsingDataBounds() {
    auto ret = vtkd_im.vtkBSPIntersections_GetComputeIntersectionsUsingDataBounds(cast(void*)swigCPtr);
    return ret;
  }

  public void SetComputeIntersectionsUsingDataBounds(int c) {
    vtkd_im.vtkBSPIntersections_SetComputeIntersectionsUsingDataBounds(cast(void*)swigCPtr, c);
  }

  public void ComputeIntersectionsUsingDataBoundsOn() {
    vtkd_im.vtkBSPIntersections_ComputeIntersectionsUsingDataBoundsOn(cast(void*)swigCPtr);
  }

  public void ComputeIntersectionsUsingDataBoundsOff() {
    vtkd_im.vtkBSPIntersections_ComputeIntersectionsUsingDataBoundsOff(cast(void*)swigCPtr);
  }
}
