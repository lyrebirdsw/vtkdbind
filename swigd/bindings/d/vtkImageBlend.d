/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkImageBlend;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkAlgorithmOutput;
static import vtkDataObject;
static import vtkImageStencilData;
static import vtkThreadedImageAlgorithm;

class vtkImageBlend : vtkThreadedImageAlgorithm.vtkThreadedImageAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkImageBlend_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkImageBlend obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkImageBlend New() {
    void* cPtr = vtkd_im.vtkImageBlend_New();
    vtkImageBlend ret = (cPtr is null) ? null : new vtkImageBlend(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkImageBlend_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkImageBlend SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkImageBlend_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkImageBlend ret = (cPtr is null) ? null : new vtkImageBlend(cPtr, false);
    return ret;
  }

  public vtkImageBlend NewInstance() const {
    void* cPtr = vtkd_im.vtkImageBlend_NewInstance(cast(void*)swigCPtr);
    vtkImageBlend ret = (cPtr is null) ? null : new vtkImageBlend(cPtr, false);
    return ret;
  }

  alias vtkThreadedImageAlgorithm.vtkThreadedImageAlgorithm.NewInstance NewInstance;

  public void ReplaceNthInputConnection(int idx, vtkAlgorithmOutput.vtkAlgorithmOutput input) {
    vtkd_im.vtkImageBlend_ReplaceNthInputConnection(cast(void*)swigCPtr, idx, vtkAlgorithmOutput.vtkAlgorithmOutput.swigGetCPtr(input));
  }

  public void SetInputData(int num, vtkDataObject.vtkDataObject input) {
    vtkd_im.vtkImageBlend_SetInputData__SWIG_0(cast(void*)swigCPtr, num, vtkDataObject.vtkDataObject.swigGetCPtr(input));
  }

  public void SetInputData(vtkDataObject.vtkDataObject input) {
    vtkd_im.vtkImageBlend_SetInputData__SWIG_1(cast(void*)swigCPtr, vtkDataObject.vtkDataObject.swigGetCPtr(input));
  }

  public vtkDataObject.vtkDataObject GetInput(int num) {
    void* cPtr = vtkd_im.vtkImageBlend_GetInput__SWIG_0(cast(void*)swigCPtr, num);
    vtkDataObject.vtkDataObject ret = (cPtr is null) ? null : new vtkDataObject.vtkDataObject(cPtr, false);
    return ret;
  }

  public vtkDataObject.vtkDataObject GetInput() {
    void* cPtr = vtkd_im.vtkImageBlend_GetInput__SWIG_1(cast(void*)swigCPtr);
    vtkDataObject.vtkDataObject ret = (cPtr is null) ? null : new vtkDataObject.vtkDataObject(cPtr, false);
    return ret;
  }

  public int GetNumberOfInputs() {
    auto ret = vtkd_im.vtkImageBlend_GetNumberOfInputs(cast(void*)swigCPtr);
    return ret;
  }

  public void SetOpacity(int idx, double opacity) {
    vtkd_im.vtkImageBlend_SetOpacity(cast(void*)swigCPtr, idx, opacity);
  }

  public double GetOpacity(int idx) {
    auto ret = vtkd_im.vtkImageBlend_GetOpacity(cast(void*)swigCPtr, idx);
    return ret;
  }

  public void SetStencilConnection(vtkAlgorithmOutput.vtkAlgorithmOutput algOutput) {
    vtkd_im.vtkImageBlend_SetStencilConnection(cast(void*)swigCPtr, vtkAlgorithmOutput.vtkAlgorithmOutput.swigGetCPtr(algOutput));
  }

  public void SetStencilData(vtkImageStencilData.vtkImageStencilData stencil) {
    vtkd_im.vtkImageBlend_SetStencilData(cast(void*)swigCPtr, vtkImageStencilData.vtkImageStencilData.swigGetCPtr(stencil));
  }

  public vtkImageStencilData.vtkImageStencilData GetStencil() {
    void* cPtr = vtkd_im.vtkImageBlend_GetStencil(cast(void*)swigCPtr);
    vtkImageStencilData.vtkImageStencilData ret = (cPtr is null) ? null : new vtkImageStencilData.vtkImageStencilData(cPtr, false);
    return ret;
  }

  public void SetBlendMode(int _arg) {
    vtkd_im.vtkImageBlend_SetBlendMode(cast(void*)swigCPtr, _arg);
  }

  public int GetBlendModeMinValue() {
    auto ret = vtkd_im.vtkImageBlend_GetBlendModeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetBlendModeMaxValue() {
    auto ret = vtkd_im.vtkImageBlend_GetBlendModeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetBlendMode() {
    auto ret = vtkd_im.vtkImageBlend_GetBlendMode(cast(void*)swigCPtr);
    return ret;
  }

  public void SetBlendModeToNormal() {
    vtkd_im.vtkImageBlend_SetBlendModeToNormal(cast(void*)swigCPtr);
  }

  public void SetBlendModeToCompound() {
    vtkd_im.vtkImageBlend_SetBlendModeToCompound(cast(void*)swigCPtr);
  }

  public string GetBlendModeAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkImageBlend_GetBlendModeAsString(cast(void*)swigCPtr));
    return ret;
  }

  public void SetCompoundThreshold(double _arg) {
    vtkd_im.vtkImageBlend_SetCompoundThreshold(cast(void*)swigCPtr, _arg);
  }

  public double GetCompoundThreshold() {
    auto ret = vtkd_im.vtkImageBlend_GetCompoundThreshold(cast(void*)swigCPtr);
    return ret;
  }
}
