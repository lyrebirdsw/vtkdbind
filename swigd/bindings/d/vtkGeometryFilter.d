/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkGeometryFilter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkIncrementalPointLocator;
static import vtkPolyDataAlgorithm;

class vtkGeometryFilter : vtkPolyDataAlgorithm.vtkPolyDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkGeometryFilter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkGeometryFilter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkGeometryFilter New() {
    void* cPtr = vtkd_im.vtkGeometryFilter_New();
    vtkGeometryFilter ret = (cPtr is null) ? null : new vtkGeometryFilter(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkGeometryFilter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkGeometryFilter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkGeometryFilter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkGeometryFilter ret = (cPtr is null) ? null : new vtkGeometryFilter(cPtr, false);
    return ret;
  }

  public vtkGeometryFilter NewInstance() const {
    void* cPtr = vtkd_im.vtkGeometryFilter_NewInstance(cast(void*)swigCPtr);
    vtkGeometryFilter ret = (cPtr is null) ? null : new vtkGeometryFilter(cPtr, false);
    return ret;
  }

  alias vtkPolyDataAlgorithm.vtkPolyDataAlgorithm.NewInstance NewInstance;

  public void SetPointClipping(int _arg) {
    vtkd_im.vtkGeometryFilter_SetPointClipping(cast(void*)swigCPtr, _arg);
  }

  public int GetPointClipping() {
    auto ret = vtkd_im.vtkGeometryFilter_GetPointClipping(cast(void*)swigCPtr);
    return ret;
  }

  public void PointClippingOn() {
    vtkd_im.vtkGeometryFilter_PointClippingOn(cast(void*)swigCPtr);
  }

  public void PointClippingOff() {
    vtkd_im.vtkGeometryFilter_PointClippingOff(cast(void*)swigCPtr);
  }

  public void SetCellClipping(int _arg) {
    vtkd_im.vtkGeometryFilter_SetCellClipping(cast(void*)swigCPtr, _arg);
  }

  public int GetCellClipping() {
    auto ret = vtkd_im.vtkGeometryFilter_GetCellClipping(cast(void*)swigCPtr);
    return ret;
  }

  public void CellClippingOn() {
    vtkd_im.vtkGeometryFilter_CellClippingOn(cast(void*)swigCPtr);
  }

  public void CellClippingOff() {
    vtkd_im.vtkGeometryFilter_CellClippingOff(cast(void*)swigCPtr);
  }

  public void SetExtentClipping(int _arg) {
    vtkd_im.vtkGeometryFilter_SetExtentClipping(cast(void*)swigCPtr, _arg);
  }

  public int GetExtentClipping() {
    auto ret = vtkd_im.vtkGeometryFilter_GetExtentClipping(cast(void*)swigCPtr);
    return ret;
  }

  public void ExtentClippingOn() {
    vtkd_im.vtkGeometryFilter_ExtentClippingOn(cast(void*)swigCPtr);
  }

  public void ExtentClippingOff() {
    vtkd_im.vtkGeometryFilter_ExtentClippingOff(cast(void*)swigCPtr);
  }

  public void SetPointMinimum(long _arg) {
    vtkd_im.vtkGeometryFilter_SetPointMinimum(cast(void*)swigCPtr, _arg);
  }

  public long GetPointMinimumMinValue() {
    auto ret = vtkd_im.vtkGeometryFilter_GetPointMinimumMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public long GetPointMinimumMaxValue() {
    auto ret = vtkd_im.vtkGeometryFilter_GetPointMinimumMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public long GetPointMinimum() {
    auto ret = vtkd_im.vtkGeometryFilter_GetPointMinimum(cast(void*)swigCPtr);
    return ret;
  }

  public void SetPointMaximum(long _arg) {
    vtkd_im.vtkGeometryFilter_SetPointMaximum(cast(void*)swigCPtr, _arg);
  }

  public long GetPointMaximumMinValue() {
    auto ret = vtkd_im.vtkGeometryFilter_GetPointMaximumMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public long GetPointMaximumMaxValue() {
    auto ret = vtkd_im.vtkGeometryFilter_GetPointMaximumMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public long GetPointMaximum() {
    auto ret = vtkd_im.vtkGeometryFilter_GetPointMaximum(cast(void*)swigCPtr);
    return ret;
  }

  public void SetCellMinimum(long _arg) {
    vtkd_im.vtkGeometryFilter_SetCellMinimum(cast(void*)swigCPtr, _arg);
  }

  public long GetCellMinimumMinValue() {
    auto ret = vtkd_im.vtkGeometryFilter_GetCellMinimumMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public long GetCellMinimumMaxValue() {
    auto ret = vtkd_im.vtkGeometryFilter_GetCellMinimumMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public long GetCellMinimum() {
    auto ret = vtkd_im.vtkGeometryFilter_GetCellMinimum(cast(void*)swigCPtr);
    return ret;
  }

  public void SetCellMaximum(long _arg) {
    vtkd_im.vtkGeometryFilter_SetCellMaximum(cast(void*)swigCPtr, _arg);
  }

  public long GetCellMaximumMinValue() {
    auto ret = vtkd_im.vtkGeometryFilter_GetCellMaximumMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public long GetCellMaximumMaxValue() {
    auto ret = vtkd_im.vtkGeometryFilter_GetCellMaximumMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public long GetCellMaximum() {
    auto ret = vtkd_im.vtkGeometryFilter_GetCellMaximum(cast(void*)swigCPtr);
    return ret;
  }

  public void SetExtent(double xMin, double xMax, double yMin, double yMax, double zMin, double zMax) {
    vtkd_im.vtkGeometryFilter_SetExtent__SWIG_0(cast(void*)swigCPtr, xMin, xMax, yMin, yMax, zMin, zMax);
  }

  public void SetExtent(SWIGTYPE_p_double.SWIGTYPE_p_double extent) {
    vtkd_im.vtkGeometryFilter_SetExtent__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(extent));
  }

  public double* GetExtent() {
    auto ret = cast(double*)vtkd_im.vtkGeometryFilter_GetExtent(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMerging(int _arg) {
    vtkd_im.vtkGeometryFilter_SetMerging(cast(void*)swigCPtr, _arg);
  }

  public int GetMerging() {
    auto ret = vtkd_im.vtkGeometryFilter_GetMerging(cast(void*)swigCPtr);
    return ret;
  }

  public void MergingOn() {
    vtkd_im.vtkGeometryFilter_MergingOn(cast(void*)swigCPtr);
  }

  public void MergingOff() {
    vtkd_im.vtkGeometryFilter_MergingOff(cast(void*)swigCPtr);
  }

  public void SetLocator(vtkIncrementalPointLocator.vtkIncrementalPointLocator locator) {
    vtkd_im.vtkGeometryFilter_SetLocator(cast(void*)swigCPtr, vtkIncrementalPointLocator.vtkIncrementalPointLocator.swigGetCPtr(locator));
  }

  public vtkIncrementalPointLocator.vtkIncrementalPointLocator GetLocator() {
    void* cPtr = vtkd_im.vtkGeometryFilter_GetLocator(cast(void*)swigCPtr);
    vtkIncrementalPointLocator.vtkIncrementalPointLocator ret = (cPtr is null) ? null : new vtkIncrementalPointLocator.vtkIncrementalPointLocator(cPtr, false);
    return ret;
  }

  public void CreateDefaultLocator() {
    vtkd_im.vtkGeometryFilter_CreateDefaultLocator(cast(void*)swigCPtr);
  }
}
