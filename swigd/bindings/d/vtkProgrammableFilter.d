/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkProgrammableFilter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkPolyData;
static import vtkStructuredPoints;
static import vtkStructuredGrid;
static import vtkUnstructuredGrid;
static import vtkRectilinearGrid;
static import vtkGraph;
static import vtkTable;
static import vtkPassInputTypeAlgorithm;

class vtkProgrammableFilter : vtkPassInputTypeAlgorithm.vtkPassInputTypeAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkProgrammableFilter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkProgrammableFilter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkProgrammableFilter New() {
    void* cPtr = vtkd_im.vtkProgrammableFilter_New();
    vtkProgrammableFilter ret = (cPtr is null) ? null : new vtkProgrammableFilter(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkProgrammableFilter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkProgrammableFilter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkProgrammableFilter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkProgrammableFilter ret = (cPtr is null) ? null : new vtkProgrammableFilter(cPtr, false);
    return ret;
  }

  public vtkProgrammableFilter NewInstance() const {
    void* cPtr = vtkd_im.vtkProgrammableFilter_NewInstance(cast(void*)swigCPtr);
    vtkProgrammableFilter ret = (cPtr is null) ? null : new vtkProgrammableFilter(cPtr, false);
    return ret;
  }

  alias vtkPassInputTypeAlgorithm.vtkPassInputTypeAlgorithm.NewInstance NewInstance;

  public void SetExecuteMethod(vtkd_im.SwigExternC!(void function(void*)) f, void* arg) {
    vtkd_im.vtkProgrammableFilter_SetExecuteMethod(cast(void*)swigCPtr, cast(void*)f, cast(void*)arg);
  }

  public void SetExecuteMethodArgDelete(vtkd_im.SwigExternC!(void function(void*)) f) {
    vtkd_im.vtkProgrammableFilter_SetExecuteMethodArgDelete(cast(void*)swigCPtr, cast(void*)f);
  }

  public vtkPolyData.vtkPolyData GetPolyDataInput() {
    void* cPtr = vtkd_im.vtkProgrammableFilter_GetPolyDataInput(cast(void*)swigCPtr);
    vtkPolyData.vtkPolyData ret = (cPtr is null) ? null : new vtkPolyData.vtkPolyData(cPtr, false);
    return ret;
  }

  public vtkStructuredPoints.vtkStructuredPoints GetStructuredPointsInput() {
    void* cPtr = vtkd_im.vtkProgrammableFilter_GetStructuredPointsInput(cast(void*)swigCPtr);
    vtkStructuredPoints.vtkStructuredPoints ret = (cPtr is null) ? null : new vtkStructuredPoints.vtkStructuredPoints(cPtr, false);
    return ret;
  }

  public vtkStructuredGrid.vtkStructuredGrid GetStructuredGridInput() {
    void* cPtr = vtkd_im.vtkProgrammableFilter_GetStructuredGridInput(cast(void*)swigCPtr);
    vtkStructuredGrid.vtkStructuredGrid ret = (cPtr is null) ? null : new vtkStructuredGrid.vtkStructuredGrid(cPtr, false);
    return ret;
  }

  public vtkUnstructuredGrid.vtkUnstructuredGrid GetUnstructuredGridInput() {
    void* cPtr = vtkd_im.vtkProgrammableFilter_GetUnstructuredGridInput(cast(void*)swigCPtr);
    vtkUnstructuredGrid.vtkUnstructuredGrid ret = (cPtr is null) ? null : new vtkUnstructuredGrid.vtkUnstructuredGrid(cPtr, false);
    return ret;
  }

  public vtkRectilinearGrid.vtkRectilinearGrid GetRectilinearGridInput() {
    void* cPtr = vtkd_im.vtkProgrammableFilter_GetRectilinearGridInput(cast(void*)swigCPtr);
    vtkRectilinearGrid.vtkRectilinearGrid ret = (cPtr is null) ? null : new vtkRectilinearGrid.vtkRectilinearGrid(cPtr, false);
    return ret;
  }

  public vtkGraph.vtkGraph GetGraphInput() {
    void* cPtr = vtkd_im.vtkProgrammableFilter_GetGraphInput(cast(void*)swigCPtr);
    vtkGraph.vtkGraph ret = (cPtr is null) ? null : new vtkGraph.vtkGraph(cPtr, false);
    return ret;
  }

  public vtkTable.vtkTable GetTableInput() {
    void* cPtr = vtkd_im.vtkProgrammableFilter_GetTableInput(cast(void*)swigCPtr);
    vtkTable.vtkTable ret = (cPtr is null) ? null : new vtkTable.vtkTable(cPtr, false);
    return ret;
  }

  public void SetCopyArrays(bool _arg) {
    vtkd_im.vtkProgrammableFilter_SetCopyArrays(cast(void*)swigCPtr, _arg);
  }

  public bool GetCopyArrays() {
    bool ret = vtkd_im.vtkProgrammableFilter_GetCopyArrays(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void CopyArraysOn() {
    vtkd_im.vtkProgrammableFilter_CopyArraysOn(cast(void*)swigCPtr);
  }

  public void CopyArraysOff() {
    vtkd_im.vtkProgrammableFilter_CopyArraysOff(cast(void*)swigCPtr);
  }
}
