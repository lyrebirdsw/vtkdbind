/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkShader;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkActor;
static import vtkRenderer;
static import vtkWindow;
static import vtkXMLShader;
static import vtkObject;

class vtkShader : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkShader_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkShader obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkShader_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkShader SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkShader_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkShader ret = (cPtr is null) ? null : new vtkShader(cPtr, false);
    return ret;
  }

  public vtkShader NewInstance() const {
    void* cPtr = vtkd_im.vtkShader_NewInstance(cast(void*)swigCPtr);
    vtkShader ret = (cPtr is null) ? null : new vtkShader(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public int Compile() {
    auto ret = vtkd_im.vtkShader_Compile(cast(void*)swigCPtr);
    return ret;
  }

  public void PassShaderVariables(vtkActor.vtkActor actor, vtkRenderer.vtkRenderer ren) {
    vtkd_im.vtkShader_PassShaderVariables(cast(void*)swigCPtr, vtkActor.vtkActor.swigGetCPtr(actor), vtkRenderer.vtkRenderer.swigGetCPtr(ren));
  }

  public void Bind() {
    vtkd_im.vtkShader_Bind(cast(void*)swigCPtr);
  }

  public void Unbind() {
    vtkd_im.vtkShader_Unbind(cast(void*)swigCPtr);
  }

  public void ReleaseGraphicsResources(vtkWindow.vtkWindow arg0) {
    vtkd_im.vtkShader_ReleaseGraphicsResources(cast(void*)swigCPtr, vtkWindow.vtkWindow.swigGetCPtr(arg0));
  }

  public void SetXMLShader(vtkXMLShader.vtkXMLShader arg0) {
    vtkd_im.vtkShader_SetXMLShader(cast(void*)swigCPtr, vtkXMLShader.vtkXMLShader.swigGetCPtr(arg0));
  }

  public vtkXMLShader.vtkXMLShader GetXMLShader() {
    void* cPtr = vtkd_im.vtkShader_GetXMLShader(cast(void*)swigCPtr);
    vtkXMLShader.vtkXMLShader ret = (cPtr is null) ? null : new vtkXMLShader.vtkXMLShader(cPtr, false);
    return ret;
  }

  public int HasShaderVariable(string name) {
    auto ret = vtkd_im.vtkShader_HasShaderVariable(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
    return ret;
  }

  public void AddShaderVariable(string name, int num_of_elements, int* values) {
    vtkd_im.vtkShader_AddShaderVariable__SWIG_0(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), num_of_elements, cast(void*)values);
  }

  public void AddShaderVariable(string name, int num_of_elements, float* values) {
    vtkd_im.vtkShader_AddShaderVariable__SWIG_1(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), num_of_elements, cast(void*)values);
  }

  public void AddShaderVariable(string name, int num_of_elements, double* values) {
    vtkd_im.vtkShader_AddShaderVariable__SWIG_2(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), num_of_elements, cast(void*)values);
  }

  public int GetShaderVariableSize(string name) {
    auto ret = vtkd_im.vtkShader_GetShaderVariableSize(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
    return ret;
  }

  public int GetShaderVariableType(string name) {
    auto ret = vtkd_im.vtkShader_GetShaderVariableType(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
    return ret;
  }

  public int GetShaderVariable(string name, int* values) {
    auto ret = vtkd_im.vtkShader_GetShaderVariable__SWIG_0(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), cast(void*)values);
    return ret;
  }

  public int GetShaderVariable(string name, float* values) {
    auto ret = vtkd_im.vtkShader_GetShaderVariable__SWIG_1(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), cast(void*)values);
    return ret;
  }

  public int GetShaderVariable(string name, double* values) {
    auto ret = vtkd_im.vtkShader_GetShaderVariable__SWIG_2(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), cast(void*)values);
    return ret;
  }

  public int GetScope() {
    auto ret = vtkd_im.vtkShader_GetScope(cast(void*)swigCPtr);
    return ret;
  }
}
