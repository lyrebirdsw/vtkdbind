/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkUnstructuredGridVolumeRayCastIterator;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkIdList;
static import vtkDoubleArray;
static import vtkDataArray;
static import SWIGTYPE_p_double;
static import vtkObject;

class vtkUnstructuredGridVolumeRayCastIterator : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkUnstructuredGridVolumeRayCastIterator_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkUnstructuredGridVolumeRayCastIterator obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkUnstructuredGridVolumeRayCastIterator_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkUnstructuredGridVolumeRayCastIterator SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkUnstructuredGridVolumeRayCastIterator_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkUnstructuredGridVolumeRayCastIterator ret = (cPtr is null) ? null : new vtkUnstructuredGridVolumeRayCastIterator(cPtr, false);
    return ret;
  }

  public vtkUnstructuredGridVolumeRayCastIterator NewInstance() const {
    void* cPtr = vtkd_im.vtkUnstructuredGridVolumeRayCastIterator_NewInstance(cast(void*)swigCPtr);
    vtkUnstructuredGridVolumeRayCastIterator ret = (cPtr is null) ? null : new vtkUnstructuredGridVolumeRayCastIterator(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public void Initialize(int x, int y) {
    vtkd_im.vtkUnstructuredGridVolumeRayCastIterator_Initialize(cast(void*)swigCPtr, x, y);
  }

  public long GetNextIntersections(vtkIdList.vtkIdList intersectedCells, vtkDoubleArray.vtkDoubleArray intersectionLengths, vtkDataArray.vtkDataArray scalars, vtkDataArray.vtkDataArray nearIntersections, vtkDataArray.vtkDataArray farIntersections) {
    auto ret = vtkd_im.vtkUnstructuredGridVolumeRayCastIterator_GetNextIntersections(cast(void*)swigCPtr, vtkIdList.vtkIdList.swigGetCPtr(intersectedCells), vtkDoubleArray.vtkDoubleArray.swigGetCPtr(intersectionLengths), vtkDataArray.vtkDataArray.swigGetCPtr(scalars), vtkDataArray.vtkDataArray.swigGetCPtr(nearIntersections), vtkDataArray.vtkDataArray.swigGetCPtr(farIntersections));
    return ret;
  }

  public void SetBounds(double _arg1, double _arg2) {
    vtkd_im.vtkUnstructuredGridVolumeRayCastIterator_SetBounds__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2);
  }

  public void SetBounds(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkUnstructuredGridVolumeRayCastIterator_SetBounds__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetBounds() {
    auto ret = cast(double*)vtkd_im.vtkUnstructuredGridVolumeRayCastIterator_GetBounds__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetBounds(double* _arg1, double* _arg2) {
    vtkd_im.vtkUnstructuredGridVolumeRayCastIterator_GetBounds__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetBounds(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkUnstructuredGridVolumeRayCastIterator_GetBounds__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public void SetMaxNumberOfIntersections(long _arg) {
    vtkd_im.vtkUnstructuredGridVolumeRayCastIterator_SetMaxNumberOfIntersections(cast(void*)swigCPtr, _arg);
  }

  public long GetMaxNumberOfIntersections() {
    auto ret = vtkd_im.vtkUnstructuredGridVolumeRayCastIterator_GetMaxNumberOfIntersections(cast(void*)swigCPtr);
    return ret;
  }
}
