/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkKMeansDistanceFunctor;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkVariantArray;
static import vtkTable;
static import vtkAbstractArray;
static import vtkObject;

class vtkKMeansDistanceFunctor : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkKMeansDistanceFunctor_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkKMeansDistanceFunctor obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkKMeansDistanceFunctor New() {
    void* cPtr = vtkd_im.vtkKMeansDistanceFunctor_New();
    vtkKMeansDistanceFunctor ret = (cPtr is null) ? null : new vtkKMeansDistanceFunctor(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkKMeansDistanceFunctor_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkKMeansDistanceFunctor SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkKMeansDistanceFunctor_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkKMeansDistanceFunctor ret = (cPtr is null) ? null : new vtkKMeansDistanceFunctor(cPtr, false);
    return ret;
  }

  public vtkKMeansDistanceFunctor NewInstance() const {
    void* cPtr = vtkd_im.vtkKMeansDistanceFunctor_NewInstance(cast(void*)swigCPtr);
    vtkKMeansDistanceFunctor ret = (cPtr is null) ? null : new vtkKMeansDistanceFunctor(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public vtkVariantArray.vtkVariantArray GetEmptyTuple(long dimension) {
    void* cPtr = vtkd_im.vtkKMeansDistanceFunctor_GetEmptyTuple(cast(void*)swigCPtr, dimension);
    vtkVariantArray.vtkVariantArray ret = (cPtr is null) ? null : new vtkVariantArray.vtkVariantArray(cPtr, false);
    return ret;
  }

  public void opCall(double* arg0, vtkVariantArray.vtkVariantArray arg1, vtkVariantArray.vtkVariantArray arg2) {
    vtkd_im.vtkKMeansDistanceFunctor_opCall(cast(void*)swigCPtr, cast(void*)arg0, vtkVariantArray.vtkVariantArray.swigGetCPtr(arg1), vtkVariantArray.vtkVariantArray.swigGetCPtr(arg2));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void PairwiseUpdate(vtkTable.vtkTable clusterCenters, long row, vtkVariantArray.vtkVariantArray data, long dataCardinality, long totalCardinality) {
    vtkd_im.vtkKMeansDistanceFunctor_PairwiseUpdate(cast(void*)swigCPtr, vtkTable.vtkTable.swigGetCPtr(clusterCenters), row, vtkVariantArray.vtkVariantArray.swigGetCPtr(data), dataCardinality, totalCardinality);
  }

  public void PerturbElement(vtkTable.vtkTable arg0, vtkTable.vtkTable arg1, long arg2, long arg3, long arg4, double arg5) {
    vtkd_im.vtkKMeansDistanceFunctor_PerturbElement(cast(void*)swigCPtr, vtkTable.vtkTable.swigGetCPtr(arg0), vtkTable.vtkTable.swigGetCPtr(arg1), arg2, arg3, arg4, arg5);
  }

  public void* AllocateElementArray(long size) {
    auto ret = cast(void*)vtkd_im.vtkKMeansDistanceFunctor_AllocateElementArray(cast(void*)swigCPtr, size);
    return ret;
  }

  public void DeallocateElementArray(void* arg0) {
    vtkd_im.vtkKMeansDistanceFunctor_DeallocateElementArray(cast(void*)swigCPtr, cast(void*)arg0);
  }

  public vtkAbstractArray.vtkAbstractArray CreateCoordinateArray() {
    void* cPtr = vtkd_im.vtkKMeansDistanceFunctor_CreateCoordinateArray(cast(void*)swigCPtr);
    vtkAbstractArray.vtkAbstractArray ret = (cPtr is null) ? null : new vtkAbstractArray.vtkAbstractArray(cPtr, false);
    return ret;
  }

  public void PackElements(vtkTable.vtkTable curTable, void* vElements) {
    vtkd_im.vtkKMeansDistanceFunctor_PackElements(cast(void*)swigCPtr, vtkTable.vtkTable.swigGetCPtr(curTable), cast(void*)vElements);
  }

  public void UnPackElements(vtkTable.vtkTable curTable, vtkTable.vtkTable newTable, void* vLocalElements, void* vGlobalElements, int np) {
    vtkd_im.vtkKMeansDistanceFunctor_UnPackElements__SWIG_0(cast(void*)swigCPtr, vtkTable.vtkTable.swigGetCPtr(curTable), vtkTable.vtkTable.swigGetCPtr(newTable), cast(void*)vLocalElements, cast(void*)vGlobalElements, np);
  }

  public void UnPackElements(vtkTable.vtkTable curTable, void* vLocalElements, long numRows, long numCols) {
    vtkd_im.vtkKMeansDistanceFunctor_UnPackElements__SWIG_1(cast(void*)swigCPtr, vtkTable.vtkTable.swigGetCPtr(curTable), cast(void*)vLocalElements, numRows, numCols);
  }

  public int GetDataType() {
    auto ret = vtkd_im.vtkKMeansDistanceFunctor_GetDataType(cast(void*)swigCPtr);
    return ret;
  }
}
