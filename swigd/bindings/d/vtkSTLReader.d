/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkSTLReader;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkIncrementalPointLocator;
static import vtkPolyDataAlgorithm;

class vtkSTLReader : vtkPolyDataAlgorithm.vtkPolyDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkSTLReader_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkSTLReader obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkSTLReader_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkSTLReader SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkSTLReader_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkSTLReader ret = (cPtr is null) ? null : new vtkSTLReader(cPtr, false);
    return ret;
  }

  public vtkSTLReader NewInstance() const {
    void* cPtr = vtkd_im.vtkSTLReader_NewInstance(cast(void*)swigCPtr);
    vtkSTLReader ret = (cPtr is null) ? null : new vtkSTLReader(cPtr, false);
    return ret;
  }

  alias vtkPolyDataAlgorithm.vtkPolyDataAlgorithm.NewInstance NewInstance;

  public static vtkSTLReader New() {
    void* cPtr = vtkd_im.vtkSTLReader_New();
    vtkSTLReader ret = (cPtr is null) ? null : new vtkSTLReader(cPtr, false);
    return ret;
  }

  public void SetFileName(string _arg) {
    vtkd_im.vtkSTLReader_SetFileName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetFileName() {
    string ret = std.conv.to!string(vtkd_im.vtkSTLReader_GetFileName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetMerging(int _arg) {
    vtkd_im.vtkSTLReader_SetMerging(cast(void*)swigCPtr, _arg);
  }

  public int GetMerging() {
    auto ret = vtkd_im.vtkSTLReader_GetMerging(cast(void*)swigCPtr);
    return ret;
  }

  public void MergingOn() {
    vtkd_im.vtkSTLReader_MergingOn(cast(void*)swigCPtr);
  }

  public void MergingOff() {
    vtkd_im.vtkSTLReader_MergingOff(cast(void*)swigCPtr);
  }

  public void SetScalarTags(int _arg) {
    vtkd_im.vtkSTLReader_SetScalarTags(cast(void*)swigCPtr, _arg);
  }

  public int GetScalarTags() {
    auto ret = vtkd_im.vtkSTLReader_GetScalarTags(cast(void*)swigCPtr);
    return ret;
  }

  public void ScalarTagsOn() {
    vtkd_im.vtkSTLReader_ScalarTagsOn(cast(void*)swigCPtr);
  }

  public void ScalarTagsOff() {
    vtkd_im.vtkSTLReader_ScalarTagsOff(cast(void*)swigCPtr);
  }

  public void SetLocator(vtkIncrementalPointLocator.vtkIncrementalPointLocator locator) {
    vtkd_im.vtkSTLReader_SetLocator(cast(void*)swigCPtr, vtkIncrementalPointLocator.vtkIncrementalPointLocator.swigGetCPtr(locator));
  }

  public vtkIncrementalPointLocator.vtkIncrementalPointLocator GetLocator() {
    void* cPtr = vtkd_im.vtkSTLReader_GetLocator(cast(void*)swigCPtr);
    vtkIncrementalPointLocator.vtkIncrementalPointLocator ret = (cPtr is null) ? null : new vtkIncrementalPointLocator.vtkIncrementalPointLocator(cPtr, false);
    return ret;
  }
}
