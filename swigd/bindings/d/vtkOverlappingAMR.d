/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkOverlappingAMR;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkAMRBox;
static import vtkInformationIdTypeKey;
static import vtkCompositeDataIterator;
static import vtkAMRInformation;
static import vtkUniformGridAMR;

class vtkOverlappingAMR : vtkUniformGridAMR.vtkUniformGridAMR {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkOverlappingAMR_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkOverlappingAMR obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkOverlappingAMR New() {
    void* cPtr = vtkd_im.vtkOverlappingAMR_New();
    vtkOverlappingAMR ret = (cPtr is null) ? null : new vtkOverlappingAMR(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkOverlappingAMR_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkOverlappingAMR SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkOverlappingAMR_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkOverlappingAMR ret = (cPtr is null) ? null : new vtkOverlappingAMR(cPtr, false);
    return ret;
  }

  public vtkOverlappingAMR NewInstance() const {
    void* cPtr = vtkd_im.vtkOverlappingAMR_NewInstance(cast(void*)swigCPtr);
    vtkOverlappingAMR ret = (cPtr is null) ? null : new vtkOverlappingAMR(cPtr, false);
    return ret;
  }

  alias vtkUniformGridAMR.vtkUniformGridAMR.NewInstance NewInstance;

  public void SetOrigin(double* arg0) {
    vtkd_im.vtkOverlappingAMR_SetOrigin(cast(void*)swigCPtr, cast(void*)arg0);
  }

  public double* GetOrigin() {
    auto ret = cast(double*)vtkd_im.vtkOverlappingAMR_GetOrigin__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void SetSpacing(uint level, SWIGTYPE_p_double.SWIGTYPE_p_double spacing) {
    vtkd_im.vtkOverlappingAMR_SetSpacing(cast(void*)swigCPtr, level, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(spacing));
  }

  public void GetSpacing(uint level, SWIGTYPE_p_double.SWIGTYPE_p_double spacing) {
    vtkd_im.vtkOverlappingAMR_GetSpacing(cast(void*)swigCPtr, level, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(spacing));
  }

  public void SetAMRBox(uint level, uint id, vtkAMRBox.vtkAMRBox box) {
    vtkd_im.vtkOverlappingAMR_SetAMRBox(cast(void*)swigCPtr, level, id, vtkAMRBox.vtkAMRBox.swigGetCPtr(box));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public vtkAMRBox.vtkAMRBox GetAMRBox(uint level, uint id) {
    vtkAMRBox.vtkAMRBox ret = new vtkAMRBox.vtkAMRBox(vtkd_im.vtkOverlappingAMR_GetAMRBox(cast(void*)swigCPtr, level, id), false);
    return ret;
  }

  public void GetBounds(uint level, uint id, double* bb) {
    vtkd_im.vtkOverlappingAMR_GetBounds__SWIG_0(cast(void*)swigCPtr, level, id, cast(void*)bb);
  }

  public void GetOrigin(uint level, uint id, SWIGTYPE_p_double.SWIGTYPE_p_double origin) {
    vtkd_im.vtkOverlappingAMR_GetOrigin__SWIG_1(cast(void*)swigCPtr, level, id, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(origin));
  }

  public static vtkInformationIdTypeKey.vtkInformationIdTypeKey NUMBER_OF_BLANKED_POINTS() {
    void* cPtr = vtkd_im.vtkOverlappingAMR_NUMBER_OF_BLANKED_POINTS();
    vtkInformationIdTypeKey.vtkInformationIdTypeKey ret = (cPtr is null) ? null : new vtkInformationIdTypeKey.vtkInformationIdTypeKey(cPtr, false);
    return ret;
  }

  public void SetRefinementRatio(uint level, int refRatio) {
    vtkd_im.vtkOverlappingAMR_SetRefinementRatio(cast(void*)swigCPtr, level, refRatio);
  }

  public int GetRefinementRatio(uint level) {
    auto ret = vtkd_im.vtkOverlappingAMR_GetRefinementRatio__SWIG_0(cast(void*)swigCPtr, level);
    return ret;
  }

  public void SetAMRBlockSourceIndex(uint level, uint id, int sourceId) {
    vtkd_im.vtkOverlappingAMR_SetAMRBlockSourceIndex(cast(void*)swigCPtr, level, id, sourceId);
  }

  public int GetAMRBlockSourceIndex(uint level, uint id) {
    auto ret = vtkd_im.vtkOverlappingAMR_GetAMRBlockSourceIndex(cast(void*)swigCPtr, level, id);
    return ret;
  }

  public int GetRefinementRatio(vtkCompositeDataIterator.vtkCompositeDataIterator iter) {
    auto ret = vtkd_im.vtkOverlappingAMR_GetRefinementRatio__SWIG_1(cast(void*)swigCPtr, vtkCompositeDataIterator.vtkCompositeDataIterator.swigGetCPtr(iter));
    return ret;
  }

  public bool HasChildrenInformation() {
    bool ret = vtkd_im.vtkOverlappingAMR_HasChildrenInformation(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void GenerateParentChildInformation() {
    vtkd_im.vtkOverlappingAMR_GenerateParentChildInformation(cast(void*)swigCPtr);
  }

  public uint* GetParents(uint level, uint index, uint* numParents) {
    auto ret = cast(uint*)vtkd_im.vtkOverlappingAMR_GetParents(cast(void*)swigCPtr, level, index, cast(void*)numParents);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public uint* GetChildren(uint level, uint index, uint* numChildren) {
    auto ret = cast(uint*)vtkd_im.vtkOverlappingAMR_GetChildren(cast(void*)swigCPtr, level, index, cast(void*)numChildren);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void PrintParentChildInfo(uint level, uint index) {
    vtkd_im.vtkOverlappingAMR_PrintParentChildInfo(cast(void*)swigCPtr, level, index);
  }

  public void GetBounds(SWIGTYPE_p_double.SWIGTYPE_p_double b) {
    vtkd_im.vtkOverlappingAMR_GetBounds__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(b));
  }

  alias vtkUniformGridAMR.vtkUniformGridAMR.GetBounds GetBounds;

  public bool FindGrid(SWIGTYPE_p_double.SWIGTYPE_p_double q, uint* level, uint* gridId) {
    bool ret = vtkd_im.vtkOverlappingAMR_FindGrid(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(q), cast(void*)level, cast(void*)gridId) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public vtkAMRInformation.vtkAMRInformation GetAMRInfo() {
    void* cPtr = vtkd_im.vtkOverlappingAMR_GetAMRInfo(cast(void*)swigCPtr);
    vtkAMRInformation.vtkAMRInformation ret = (cPtr is null) ? null : new vtkAMRInformation.vtkAMRInformation(cPtr, false);
    return ret;
  }

  public void SetAMRInfo(vtkAMRInformation.vtkAMRInformation info) {
    vtkd_im.vtkOverlappingAMR_SetAMRInfo(cast(void*)swigCPtr, vtkAMRInformation.vtkAMRInformation.swigGetCPtr(info));
  }

  public void Audit() {
    vtkd_im.vtkOverlappingAMR_Audit(cast(void*)swigCPtr);
  }
}
