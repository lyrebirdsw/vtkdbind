/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPlanes;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkPoints;
static import vtkDataArray;
static import vtkPlane;
static import vtkImplicitFunction;

class vtkPlanes : vtkImplicitFunction.vtkImplicitFunction {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPlanes_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPlanes obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkPlanes New() {
    void* cPtr = vtkd_im.vtkPlanes_New();
    vtkPlanes ret = (cPtr is null) ? null : new vtkPlanes(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPlanes_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPlanes SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPlanes_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPlanes ret = (cPtr is null) ? null : new vtkPlanes(cPtr, false);
    return ret;
  }

  public vtkPlanes NewInstance() const {
    void* cPtr = vtkd_im.vtkPlanes_NewInstance(cast(void*)swigCPtr);
    vtkPlanes ret = (cPtr is null) ? null : new vtkPlanes(cPtr, false);
    return ret;
  }

  alias vtkImplicitFunction.vtkImplicitFunction.NewInstance NewInstance;

  public override double EvaluateFunction(SWIGTYPE_p_double.SWIGTYPE_p_double x) {
    auto ret = vtkd_im.vtkPlanes_EvaluateFunction__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x));
    return ret;
  }

  public double EvaluateFunction(double x, double y, double z) {
    auto ret = vtkd_im.vtkPlanes_EvaluateFunction__SWIG_1(cast(void*)swigCPtr, x, y, z);
    return ret;
  }

  alias vtkImplicitFunction.vtkImplicitFunction.EvaluateFunction EvaluateFunction;

  public void SetPoints(vtkPoints.vtkPoints arg0) {
    vtkd_im.vtkPlanes_SetPoints(cast(void*)swigCPtr, vtkPoints.vtkPoints.swigGetCPtr(arg0));
  }

  public vtkPoints.vtkPoints GetPoints() {
    void* cPtr = vtkd_im.vtkPlanes_GetPoints(cast(void*)swigCPtr);
    vtkPoints.vtkPoints ret = (cPtr is null) ? null : new vtkPoints.vtkPoints(cPtr, false);
    return ret;
  }

  public void SetNormals(vtkDataArray.vtkDataArray normals) {
    vtkd_im.vtkPlanes_SetNormals(cast(void*)swigCPtr, vtkDataArray.vtkDataArray.swigGetCPtr(normals));
  }

  public vtkDataArray.vtkDataArray GetNormals() {
    void* cPtr = vtkd_im.vtkPlanes_GetNormals(cast(void*)swigCPtr);
    vtkDataArray.vtkDataArray ret = (cPtr is null) ? null : new vtkDataArray.vtkDataArray(cPtr, false);
    return ret;
  }

  public void SetFrustumPlanes(SWIGTYPE_p_double.SWIGTYPE_p_double planes) {
    vtkd_im.vtkPlanes_SetFrustumPlanes(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(planes));
  }

  public void SetBounds(SWIGTYPE_p_double.SWIGTYPE_p_double bounds) {
    vtkd_im.vtkPlanes_SetBounds__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
  }

  public void SetBounds(double xmin, double xmax, double ymin, double ymax, double zmin, double zmax) {
    vtkd_im.vtkPlanes_SetBounds__SWIG_1(cast(void*)swigCPtr, xmin, xmax, ymin, ymax, zmin, zmax);
  }

  public int GetNumberOfPlanes() {
    auto ret = vtkd_im.vtkPlanes_GetNumberOfPlanes(cast(void*)swigCPtr);
    return ret;
  }

  public vtkPlane.vtkPlane GetPlane(int i) {
    void* cPtr = vtkd_im.vtkPlanes_GetPlane__SWIG_0(cast(void*)swigCPtr, i);
    vtkPlane.vtkPlane ret = (cPtr is null) ? null : new vtkPlane.vtkPlane(cPtr, false);
    return ret;
  }

  public void GetPlane(int i, vtkPlane.vtkPlane plane) {
    vtkd_im.vtkPlanes_GetPlane__SWIG_1(cast(void*)swigCPtr, i, vtkPlane.vtkPlane.swigGetCPtr(plane));
  }
}
