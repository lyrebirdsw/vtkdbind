/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkThresholdTable;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkVariant;
static import vtkTableAlgorithm;

class vtkThresholdTable : vtkTableAlgorithm.vtkTableAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkThresholdTable_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkThresholdTable obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkThresholdTable New() {
    void* cPtr = vtkd_im.vtkThresholdTable_New();
    vtkThresholdTable ret = (cPtr is null) ? null : new vtkThresholdTable(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkThresholdTable_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkThresholdTable SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkThresholdTable_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkThresholdTable ret = (cPtr is null) ? null : new vtkThresholdTable(cPtr, false);
    return ret;
  }

  public vtkThresholdTable NewInstance() const {
    void* cPtr = vtkd_im.vtkThresholdTable_NewInstance(cast(void*)swigCPtr);
    vtkThresholdTable ret = (cPtr is null) ? null : new vtkThresholdTable(cPtr, false);
    return ret;
  }

  alias vtkTableAlgorithm.vtkTableAlgorithm.NewInstance NewInstance;

  public void SetMode(int _arg) {
    vtkd_im.vtkThresholdTable_SetMode(cast(void*)swigCPtr, _arg);
  }

  public int GetModeMinValue() {
    auto ret = vtkd_im.vtkThresholdTable_GetModeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetModeMaxValue() {
    auto ret = vtkd_im.vtkThresholdTable_GetModeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetMode() {
    auto ret = vtkd_im.vtkThresholdTable_GetMode(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMinValue(vtkVariant.vtkVariant v) {
    vtkd_im.vtkThresholdTable_SetMinValue__SWIG_0(cast(void*)swigCPtr, vtkVariant.vtkVariant.swigGetCPtr(v));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public vtkVariant.vtkVariant GetMinValue() {
    vtkVariant.vtkVariant ret = new vtkVariant.vtkVariant(vtkd_im.vtkThresholdTable_GetMinValue(cast(void*)swigCPtr), true);
    return ret;
  }

  public void SetMaxValue(vtkVariant.vtkVariant v) {
    vtkd_im.vtkThresholdTable_SetMaxValue__SWIG_0(cast(void*)swigCPtr, vtkVariant.vtkVariant.swigGetCPtr(v));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public vtkVariant.vtkVariant GetMaxValue() {
    vtkVariant.vtkVariant ret = new vtkVariant.vtkVariant(vtkd_im.vtkThresholdTable_GetMaxValue(cast(void*)swigCPtr), true);
    return ret;
  }

  public void ThresholdBetween(vtkVariant.vtkVariant lower, vtkVariant.vtkVariant upper) {
    vtkd_im.vtkThresholdTable_ThresholdBetween__SWIG_0(cast(void*)swigCPtr, vtkVariant.vtkVariant.swigGetCPtr(lower), vtkVariant.vtkVariant.swigGetCPtr(upper));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void SetMinValue(double v) {
    vtkd_im.vtkThresholdTable_SetMinValue__SWIG_1(cast(void*)swigCPtr, v);
  }

  public void SetMaxValue(double v) {
    vtkd_im.vtkThresholdTable_SetMaxValue__SWIG_1(cast(void*)swigCPtr, v);
  }

  public void ThresholdBetween(double lower, double upper) {
    vtkd_im.vtkThresholdTable_ThresholdBetween__SWIG_1(cast(void*)swigCPtr, lower, upper);
  }
}
