/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkEdgeSubdivisionCriterion;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkStreamingTessellator;
static import vtkObject;

class vtkEdgeSubdivisionCriterion : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkEdgeSubdivisionCriterion_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkEdgeSubdivisionCriterion obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkEdgeSubdivisionCriterion_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkEdgeSubdivisionCriterion SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkEdgeSubdivisionCriterion_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkEdgeSubdivisionCriterion ret = (cPtr is null) ? null : new vtkEdgeSubdivisionCriterion(cPtr, false);
    return ret;
  }

  public vtkEdgeSubdivisionCriterion NewInstance() const {
    void* cPtr = vtkd_im.vtkEdgeSubdivisionCriterion_NewInstance(cast(void*)swigCPtr);
    vtkEdgeSubdivisionCriterion ret = (cPtr is null) ? null : new vtkEdgeSubdivisionCriterion(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public bool EvaluateEdge(double* p0, double* p1, double* p2, int field_start) {
    bool ret = vtkd_im.vtkEdgeSubdivisionCriterion_EvaluateEdge(cast(void*)swigCPtr, cast(void*)p0, cast(void*)p1, cast(void*)p2, field_start) ? true : false;
    return ret;
  }

  public int PassField(int sourceId, int sourceSize, vtkStreamingTessellator.vtkStreamingTessellator t) {
    auto ret = vtkd_im.vtkEdgeSubdivisionCriterion_PassField(cast(void*)swigCPtr, sourceId, sourceSize, vtkStreamingTessellator.vtkStreamingTessellator.swigGetCPtr(t));
    return ret;
  }

  public void ResetFieldList() {
    vtkd_im.vtkEdgeSubdivisionCriterion_ResetFieldList(cast(void*)swigCPtr);
  }

  public bool DontPassField(int sourceId, vtkStreamingTessellator.vtkStreamingTessellator t) {
    bool ret = vtkd_im.vtkEdgeSubdivisionCriterion_DontPassField(cast(void*)swigCPtr, sourceId, vtkStreamingTessellator.vtkStreamingTessellator.swigGetCPtr(t)) ? true : false;
    return ret;
  }

  public int* GetFieldIds() const {
    auto ret = cast(int*)vtkd_im.vtkEdgeSubdivisionCriterion_GetFieldIds(cast(void*)swigCPtr);
    return ret;
  }

  public int* GetFieldOffsets() const {
    auto ret = cast(int*)vtkd_im.vtkEdgeSubdivisionCriterion_GetFieldOffsets(cast(void*)swigCPtr);
    return ret;
  }

  public int GetOutputField(int fieldId) const {
    auto ret = vtkd_im.vtkEdgeSubdivisionCriterion_GetOutputField(cast(void*)swigCPtr, fieldId);
    return ret;
  }

  public int GetNumberOfFields() const {
    auto ret = vtkd_im.vtkEdgeSubdivisionCriterion_GetNumberOfFields(cast(void*)swigCPtr);
    return ret;
  }
}
