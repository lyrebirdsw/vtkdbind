/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkTextureObject;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkRenderWindow;
static import vtkPixelBufferObject;
static import SWIGTYPE_p_float;
static import vtkObject;

class vtkTextureObject : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkTextureObject_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkTextureObject obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkTextureObject(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkTextureObject New() {
    void* cPtr = vtkd_im.vtkTextureObject_New();
    vtkTextureObject ret = (cPtr is null) ? null : new vtkTextureObject(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkTextureObject_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkTextureObject SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkTextureObject_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkTextureObject ret = (cPtr is null) ? null : new vtkTextureObject(cPtr, false);
    return ret;
  }

  public vtkTextureObject NewInstance() const {
    void* cPtr = vtkd_im.vtkTextureObject_NewInstance(cast(void*)swigCPtr);
    vtkTextureObject ret = (cPtr is null) ? null : new vtkTextureObject(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public void SetContext(vtkRenderWindow.vtkRenderWindow arg0) {
    vtkd_im.vtkTextureObject_SetContext(cast(void*)swigCPtr, vtkRenderWindow.vtkRenderWindow.swigGetCPtr(arg0));
  }

  public vtkRenderWindow.vtkRenderWindow GetContext() {
    void* cPtr = vtkd_im.vtkTextureObject_GetContext(cast(void*)swigCPtr);
    vtkRenderWindow.vtkRenderWindow ret = (cPtr is null) ? null : new vtkRenderWindow.vtkRenderWindow(cPtr, false);
    return ret;
  }

  public uint GetWidth() {
    auto ret = vtkd_im.vtkTextureObject_GetWidth(cast(void*)swigCPtr);
    return ret;
  }

  public uint GetHeight() {
    auto ret = vtkd_im.vtkTextureObject_GetHeight(cast(void*)swigCPtr);
    return ret;
  }

  public uint GetDepth() {
    auto ret = vtkd_im.vtkTextureObject_GetDepth(cast(void*)swigCPtr);
    return ret;
  }

  public int GetComponents() {
    auto ret = vtkd_im.vtkTextureObject_GetComponents(cast(void*)swigCPtr);
    return ret;
  }

  public int GetNumberOfDimensions() {
    auto ret = vtkd_im.vtkTextureObject_GetNumberOfDimensions(cast(void*)swigCPtr);
    return ret;
  }

  public uint GetTarget() {
    auto ret = vtkd_im.vtkTextureObject_GetTarget(cast(void*)swigCPtr);
    return ret;
  }

  public uint GetHandle() {
    auto ret = vtkd_im.vtkTextureObject_GetHandle(cast(void*)swigCPtr);
    return ret;
  }

  public void Bind() {
    vtkd_im.vtkTextureObject_Bind(cast(void*)swigCPtr);
  }

  public void UnBind() {
    vtkd_im.vtkTextureObject_UnBind(cast(void*)swigCPtr);
  }

  public bool IsBound() {
    bool ret = vtkd_im.vtkTextureObject_IsBound(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SendParameters() {
    vtkd_im.vtkTextureObject_SendParameters(cast(void*)swigCPtr);
  }

  public bool Create1D(int numComps, vtkPixelBufferObject.vtkPixelBufferObject pbo, bool shaderSupportsTextureInt) {
    bool ret = vtkd_im.vtkTextureObject_Create1D(cast(void*)swigCPtr, numComps, vtkPixelBufferObject.vtkPixelBufferObject.swigGetCPtr(pbo), shaderSupportsTextureInt) ? true : false;
    return ret;
  }

  public bool Create2D(uint width, uint height, int numComps, vtkPixelBufferObject.vtkPixelBufferObject pbo, bool shaderSupportsTextureInt) {
    bool ret = vtkd_im.vtkTextureObject_Create2D__SWIG_0(cast(void*)swigCPtr, width, height, numComps, vtkPixelBufferObject.vtkPixelBufferObject.swigGetCPtr(pbo), shaderSupportsTextureInt) ? true : false;
    return ret;
  }

  public bool CreateDepth(uint width, uint height, int internalFormat, vtkPixelBufferObject.vtkPixelBufferObject pbo) {
    bool ret = vtkd_im.vtkTextureObject_CreateDepth(cast(void*)swigCPtr, width, height, internalFormat, vtkPixelBufferObject.vtkPixelBufferObject.swigGetCPtr(pbo)) ? true : false;
    return ret;
  }

  public bool CreateDepthFromRaw(uint width, uint height, int internalFormat, int rawType, void* raw) {
    bool ret = vtkd_im.vtkTextureObject_CreateDepthFromRaw(cast(void*)swigCPtr, width, height, internalFormat, rawType, cast(void*)raw) ? true : false;
    return ret;
  }

  public bool AllocateDepth(uint width, uint height, int internalFormat) {
    bool ret = vtkd_im.vtkTextureObject_AllocateDepth(cast(void*)swigCPtr, width, height, internalFormat) ? true : false;
    return ret;
  }

  public bool Allocate1D(uint width, int numComps, int vtkType) {
    bool ret = vtkd_im.vtkTextureObject_Allocate1D(cast(void*)swigCPtr, width, numComps, vtkType) ? true : false;
    return ret;
  }

  public bool Allocate2D(uint width, uint height, int numComps, int vtkType) {
    bool ret = vtkd_im.vtkTextureObject_Allocate2D(cast(void*)swigCPtr, width, height, numComps, vtkType) ? true : false;
    return ret;
  }

  public bool Allocate3D(uint width, uint height, uint depth, int numComps, int vtkType) {
    bool ret = vtkd_im.vtkTextureObject_Allocate3D(cast(void*)swigCPtr, width, height, depth, numComps, vtkType) ? true : false;
    return ret;
  }

  public bool Create3D(uint width, uint height, uint depth, int numComps, vtkPixelBufferObject.vtkPixelBufferObject pbo, bool shaderSupportsTextureInt) {
    bool ret = vtkd_im.vtkTextureObject_Create3D__SWIG_0(cast(void*)swigCPtr, width, height, depth, numComps, vtkPixelBufferObject.vtkPixelBufferObject.swigGetCPtr(pbo), shaderSupportsTextureInt) ? true : false;
    return ret;
  }

  public bool Create2D(uint width, uint height, int numComps, int vtktype, bool shaderSupportsTextureInt) {
    bool ret = vtkd_im.vtkTextureObject_Create2D__SWIG_1(cast(void*)swigCPtr, width, height, numComps, vtktype, shaderSupportsTextureInt) ? true : false;
    return ret;
  }

  public bool Create3D(uint width, uint height, uint depth, int numComps, int vtktype, bool shaderSupportsTextureInt) {
    bool ret = vtkd_im.vtkTextureObject_Create3D__SWIG_1(cast(void*)swigCPtr, width, height, depth, numComps, vtktype, shaderSupportsTextureInt) ? true : false;
    return ret;
  }

  public vtkPixelBufferObject.vtkPixelBufferObject Download() {
    void* cPtr = vtkd_im.vtkTextureObject_Download(cast(void*)swigCPtr);
    vtkPixelBufferObject.vtkPixelBufferObject ret = (cPtr is null) ? null : new vtkPixelBufferObject.vtkPixelBufferObject(cPtr, false);
    return ret;
  }

  public int GetDataType() {
    auto ret = vtkd_im.vtkTextureObject_GetDataType(cast(void*)swigCPtr);
    return ret;
  }

  public uint GetInternalFormat(int vtktype, int numComps, bool shaderSupportsTextureInt) {
    auto ret = vtkd_im.vtkTextureObject_GetInternalFormat(cast(void*)swigCPtr, vtktype, numComps, shaderSupportsTextureInt);
    return ret;
  }

  public uint GetFormat(int vtktype, int numComps, bool shaderSupportsTextureInt) {
    auto ret = vtkd_im.vtkTextureObject_GetFormat(cast(void*)swigCPtr, vtktype, numComps, shaderSupportsTextureInt);
    return ret;
  }

  public int GetWrapS() {
    auto ret = vtkd_im.vtkTextureObject_GetWrapS(cast(void*)swigCPtr);
    return ret;
  }

  public void SetWrapS(int _arg) {
    vtkd_im.vtkTextureObject_SetWrapS(cast(void*)swigCPtr, _arg);
  }

  public int GetWrapT() {
    auto ret = vtkd_im.vtkTextureObject_GetWrapT(cast(void*)swigCPtr);
    return ret;
  }

  public void SetWrapT(int _arg) {
    vtkd_im.vtkTextureObject_SetWrapT(cast(void*)swigCPtr, _arg);
  }

  public int GetWrapR() {
    auto ret = vtkd_im.vtkTextureObject_GetWrapR(cast(void*)swigCPtr);
    return ret;
  }

  public void SetWrapR(int _arg) {
    vtkd_im.vtkTextureObject_SetWrapR(cast(void*)swigCPtr, _arg);
  }

  public int GetMinificationFilter() {
    auto ret = vtkd_im.vtkTextureObject_GetMinificationFilter(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMinificationFilter(int _arg) {
    vtkd_im.vtkTextureObject_SetMinificationFilter(cast(void*)swigCPtr, _arg);
  }

  public bool GetLinearMagnification() {
    bool ret = vtkd_im.vtkTextureObject_GetLinearMagnification(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetLinearMagnification(bool _arg) {
    vtkd_im.vtkTextureObject_SetLinearMagnification(cast(void*)swigCPtr, _arg);
  }

  public void SetBorderColor(float _arg1, float _arg2, float _arg3, float _arg4) {
    vtkd_im.vtkTextureObject_SetBorderColor__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3, _arg4);
  }

  public void SetBorderColor(SWIGTYPE_p_float.SWIGTYPE_p_float _arg) {
    vtkd_im.vtkTextureObject_SetBorderColor__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(_arg));
  }

  public float* GetBorderColor() {
    auto ret = cast(float*)vtkd_im.vtkTextureObject_GetBorderColor__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetBorderColor(float* _arg1, float* _arg2, float* _arg3, float* _arg4) {
    vtkd_im.vtkTextureObject_GetBorderColor__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3, cast(void*)_arg4);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetBorderColor(SWIGTYPE_p_float.SWIGTYPE_p_float _arg) {
    vtkd_im.vtkTextureObject_GetBorderColor__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(_arg));
  }

  public void SetPriority(float _arg) {
    vtkd_im.vtkTextureObject_SetPriority(cast(void*)swigCPtr, _arg);
  }

  public float GetPriority() {
    auto ret = vtkd_im.vtkTextureObject_GetPriority(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMinLOD(float _arg) {
    vtkd_im.vtkTextureObject_SetMinLOD(cast(void*)swigCPtr, _arg);
  }

  public float GetMinLOD() {
    auto ret = vtkd_im.vtkTextureObject_GetMinLOD(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMaxLOD(float _arg) {
    vtkd_im.vtkTextureObject_SetMaxLOD(cast(void*)swigCPtr, _arg);
  }

  public float GetMaxLOD() {
    auto ret = vtkd_im.vtkTextureObject_GetMaxLOD(cast(void*)swigCPtr);
    return ret;
  }

  public void SetBaseLevel(int _arg) {
    vtkd_im.vtkTextureObject_SetBaseLevel(cast(void*)swigCPtr, _arg);
  }

  public int GetBaseLevel() {
    auto ret = vtkd_im.vtkTextureObject_GetBaseLevel(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMaxLevel(int _arg) {
    vtkd_im.vtkTextureObject_SetMaxLevel(cast(void*)swigCPtr, _arg);
  }

  public int GetMaxLevel() {
    auto ret = vtkd_im.vtkTextureObject_GetMaxLevel(cast(void*)swigCPtr);
    return ret;
  }

  public bool GetDepthTextureCompare() {
    bool ret = vtkd_im.vtkTextureObject_GetDepthTextureCompare(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetDepthTextureCompare(bool _arg) {
    vtkd_im.vtkTextureObject_SetDepthTextureCompare(cast(void*)swigCPtr, _arg);
  }

  public int GetDepthTextureCompareFunction() {
    auto ret = vtkd_im.vtkTextureObject_GetDepthTextureCompareFunction(cast(void*)swigCPtr);
    return ret;
  }

  public void SetDepthTextureCompareFunction(int _arg) {
    vtkd_im.vtkTextureObject_SetDepthTextureCompareFunction(cast(void*)swigCPtr, _arg);
  }

  public int GetDepthTextureMode() {
    auto ret = vtkd_im.vtkTextureObject_GetDepthTextureMode(cast(void*)swigCPtr);
    return ret;
  }

  public void SetDepthTextureMode(int _arg) {
    vtkd_im.vtkTextureObject_SetDepthTextureMode(cast(void*)swigCPtr, _arg);
  }

  public bool GetGenerateMipmap() {
    bool ret = vtkd_im.vtkTextureObject_GetGenerateMipmap(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetGenerateMipmap(bool _arg) {
    vtkd_im.vtkTextureObject_SetGenerateMipmap(cast(void*)swigCPtr, _arg);
  }

  public static bool IsSupported(vtkRenderWindow.vtkRenderWindow renWin) {
    bool ret = vtkd_im.vtkTextureObject_IsSupported(vtkRenderWindow.vtkRenderWindow.swigGetCPtr(renWin)) ? true : false;
    return ret;
  }

  public void CopyToFrameBuffer(int srcXmin, int srcYmin, int srcXmax, int srcYmax, int dstXmin, int dstYmin, int width, int height) {
    vtkd_im.vtkTextureObject_CopyToFrameBuffer(cast(void*)swigCPtr, srcXmin, srcYmin, srcXmax, srcYmax, dstXmin, dstYmin, width, height);
  }

  public void CopyFromFrameBuffer(int srcXmin, int srcYmin, int dstXmin, int dstYmin, int width, int height) {
    vtkd_im.vtkTextureObject_CopyFromFrameBuffer(cast(void*)swigCPtr, srcXmin, srcYmin, dstXmin, dstYmin, width, height);
  }

  public this() {
    this(vtkd_im.new_vtkTextureObject(), true);
  }
}
