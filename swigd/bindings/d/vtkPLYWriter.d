/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPLYWriter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkScalarsToColors;
static import SWIGTYPE_p_unsigned_char;
static import vtkPolyData;
static import vtkWriter;

class vtkPLYWriter : vtkWriter.vtkWriter {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPLYWriter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPLYWriter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkPLYWriter New() {
    void* cPtr = vtkd_im.vtkPLYWriter_New();
    vtkPLYWriter ret = (cPtr is null) ? null : new vtkPLYWriter(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPLYWriter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPLYWriter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPLYWriter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPLYWriter ret = (cPtr is null) ? null : new vtkPLYWriter(cPtr, false);
    return ret;
  }

  public vtkPLYWriter NewInstance() const {
    void* cPtr = vtkd_im.vtkPLYWriter_NewInstance(cast(void*)swigCPtr);
    vtkPLYWriter ret = (cPtr is null) ? null : new vtkPLYWriter(cPtr, false);
    return ret;
  }

  alias vtkWriter.vtkWriter.NewInstance NewInstance;

  public void SetDataByteOrder(int _arg) {
    vtkd_im.vtkPLYWriter_SetDataByteOrder(cast(void*)swigCPtr, _arg);
  }

  public int GetDataByteOrderMinValue() {
    auto ret = vtkd_im.vtkPLYWriter_GetDataByteOrderMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetDataByteOrderMaxValue() {
    auto ret = vtkd_im.vtkPLYWriter_GetDataByteOrderMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetDataByteOrder() {
    auto ret = vtkd_im.vtkPLYWriter_GetDataByteOrder(cast(void*)swigCPtr);
    return ret;
  }

  public void SetDataByteOrderToBigEndian() {
    vtkd_im.vtkPLYWriter_SetDataByteOrderToBigEndian(cast(void*)swigCPtr);
  }

  public void SetDataByteOrderToLittleEndian() {
    vtkd_im.vtkPLYWriter_SetDataByteOrderToLittleEndian(cast(void*)swigCPtr);
  }

  public void SetColorMode(int _arg) {
    vtkd_im.vtkPLYWriter_SetColorMode(cast(void*)swigCPtr, _arg);
  }

  public int GetColorMode() {
    auto ret = vtkd_im.vtkPLYWriter_GetColorMode(cast(void*)swigCPtr);
    return ret;
  }

  public void SetColorModeToDefault() {
    vtkd_im.vtkPLYWriter_SetColorModeToDefault(cast(void*)swigCPtr);
  }

  public void SetColorModeToUniformCellColor() {
    vtkd_im.vtkPLYWriter_SetColorModeToUniformCellColor(cast(void*)swigCPtr);
  }

  public void SetColorModeToUniformPointColor() {
    vtkd_im.vtkPLYWriter_SetColorModeToUniformPointColor(cast(void*)swigCPtr);
  }

  public void SetColorModeToUniformColor() {
    vtkd_im.vtkPLYWriter_SetColorModeToUniformColor(cast(void*)swigCPtr);
  }

  public void SetColorModeToOff() {
    vtkd_im.vtkPLYWriter_SetColorModeToOff(cast(void*)swigCPtr);
  }

  public void SetArrayName(string _arg) {
    vtkd_im.vtkPLYWriter_SetArrayName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetArrayName() {
    string ret = std.conv.to!string(vtkd_im.vtkPLYWriter_GetArrayName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetComponent(int _arg) {
    vtkd_im.vtkPLYWriter_SetComponent(cast(void*)swigCPtr, _arg);
  }

  public int GetComponentMinValue() {
    auto ret = vtkd_im.vtkPLYWriter_GetComponentMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetComponentMaxValue() {
    auto ret = vtkd_im.vtkPLYWriter_GetComponentMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetComponent() {
    auto ret = vtkd_im.vtkPLYWriter_GetComponent(cast(void*)swigCPtr);
    return ret;
  }

  public void SetLookupTable(vtkScalarsToColors.vtkScalarsToColors arg0) {
    vtkd_im.vtkPLYWriter_SetLookupTable(cast(void*)swigCPtr, vtkScalarsToColors.vtkScalarsToColors.swigGetCPtr(arg0));
  }

  public vtkScalarsToColors.vtkScalarsToColors GetLookupTable() {
    void* cPtr = vtkd_im.vtkPLYWriter_GetLookupTable(cast(void*)swigCPtr);
    vtkScalarsToColors.vtkScalarsToColors ret = (cPtr is null) ? null : new vtkScalarsToColors.vtkScalarsToColors(cPtr, false);
    return ret;
  }

  public void SetColor(ubyte _arg1, ubyte _arg2, ubyte _arg3) {
    vtkd_im.vtkPLYWriter_SetColor__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetColor(SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char _arg) {
    vtkd_im.vtkPLYWriter_SetColor__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char.swigGetCPtr(_arg));
  }

  public ubyte* GetColor() {
    auto ret = cast(ubyte*)vtkd_im.vtkPLYWriter_GetColor__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetColor(ubyte* _arg1, ubyte* _arg2, ubyte* _arg3) {
    vtkd_im.vtkPLYWriter_GetColor__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetColor(SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char _arg) {
    vtkd_im.vtkPLYWriter_GetColor__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_unsigned_char.SWIGTYPE_p_unsigned_char.swigGetCPtr(_arg));
  }

  public vtkPolyData.vtkPolyData GetInput() {
    void* cPtr = vtkd_im.vtkPLYWriter_GetInput__SWIG_0(cast(void*)swigCPtr);
    vtkPolyData.vtkPolyData ret = (cPtr is null) ? null : new vtkPolyData.vtkPolyData(cPtr, false);
    return ret;
  }

  public vtkPolyData.vtkPolyData GetInput(int port) {
    void* cPtr = vtkd_im.vtkPLYWriter_GetInput__SWIG_1(cast(void*)swigCPtr, port);
    vtkPolyData.vtkPolyData ret = (cPtr is null) ? null : new vtkPolyData.vtkPolyData(cPtr, false);
    return ret;
  }

  public void SetFileName(string _arg) {
    vtkd_im.vtkPLYWriter_SetFileName(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetFileName() {
    string ret = std.conv.to!string(vtkd_im.vtkPLYWriter_GetFileName(cast(void*)swigCPtr));
    return ret;
  }

  public void SetFileType(int _arg) {
    vtkd_im.vtkPLYWriter_SetFileType(cast(void*)swigCPtr, _arg);
  }

  public int GetFileTypeMinValue() {
    auto ret = vtkd_im.vtkPLYWriter_GetFileTypeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetFileTypeMaxValue() {
    auto ret = vtkd_im.vtkPLYWriter_GetFileTypeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetFileType() {
    auto ret = vtkd_im.vtkPLYWriter_GetFileType(cast(void*)swigCPtr);
    return ret;
  }

  public void SetFileTypeToASCII() {
    vtkd_im.vtkPLYWriter_SetFileTypeToASCII(cast(void*)swigCPtr);
  }

  public void SetFileTypeToBinary() {
    vtkd_im.vtkPLYWriter_SetFileTypeToBinary(cast(void*)swigCPtr);
  }
}
