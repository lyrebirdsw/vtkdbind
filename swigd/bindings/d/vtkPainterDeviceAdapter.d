/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPainterDeviceAdapter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkDataArray;
static import vtkRenderer;
static import vtkObject;

class vtkPainterDeviceAdapter : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPainterDeviceAdapter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPainterDeviceAdapter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkPainterDeviceAdapter New() {
    void* cPtr = vtkd_im.vtkPainterDeviceAdapter_New();
    vtkPainterDeviceAdapter ret = (cPtr is null) ? null : new vtkPainterDeviceAdapter(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPainterDeviceAdapter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPainterDeviceAdapter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPainterDeviceAdapter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPainterDeviceAdapter ret = (cPtr is null) ? null : new vtkPainterDeviceAdapter(cPtr, false);
    return ret;
  }

  public vtkPainterDeviceAdapter NewInstance() const {
    void* cPtr = vtkd_im.vtkPainterDeviceAdapter_NewInstance(cast(void*)swigCPtr);
    vtkPainterDeviceAdapter ret = (cPtr is null) ? null : new vtkPainterDeviceAdapter(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public void BeginPrimitive(int mode) {
    vtkd_im.vtkPainterDeviceAdapter_BeginPrimitive(cast(void*)swigCPtr, mode);
  }

  public void EndPrimitive() {
    vtkd_im.vtkPainterDeviceAdapter_EndPrimitive(cast(void*)swigCPtr);
  }

  public int IsAttributesSupported(int attribute) {
    auto ret = vtkd_im.vtkPainterDeviceAdapter_IsAttributesSupported(cast(void*)swigCPtr, attribute);
    return ret;
  }

  public void SendMultiTextureCoords(int numcomp, int type, void* attribute, int idx, long offset) {
    vtkd_im.vtkPainterDeviceAdapter_SendMultiTextureCoords(cast(void*)swigCPtr, numcomp, type, cast(void*)attribute, idx, offset);
  }

  public void SendAttribute(int index, int components, int type, void* attribute, long offset) {
    vtkd_im.vtkPainterDeviceAdapter_SendAttribute__SWIG_0(cast(void*)swigCPtr, index, components, type, cast(void*)attribute, offset);
  }

  public void SendAttribute(int index, int components, int type, void* attribute) {
    vtkd_im.vtkPainterDeviceAdapter_SendAttribute__SWIG_1(cast(void*)swigCPtr, index, components, type, cast(void*)attribute);
  }

  public void SetAttributePointer(int index, vtkDataArray.vtkDataArray attributeArray) {
    vtkd_im.vtkPainterDeviceAdapter_SetAttributePointer__SWIG_0(cast(void*)swigCPtr, index, vtkDataArray.vtkDataArray.swigGetCPtr(attributeArray));
  }

  public void SetAttributePointer(int index, int numcomponents, int type, int stride, void* pointer) {
    vtkd_im.vtkPainterDeviceAdapter_SetAttributePointer__SWIG_1(cast(void*)swigCPtr, index, numcomponents, type, stride, cast(void*)pointer);
  }

  public void EnableAttributeArray(int index) {
    vtkd_im.vtkPainterDeviceAdapter_EnableAttributeArray(cast(void*)swigCPtr, index);
  }

  public void DisableAttributeArray(int index) {
    vtkd_im.vtkPainterDeviceAdapter_DisableAttributeArray(cast(void*)swigCPtr, index);
  }

  public void DrawArrays(int mode, long first, long count) {
    vtkd_im.vtkPainterDeviceAdapter_DrawArrays(cast(void*)swigCPtr, mode, first, count);
  }

  public void DrawElements(int mode, long count, int type, void* indices) {
    vtkd_im.vtkPainterDeviceAdapter_DrawElements(cast(void*)swigCPtr, mode, count, type, cast(void*)indices);
  }

  public int Compatible(vtkRenderer.vtkRenderer renderer) {
    auto ret = vtkd_im.vtkPainterDeviceAdapter_Compatible(cast(void*)swigCPtr, vtkRenderer.vtkRenderer.swigGetCPtr(renderer));
    return ret;
  }

  public void MakeLighting(int mode) {
    vtkd_im.vtkPainterDeviceAdapter_MakeLighting(cast(void*)swigCPtr, mode);
  }

  public int QueryLighting() {
    auto ret = vtkd_im.vtkPainterDeviceAdapter_QueryLighting(cast(void*)swigCPtr);
    return ret;
  }

  public void MakeMultisampling(int mode) {
    vtkd_im.vtkPainterDeviceAdapter_MakeMultisampling(cast(void*)swigCPtr, mode);
  }

  public int QueryMultisampling() {
    auto ret = vtkd_im.vtkPainterDeviceAdapter_QueryMultisampling(cast(void*)swigCPtr);
    return ret;
  }

  public void MakeBlending(int mode) {
    vtkd_im.vtkPainterDeviceAdapter_MakeBlending(cast(void*)swigCPtr, mode);
  }

  public int QueryBlending() {
    auto ret = vtkd_im.vtkPainterDeviceAdapter_QueryBlending(cast(void*)swigCPtr);
    return ret;
  }

  public void MakeVertexEmphasis(bool mode) {
    vtkd_im.vtkPainterDeviceAdapter_MakeVertexEmphasis(cast(void*)swigCPtr, mode);
  }

  public void Stencil(int on) {
    vtkd_im.vtkPainterDeviceAdapter_Stencil(cast(void*)swigCPtr, on);
  }

  public void WriteStencil(long value) {
    vtkd_im.vtkPainterDeviceAdapter_WriteStencil(cast(void*)swigCPtr, value);
  }

  public void TestStencil(long value) {
    vtkd_im.vtkPainterDeviceAdapter_TestStencil(cast(void*)swigCPtr, value);
  }
}
