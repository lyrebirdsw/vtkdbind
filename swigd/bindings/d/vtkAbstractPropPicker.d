/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkAbstractPropPicker;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkAssemblyPath;
static import vtkProp;
static import vtkProp3D;
static import vtkActor;
static import vtkActor2D;
static import vtkVolume;
static import vtkAssembly;
static import vtkPropAssembly;
static import vtkAbstractPicker;

class vtkAbstractPropPicker : vtkAbstractPicker.vtkAbstractPicker {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkAbstractPropPicker_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkAbstractPropPicker obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkAbstractPropPicker_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkAbstractPropPicker SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkAbstractPropPicker_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkAbstractPropPicker ret = (cPtr is null) ? null : new vtkAbstractPropPicker(cPtr, false);
    return ret;
  }

  public vtkAbstractPropPicker NewInstance() const {
    void* cPtr = vtkd_im.vtkAbstractPropPicker_NewInstance(cast(void*)swigCPtr);
    vtkAbstractPropPicker ret = (cPtr is null) ? null : new vtkAbstractPropPicker(cPtr, false);
    return ret;
  }

  alias vtkAbstractPicker.vtkAbstractPicker.NewInstance NewInstance;

  public void SetPath(vtkAssemblyPath.vtkAssemblyPath arg0) {
    vtkd_im.vtkAbstractPropPicker_SetPath(cast(void*)swigCPtr, vtkAssemblyPath.vtkAssemblyPath.swigGetCPtr(arg0));
  }

  public vtkAssemblyPath.vtkAssemblyPath GetPath() {
    void* cPtr = vtkd_im.vtkAbstractPropPicker_GetPath(cast(void*)swigCPtr);
    vtkAssemblyPath.vtkAssemblyPath ret = (cPtr is null) ? null : new vtkAssemblyPath.vtkAssemblyPath(cPtr, false);
    return ret;
  }

  public vtkProp.vtkProp GetViewProp() {
    void* cPtr = vtkd_im.vtkAbstractPropPicker_GetViewProp(cast(void*)swigCPtr);
    vtkProp.vtkProp ret = (cPtr is null) ? null : new vtkProp.vtkProp(cPtr, false);
    return ret;
  }

  public vtkProp3D.vtkProp3D GetProp3D() {
    void* cPtr = vtkd_im.vtkAbstractPropPicker_GetProp3D(cast(void*)swigCPtr);
    vtkProp3D.vtkProp3D ret = (cPtr is null) ? null : new vtkProp3D.vtkProp3D(cPtr, false);
    return ret;
  }

  public vtkActor.vtkActor GetActor() {
    void* cPtr = vtkd_im.vtkAbstractPropPicker_GetActor(cast(void*)swigCPtr);
    vtkActor.vtkActor ret = (cPtr is null) ? null : new vtkActor.vtkActor(cPtr, false);
    return ret;
  }

  public vtkActor2D.vtkActor2D GetActor2D() {
    void* cPtr = vtkd_im.vtkAbstractPropPicker_GetActor2D(cast(void*)swigCPtr);
    vtkActor2D.vtkActor2D ret = (cPtr is null) ? null : new vtkActor2D.vtkActor2D(cPtr, false);
    return ret;
  }

  public vtkVolume.vtkVolume GetVolume() {
    void* cPtr = vtkd_im.vtkAbstractPropPicker_GetVolume(cast(void*)swigCPtr);
    vtkVolume.vtkVolume ret = (cPtr is null) ? null : new vtkVolume.vtkVolume(cPtr, false);
    return ret;
  }

  public vtkAssembly.vtkAssembly GetAssembly() {
    void* cPtr = vtkd_im.vtkAbstractPropPicker_GetAssembly(cast(void*)swigCPtr);
    vtkAssembly.vtkAssembly ret = (cPtr is null) ? null : new vtkAssembly.vtkAssembly(cPtr, false);
    return ret;
  }

  public vtkPropAssembly.vtkPropAssembly GetPropAssembly() {
    void* cPtr = vtkd_im.vtkAbstractPropPicker_GetPropAssembly(cast(void*)swigCPtr);
    vtkPropAssembly.vtkPropAssembly ret = (cPtr is null) ? null : new vtkPropAssembly.vtkPropAssembly(cPtr, false);
    return ret;
  }
}
