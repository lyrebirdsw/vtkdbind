/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkCellTypes;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkUnsignedCharArray;
static import vtkIntArray;
static import vtkObject;

class vtkCellTypes : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkCellTypes_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkCellTypes obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkCellTypes New() {
    void* cPtr = vtkd_im.vtkCellTypes_New();
    vtkCellTypes ret = (cPtr is null) ? null : new vtkCellTypes(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkCellTypes_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkCellTypes SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkCellTypes_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkCellTypes ret = (cPtr is null) ? null : new vtkCellTypes(cPtr, false);
    return ret;
  }

  public vtkCellTypes NewInstance() const {
    void* cPtr = vtkd_im.vtkCellTypes_NewInstance(cast(void*)swigCPtr);
    vtkCellTypes ret = (cPtr is null) ? null : new vtkCellTypes(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public int Allocate(int sz, int ext) {
    auto ret = vtkd_im.vtkCellTypes_Allocate__SWIG_0(cast(void*)swigCPtr, sz, ext);
    return ret;
  }

  public int Allocate(int sz) {
    auto ret = vtkd_im.vtkCellTypes_Allocate__SWIG_1(cast(void*)swigCPtr, sz);
    return ret;
  }

  public int Allocate() {
    auto ret = vtkd_im.vtkCellTypes_Allocate__SWIG_2(cast(void*)swigCPtr);
    return ret;
  }

  public void InsertCell(int id, ubyte type, int loc) {
    vtkd_im.vtkCellTypes_InsertCell(cast(void*)swigCPtr, id, type, loc);
  }

  public int InsertNextCell(ubyte type, int loc) {
    auto ret = vtkd_im.vtkCellTypes_InsertNextCell(cast(void*)swigCPtr, type, loc);
    return ret;
  }

  public void SetCellTypes(int ncells, vtkUnsignedCharArray.vtkUnsignedCharArray cellTypes, vtkIntArray.vtkIntArray cellLocations) {
    vtkd_im.vtkCellTypes_SetCellTypes(cast(void*)swigCPtr, ncells, vtkUnsignedCharArray.vtkUnsignedCharArray.swigGetCPtr(cellTypes), vtkIntArray.vtkIntArray.swigGetCPtr(cellLocations));
  }

  public int GetCellLocation(int cellId) {
    auto ret = vtkd_im.vtkCellTypes_GetCellLocation(cast(void*)swigCPtr, cellId);
    return ret;
  }

  public void DeleteCell(long cellId) {
    vtkd_im.vtkCellTypes_DeleteCell(cast(void*)swigCPtr, cellId);
  }

  public int GetNumberOfTypes() {
    auto ret = vtkd_im.vtkCellTypes_GetNumberOfTypes(cast(void*)swigCPtr);
    return ret;
  }

  public int IsType(ubyte type) {
    auto ret = vtkd_im.vtkCellTypes_IsType(cast(void*)swigCPtr, type);
    return ret;
  }

  public int InsertNextType(ubyte type) {
    auto ret = vtkd_im.vtkCellTypes_InsertNextType(cast(void*)swigCPtr, type);
    return ret;
  }

  public ubyte GetCellType(int cellId) {
    auto ret = vtkd_im.vtkCellTypes_GetCellType(cast(void*)swigCPtr, cellId);
    return ret;
  }

  public void Squeeze() {
    vtkd_im.vtkCellTypes_Squeeze(cast(void*)swigCPtr);
  }

  public void Reset() {
    vtkd_im.vtkCellTypes_Reset(cast(void*)swigCPtr);
  }

  public core.stdc.config.c_ulong GetActualMemorySize() {
    auto ret = vtkd_im.vtkCellTypes_GetActualMemorySize(cast(void*)swigCPtr);
    return ret;
  }

  public void DeepCopy(vtkCellTypes src) {
    vtkd_im.vtkCellTypes_DeepCopy(cast(void*)swigCPtr, vtkCellTypes.swigGetCPtr(src));
  }

  public static string GetClassNameFromTypeId(int typeId) {
    string ret = std.conv.to!string(vtkd_im.vtkCellTypes_GetClassNameFromTypeId(typeId));
    return ret;
  }

  public static int GetTypeIdFromClassName(string classname) {
    auto ret = vtkd_im.vtkCellTypes_GetTypeIdFromClassName((classname ? std.string.toStringz(classname) : null));
    return ret;
  }

  public static int IsLinear(ubyte type) {
    auto ret = vtkd_im.vtkCellTypes_IsLinear(type);
    return ret;
  }
}
