/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkXMLUtilities;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_ostream;
static import vtkXMLDataElement;
static import vtkObject;

class vtkXMLUtilities : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkXMLUtilities_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkXMLUtilities obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkXMLUtilities New() {
    void* cPtr = vtkd_im.vtkXMLUtilities_New();
    vtkXMLUtilities ret = (cPtr is null) ? null : new vtkXMLUtilities(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkXMLUtilities_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkXMLUtilities SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkXMLUtilities_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkXMLUtilities ret = (cPtr is null) ? null : new vtkXMLUtilities(cPtr, false);
    return ret;
  }

  public vtkXMLUtilities NewInstance() const {
    void* cPtr = vtkd_im.vtkXMLUtilities_NewInstance(cast(void*)swigCPtr);
    vtkXMLUtilities ret = (cPtr is null) ? null : new vtkXMLUtilities(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public static void EncodeString(string input, int input_encoding, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream output, int output_encoding, int special_entities) {
    vtkd_im.vtkXMLUtilities_EncodeString__SWIG_0((input ? std.string.toStringz(input) : null), input_encoding, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(output), output_encoding, special_entities);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public static void EncodeString(string input, int input_encoding, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream output, int output_encoding) {
    vtkd_im.vtkXMLUtilities_EncodeString__SWIG_1((input ? std.string.toStringz(input) : null), input_encoding, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(output), output_encoding);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public static void CollateAttributes(vtkXMLDataElement.vtkXMLDataElement arg0, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream arg1, string sep) {
    vtkd_im.vtkXMLUtilities_CollateAttributes__SWIG_0(vtkXMLDataElement.vtkXMLDataElement.swigGetCPtr(arg0), SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(arg1), (sep ? std.string.toStringz(sep) : null));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public static void CollateAttributes(vtkXMLDataElement.vtkXMLDataElement arg0, SWIGTYPE_p_ostream.SWIGTYPE_p_ostream arg1) {
    vtkd_im.vtkXMLUtilities_CollateAttributes__SWIG_1(vtkXMLDataElement.vtkXMLDataElement.swigGetCPtr(arg0), SWIGTYPE_p_ostream.SWIGTYPE_p_ostream.swigGetCPtr(arg1));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public static void ReadElementFromAttributeArray(vtkXMLDataElement.vtkXMLDataElement element, char** atts, int encoding) {
    vtkd_im.vtkXMLUtilities_ReadElementFromAttributeArray(vtkXMLDataElement.vtkXMLDataElement.swigGetCPtr(element), cast(void*)atts, encoding);
  }

  public static void FactorElements(vtkXMLDataElement.vtkXMLDataElement tree) {
    vtkd_im.vtkXMLUtilities_FactorElements(vtkXMLDataElement.vtkXMLDataElement.swigGetCPtr(tree));
  }

  public static void UnFactorElements(vtkXMLDataElement.vtkXMLDataElement tree) {
    vtkd_im.vtkXMLUtilities_UnFactorElements(vtkXMLDataElement.vtkXMLDataElement.swigGetCPtr(tree));
  }
}
