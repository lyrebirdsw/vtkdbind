/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkAMRGaussianPulseSource;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkOverlappingAMRAlgorithm;

class vtkAMRGaussianPulseSource : vtkOverlappingAMRAlgorithm.vtkOverlappingAMRAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkAMRGaussianPulseSource_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkAMRGaussianPulseSource obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkAMRGaussianPulseSource New() {
    void* cPtr = vtkd_im.vtkAMRGaussianPulseSource_New();
    vtkAMRGaussianPulseSource ret = (cPtr is null) ? null : new vtkAMRGaussianPulseSource(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkAMRGaussianPulseSource_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkAMRGaussianPulseSource SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkAMRGaussianPulseSource_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkAMRGaussianPulseSource ret = (cPtr is null) ? null : new vtkAMRGaussianPulseSource(cPtr, false);
    return ret;
  }

  public vtkAMRGaussianPulseSource NewInstance() const {
    void* cPtr = vtkd_im.vtkAMRGaussianPulseSource_NewInstance(cast(void*)swigCPtr);
    vtkAMRGaussianPulseSource ret = (cPtr is null) ? null : new vtkAMRGaussianPulseSource(cPtr, false);
    return ret;
  }

  alias vtkOverlappingAMRAlgorithm.vtkOverlappingAMRAlgorithm.NewInstance NewInstance;

  public void SetDimension(int _arg) {
    vtkd_im.vtkAMRGaussianPulseSource_SetDimension(cast(void*)swigCPtr, _arg);
  }

  public void SetNumberOfLevels(int _arg) {
    vtkd_im.vtkAMRGaussianPulseSource_SetNumberOfLevels(cast(void*)swigCPtr, _arg);
  }

  public void SetRefinementRatio(int r) {
    vtkd_im.vtkAMRGaussianPulseSource_SetRefinementRatio(cast(void*)swigCPtr, r);
  }

  public void SetRootSpacing(double h0) {
    vtkd_im.vtkAMRGaussianPulseSource_SetRootSpacing(cast(void*)swigCPtr, h0);
  }

  public void SetPulseOrigin(double _arg1, double _arg2, double _arg3) {
    vtkd_im.vtkAMRGaussianPulseSource_SetPulseOrigin__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetPulseOrigin(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkAMRGaussianPulseSource_SetPulseOrigin__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetPulseOrigin() {
    auto ret = cast(double*)vtkd_im.vtkAMRGaussianPulseSource_GetPulseOrigin__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetPulseOrigin(double* _arg1, double* _arg2, double* _arg3) {
    vtkd_im.vtkAMRGaussianPulseSource_GetPulseOrigin__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetPulseOrigin(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkAMRGaussianPulseSource_GetPulseOrigin__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public void SetXPulseOrigin(double f) {
    vtkd_im.vtkAMRGaussianPulseSource_SetXPulseOrigin(cast(void*)swigCPtr, f);
  }

  public void SetYPulseOrigin(double f) {
    vtkd_im.vtkAMRGaussianPulseSource_SetYPulseOrigin(cast(void*)swigCPtr, f);
  }

  public void SetZPulseOrigin(double f) {
    vtkd_im.vtkAMRGaussianPulseSource_SetZPulseOrigin(cast(void*)swigCPtr, f);
  }

  public void SetPulseWidth(double _arg1, double _arg2, double _arg3) {
    vtkd_im.vtkAMRGaussianPulseSource_SetPulseWidth__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetPulseWidth(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkAMRGaussianPulseSource_SetPulseWidth__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetPulseWidth() {
    auto ret = cast(double*)vtkd_im.vtkAMRGaussianPulseSource_GetPulseWidth__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetPulseWidth(double* _arg1, double* _arg2, double* _arg3) {
    vtkd_im.vtkAMRGaussianPulseSource_GetPulseWidth__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetPulseWidth(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkAMRGaussianPulseSource_GetPulseWidth__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public void SetXPulseWidth(double f) {
    vtkd_im.vtkAMRGaussianPulseSource_SetXPulseWidth(cast(void*)swigCPtr, f);
  }

  public void SetYPulseWidth(double f) {
    vtkd_im.vtkAMRGaussianPulseSource_SetYPulseWidth(cast(void*)swigCPtr, f);
  }

  public void SetZPulseWidth(double f) {
    vtkd_im.vtkAMRGaussianPulseSource_SetZPulseWidth(cast(void*)swigCPtr, f);
  }

  public void SetPulseAmplitude(double _arg) {
    vtkd_im.vtkAMRGaussianPulseSource_SetPulseAmplitude(cast(void*)swigCPtr, _arg);
  }

  public double GetPulseAmplitude() {
    auto ret = vtkd_im.vtkAMRGaussianPulseSource_GetPulseAmplitude(cast(void*)swigCPtr);
    return ret;
  }
}
