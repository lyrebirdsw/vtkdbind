/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkHyperTreeGrid;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkInformationIntegerKey;
static import vtkInformationDoubleVectorKey;
static import vtkObjectBase;
static import SWIGTYPE_p_unsigned_int;
static import vtkDataArray;
static import vtkBitArray;
static import vtkIdTypeArray;
static import vtkHyperTreeCursor;
static import SWIGTYPE_p_double;
static import vtkCell;
static import vtkGenericCell;
static import vtkIdList;
static import SWIGTYPE_p_vtkHyperTreeIterator;
static import vtkDataSet;

class vtkHyperTreeGrid : vtkDataSet.vtkDataSet {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkHyperTreeGrid_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkHyperTreeGrid obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkInformationIntegerKey.vtkInformationIntegerKey LEVELS() {
    void* cPtr = vtkd_im.vtkHyperTreeGrid_LEVELS();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public static vtkInformationIntegerKey.vtkInformationIntegerKey DIMENSION() {
    void* cPtr = vtkd_im.vtkHyperTreeGrid_DIMENSION();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public static vtkInformationDoubleVectorKey.vtkInformationDoubleVectorKey SIZES() {
    void* cPtr = vtkd_im.vtkHyperTreeGrid_SIZES();
    vtkInformationDoubleVectorKey.vtkInformationDoubleVectorKey ret = (cPtr is null) ? null : new vtkInformationDoubleVectorKey.vtkInformationDoubleVectorKey(cPtr, false);
    return ret;
  }

  public static vtkHyperTreeGrid New() {
    void* cPtr = vtkd_im.vtkHyperTreeGrid_New();
    vtkHyperTreeGrid ret = (cPtr is null) ? null : new vtkHyperTreeGrid(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkHyperTreeGrid_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkHyperTreeGrid SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkHyperTreeGrid_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkHyperTreeGrid ret = (cPtr is null) ? null : new vtkHyperTreeGrid(cPtr, false);
    return ret;
  }

  public vtkHyperTreeGrid NewInstance() const {
    void* cPtr = vtkd_im.vtkHyperTreeGrid_NewInstance(cast(void*)swigCPtr);
    vtkHyperTreeGrid ret = (cPtr is null) ? null : new vtkHyperTreeGrid(cPtr, false);
    return ret;
  }

  alias vtkDataSet.vtkDataSet.NewInstance NewInstance;

  public void SetGridSize(SWIGTYPE_p_unsigned_int.SWIGTYPE_p_unsigned_int arg0) {
    vtkd_im.vtkHyperTreeGrid_SetGridSize(cast(void*)swigCPtr, SWIGTYPE_p_unsigned_int.SWIGTYPE_p_unsigned_int.swigGetCPtr(arg0));
  }

  public uint* GetGridSize() {
    auto ret = cast(uint*)vtkd_im.vtkHyperTreeGrid_GetGridSize__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetGridSize(uint* _arg1, uint* _arg2, uint* _arg3) {
    vtkd_im.vtkHyperTreeGrid_GetGridSize__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetGridSize(SWIGTYPE_p_unsigned_int.SWIGTYPE_p_unsigned_int _arg) {
    vtkd_im.vtkHyperTreeGrid_GetGridSize__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_unsigned_int.SWIGTYPE_p_unsigned_int.swigGetCPtr(_arg));
  }

  public void SetTransposedRootIndexing(bool _arg) {
    vtkd_im.vtkHyperTreeGrid_SetTransposedRootIndexing(cast(void*)swigCPtr, _arg);
  }

  public bool GetTransposedRootIndexing() {
    bool ret = vtkd_im.vtkHyperTreeGrid_GetTransposedRootIndexing(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetIndexingModeToKJI() {
    vtkd_im.vtkHyperTreeGrid_SetIndexingModeToKJI(cast(void*)swigCPtr);
  }

  public void SetIndexingModeToIJK() {
    vtkd_im.vtkHyperTreeGrid_SetIndexingModeToIJK(cast(void*)swigCPtr);
  }

  public void SetBranchFactor(uint arg0) {
    vtkd_im.vtkHyperTreeGrid_SetBranchFactor(cast(void*)swigCPtr, arg0);
  }

  public uint GetBranchFactor() {
    auto ret = vtkd_im.vtkHyperTreeGrid_GetBranchFactor(cast(void*)swigCPtr);
    return ret;
  }

  public void SetDimension(uint arg0) {
    vtkd_im.vtkHyperTreeGrid_SetDimension(cast(void*)swigCPtr, arg0);
  }

  public uint GetDimension() {
    auto ret = vtkd_im.vtkHyperTreeGrid_GetDimension(cast(void*)swigCPtr);
    return ret;
  }

  public long GetNumberOfLeaves() {
    auto ret = vtkd_im.vtkHyperTreeGrid_GetNumberOfLeaves(cast(void*)swigCPtr);
    return ret;
  }

  public long GetNumberOfLevels(long arg0) {
    auto ret = vtkd_im.vtkHyperTreeGrid_GetNumberOfLevels(cast(void*)swigCPtr, arg0);
    return ret;
  }

  public long GetNumberOfTrees() {
    auto ret = vtkd_im.vtkHyperTreeGrid_GetNumberOfTrees(cast(void*)swigCPtr);
    return ret;
  }

  public void SetXCoordinates(vtkDataArray.vtkDataArray arg0) {
    vtkd_im.vtkHyperTreeGrid_SetXCoordinates(cast(void*)swigCPtr, vtkDataArray.vtkDataArray.swigGetCPtr(arg0));
  }

  public vtkDataArray.vtkDataArray GetXCoordinates() {
    void* cPtr = vtkd_im.vtkHyperTreeGrid_GetXCoordinates(cast(void*)swigCPtr);
    vtkDataArray.vtkDataArray ret = (cPtr is null) ? null : new vtkDataArray.vtkDataArray(cPtr, false);
    return ret;
  }

  public void SetYCoordinates(vtkDataArray.vtkDataArray arg0) {
    vtkd_im.vtkHyperTreeGrid_SetYCoordinates(cast(void*)swigCPtr, vtkDataArray.vtkDataArray.swigGetCPtr(arg0));
  }

  public vtkDataArray.vtkDataArray GetYCoordinates() {
    void* cPtr = vtkd_im.vtkHyperTreeGrid_GetYCoordinates(cast(void*)swigCPtr);
    vtkDataArray.vtkDataArray ret = (cPtr is null) ? null : new vtkDataArray.vtkDataArray(cPtr, false);
    return ret;
  }

  public void SetZCoordinates(vtkDataArray.vtkDataArray arg0) {
    vtkd_im.vtkHyperTreeGrid_SetZCoordinates(cast(void*)swigCPtr, vtkDataArray.vtkDataArray.swigGetCPtr(arg0));
  }

  public vtkDataArray.vtkDataArray GetZCoordinates() {
    void* cPtr = vtkd_im.vtkHyperTreeGrid_GetZCoordinates(cast(void*)swigCPtr);
    vtkDataArray.vtkDataArray ret = (cPtr is null) ? null : new vtkDataArray.vtkDataArray(cPtr, false);
    return ret;
  }

  public void SetMaterialMask(vtkBitArray.vtkBitArray arg0) {
    vtkd_im.vtkHyperTreeGrid_SetMaterialMask(cast(void*)swigCPtr, vtkBitArray.vtkBitArray.swigGetCPtr(arg0));
  }

  public vtkBitArray.vtkBitArray GetMaterialMask() {
    void* cPtr = vtkd_im.vtkHyperTreeGrid_GetMaterialMask(cast(void*)swigCPtr);
    vtkBitArray.vtkBitArray ret = (cPtr is null) ? null : new vtkBitArray.vtkBitArray(cPtr, false);
    return ret;
  }

  public void SetMaterialMaskIndex(vtkIdTypeArray.vtkIdTypeArray arg0) {
    vtkd_im.vtkHyperTreeGrid_SetMaterialMaskIndex(cast(void*)swigCPtr, vtkIdTypeArray.vtkIdTypeArray.swigGetCPtr(arg0));
  }

  public vtkIdTypeArray.vtkIdTypeArray GetMaterialMaskIndex() {
    void* cPtr = vtkd_im.vtkHyperTreeGrid_GetMaterialMaskIndex(cast(void*)swigCPtr);
    vtkIdTypeArray.vtkIdTypeArray ret = (cPtr is null) ? null : new vtkIdTypeArray.vtkIdTypeArray(cPtr, false);
    return ret;
  }

  public void GenerateTrees() {
    vtkd_im.vtkHyperTreeGrid_GenerateTrees(cast(void*)swigCPtr);
  }

  public vtkHyperTreeCursor.vtkHyperTreeCursor NewCursor(long arg0) {
    void* cPtr = vtkd_im.vtkHyperTreeGrid_NewCursor(cast(void*)swigCPtr, arg0);
    vtkHyperTreeCursor.vtkHyperTreeCursor ret = (cPtr is null) ? null : new vtkHyperTreeCursor.vtkHyperTreeCursor(cPtr, false);
    return ret;
  }

  public void SubdivideLeaf(vtkHyperTreeCursor.vtkHyperTreeCursor arg0, long arg1) {
    vtkd_im.vtkHyperTreeGrid_SubdivideLeaf(cast(void*)swigCPtr, vtkHyperTreeCursor.vtkHyperTreeCursor.swigGetCPtr(arg0), arg1);
  }

  public override double* GetPoint(long arg0) {
    auto ret = cast(double*)vtkd_im.vtkHyperTreeGrid_GetPoint__SWIG_0(cast(void*)swigCPtr, arg0);
    return ret;
  }

  public override void GetPoint(long arg0, SWIGTYPE_p_double.SWIGTYPE_p_double arg1) {
    vtkd_im.vtkHyperTreeGrid_GetPoint__SWIG_1(cast(void*)swigCPtr, arg0, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(arg1));
  }

  public override vtkCell.vtkCell GetCell(long arg0) {
    void* cPtr = vtkd_im.vtkHyperTreeGrid_GetCell__SWIG_0(cast(void*)swigCPtr, arg0);
    vtkCell.vtkCell ret = (cPtr is null) ? null : new vtkCell.vtkCell(cPtr, false);
    return ret;
  }

  public override void GetCell(long arg0, vtkGenericCell.vtkGenericCell arg1) {
    vtkd_im.vtkHyperTreeGrid_GetCell__SWIG_1(cast(void*)swigCPtr, arg0, vtkGenericCell.vtkGenericCell.swigGetCPtr(arg1));
  }

  public override void GetCellPoints(long arg0, vtkIdList.vtkIdList arg1) {
    vtkd_im.vtkHyperTreeGrid_GetCellPoints__SWIG_0(cast(void*)swigCPtr, arg0, vtkIdList.vtkIdList.swigGetCPtr(arg1));
  }

  public void GetCellPoints(long arg0, long* arg1, long** arg2) {
    vtkd_im.vtkHyperTreeGrid_GetCellPoints__SWIG_1(cast(void*)swigCPtr, arg0, cast(void*)arg1, cast(void*)arg2);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  alias vtkDataSet.vtkDataSet.GetCellPoints GetCellPoints;

  public override long FindCell(SWIGTYPE_p_double.SWIGTYPE_p_double x, vtkCell.vtkCell cell, long cellId, double tol2, int* subId, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, double* weights) {
    auto ret = vtkd_im.vtkHyperTreeGrid_FindCell__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), vtkCell.vtkCell.swigGetCPtr(cell), cellId, tol2, cast(void*)subId, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), cast(void*)weights);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public override long FindCell(SWIGTYPE_p_double.SWIGTYPE_p_double x, vtkCell.vtkCell cell, vtkGenericCell.vtkGenericCell gencell, long cellId, double tol2, int* subId, SWIGTYPE_p_double.SWIGTYPE_p_double pcoords, double* weights) {
    auto ret = vtkd_im.vtkHyperTreeGrid_FindCell__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), vtkCell.vtkCell.swigGetCPtr(cell), vtkGenericCell.vtkGenericCell.swigGetCPtr(gencell), cellId, tol2, cast(void*)subId, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pcoords), cast(void*)weights);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public void InitializeTreeIterator(SWIGTYPE_p_vtkHyperTreeIterator.SWIGTYPE_p_vtkHyperTreeIterator arg0) {
    vtkd_im.vtkHyperTreeGrid_InitializeTreeIterator(cast(void*)swigCPtr, SWIGTYPE_p_vtkHyperTreeIterator.SWIGTYPE_p_vtkHyperTreeIterator.swigGetCPtr(arg0));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GenerateSuperCursorTraversalTable() {
    vtkd_im.vtkHyperTreeGrid_GenerateSuperCursorTraversalTable(cast(void*)swigCPtr);
  }

  public uint GetNumberOfChildren() {
    auto ret = vtkd_im.vtkHyperTreeGrid_GetNumberOfChildren(cast(void*)swigCPtr);
    return ret;
  }

  public void GetLevelZeroCoordsFromIndex(long index, uint* i, uint* j, uint* k) {
    vtkd_im.vtkHyperTreeGrid_GetLevelZeroCoordsFromIndex(cast(void*)swigCPtr, index, cast(void*)i, cast(void*)j, cast(void*)k);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }
}
