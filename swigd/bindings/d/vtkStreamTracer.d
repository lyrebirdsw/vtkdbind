/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkStreamTracer;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkDataSet;
static import vtkAlgorithmOutput;
static import vtkInitialValueProblemSolver;
static import vtkAbstractInterpolatedVelocityField;
static import vtkPolyDataAlgorithm;

class vtkStreamTracer : vtkPolyDataAlgorithm.vtkPolyDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkStreamTracer_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkStreamTracer obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkStreamTracer_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkStreamTracer SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkStreamTracer_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkStreamTracer ret = (cPtr is null) ? null : new vtkStreamTracer(cPtr, false);
    return ret;
  }

  public vtkStreamTracer NewInstance() const {
    void* cPtr = vtkd_im.vtkStreamTracer_NewInstance(cast(void*)swigCPtr);
    vtkStreamTracer ret = (cPtr is null) ? null : new vtkStreamTracer(cPtr, false);
    return ret;
  }

  alias vtkPolyDataAlgorithm.vtkPolyDataAlgorithm.NewInstance NewInstance;

  public static vtkStreamTracer New() {
    void* cPtr = vtkd_im.vtkStreamTracer_New();
    vtkStreamTracer ret = (cPtr is null) ? null : new vtkStreamTracer(cPtr, false);
    return ret;
  }

  public void SetStartPosition(double _arg1, double _arg2, double _arg3) {
    vtkd_im.vtkStreamTracer_SetStartPosition__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetStartPosition(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkStreamTracer_SetStartPosition__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetStartPosition() {
    auto ret = cast(double*)vtkd_im.vtkStreamTracer_GetStartPosition__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetStartPosition(double* _arg1, double* _arg2, double* _arg3) {
    vtkd_im.vtkStreamTracer_GetStartPosition__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetStartPosition(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkStreamTracer_GetStartPosition__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public void SetSourceData(vtkDataSet.vtkDataSet source) {
    vtkd_im.vtkStreamTracer_SetSourceData(cast(void*)swigCPtr, vtkDataSet.vtkDataSet.swigGetCPtr(source));
  }

  public vtkDataSet.vtkDataSet GetSource() {
    void* cPtr = vtkd_im.vtkStreamTracer_GetSource(cast(void*)swigCPtr);
    vtkDataSet.vtkDataSet ret = (cPtr is null) ? null : new vtkDataSet.vtkDataSet(cPtr, false);
    return ret;
  }

  public void SetSourceConnection(vtkAlgorithmOutput.vtkAlgorithmOutput algOutput) {
    vtkd_im.vtkStreamTracer_SetSourceConnection(cast(void*)swigCPtr, vtkAlgorithmOutput.vtkAlgorithmOutput.swigGetCPtr(algOutput));
  }

  public void SetIntegrator(vtkInitialValueProblemSolver.vtkInitialValueProblemSolver arg0) {
    vtkd_im.vtkStreamTracer_SetIntegrator(cast(void*)swigCPtr, vtkInitialValueProblemSolver.vtkInitialValueProblemSolver.swigGetCPtr(arg0));
  }

  public vtkInitialValueProblemSolver.vtkInitialValueProblemSolver GetIntegrator() {
    void* cPtr = vtkd_im.vtkStreamTracer_GetIntegrator(cast(void*)swigCPtr);
    vtkInitialValueProblemSolver.vtkInitialValueProblemSolver ret = (cPtr is null) ? null : new vtkInitialValueProblemSolver.vtkInitialValueProblemSolver(cPtr, false);
    return ret;
  }

  public void SetIntegratorType(int type) {
    vtkd_im.vtkStreamTracer_SetIntegratorType(cast(void*)swigCPtr, type);
  }

  public int GetIntegratorType() {
    auto ret = vtkd_im.vtkStreamTracer_GetIntegratorType(cast(void*)swigCPtr);
    return ret;
  }

  public void SetIntegratorTypeToRungeKutta2() {
    vtkd_im.vtkStreamTracer_SetIntegratorTypeToRungeKutta2(cast(void*)swigCPtr);
  }

  public void SetIntegratorTypeToRungeKutta4() {
    vtkd_im.vtkStreamTracer_SetIntegratorTypeToRungeKutta4(cast(void*)swigCPtr);
  }

  public void SetIntegratorTypeToRungeKutta45() {
    vtkd_im.vtkStreamTracer_SetIntegratorTypeToRungeKutta45(cast(void*)swigCPtr);
  }

  public void SetInterpolatorTypeToDataSetPointLocator() {
    vtkd_im.vtkStreamTracer_SetInterpolatorTypeToDataSetPointLocator(cast(void*)swigCPtr);
  }

  public void SetInterpolatorTypeToCellLocator() {
    vtkd_im.vtkStreamTracer_SetInterpolatorTypeToCellLocator(cast(void*)swigCPtr);
  }

  public void SetMaximumPropagation(double _arg) {
    vtkd_im.vtkStreamTracer_SetMaximumPropagation(cast(void*)swigCPtr, _arg);
  }

  public double GetMaximumPropagation() {
    auto ret = vtkd_im.vtkStreamTracer_GetMaximumPropagation(cast(void*)swigCPtr);
    return ret;
  }

  public void SetIntegrationStepUnit(int unit) {
    vtkd_im.vtkStreamTracer_SetIntegrationStepUnit(cast(void*)swigCPtr, unit);
  }

  public int GetIntegrationStepUnit() {
    auto ret = vtkd_im.vtkStreamTracer_GetIntegrationStepUnit(cast(void*)swigCPtr);
    return ret;
  }

  public void SetInitialIntegrationStep(double _arg) {
    vtkd_im.vtkStreamTracer_SetInitialIntegrationStep(cast(void*)swigCPtr, _arg);
  }

  public double GetInitialIntegrationStep() {
    auto ret = vtkd_im.vtkStreamTracer_GetInitialIntegrationStep(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMinimumIntegrationStep(double _arg) {
    vtkd_im.vtkStreamTracer_SetMinimumIntegrationStep(cast(void*)swigCPtr, _arg);
  }

  public double GetMinimumIntegrationStep() {
    auto ret = vtkd_im.vtkStreamTracer_GetMinimumIntegrationStep(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMaximumIntegrationStep(double _arg) {
    vtkd_im.vtkStreamTracer_SetMaximumIntegrationStep(cast(void*)swigCPtr, _arg);
  }

  public double GetMaximumIntegrationStep() {
    auto ret = vtkd_im.vtkStreamTracer_GetMaximumIntegrationStep(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMaximumError(double _arg) {
    vtkd_im.vtkStreamTracer_SetMaximumError(cast(void*)swigCPtr, _arg);
  }

  public double GetMaximumError() {
    auto ret = vtkd_im.vtkStreamTracer_GetMaximumError(cast(void*)swigCPtr);
    return ret;
  }

  public void SetMaximumNumberOfSteps(long _arg) {
    vtkd_im.vtkStreamTracer_SetMaximumNumberOfSteps(cast(void*)swigCPtr, _arg);
  }

  public long GetMaximumNumberOfSteps() {
    auto ret = vtkd_im.vtkStreamTracer_GetMaximumNumberOfSteps(cast(void*)swigCPtr);
    return ret;
  }

  public void SetTerminalSpeed(double _arg) {
    vtkd_im.vtkStreamTracer_SetTerminalSpeed(cast(void*)swigCPtr, _arg);
  }

  public double GetTerminalSpeed() {
    auto ret = vtkd_im.vtkStreamTracer_GetTerminalSpeed(cast(void*)swigCPtr);
    return ret;
  }

  public void SetIntegrationDirection(int _arg) {
    vtkd_im.vtkStreamTracer_SetIntegrationDirection(cast(void*)swigCPtr, _arg);
  }

  public int GetIntegrationDirectionMinValue() {
    auto ret = vtkd_im.vtkStreamTracer_GetIntegrationDirectionMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetIntegrationDirectionMaxValue() {
    auto ret = vtkd_im.vtkStreamTracer_GetIntegrationDirectionMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetIntegrationDirection() {
    auto ret = vtkd_im.vtkStreamTracer_GetIntegrationDirection(cast(void*)swigCPtr);
    return ret;
  }

  public void SetIntegrationDirectionToForward() {
    vtkd_im.vtkStreamTracer_SetIntegrationDirectionToForward(cast(void*)swigCPtr);
  }

  public void SetIntegrationDirectionToBackward() {
    vtkd_im.vtkStreamTracer_SetIntegrationDirectionToBackward(cast(void*)swigCPtr);
  }

  public void SetIntegrationDirectionToBoth() {
    vtkd_im.vtkStreamTracer_SetIntegrationDirectionToBoth(cast(void*)swigCPtr);
  }

  public void SetComputeVorticity(bool _arg) {
    vtkd_im.vtkStreamTracer_SetComputeVorticity(cast(void*)swigCPtr, _arg);
  }

  public bool GetComputeVorticity() {
    bool ret = vtkd_im.vtkStreamTracer_GetComputeVorticity(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetRotationScale(double _arg) {
    vtkd_im.vtkStreamTracer_SetRotationScale(cast(void*)swigCPtr, _arg);
  }

  public double GetRotationScale() {
    auto ret = vtkd_im.vtkStreamTracer_GetRotationScale(cast(void*)swigCPtr);
    return ret;
  }

  public void SetInterpolatorPrototype(vtkAbstractInterpolatedVelocityField.vtkAbstractInterpolatedVelocityField ivf) {
    vtkd_im.vtkStreamTracer_SetInterpolatorPrototype(cast(void*)swigCPtr, vtkAbstractInterpolatedVelocityField.vtkAbstractInterpolatedVelocityField.swigGetCPtr(ivf));
  }

  public void SetInterpolatorType(int interpType) {
    vtkd_im.vtkStreamTracer_SetInterpolatorType(cast(void*)swigCPtr, interpType);
  }
}
