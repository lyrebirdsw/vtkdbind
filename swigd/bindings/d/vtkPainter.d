/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPainter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkInformationIntegerKey;
static import vtkInformation;
static import vtkRenderer;
static import vtkActor;
static import vtkWindow;
static import SWIGTYPE_p_double;
static import vtkDataObject;
static import vtkObject;

class vtkPainter : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPainter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPainter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vtkd_im.delete_vtkPainter(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPainter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPainter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPainter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPainter ret = (cPtr is null) ? null : new vtkPainter(cPtr, false);
    return ret;
  }

  public vtkPainter NewInstance() const {
    void* cPtr = vtkd_im.vtkPainter_NewInstance(cast(void*)swigCPtr);
    vtkPainter ret = (cPtr is null) ? null : new vtkPainter(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public static vtkInformationIntegerKey.vtkInformationIntegerKey STATIC_DATA() {
    void* cPtr = vtkd_im.vtkPainter_STATIC_DATA();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public static vtkInformationIntegerKey.vtkInformationIntegerKey CONSERVE_MEMORY() {
    void* cPtr = vtkd_im.vtkPainter_CONSERVE_MEMORY();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public static vtkInformationIntegerKey.vtkInformationIntegerKey HIGH_QUALITY() {
    void* cPtr = vtkd_im.vtkPainter_HIGH_QUALITY();
    vtkInformationIntegerKey.vtkInformationIntegerKey ret = (cPtr is null) ? null : new vtkInformationIntegerKey.vtkInformationIntegerKey(cPtr, false);
    return ret;
  }

  public vtkInformation.vtkInformation GetInformation() {
    void* cPtr = vtkd_im.vtkPainter_GetInformation(cast(void*)swigCPtr);
    vtkInformation.vtkInformation ret = (cPtr is null) ? null : new vtkInformation.vtkInformation(cPtr, false);
    return ret;
  }

  public void SetInformation(vtkInformation.vtkInformation arg0) {
    vtkd_im.vtkPainter_SetInformation(cast(void*)swigCPtr, vtkInformation.vtkInformation.swigGetCPtr(arg0));
  }

  public vtkPainter GetDelegatePainter() {
    void* cPtr = vtkd_im.vtkPainter_GetDelegatePainter(cast(void*)swigCPtr);
    vtkPainter ret = (cPtr is null) ? null : new vtkPainter(cPtr, false);
    return ret;
  }

  public void SetDelegatePainter(vtkPainter arg0) {
    vtkd_im.vtkPainter_SetDelegatePainter(cast(void*)swigCPtr, vtkPainter.swigGetCPtr(arg0));
  }

  public void Render(vtkRenderer.vtkRenderer renderer, vtkActor.vtkActor actor, core.stdc.config.c_ulong typeflags, bool forceCompileOnly) {
    vtkd_im.vtkPainter_Render(cast(void*)swigCPtr, vtkRenderer.vtkRenderer.swigGetCPtr(renderer), vtkActor.vtkActor.swigGetCPtr(actor), typeflags, forceCompileOnly);
  }

  public void ReleaseGraphicsResources(vtkWindow.vtkWindow arg0) {
    vtkd_im.vtkPainter_ReleaseGraphicsResources(cast(void*)swigCPtr, vtkWindow.vtkWindow.swigGetCPtr(arg0));
  }

  public void SetProgress(double _arg) {
    vtkd_im.vtkPainter_SetProgress(cast(void*)swigCPtr, _arg);
  }

  public double GetProgressMinValue() {
    auto ret = vtkd_im.vtkPainter_GetProgressMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetProgressMaxValue() {
    auto ret = vtkd_im.vtkPainter_GetProgressMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public double GetProgress() {
    auto ret = vtkd_im.vtkPainter_GetProgress(cast(void*)swigCPtr);
    return ret;
  }

  public double GetTimeToDraw() {
    auto ret = vtkd_im.vtkPainter_GetTimeToDraw(cast(void*)swigCPtr);
    return ret;
  }

  public void UpdateBounds(SWIGTYPE_p_double.SWIGTYPE_p_double bounds) {
    vtkd_im.vtkPainter_UpdateBounds(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds));
  }

  public void SetInput(vtkDataObject.vtkDataObject arg0) {
    vtkd_im.vtkPainter_SetInput(cast(void*)swigCPtr, vtkDataObject.vtkDataObject.swigGetCPtr(arg0));
  }

  public vtkDataObject.vtkDataObject GetInput() {
    void* cPtr = vtkd_im.vtkPainter_GetInput(cast(void*)swigCPtr);
    vtkDataObject.vtkDataObject ret = (cPtr is null) ? null : new vtkDataObject.vtkDataObject(cPtr, false);
    return ret;
  }

  public vtkDataObject.vtkDataObject GetOutput() {
    void* cPtr = vtkd_im.vtkPainter_GetOutput(cast(void*)swigCPtr);
    vtkDataObject.vtkDataObject ret = (cPtr is null) ? null : new vtkDataObject.vtkDataObject(cPtr, false);
    return ret;
  }

  public this() {
    this(vtkd_im.new_vtkPainter(), true);
  }
}
