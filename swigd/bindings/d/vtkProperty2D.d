/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkProperty2D;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkObject;

class vtkProperty2D : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkProperty2D_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkProperty2D obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkProperty2D_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkProperty2D SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkProperty2D_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkProperty2D ret = (cPtr is null) ? null : new vtkProperty2D(cPtr, false);
    return ret;
  }

  public vtkProperty2D NewInstance() const {
    void* cPtr = vtkd_im.vtkProperty2D_NewInstance(cast(void*)swigCPtr);
    vtkProperty2D ret = (cPtr is null) ? null : new vtkProperty2D(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public static vtkProperty2D New() {
    void* cPtr = vtkd_im.vtkProperty2D_New();
    vtkProperty2D ret = (cPtr is null) ? null : new vtkProperty2D(cPtr, false);
    return ret;
  }

  public void DeepCopy(vtkProperty2D p) {
    vtkd_im.vtkProperty2D_DeepCopy(cast(void*)swigCPtr, vtkProperty2D.swigGetCPtr(p));
  }

  public void SetColor(double _arg1, double _arg2, double _arg3) {
    vtkd_im.vtkProperty2D_SetColor__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetColor(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkProperty2D_SetColor__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetColor() {
    auto ret = cast(double*)vtkd_im.vtkProperty2D_GetColor__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetColor(double* _arg1, double* _arg2, double* _arg3) {
    vtkd_im.vtkProperty2D_GetColor__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetColor(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkProperty2D_GetColor__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double GetOpacity() {
    auto ret = vtkd_im.vtkProperty2D_GetOpacity(cast(void*)swigCPtr);
    return ret;
  }

  public void SetOpacity(double _arg) {
    vtkd_im.vtkProperty2D_SetOpacity(cast(void*)swigCPtr, _arg);
  }

  public void SetPointSize(float _arg) {
    vtkd_im.vtkProperty2D_SetPointSize(cast(void*)swigCPtr, _arg);
  }

  public float GetPointSizeMinValue() {
    auto ret = vtkd_im.vtkProperty2D_GetPointSizeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public float GetPointSizeMaxValue() {
    auto ret = vtkd_im.vtkProperty2D_GetPointSizeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public float GetPointSize() {
    auto ret = vtkd_im.vtkProperty2D_GetPointSize(cast(void*)swigCPtr);
    return ret;
  }

  public void SetLineWidth(float _arg) {
    vtkd_im.vtkProperty2D_SetLineWidth(cast(void*)swigCPtr, _arg);
  }

  public float GetLineWidthMinValue() {
    auto ret = vtkd_im.vtkProperty2D_GetLineWidthMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public float GetLineWidthMaxValue() {
    auto ret = vtkd_im.vtkProperty2D_GetLineWidthMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public float GetLineWidth() {
    auto ret = vtkd_im.vtkProperty2D_GetLineWidth(cast(void*)swigCPtr);
    return ret;
  }

  public void SetLineStipplePattern(int _arg) {
    vtkd_im.vtkProperty2D_SetLineStipplePattern(cast(void*)swigCPtr, _arg);
  }

  public int GetLineStipplePattern() {
    auto ret = vtkd_im.vtkProperty2D_GetLineStipplePattern(cast(void*)swigCPtr);
    return ret;
  }

  public void SetLineStippleRepeatFactor(int _arg) {
    vtkd_im.vtkProperty2D_SetLineStippleRepeatFactor(cast(void*)swigCPtr, _arg);
  }

  public int GetLineStippleRepeatFactorMinValue() {
    auto ret = vtkd_im.vtkProperty2D_GetLineStippleRepeatFactorMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetLineStippleRepeatFactorMaxValue() {
    auto ret = vtkd_im.vtkProperty2D_GetLineStippleRepeatFactorMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetLineStippleRepeatFactor() {
    auto ret = vtkd_im.vtkProperty2D_GetLineStippleRepeatFactor(cast(void*)swigCPtr);
    return ret;
  }

  public void SetDisplayLocation(int _arg) {
    vtkd_im.vtkProperty2D_SetDisplayLocation(cast(void*)swigCPtr, _arg);
  }

  public int GetDisplayLocationMinValue() {
    auto ret = vtkd_im.vtkProperty2D_GetDisplayLocationMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetDisplayLocationMaxValue() {
    auto ret = vtkd_im.vtkProperty2D_GetDisplayLocationMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetDisplayLocation() {
    auto ret = vtkd_im.vtkProperty2D_GetDisplayLocation(cast(void*)swigCPtr);
    return ret;
  }

  public void SetDisplayLocationToBackground() {
    vtkd_im.vtkProperty2D_SetDisplayLocationToBackground(cast(void*)swigCPtr);
  }

  public void SetDisplayLocationToForeground() {
    vtkd_im.vtkProperty2D_SetDisplayLocationToForeground(cast(void*)swigCPtr);
  }
}
