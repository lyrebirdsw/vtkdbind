/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkClipClosedSurface;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkPlaneCollection;
static import SWIGTYPE_p_double;
static import vtkPolyDataAlgorithm;

class vtkClipClosedSurface : vtkPolyDataAlgorithm.vtkPolyDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkClipClosedSurface_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkClipClosedSurface obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkClipClosedSurface New() {
    void* cPtr = vtkd_im.vtkClipClosedSurface_New();
    vtkClipClosedSurface ret = (cPtr is null) ? null : new vtkClipClosedSurface(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkClipClosedSurface_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkClipClosedSurface SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkClipClosedSurface_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkClipClosedSurface ret = (cPtr is null) ? null : new vtkClipClosedSurface(cPtr, false);
    return ret;
  }

  public vtkClipClosedSurface NewInstance() const {
    void* cPtr = vtkd_im.vtkClipClosedSurface_NewInstance(cast(void*)swigCPtr);
    vtkClipClosedSurface ret = (cPtr is null) ? null : new vtkClipClosedSurface(cPtr, false);
    return ret;
  }

  alias vtkPolyDataAlgorithm.vtkPolyDataAlgorithm.NewInstance NewInstance;

  public void SetClippingPlanes(vtkPlaneCollection.vtkPlaneCollection planes) {
    vtkd_im.vtkClipClosedSurface_SetClippingPlanes(cast(void*)swigCPtr, vtkPlaneCollection.vtkPlaneCollection.swigGetCPtr(planes));
  }

  public vtkPlaneCollection.vtkPlaneCollection GetClippingPlanes() {
    void* cPtr = vtkd_im.vtkClipClosedSurface_GetClippingPlanes(cast(void*)swigCPtr);
    vtkPlaneCollection.vtkPlaneCollection ret = (cPtr is null) ? null : new vtkPlaneCollection.vtkPlaneCollection(cPtr, false);
    return ret;
  }

  public void SetTolerance(double _arg) {
    vtkd_im.vtkClipClosedSurface_SetTolerance(cast(void*)swigCPtr, _arg);
  }

  public double GetTolerance() {
    auto ret = vtkd_im.vtkClipClosedSurface_GetTolerance(cast(void*)swigCPtr);
    return ret;
  }

  public void SetPassPointData(int _arg) {
    vtkd_im.vtkClipClosedSurface_SetPassPointData(cast(void*)swigCPtr, _arg);
  }

  public void PassPointDataOn() {
    vtkd_im.vtkClipClosedSurface_PassPointDataOn(cast(void*)swigCPtr);
  }

  public void PassPointDataOff() {
    vtkd_im.vtkClipClosedSurface_PassPointDataOff(cast(void*)swigCPtr);
  }

  public int GetPassPointData() {
    auto ret = vtkd_im.vtkClipClosedSurface_GetPassPointData(cast(void*)swigCPtr);
    return ret;
  }

  public void SetGenerateOutline(int _arg) {
    vtkd_im.vtkClipClosedSurface_SetGenerateOutline(cast(void*)swigCPtr, _arg);
  }

  public void GenerateOutlineOn() {
    vtkd_im.vtkClipClosedSurface_GenerateOutlineOn(cast(void*)swigCPtr);
  }

  public void GenerateOutlineOff() {
    vtkd_im.vtkClipClosedSurface_GenerateOutlineOff(cast(void*)swigCPtr);
  }

  public int GetGenerateOutline() {
    auto ret = vtkd_im.vtkClipClosedSurface_GetGenerateOutline(cast(void*)swigCPtr);
    return ret;
  }

  public void SetGenerateFaces(int _arg) {
    vtkd_im.vtkClipClosedSurface_SetGenerateFaces(cast(void*)swigCPtr, _arg);
  }

  public void GenerateFacesOn() {
    vtkd_im.vtkClipClosedSurface_GenerateFacesOn(cast(void*)swigCPtr);
  }

  public void GenerateFacesOff() {
    vtkd_im.vtkClipClosedSurface_GenerateFacesOff(cast(void*)swigCPtr);
  }

  public int GetGenerateFaces() {
    auto ret = vtkd_im.vtkClipClosedSurface_GetGenerateFaces(cast(void*)swigCPtr);
    return ret;
  }

  public void SetScalarMode(int _arg) {
    vtkd_im.vtkClipClosedSurface_SetScalarMode(cast(void*)swigCPtr, _arg);
  }

  public int GetScalarModeMinValue() {
    auto ret = vtkd_im.vtkClipClosedSurface_GetScalarModeMinValue(cast(void*)swigCPtr);
    return ret;
  }

  public int GetScalarModeMaxValue() {
    auto ret = vtkd_im.vtkClipClosedSurface_GetScalarModeMaxValue(cast(void*)swigCPtr);
    return ret;
  }

  public void SetScalarModeToNone() {
    vtkd_im.vtkClipClosedSurface_SetScalarModeToNone(cast(void*)swigCPtr);
  }

  public void SetScalarModeToColors() {
    vtkd_im.vtkClipClosedSurface_SetScalarModeToColors(cast(void*)swigCPtr);
  }

  public void SetScalarModeToLabels() {
    vtkd_im.vtkClipClosedSurface_SetScalarModeToLabels(cast(void*)swigCPtr);
  }

  public int GetScalarMode() {
    auto ret = vtkd_im.vtkClipClosedSurface_GetScalarMode(cast(void*)swigCPtr);
    return ret;
  }

  public string GetScalarModeAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkClipClosedSurface_GetScalarModeAsString(cast(void*)swigCPtr));
    return ret;
  }

  public void SetBaseColor(double _arg1, double _arg2, double _arg3) {
    vtkd_im.vtkClipClosedSurface_SetBaseColor__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetBaseColor(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkClipClosedSurface_SetBaseColor__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetBaseColor() {
    auto ret = cast(double*)vtkd_im.vtkClipClosedSurface_GetBaseColor__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetBaseColor(double* _arg1, double* _arg2, double* _arg3) {
    vtkd_im.vtkClipClosedSurface_GetBaseColor__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetBaseColor(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkClipClosedSurface_GetBaseColor__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public void SetClipColor(double _arg1, double _arg2, double _arg3) {
    vtkd_im.vtkClipClosedSurface_SetClipColor__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetClipColor(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkClipClosedSurface_SetClipColor__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetClipColor() {
    auto ret = cast(double*)vtkd_im.vtkClipClosedSurface_GetClipColor__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetClipColor(double* _arg1, double* _arg2, double* _arg3) {
    vtkd_im.vtkClipClosedSurface_GetClipColor__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetClipColor(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkClipClosedSurface_GetClipColor__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public void SetActivePlaneId(int _arg) {
    vtkd_im.vtkClipClosedSurface_SetActivePlaneId(cast(void*)swigCPtr, _arg);
  }

  public int GetActivePlaneId() {
    auto ret = vtkd_im.vtkClipClosedSurface_GetActivePlaneId(cast(void*)swigCPtr);
    return ret;
  }

  public void SetActivePlaneColor(double _arg1, double _arg2, double _arg3) {
    vtkd_im.vtkClipClosedSurface_SetActivePlaneColor__SWIG_0(cast(void*)swigCPtr, _arg1, _arg2, _arg3);
  }

  public void SetActivePlaneColor(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkClipClosedSurface_SetActivePlaneColor__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public double* GetActivePlaneColor() {
    auto ret = cast(double*)vtkd_im.vtkClipClosedSurface_GetActivePlaneColor__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void GetActivePlaneColor(double* _arg1, double* _arg2, double* _arg3) {
    vtkd_im.vtkClipClosedSurface_GetActivePlaneColor__SWIG_1(cast(void*)swigCPtr, cast(void*)_arg1, cast(void*)_arg2, cast(void*)_arg3);
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void GetActivePlaneColor(SWIGTYPE_p_double.SWIGTYPE_p_double _arg) {
    vtkd_im.vtkClipClosedSurface_GetActivePlaneColor__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(_arg));
  }

  public void SetTriangulationErrorDisplay(int _arg) {
    vtkd_im.vtkClipClosedSurface_SetTriangulationErrorDisplay(cast(void*)swigCPtr, _arg);
  }

  public void TriangulationErrorDisplayOn() {
    vtkd_im.vtkClipClosedSurface_TriangulationErrorDisplayOn(cast(void*)swigCPtr);
  }

  public void TriangulationErrorDisplayOff() {
    vtkd_im.vtkClipClosedSurface_TriangulationErrorDisplayOff(cast(void*)swigCPtr);
  }

  public int GetTriangulationErrorDisplay() {
    auto ret = vtkd_im.vtkClipClosedSurface_GetTriangulationErrorDisplay(cast(void*)swigCPtr);
    return ret;
  }
}
