/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPCAAnalysisFilter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkFloatArray;
static import vtkPointSet;
static import vtkMultiBlockDataSetAlgorithm;

class vtkPCAAnalysisFilter : vtkMultiBlockDataSetAlgorithm.vtkMultiBlockDataSetAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPCAAnalysisFilter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPCAAnalysisFilter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPCAAnalysisFilter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPCAAnalysisFilter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPCAAnalysisFilter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPCAAnalysisFilter ret = (cPtr is null) ? null : new vtkPCAAnalysisFilter(cPtr, false);
    return ret;
  }

  public vtkPCAAnalysisFilter NewInstance() const {
    void* cPtr = vtkd_im.vtkPCAAnalysisFilter_NewInstance(cast(void*)swigCPtr);
    vtkPCAAnalysisFilter ret = (cPtr is null) ? null : new vtkPCAAnalysisFilter(cPtr, false);
    return ret;
  }

  alias vtkMultiBlockDataSetAlgorithm.vtkMultiBlockDataSetAlgorithm.NewInstance NewInstance;

  public static vtkPCAAnalysisFilter New() {
    void* cPtr = vtkd_im.vtkPCAAnalysisFilter_New();
    vtkPCAAnalysisFilter ret = (cPtr is null) ? null : new vtkPCAAnalysisFilter(cPtr, false);
    return ret;
  }

  public vtkFloatArray.vtkFloatArray GetEvals() {
    void* cPtr = vtkd_im.vtkPCAAnalysisFilter_GetEvals(cast(void*)swigCPtr);
    vtkFloatArray.vtkFloatArray ret = (cPtr is null) ? null : new vtkFloatArray.vtkFloatArray(cPtr, false);
    return ret;
  }

  public void GetParameterisedShape(vtkFloatArray.vtkFloatArray b, vtkPointSet.vtkPointSet shape) {
    vtkd_im.vtkPCAAnalysisFilter_GetParameterisedShape(cast(void*)swigCPtr, vtkFloatArray.vtkFloatArray.swigGetCPtr(b), vtkPointSet.vtkPointSet.swigGetCPtr(shape));
  }

  public void GetShapeParameters(vtkPointSet.vtkPointSet shape, vtkFloatArray.vtkFloatArray b, int bsize) {
    vtkd_im.vtkPCAAnalysisFilter_GetShapeParameters(cast(void*)swigCPtr, vtkPointSet.vtkPointSet.swigGetCPtr(shape), vtkFloatArray.vtkFloatArray.swigGetCPtr(b), bsize);
  }

  public int GetModesRequiredFor(double proportion) {
    auto ret = vtkd_im.vtkPCAAnalysisFilter_GetModesRequiredFor(cast(void*)swigCPtr, proportion);
    return ret;
  }
}
