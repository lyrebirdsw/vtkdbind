/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkProjectedTetrahedraMapper;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkVisibilitySort;
static import vtkDataArray;
static import vtkVolumeProperty;
static import vtkPoints;
static import SWIGTYPE_p_float;
static import vtkFloatArray;
static import vtkUnstructuredGridVolumeMapper;

class vtkProjectedTetrahedraMapper : vtkUnstructuredGridVolumeMapper.vtkUnstructuredGridVolumeMapper {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkProjectedTetrahedraMapper_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkProjectedTetrahedraMapper obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkProjectedTetrahedraMapper_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkProjectedTetrahedraMapper SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkProjectedTetrahedraMapper_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkProjectedTetrahedraMapper ret = (cPtr is null) ? null : new vtkProjectedTetrahedraMapper(cPtr, false);
    return ret;
  }

  public vtkProjectedTetrahedraMapper NewInstance() const {
    void* cPtr = vtkd_im.vtkProjectedTetrahedraMapper_NewInstance(cast(void*)swigCPtr);
    vtkProjectedTetrahedraMapper ret = (cPtr is null) ? null : new vtkProjectedTetrahedraMapper(cPtr, false);
    return ret;
  }

  alias vtkUnstructuredGridVolumeMapper.vtkUnstructuredGridVolumeMapper.NewInstance NewInstance;

  public static vtkProjectedTetrahedraMapper New() {
    void* cPtr = vtkd_im.vtkProjectedTetrahedraMapper_New();
    vtkProjectedTetrahedraMapper ret = (cPtr is null) ? null : new vtkProjectedTetrahedraMapper(cPtr, false);
    return ret;
  }

  public void SetVisibilitySort(vtkVisibilitySort.vtkVisibilitySort sort) {
    vtkd_im.vtkProjectedTetrahedraMapper_SetVisibilitySort(cast(void*)swigCPtr, vtkVisibilitySort.vtkVisibilitySort.swigGetCPtr(sort));
  }

  public vtkVisibilitySort.vtkVisibilitySort GetVisibilitySort() {
    void* cPtr = vtkd_im.vtkProjectedTetrahedraMapper_GetVisibilitySort(cast(void*)swigCPtr);
    vtkVisibilitySort.vtkVisibilitySort ret = (cPtr is null) ? null : new vtkVisibilitySort.vtkVisibilitySort(cPtr, false);
    return ret;
  }

  public static void MapScalarsToColors(vtkDataArray.vtkDataArray colors, vtkVolumeProperty.vtkVolumeProperty property, vtkDataArray.vtkDataArray scalars) {
    vtkd_im.vtkProjectedTetrahedraMapper_MapScalarsToColors(vtkDataArray.vtkDataArray.swigGetCPtr(colors), vtkVolumeProperty.vtkVolumeProperty.swigGetCPtr(property), vtkDataArray.vtkDataArray.swigGetCPtr(scalars));
  }

  public static void TransformPoints(vtkPoints.vtkPoints inPoints, SWIGTYPE_p_float.SWIGTYPE_p_float projection_mat, SWIGTYPE_p_float.SWIGTYPE_p_float modelview_mat, vtkFloatArray.vtkFloatArray outPoints) {
    vtkd_im.vtkProjectedTetrahedraMapper_TransformPoints(vtkPoints.vtkPoints.swigGetCPtr(inPoints), SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(projection_mat), SWIGTYPE_p_float.SWIGTYPE_p_float.swigGetCPtr(modelview_mat), vtkFloatArray.vtkFloatArray.swigGetCPtr(outPoints));
  }
}
