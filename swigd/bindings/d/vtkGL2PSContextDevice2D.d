/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkGL2PSContextDevice2D;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkImageData;
static import vtkStdString;
static import vtkUnicodeString;
static import vtkPen;
static import vtkOpenGLContextDevice2D;

class vtkGL2PSContextDevice2D : vtkOpenGLContextDevice2D.vtkOpenGLContextDevice2D {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkGL2PSContextDevice2D_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkGL2PSContextDevice2D obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkGL2PSContextDevice2D_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkGL2PSContextDevice2D SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkGL2PSContextDevice2D_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkGL2PSContextDevice2D ret = (cPtr is null) ? null : new vtkGL2PSContextDevice2D(cPtr, false);
    return ret;
  }

  public vtkGL2PSContextDevice2D NewInstance() const {
    void* cPtr = vtkd_im.vtkGL2PSContextDevice2D_NewInstance(cast(void*)swigCPtr);
    vtkGL2PSContextDevice2D ret = (cPtr is null) ? null : new vtkGL2PSContextDevice2D(cPtr, false);
    return ret;
  }

  alias vtkOpenGLContextDevice2D.vtkOpenGLContextDevice2D.NewInstance NewInstance;

  public static vtkGL2PSContextDevice2D New() {
    void* cPtr = vtkd_im.vtkGL2PSContextDevice2D_New();
    vtkGL2PSContextDevice2D ret = (cPtr is null) ? null : new vtkGL2PSContextDevice2D(cPtr, false);
    return ret;
  }

  public override void DrawPoly(float* f, int n, ubyte* colors, int nc_comps) {
    vtkd_im.vtkGL2PSContextDevice2D_DrawPoly__SWIG_0(cast(void*)swigCPtr, cast(void*)f, n, cast(void*)colors, nc_comps);
  }

  public override void DrawPoly(float* f, int n, ubyte* colors) {
    vtkd_im.vtkGL2PSContextDevice2D_DrawPoly__SWIG_1(cast(void*)swigCPtr, cast(void*)f, n, cast(void*)colors);
  }

  public override void DrawPoly(float* f, int n) {
    vtkd_im.vtkGL2PSContextDevice2D_DrawPoly__SWIG_2(cast(void*)swigCPtr, cast(void*)f, n);
  }

  public override void DrawPoints(float* points, int n, ubyte* colors, int nc_comps) {
    vtkd_im.vtkGL2PSContextDevice2D_DrawPoints__SWIG_0(cast(void*)swigCPtr, cast(void*)points, n, cast(void*)colors, nc_comps);
  }

  public override void DrawPoints(float* points, int n, ubyte* colors) {
    vtkd_im.vtkGL2PSContextDevice2D_DrawPoints__SWIG_1(cast(void*)swigCPtr, cast(void*)points, n, cast(void*)colors);
  }

  public override void DrawPoints(float* points, int n) {
    vtkd_im.vtkGL2PSContextDevice2D_DrawPoints__SWIG_2(cast(void*)swigCPtr, cast(void*)points, n);
  }

  public override void DrawPointSprites(vtkImageData.vtkImageData sprite, float* points, int n, ubyte* colors, int nc_comps) {
    vtkd_im.vtkGL2PSContextDevice2D_DrawPointSprites__SWIG_0(cast(void*)swigCPtr, vtkImageData.vtkImageData.swigGetCPtr(sprite), cast(void*)points, n, cast(void*)colors, nc_comps);
  }

  public override void DrawPointSprites(vtkImageData.vtkImageData sprite, float* points, int n, ubyte* colors) {
    vtkd_im.vtkGL2PSContextDevice2D_DrawPointSprites__SWIG_1(cast(void*)swigCPtr, vtkImageData.vtkImageData.swigGetCPtr(sprite), cast(void*)points, n, cast(void*)colors);
  }

  public override void DrawPointSprites(vtkImageData.vtkImageData sprite, float* points, int n) {
    vtkd_im.vtkGL2PSContextDevice2D_DrawPointSprites__SWIG_2(cast(void*)swigCPtr, vtkImageData.vtkImageData.swigGetCPtr(sprite), cast(void*)points, n);
  }

  public override void DrawMarkers(int shape, bool highlight, float* points, int n, ubyte* colors, int nc_comps) {
    vtkd_im.vtkGL2PSContextDevice2D_DrawMarkers__SWIG_0(cast(void*)swigCPtr, shape, highlight, cast(void*)points, n, cast(void*)colors, nc_comps);
  }

  public override void DrawMarkers(int shape, bool highlight, float* points, int n, ubyte* colors) {
    vtkd_im.vtkGL2PSContextDevice2D_DrawMarkers__SWIG_1(cast(void*)swigCPtr, shape, highlight, cast(void*)points, n, cast(void*)colors);
  }

  public override void DrawMarkers(int shape, bool highlight, float* points, int n) {
    vtkd_im.vtkGL2PSContextDevice2D_DrawMarkers__SWIG_2(cast(void*)swigCPtr, shape, highlight, cast(void*)points, n);
  }

  public override void DrawString(float* point, vtkStdString.vtkStdString arg1) {
    vtkd_im.vtkGL2PSContextDevice2D_DrawString__SWIG_0(cast(void*)swigCPtr, cast(void*)point, vtkStdString.vtkStdString.swigGetCPtr(arg1));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public override void DrawString(float* point, vtkUnicodeString.vtkUnicodeString arg1) {
    vtkd_im.vtkGL2PSContextDevice2D_DrawString__SWIG_1(cast(void*)swigCPtr, cast(void*)point, vtkUnicodeString.vtkUnicodeString.swigGetCPtr(arg1));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
  }

  public void ApplyPen(vtkPen.vtkPen pen) {
    vtkd_im.vtkGL2PSContextDevice2D_ApplyPen(cast(void*)swigCPtr, vtkPen.vtkPen.swigGetCPtr(pen));
  }
}
