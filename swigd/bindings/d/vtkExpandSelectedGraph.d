/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkExpandSelectedGraph;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkAlgorithmOutput;
static import vtkInformation;
static import vtkSelectionAlgorithm;

class vtkExpandSelectedGraph : vtkSelectionAlgorithm.vtkSelectionAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkExpandSelectedGraph_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkExpandSelectedGraph obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkExpandSelectedGraph New() {
    void* cPtr = vtkd_im.vtkExpandSelectedGraph_New();
    vtkExpandSelectedGraph ret = (cPtr is null) ? null : new vtkExpandSelectedGraph(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkExpandSelectedGraph_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkExpandSelectedGraph SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkExpandSelectedGraph_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkExpandSelectedGraph ret = (cPtr is null) ? null : new vtkExpandSelectedGraph(cPtr, false);
    return ret;
  }

  public vtkExpandSelectedGraph NewInstance() const {
    void* cPtr = vtkd_im.vtkExpandSelectedGraph_NewInstance(cast(void*)swigCPtr);
    vtkExpandSelectedGraph ret = (cPtr is null) ? null : new vtkExpandSelectedGraph(cPtr, false);
    return ret;
  }

  alias vtkSelectionAlgorithm.vtkSelectionAlgorithm.NewInstance NewInstance;

  public void SetGraphConnection(vtkAlgorithmOutput.vtkAlgorithmOutput arg0) {
    vtkd_im.vtkExpandSelectedGraph_SetGraphConnection(cast(void*)swigCPtr, vtkAlgorithmOutput.vtkAlgorithmOutput.swigGetCPtr(arg0));
  }

  public int FillInputPortInformation(int port, vtkInformation.vtkInformation info) {
    auto ret = vtkd_im.vtkExpandSelectedGraph_FillInputPortInformation(cast(void*)swigCPtr, port, vtkInformation.vtkInformation.swigGetCPtr(info));
    return ret;
  }

  public void SetBFSDistance(int _arg) {
    vtkd_im.vtkExpandSelectedGraph_SetBFSDistance(cast(void*)swigCPtr, _arg);
  }

  public int GetBFSDistance() {
    auto ret = vtkd_im.vtkExpandSelectedGraph_GetBFSDistance(cast(void*)swigCPtr);
    return ret;
  }

  public void SetIncludeShortestPaths(bool _arg) {
    vtkd_im.vtkExpandSelectedGraph_SetIncludeShortestPaths(cast(void*)swigCPtr, _arg);
  }

  public bool GetIncludeShortestPaths() {
    bool ret = vtkd_im.vtkExpandSelectedGraph_GetIncludeShortestPaths(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void IncludeShortestPathsOn() {
    vtkd_im.vtkExpandSelectedGraph_IncludeShortestPathsOn(cast(void*)swigCPtr);
  }

  public void IncludeShortestPathsOff() {
    vtkd_im.vtkExpandSelectedGraph_IncludeShortestPathsOff(cast(void*)swigCPtr);
  }

  public void SetDomain(string _arg) {
    vtkd_im.vtkExpandSelectedGraph_SetDomain(cast(void*)swigCPtr, (_arg ? std.string.toStringz(_arg) : null));
  }

  public string GetDomain() {
    string ret = std.conv.to!string(vtkd_im.vtkExpandSelectedGraph_GetDomain(cast(void*)swigCPtr));
    return ret;
  }

  public void SetUseDomain(bool _arg) {
    vtkd_im.vtkExpandSelectedGraph_SetUseDomain(cast(void*)swigCPtr, _arg);
  }

  public bool GetUseDomain() {
    bool ret = vtkd_im.vtkExpandSelectedGraph_GetUseDomain(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void UseDomainOn() {
    vtkd_im.vtkExpandSelectedGraph_UseDomainOn(cast(void*)swigCPtr);
  }

  public void UseDomainOff() {
    vtkd_im.vtkExpandSelectedGraph_UseDomainOff(cast(void*)swigCPtr);
  }
}
