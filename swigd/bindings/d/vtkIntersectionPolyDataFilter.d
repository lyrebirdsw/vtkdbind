/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkIntersectionPolyDataFilter;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import SWIGTYPE_p_double;
static import vtkPolyDataAlgorithm;

class vtkIntersectionPolyDataFilter : vtkPolyDataAlgorithm.vtkPolyDataAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkIntersectionPolyDataFilter_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkIntersectionPolyDataFilter obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkIntersectionPolyDataFilter New() {
    void* cPtr = vtkd_im.vtkIntersectionPolyDataFilter_New();
    vtkIntersectionPolyDataFilter ret = (cPtr is null) ? null : new vtkIntersectionPolyDataFilter(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkIntersectionPolyDataFilter_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkIntersectionPolyDataFilter SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkIntersectionPolyDataFilter_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkIntersectionPolyDataFilter ret = (cPtr is null) ? null : new vtkIntersectionPolyDataFilter(cPtr, false);
    return ret;
  }

  public vtkIntersectionPolyDataFilter NewInstance() const {
    void* cPtr = vtkd_im.vtkIntersectionPolyDataFilter_NewInstance(cast(void*)swigCPtr);
    vtkIntersectionPolyDataFilter ret = (cPtr is null) ? null : new vtkIntersectionPolyDataFilter(cPtr, false);
    return ret;
  }

  alias vtkPolyDataAlgorithm.vtkPolyDataAlgorithm.NewInstance NewInstance;

  public int GetSplitFirstOutput() {
    auto ret = vtkd_im.vtkIntersectionPolyDataFilter_GetSplitFirstOutput(cast(void*)swigCPtr);
    return ret;
  }

  public void SetSplitFirstOutput(int _arg) {
    vtkd_im.vtkIntersectionPolyDataFilter_SetSplitFirstOutput(cast(void*)swigCPtr, _arg);
  }

  public void SplitFirstOutputOn() {
    vtkd_im.vtkIntersectionPolyDataFilter_SplitFirstOutputOn(cast(void*)swigCPtr);
  }

  public void SplitFirstOutputOff() {
    vtkd_im.vtkIntersectionPolyDataFilter_SplitFirstOutputOff(cast(void*)swigCPtr);
  }

  public int GetSplitSecondOutput() {
    auto ret = vtkd_im.vtkIntersectionPolyDataFilter_GetSplitSecondOutput(cast(void*)swigCPtr);
    return ret;
  }

  public void SetSplitSecondOutput(int _arg) {
    vtkd_im.vtkIntersectionPolyDataFilter_SetSplitSecondOutput(cast(void*)swigCPtr, _arg);
  }

  public void SplitSecondOutputOn() {
    vtkd_im.vtkIntersectionPolyDataFilter_SplitSecondOutputOn(cast(void*)swigCPtr);
  }

  public void SplitSecondOutputOff() {
    vtkd_im.vtkIntersectionPolyDataFilter_SplitSecondOutputOff(cast(void*)swigCPtr);
  }

  public static int TriangleTriangleIntersection(SWIGTYPE_p_double.SWIGTYPE_p_double p1, SWIGTYPE_p_double.SWIGTYPE_p_double q1, SWIGTYPE_p_double.SWIGTYPE_p_double r1, SWIGTYPE_p_double.SWIGTYPE_p_double p2, SWIGTYPE_p_double.SWIGTYPE_p_double q2, SWIGTYPE_p_double.SWIGTYPE_p_double r2, int* coplanar, SWIGTYPE_p_double.SWIGTYPE_p_double pt1, SWIGTYPE_p_double.SWIGTYPE_p_double pt2) {
    auto ret = vtkd_im.vtkIntersectionPolyDataFilter_TriangleTriangleIntersection(SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p1), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(q1), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(r1), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p2), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(q2), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(r2), cast(void*)coplanar, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pt1), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(pt2));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }
}
