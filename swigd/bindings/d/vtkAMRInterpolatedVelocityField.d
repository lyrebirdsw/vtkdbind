/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkAMRInterpolatedVelocityField;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkOverlappingAMR;
static import SWIGTYPE_p_double;
static import vtkAbstractInterpolatedVelocityField;

class vtkAMRInterpolatedVelocityField : vtkAbstractInterpolatedVelocityField.vtkAbstractInterpolatedVelocityField {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkAMRInterpolatedVelocityField_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkAMRInterpolatedVelocityField obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkAMRInterpolatedVelocityField_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkAMRInterpolatedVelocityField SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkAMRInterpolatedVelocityField_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkAMRInterpolatedVelocityField ret = (cPtr is null) ? null : new vtkAMRInterpolatedVelocityField(cPtr, false);
    return ret;
  }

  public vtkAMRInterpolatedVelocityField NewInstance() const {
    void* cPtr = vtkd_im.vtkAMRInterpolatedVelocityField_NewInstance(cast(void*)swigCPtr);
    vtkAMRInterpolatedVelocityField ret = (cPtr is null) ? null : new vtkAMRInterpolatedVelocityField(cPtr, false);
    return ret;
  }

  alias vtkAbstractInterpolatedVelocityField.vtkAbstractInterpolatedVelocityField.NewInstance NewInstance;

  public static vtkAMRInterpolatedVelocityField New() {
    void* cPtr = vtkd_im.vtkAMRInterpolatedVelocityField_New();
    vtkAMRInterpolatedVelocityField ret = (cPtr is null) ? null : new vtkAMRInterpolatedVelocityField(cPtr, false);
    return ret;
  }

  public vtkOverlappingAMR.vtkOverlappingAMR GetAmrDataSet() {
    void* cPtr = vtkd_im.vtkAMRInterpolatedVelocityField_GetAmrDataSet(cast(void*)swigCPtr);
    vtkOverlappingAMR.vtkOverlappingAMR ret = (cPtr is null) ? null : new vtkOverlappingAMR.vtkOverlappingAMR(cPtr, false);
    return ret;
  }

  public void SetAMRData(vtkOverlappingAMR.vtkOverlappingAMR amr) {
    vtkd_im.vtkAMRInterpolatedVelocityField_SetAMRData(cast(void*)swigCPtr, vtkOverlappingAMR.vtkOverlappingAMR.swigGetCPtr(amr));
  }

  public bool GetLastDataSetLocation(uint* level, uint* id) {
    bool ret = vtkd_im.vtkAMRInterpolatedVelocityField_GetLastDataSetLocation(cast(void*)swigCPtr, cast(void*)level, cast(void*)id) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool SetLastDataSet(int level, int id) {
    bool ret = vtkd_im.vtkAMRInterpolatedVelocityField_SetLastDataSet(cast(void*)swigCPtr, level, id) ? true : false;
    return ret;
  }

  public override void SetLastCellId(long c, int dataindex) {
    vtkd_im.vtkAMRInterpolatedVelocityField_SetLastCellId__SWIG_0(cast(void*)swigCPtr, c, dataindex);
  }

  public override void SetLastCellId(long c) {
    vtkd_im.vtkAMRInterpolatedVelocityField_SetLastCellId__SWIG_1(cast(void*)swigCPtr, c);
  }

  public static bool FindGrid(SWIGTYPE_p_double.SWIGTYPE_p_double q, vtkOverlappingAMR.vtkOverlappingAMR amrds, uint* level, uint* gridId) {
    bool ret = vtkd_im.vtkAMRInterpolatedVelocityField_FindGrid(SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(q), vtkOverlappingAMR.vtkOverlappingAMR.swigGetCPtr(amrds), cast(void*)level, cast(void*)gridId) ? true : false;
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }
}
