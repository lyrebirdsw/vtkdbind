/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkPolygon;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkIdList;
static import vtkPoints;
static import SWIGTYPE_p_double;
static import vtkIdTypeArray;
static import vtkCell;

class vtkPolygon : vtkCell.vtkCell {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkPolygon_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkPolygon obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkPolygon New() {
    void* cPtr = vtkd_im.vtkPolygon_New();
    vtkPolygon ret = (cPtr is null) ? null : new vtkPolygon(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkPolygon_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkPolygon SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkPolygon_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkPolygon ret = (cPtr is null) ? null : new vtkPolygon(cPtr, false);
    return ret;
  }

  public vtkPolygon NewInstance() const {
    void* cPtr = vtkd_im.vtkPolygon_NewInstance(cast(void*)swigCPtr);
    vtkPolygon ret = (cPtr is null) ? null : new vtkPolygon(cPtr, false);
    return ret;
  }

  alias vtkCell.vtkCell.NewInstance NewInstance;

  public override int Triangulate(int index, vtkIdList.vtkIdList ptIds, vtkPoints.vtkPoints pts) {
    auto ret = vtkd_im.vtkPolygon_Triangulate__SWIG_0(cast(void*)swigCPtr, index, vtkIdList.vtkIdList.swigGetCPtr(ptIds), vtkPoints.vtkPoints.swigGetCPtr(pts));
    return ret;
  }

  public double ComputeArea() {
    auto ret = vtkd_im.vtkPolygon_ComputeArea__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  public void InterpolateFunctions(SWIGTYPE_p_double.SWIGTYPE_p_double x, double* sf) {
    vtkd_im.vtkPolygon_InterpolateFunctions(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), cast(void*)sf);
  }

  alias vtkCell.vtkCell.InterpolateFunctions InterpolateFunctions;

  public void InterpolateDerivs(SWIGTYPE_p_double.SWIGTYPE_p_double x, double* derivs) {
    vtkd_im.vtkPolygon_InterpolateDerivs(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), cast(void*)derivs);
  }

  alias vtkCell.vtkCell.InterpolateDerivs InterpolateDerivs;

  public static void ComputeNormal(vtkPoints.vtkPoints p, int numPts, long* pts, SWIGTYPE_p_double.SWIGTYPE_p_double n) {
    vtkd_im.vtkPolygon_ComputeNormal__SWIG_0(vtkPoints.vtkPoints.swigGetCPtr(p), numPts, cast(void*)pts, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(n));
  }

  public static void ComputeNormal(vtkPoints.vtkPoints p, SWIGTYPE_p_double.SWIGTYPE_p_double n) {
    vtkd_im.vtkPolygon_ComputeNormal__SWIG_1(vtkPoints.vtkPoints.swigGetCPtr(p), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(n));
  }

  public static void ComputeNormal(vtkIdTypeArray.vtkIdTypeArray ids, vtkPoints.vtkPoints pts, SWIGTYPE_p_double.SWIGTYPE_p_double n) {
    vtkd_im.vtkPolygon_ComputeNormal__SWIG_2(vtkIdTypeArray.vtkIdTypeArray.swigGetCPtr(ids), vtkPoints.vtkPoints.swigGetCPtr(pts), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(n));
  }

  public static void ComputeNormal(int numPts, double* pts, SWIGTYPE_p_double.SWIGTYPE_p_double n) {
    vtkd_im.vtkPolygon_ComputeNormal__SWIG_3(numPts, cast(void*)pts, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(n));
  }

  public static void ComputeCentroid(vtkIdTypeArray.vtkIdTypeArray ids, vtkPoints.vtkPoints pts, SWIGTYPE_p_double.SWIGTYPE_p_double centroid) {
    vtkd_im.vtkPolygon_ComputeCentroid(vtkIdTypeArray.vtkIdTypeArray.swigGetCPtr(ids), vtkPoints.vtkPoints.swigGetCPtr(pts), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(centroid));
  }

  public static double ComputeArea(vtkPoints.vtkPoints p, long numPts, long* pts, SWIGTYPE_p_double.SWIGTYPE_p_double normal) {
    auto ret = vtkd_im.vtkPolygon_ComputeArea__SWIG_1(vtkPoints.vtkPoints.swigGetCPtr(p), numPts, cast(void*)pts, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(normal));
    return ret;
  }

  public int ParameterizePolygon(SWIGTYPE_p_double.SWIGTYPE_p_double p0, SWIGTYPE_p_double.SWIGTYPE_p_double p10, double* l10, SWIGTYPE_p_double.SWIGTYPE_p_double p20, double* l20, SWIGTYPE_p_double.SWIGTYPE_p_double n) {
    auto ret = vtkd_im.vtkPolygon_ParameterizePolygon(cast(void*)swigCPtr, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p0), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p10), cast(void*)l10, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p20), cast(void*)l20, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(n));
    if (vtkd_im.SwigPendingException.isPending) throw vtkd_im.SwigPendingException.retrieve();
    return ret;
  }

  public static int PointInPolygon(SWIGTYPE_p_double.SWIGTYPE_p_double x, int numPts, double* pts, SWIGTYPE_p_double.SWIGTYPE_p_double bounds, SWIGTYPE_p_double.SWIGTYPE_p_double n) {
    auto ret = vtkd_im.vtkPolygon_PointInPolygon(SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), numPts, cast(void*)pts, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(n));
    return ret;
  }

  public int Triangulate(vtkIdList.vtkIdList outTris) {
    auto ret = vtkd_im.vtkPolygon_Triangulate__SWIG_1(cast(void*)swigCPtr, vtkIdList.vtkIdList.swigGetCPtr(outTris));
    return ret;
  }

  alias vtkCell.vtkCell.Triangulate Triangulate;

  public int NonDegenerateTriangulate(vtkIdList.vtkIdList outTris) {
    auto ret = vtkd_im.vtkPolygon_NonDegenerateTriangulate(cast(void*)swigCPtr, vtkIdList.vtkIdList.swigGetCPtr(outTris));
    return ret;
  }

  public static double DistanceToPolygon(SWIGTYPE_p_double.SWIGTYPE_p_double x, int numPts, double* pts, SWIGTYPE_p_double.SWIGTYPE_p_double bounds, SWIGTYPE_p_double.SWIGTYPE_p_double closest) {
    auto ret = vtkd_im.vtkPolygon_DistanceToPolygon(SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x), numPts, cast(void*)pts, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(closest));
    return ret;
  }

  public static int IntersectPolygonWithPolygon(int npts, double* pts, SWIGTYPE_p_double.SWIGTYPE_p_double bounds, int npts2, double* pts2, SWIGTYPE_p_double.SWIGTYPE_p_double bounds2, double tol, SWIGTYPE_p_double.SWIGTYPE_p_double x) {
    auto ret = vtkd_im.vtkPolygon_IntersectPolygonWithPolygon(npts, cast(void*)pts, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds), npts2, cast(void*)pts2, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(bounds2), tol, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(x));
    return ret;
  }

  public static int IntersectConvex2DCells(vtkCell.vtkCell cell1, vtkCell.vtkCell cell2, double tol, SWIGTYPE_p_double.SWIGTYPE_p_double p0, SWIGTYPE_p_double.SWIGTYPE_p_double p1) {
    auto ret = vtkd_im.vtkPolygon_IntersectConvex2DCells(vtkCell.vtkCell.swigGetCPtr(cell1), vtkCell.vtkCell.swigGetCPtr(cell2), tol, SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p0), SWIGTYPE_p_double.SWIGTYPE_p_double.swigGetCPtr(p1));
    return ret;
  }

  public bool GetUseMVCInterpolation() {
    bool ret = vtkd_im.vtkPolygon_GetUseMVCInterpolation(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetUseMVCInterpolation(bool _arg) {
    vtkd_im.vtkPolygon_SetUseMVCInterpolation(cast(void*)swigCPtr, _arg);
  }
}
