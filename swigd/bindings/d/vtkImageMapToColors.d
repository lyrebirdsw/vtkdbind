/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkImageMapToColors;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkScalarsToColors;
static import vtkThreadedImageAlgorithm;

class vtkImageMapToColors : vtkThreadedImageAlgorithm.vtkThreadedImageAlgorithm {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkImageMapToColors_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkImageMapToColors obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkImageMapToColors New() {
    void* cPtr = vtkd_im.vtkImageMapToColors_New();
    vtkImageMapToColors ret = (cPtr is null) ? null : new vtkImageMapToColors(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkImageMapToColors_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkImageMapToColors SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkImageMapToColors_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkImageMapToColors ret = (cPtr is null) ? null : new vtkImageMapToColors(cPtr, false);
    return ret;
  }

  public vtkImageMapToColors NewInstance() const {
    void* cPtr = vtkd_im.vtkImageMapToColors_NewInstance(cast(void*)swigCPtr);
    vtkImageMapToColors ret = (cPtr is null) ? null : new vtkImageMapToColors(cPtr, false);
    return ret;
  }

  alias vtkThreadedImageAlgorithm.vtkThreadedImageAlgorithm.NewInstance NewInstance;

  public void SetLookupTable(vtkScalarsToColors.vtkScalarsToColors arg0) {
    vtkd_im.vtkImageMapToColors_SetLookupTable(cast(void*)swigCPtr, vtkScalarsToColors.vtkScalarsToColors.swigGetCPtr(arg0));
  }

  public vtkScalarsToColors.vtkScalarsToColors GetLookupTable() {
    void* cPtr = vtkd_im.vtkImageMapToColors_GetLookupTable(cast(void*)swigCPtr);
    vtkScalarsToColors.vtkScalarsToColors ret = (cPtr is null) ? null : new vtkScalarsToColors.vtkScalarsToColors(cPtr, false);
    return ret;
  }

  public void SetOutputFormat(int _arg) {
    vtkd_im.vtkImageMapToColors_SetOutputFormat(cast(void*)swigCPtr, _arg);
  }

  public int GetOutputFormat() {
    auto ret = vtkd_im.vtkImageMapToColors_GetOutputFormat(cast(void*)swigCPtr);
    return ret;
  }

  public void SetOutputFormatToRGBA() {
    vtkd_im.vtkImageMapToColors_SetOutputFormatToRGBA(cast(void*)swigCPtr);
  }

  public void SetOutputFormatToRGB() {
    vtkd_im.vtkImageMapToColors_SetOutputFormatToRGB(cast(void*)swigCPtr);
  }

  public void SetOutputFormatToLuminanceAlpha() {
    vtkd_im.vtkImageMapToColors_SetOutputFormatToLuminanceAlpha(cast(void*)swigCPtr);
  }

  public void SetOutputFormatToLuminance() {
    vtkd_im.vtkImageMapToColors_SetOutputFormatToLuminance(cast(void*)swigCPtr);
  }

  public void SetActiveComponent(int _arg) {
    vtkd_im.vtkImageMapToColors_SetActiveComponent(cast(void*)swigCPtr, _arg);
  }

  public int GetActiveComponent() {
    auto ret = vtkd_im.vtkImageMapToColors_GetActiveComponent(cast(void*)swigCPtr);
    return ret;
  }

  public void SetPassAlphaToOutput(int _arg) {
    vtkd_im.vtkImageMapToColors_SetPassAlphaToOutput(cast(void*)swigCPtr, _arg);
  }

  public void PassAlphaToOutputOn() {
    vtkd_im.vtkImageMapToColors_PassAlphaToOutputOn(cast(void*)swigCPtr);
  }

  public void PassAlphaToOutputOff() {
    vtkd_im.vtkImageMapToColors_PassAlphaToOutputOff(cast(void*)swigCPtr);
  }

  public int GetPassAlphaToOutput() {
    auto ret = vtkd_im.vtkImageMapToColors_GetPassAlphaToOutput(cast(void*)swigCPtr);
    return ret;
  }
}
