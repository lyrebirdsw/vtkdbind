/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkRowQuery;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkVariantArray;
static import vtkVariant;
static import vtkObject;

class vtkRowQuery : vtkObject.vtkObject {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkRowQuery_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkRowQuery obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkRowQuery_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkRowQuery SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkRowQuery_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkRowQuery ret = (cPtr is null) ? null : new vtkRowQuery(cPtr, false);
    return ret;
  }

  public vtkRowQuery NewInstance() const {
    void* cPtr = vtkd_im.vtkRowQuery_NewInstance(cast(void*)swigCPtr);
    vtkRowQuery ret = (cPtr is null) ? null : new vtkRowQuery(cPtr, false);
    return ret;
  }

  alias vtkObject.vtkObject.NewInstance NewInstance;

  public bool Execute() {
    bool ret = vtkd_im.vtkRowQuery_Execute(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public int GetNumberOfFields() {
    auto ret = vtkd_im.vtkRowQuery_GetNumberOfFields(cast(void*)swigCPtr);
    return ret;
  }

  public string GetFieldName(int i) {
    string ret = std.conv.to!string(vtkd_im.vtkRowQuery_GetFieldName(cast(void*)swigCPtr, i));
    return ret;
  }

  public int GetFieldType(int i) {
    auto ret = vtkd_im.vtkRowQuery_GetFieldType(cast(void*)swigCPtr, i);
    return ret;
  }

  public int GetFieldIndex(string name) {
    auto ret = vtkd_im.vtkRowQuery_GetFieldIndex(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
    return ret;
  }

  public bool NextRow() {
    bool ret = vtkd_im.vtkRowQuery_NextRow__SWIG_0(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool IsActive() {
    bool ret = vtkd_im.vtkRowQuery_IsActive(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool NextRow(vtkVariantArray.vtkVariantArray rowArray) {
    bool ret = vtkd_im.vtkRowQuery_NextRow__SWIG_1(cast(void*)swigCPtr, vtkVariantArray.vtkVariantArray.swigGetCPtr(rowArray)) ? true : false;
    return ret;
  }

  public vtkVariant.vtkVariant DataValue(long c) {
    vtkVariant.vtkVariant ret = new vtkVariant.vtkVariant(vtkd_im.vtkRowQuery_DataValue(cast(void*)swigCPtr, c), true);
    return ret;
  }

  public bool HasError() {
    bool ret = vtkd_im.vtkRowQuery_HasError(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public string GetLastErrorText() {
    string ret = std.conv.to!string(vtkd_im.vtkRowQuery_GetLastErrorText(cast(void*)swigCPtr));
    return ret;
  }

  public void SetCaseSensitiveFieldNames(bool _arg) {
    vtkd_im.vtkRowQuery_SetCaseSensitiveFieldNames(cast(void*)swigCPtr, _arg);
  }

  public bool GetCaseSensitiveFieldNames() {
    bool ret = vtkd_im.vtkRowQuery_GetCaseSensitiveFieldNames(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void CaseSensitiveFieldNamesOn() {
    vtkd_im.vtkRowQuery_CaseSensitiveFieldNamesOn(cast(void*)swigCPtr);
  }

  public void CaseSensitiveFieldNamesOff() {
    vtkd_im.vtkRowQuery_CaseSensitiveFieldNamesOff(cast(void*)swigCPtr);
  }
}
