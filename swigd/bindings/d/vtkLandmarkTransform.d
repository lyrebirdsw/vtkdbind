/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module vtkLandmarkTransform;

static import vtkd_im;
static import core.stdc.config;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;
static import vtkObjectBase;
static import vtkPoints;
static import vtkLinearTransform;

class vtkLandmarkTransform : vtkLinearTransform.vtkLinearTransform {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(vtkd_im.vtkLandmarkTransform_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(vtkLandmarkTransform obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin vtkd_im.SwigOperatorDefinitions;

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public static vtkLandmarkTransform New() {
    void* cPtr = vtkd_im.vtkLandmarkTransform_New();
    vtkLandmarkTransform ret = (cPtr is null) ? null : new vtkLandmarkTransform(cPtr, false);
    return ret;
  }

  public static int IsTypeOf(string type) {
    auto ret = vtkd_im.vtkLandmarkTransform_IsTypeOf((type ? std.string.toStringz(type) : null));
    return ret;
  }

  public static vtkLandmarkTransform SafeDownCast(vtkObjectBase.vtkObjectBase o) {
    void* cPtr = vtkd_im.vtkLandmarkTransform_SafeDownCast(vtkObjectBase.vtkObjectBase.swigGetCPtr(o));
    vtkLandmarkTransform ret = (cPtr is null) ? null : new vtkLandmarkTransform(cPtr, false);
    return ret;
  }

  public vtkLandmarkTransform NewInstance() const {
    void* cPtr = vtkd_im.vtkLandmarkTransform_NewInstance(cast(void*)swigCPtr);
    vtkLandmarkTransform ret = (cPtr is null) ? null : new vtkLandmarkTransform(cPtr, false);
    return ret;
  }

  alias vtkLinearTransform.vtkLinearTransform.NewInstance NewInstance;

  public void SetSourceLandmarks(vtkPoints.vtkPoints points) {
    vtkd_im.vtkLandmarkTransform_SetSourceLandmarks(cast(void*)swigCPtr, vtkPoints.vtkPoints.swigGetCPtr(points));
  }

  public void SetTargetLandmarks(vtkPoints.vtkPoints points) {
    vtkd_im.vtkLandmarkTransform_SetTargetLandmarks(cast(void*)swigCPtr, vtkPoints.vtkPoints.swigGetCPtr(points));
  }

  public vtkPoints.vtkPoints GetSourceLandmarks() {
    void* cPtr = vtkd_im.vtkLandmarkTransform_GetSourceLandmarks(cast(void*)swigCPtr);
    vtkPoints.vtkPoints ret = (cPtr is null) ? null : new vtkPoints.vtkPoints(cPtr, false);
    return ret;
  }

  public vtkPoints.vtkPoints GetTargetLandmarks() {
    void* cPtr = vtkd_im.vtkLandmarkTransform_GetTargetLandmarks(cast(void*)swigCPtr);
    vtkPoints.vtkPoints ret = (cPtr is null) ? null : new vtkPoints.vtkPoints(cPtr, false);
    return ret;
  }

  public void SetMode(int _arg) {
    vtkd_im.vtkLandmarkTransform_SetMode(cast(void*)swigCPtr, _arg);
  }

  public void SetModeToRigidBody() {
    vtkd_im.vtkLandmarkTransform_SetModeToRigidBody(cast(void*)swigCPtr);
  }

  public void SetModeToSimilarity() {
    vtkd_im.vtkLandmarkTransform_SetModeToSimilarity(cast(void*)swigCPtr);
  }

  public void SetModeToAffine() {
    vtkd_im.vtkLandmarkTransform_SetModeToAffine(cast(void*)swigCPtr);
  }

  public int GetMode() {
    auto ret = vtkd_im.vtkLandmarkTransform_GetMode(cast(void*)swigCPtr);
    return ret;
  }

  public string GetModeAsString() {
    string ret = std.conv.to!string(vtkd_im.vtkLandmarkTransform_GetModeAsString(cast(void*)swigCPtr));
    return ret;
  }
}
