// Created: 2013-10-08 14:07:16
// Modified: 2013-10-11 07:40:58
//############################################


import std.datetime;
import std.getopt;
import std.conv;
import std.stdio;
import std.path;
import std.file;
import std.process;
import std.exception;

StopWatch stamp;
string stampit() {
    return "    [libwrap:"~(stamp.peek.msecs.to!double/1000.0).to!string~"] ";    
}

immutable string cxxflags = "-Wnon-virtual-dtor -Wno-long-long -ansi -Wcast-align -Wchar-subscripts -Wall -Wextra -Wpointer-arith -Wformat-security -Woverloaded-virtual -Wshadow -Wunused-parameter -fno-check-new -fno-common -fvisibility=hidden -fvisibility-inlines-hidden -Werror=return-type -Wno-deprecate";

immutable string usage = `
Usage: libwrap OPTIONS
======================

OPTIONS

    --vtkinc        VTK include directory
    --buildtype     "debug" or "release". [default = "debug"]
    --binddir       Bindings directory. These are the D
                    source files generated by SWIG
    --wrapdir       Wrapper directory where SWIG generated the
                    *.cxx wrapper file
    --alibout       Name of the binding static library
    --solibout      Name of the binding shared library
    --testout       OPTIONAL Name of the test binary to build
                    [default=""]
    --testsrc       Test source file to build                    
    --help          Display this message
`;    
                    
    

string vtkinc, buildType, bindingDir, wrapDir,alibout, solibout, testout, testsrc;
bool verbose = false;

void main(string[] args) {
    stamp.start();
    bool help;

    getopt(args,
            "verbose", &verbose,
            "vtkinc", &vtkinc, 
            "buildtype", &buildType,
            "binddir", &bindingDir,
            "wrapdir", &wrapDir, 
            "alibout", &alibout,
            "solibout", &solibout,
            "testout", &testout,
            "testsrc", &testsrc,
            "help", &help);

    if(help) {
        writeln(usage);
        return;
    }
    if(!alibout.dirName.exists) {
        writeln(stampit~"Creating alibout directory '"~alibout.dirName~"'");
        alibout.dirName.mkdirRecurse;
    }
    if(!solibout.dirName.exists) {
        writeln(stampit~"Creating solibout directory '"~solibout.dirName~"'");
        solibout.dirName.mkdirRecurse;
    }

    libwrapcxx();
    libwrapD();
    
    if(testout) {
        buildTest();
    }
    writeln(stampit~"finished");
}


void libwrapD() {

    writeln(stampit~"Generate D wrapper libraries");

    string cmdBase = `dmd -lib -gc -gs -I`~bindingDir~` -fPIC`;
    string srcFiles = buildPath(bindingDir, "*.d"); //vtkdmod~".d");
    //srcFiles ~= " "~buildPath(bindingDir, vtkdmod~"_im.d");
    string cmd = cmdBase~" -of"~alibout~" "~srcFiles;
    File pout = File("./dmdout", "w");
    File perr = File("./dmderr", "w");        
    auto pid = spawnShell(cmd, stdin, pout, perr);
    auto res = tryWait(pid);
    File poutR = File("./dmdout", "r");
    File perrR = File("./dmderr", "r");
    string buf;
    while(!res.terminated) {
        while(verbose && poutR.readln(buf)) {
            writeln(stampit~buf);
        }
        while(verbose && perrR.readln(buf)) {
            writeln(stampit~buf);
        }
        res = tryWait(pid);
    }
    if(res.status != 0) {
        writefln(stampit~"'"~alibout~"' FAILED!");
        enforce(res.status, cmd);
    } else {
        writefln(stampit~"'"~alibout~"' success");
    }

}
void libwrapcxx() {
//5. g++ -fPIC -I../third_party/vtk-6.0.0/include -shared commoncore_wrap.cxx -o 

    auto cxxwraps = dirEntries(wrapDir, "*.cxx", SpanMode.shallow);
    string cmd = `g++ -fPIC `~cxxflags~` -I`~vtkinc~` -shared`;
    writeln(stampit~"Generate CXX wrapper libraries");
    string srcFiles;
    foreach(cxxf; cxxwraps) {
        srcFiles ~= ` `~cxxf.to!string;
    }
    
    string ccCmd = cmd~" -o "~solibout~" "~srcFiles;
    File pout = File("./cxxout", "w");
    File perr = File("./cxxerr", "w");        
    auto pid = spawnShell(ccCmd, stdin, pout, perr);
    auto res = tryWait(pid);
    File poutR = File("./cxxout", "r");
    File perrR = File("./cxxerr", "r");
    string buf;
    while(!res.terminated) {
        while(verbose && poutR.readln(buf)) {
            writeln(stampit~buf);
        }
        while(verbose && perrR.readln(buf)) {
            writeln(stampit~buf);
        }
        res = tryWait(pid);
    }

    if(res.status != 0) {
        writefln(stampit~"'"~solibout~"' FAILED!");
        enforce(res.status, solibout);
    } else {
        writefln(stampit~"'"~solibout~"' success");
    }
}


void buildTest() {
    enforce(testsrc.length > 0, "No test source file given for target '"~testout~"'");
    enforce(testsrc.exists, "Test source '"~testsrc~"' does not exist for target '"~testout~"'");
    string cmd = "dmd -gc -gs -I"~bindingDir~" -L-L"~alibout;
    cmd ~= " -L-l"~solibout;

    cmd ~= " -of"~testout~" "~testsrc;
    File pout = File("./dmdout", "w");
    File perr = File("./dmderr", "w");        
    auto pid = spawnShell(cmd, stdin, pout, perr);
    auto res = tryWait(pid);
    File poutR = File("./dmdout", "r");
    File perrR = File("./dmderr", "r");
    string buf;
    while(!res.terminated) {
        while(verbose && poutR.readln(buf)) {
            write(stampit~buf);
        }
        while(verbose && perrR.readln(buf)) {
            write(stampit~buf);
        }
        res = tryWait(pid);
    }
    if(res.status != 0) {
        writefln(stampit~"'"~testout~"' FAILED!");
        enforce(res.status);
    } else {
        writefln(stampit~"'"~testout~"' success");
    }


}
